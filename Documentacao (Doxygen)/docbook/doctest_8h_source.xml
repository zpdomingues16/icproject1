<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_doctest_8h_source" xml:lang="en-US">
<title>doctest.h</title>
<indexterm><primary>AudioFile/tests/doctest/doctest.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;======================================================================&#32;lgtm&#32;[cpp/missing-header-guard]</emphasis>
2 <emphasis role="comment">//&#32;==&#32;DO&#32;NOT&#32;MODIFY&#32;THIS&#32;FILE&#32;BY&#32;HAND&#32;-&#32;IT&#32;IS&#32;AUTO&#32;GENERATED&#32;BY&#32;CMAKE!&#32;==</emphasis>
3 <emphasis role="comment">//&#32;======================================================================</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;doctest.h&#32;-&#32;the&#32;lightest&#32;feature-rich&#32;C++&#32;single-header&#32;testing&#32;framework&#32;for&#32;unit&#32;tests&#32;and&#32;TDD</emphasis>
6 <emphasis role="comment">//</emphasis>
7 <emphasis role="comment">//&#32;Copyright&#32;(c)&#32;2016-2019&#32;Viktor&#32;Kirilov</emphasis>
8 <emphasis role="comment">//</emphasis>
9 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;MIT&#32;Software&#32;License</emphasis>
10 <emphasis role="comment">//&#32;See&#32;accompanying&#32;file&#32;LICENSE.txt&#32;or&#32;copy&#32;at</emphasis>
11 <emphasis role="comment">//&#32;https://opensource.org/licenses/MIT</emphasis>
12 <emphasis role="comment">//</emphasis>
13 <emphasis role="comment">//&#32;The&#32;documentation&#32;can&#32;be&#32;found&#32;at&#32;the&#32;library&apos;s&#32;page:</emphasis>
14 <emphasis role="comment">//&#32;https://github.com/onqtam/doctest/blob/master/doc/markdown/readme.md</emphasis>
15 <emphasis role="comment">//</emphasis>
16 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
17 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
18 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
19 <emphasis role="comment">//</emphasis>
20 <emphasis role="comment">//&#32;The&#32;library&#32;is&#32;heavily&#32;influenced&#32;by&#32;Catch&#32;-&#32;https://github.com/catchorg/Catch2</emphasis>
21 <emphasis role="comment">//&#32;which&#32;uses&#32;the&#32;Boost&#32;Software&#32;License&#32;-&#32;Version&#32;1.0</emphasis>
22 <emphasis role="comment">//&#32;see&#32;here&#32;-&#32;https://github.com/catchorg/Catch2/blob/master/LICENSE.txt</emphasis>
23 <emphasis role="comment">//</emphasis>
24 <emphasis role="comment">//&#32;The&#32;concept&#32;of&#32;subcases&#32;(sections&#32;in&#32;Catch)&#32;and&#32;expression&#32;decomposition&#32;are&#32;from&#32;there.</emphasis>
25 <emphasis role="comment">//&#32;Some&#32;parts&#32;of&#32;the&#32;code&#32;are&#32;taken&#32;directly:</emphasis>
26 <emphasis role="comment">//&#32;-&#32;stringification&#32;-&#32;the&#32;detection&#32;of&#32;&quot;ostream&amp;&#32;operator&lt;&lt;(ostream&amp;,&#32;const&#32;T&amp;)&quot;&#32;and&#32;StringMaker&lt;&gt;</emphasis>
27 <emphasis role="comment">//&#32;-&#32;the&#32;Approx()&#32;helper&#32;class&#32;for&#32;floating&#32;point&#32;comparison</emphasis>
28 <emphasis role="comment">//&#32;-&#32;colors&#32;in&#32;the&#32;console</emphasis>
29 <emphasis role="comment">//&#32;-&#32;breaking&#32;into&#32;a&#32;debugger</emphasis>
30 <emphasis role="comment">//&#32;-&#32;signal&#32;/&#32;SEH&#32;handling</emphasis>
31 <emphasis role="comment">//&#32;-&#32;timer</emphasis>
32 <emphasis role="comment">//&#32;-&#32;XmlWriter&#32;class&#32;-&#32;thanks&#32;to&#32;Phil&#32;Nash&#32;for&#32;allowing&#32;the&#32;direct&#32;reuse&#32;(AKA&#32;copy/paste)</emphasis>
33 <emphasis role="comment">//</emphasis>
34 <emphasis role="comment">//&#32;The&#32;expression&#32;decomposing&#32;templates&#32;are&#32;taken&#32;from&#32;lest&#32;-&#32;https://github.com/martinmoene/lest</emphasis>
35 <emphasis role="comment">//&#32;which&#32;uses&#32;the&#32;Boost&#32;Software&#32;License&#32;-&#32;Version&#32;1.0</emphasis>
36 <emphasis role="comment">//&#32;see&#32;here&#32;-&#32;https://github.com/martinmoene/lest/blob/master/LICENSE.txt</emphasis>
37 <emphasis role="comment">//</emphasis>
38 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
39 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
40 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
41 
42 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_LIBRARY_INCLUDED</emphasis>
43 <emphasis role="preprocessor">#define&#32;DOCTEST_LIBRARY_INCLUDED</emphasis>
44 
45 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
46 <emphasis role="comment">//&#32;==&#32;VERSION&#32;======================================================================================</emphasis>
47 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
48 
49 <emphasis role="preprocessor">#define&#32;DOCTEST_VERSION_MAJOR&#32;2</emphasis>
50 <emphasis role="preprocessor">#define&#32;DOCTEST_VERSION_MINOR&#32;4</emphasis>
51 <emphasis role="preprocessor">#define&#32;DOCTEST_VERSION_PATCH&#32;0</emphasis>
52 <emphasis role="preprocessor">#define&#32;DOCTEST_VERSION_STR&#32;&quot;2.4.0&quot;</emphasis>
53 
54 <emphasis role="preprocessor">#define&#32;DOCTEST_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
55 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(DOCTEST_VERSION_MAJOR&#32;*&#32;10000&#32;+&#32;DOCTEST_VERSION_MINOR&#32;*&#32;100&#32;+&#32;DOCTEST_VERSION_PATCH)</emphasis>
56 
57 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
58 <emphasis role="comment">//&#32;==&#32;COMPILER&#32;VERSION&#32;=============================================================================</emphasis>
59 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
60 
61 <emphasis role="comment">//&#32;ideas&#32;for&#32;the&#32;version&#32;stuff&#32;are&#32;taken&#32;from&#32;here:&#32;https://github.com/cxxstuff/cxx_detect</emphasis>
62 
63 <emphasis role="preprocessor">#define&#32;DOCTEST_COMPILER(MAJOR,&#32;MINOR,&#32;PATCH)&#32;((MAJOR)*10000000&#32;+&#32;(MINOR)*100000&#32;+&#32;(PATCH))</emphasis>
64 
65 <emphasis role="comment">//&#32;GCC/Clang&#32;and&#32;GCC/MSVC&#32;are&#32;mutually&#32;exclusive,&#32;but&#32;Clang/MSVC&#32;are&#32;not&#32;because&#32;of&#32;clang-cl...</emphasis>
66 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;defined(_MSC_FULL_VER)</emphasis>
67 <emphasis role="preprocessor">#if&#32;_MSC_VER&#32;==&#32;_MSC_FULL_VER&#32;/&#32;10000</emphasis>
68 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC&#32;DOCTEST_COMPILER(_MSC_VER&#32;/&#32;100,&#32;_MSC_VER&#32;%&#32;100,&#32;_MSC_FULL_VER&#32;%&#32;10000)</emphasis>
69 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
70 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
71 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_COMPILER(_MSC_VER&#32;/&#32;100,&#32;(_MSC_FULL_VER&#32;/&#32;100000)&#32;%&#32;100,&#32;_MSC_FULL_VER&#32;%&#32;100000)</emphasis>
72 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
73 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
74 <emphasis role="preprocessor">#if&#32;defined(__clang__)&#32;&amp;&amp;&#32;defined(__clang_minor__)</emphasis>
75 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG&#32;DOCTEST_COMPILER(__clang_major__,&#32;__clang_minor__,&#32;__clang_patchlevel__)</emphasis>
76 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;defined(__GNUC_MINOR__)&#32;&amp;&amp;&#32;defined(__GNUC_PATCHLEVEL__)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
77 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!defined(__INTEL_COMPILER)</emphasis>
78 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC&#32;DOCTEST_COMPILER(__GNUC__,&#32;__GNUC_MINOR__,&#32;__GNUC_PATCHLEVEL__)</emphasis>
79 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GCC</emphasis>
80 
81 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_MSVC</emphasis>
82 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC&#32;0</emphasis>
83 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_MSVC</emphasis>
84 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CLANG</emphasis>
85 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG&#32;0</emphasis>
86 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CLANG</emphasis>
87 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_GCC</emphasis>
88 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC&#32;0</emphasis>
89 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_GCC</emphasis>
90 
91 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
92 <emphasis role="comment">//&#32;==&#32;COMPILER&#32;WARNINGS&#32;HELPERS&#32;====================================================================</emphasis>
93 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
94 
95 <emphasis role="preprocessor">#if&#32;DOCTEST_CLANG</emphasis>
96 <emphasis role="preprocessor">#define&#32;DOCTEST_PRAGMA_TO_STR(x)&#32;_Pragma(#x)</emphasis>
97 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_PUSH&#32;_Pragma(&quot;clang&#32;diagnostic&#32;push&quot;</emphasis>)
98 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING(w)&#32;DOCTEST_PRAGMA_TO_STR(clang&#32;diagnostic&#32;ignored&#32;w)</emphasis>
99 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP&#32;_Pragma(&quot;clang&#32;diagnostic&#32;pop&quot;</emphasis>)
100 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_PUSH&#32;DOCTEST_CLANG_SUPPRESS_WARNING(w)</emphasis>
102 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CLANG</emphasis>
103 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</emphasis>
104 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING(w)</emphasis>
105 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP</emphasis>
106 <emphasis role="preprocessor">#define&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)</emphasis>
107 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CLANG</emphasis>
108 
109 <emphasis role="preprocessor">#if&#32;DOCTEST_GCC</emphasis>
110 <emphasis role="preprocessor">#define&#32;DOCTEST_PRAGMA_TO_STR(x)&#32;_Pragma(#x)</emphasis>
111 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_PUSH&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;push&quot;</emphasis>)
112 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING(w)&#32;DOCTEST_PRAGMA_TO_STR(GCC&#32;diagnostic&#32;ignored&#32;w)</emphasis>
113 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_POP&#32;_Pragma(&quot;GCC&#32;diagnostic&#32;pop&quot;</emphasis>)
114 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GCC_SUPPRESS_WARNING_PUSH&#32;DOCTEST_GCC_SUPPRESS_WARNING(w)</emphasis>
116 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_GCC</emphasis>
117 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_PUSH</emphasis>
118 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING(w)</emphasis>
119 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_POP</emphasis>
120 <emphasis role="preprocessor">#define&#32;DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)</emphasis>
121 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_GCC</emphasis>
122 
123 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC</emphasis>
124 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_PUSH&#32;__pragma(warning(push))</emphasis>
125 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING(w)&#32;__pragma(warning(disable&#32;:&#32;w))</emphasis>
126 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_POP&#32;__pragma(warning(pop))</emphasis>
127 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
128 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_PUSH&#32;DOCTEST_MSVC_SUPPRESS_WARNING(w)</emphasis>
129 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_MSVC</emphasis>
130 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</emphasis>
131 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING(w)</emphasis>
132 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_POP</emphasis>
133 <emphasis role="preprocessor">#define&#32;DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)</emphasis>
134 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_MSVC</emphasis>
135 
136 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
137 <emphasis role="comment">//&#32;==&#32;COMPILER&#32;WARNINGS&#32;============================================================================</emphasis>
138 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
139 
140 <link linkend="_doctest_8h_1a628491cf2971a026350d5401986bf6d3">DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</link>
141 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(<emphasis role="stringliteral">&quot;-Wunknown-pragmas&quot;</emphasis>)
142 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wnon-virtual-dtor&quot;)
143 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wweak-vtables&quot;)
144 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wpadded&quot;)
145 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wdeprecated&quot;)
146 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-prototypes&quot;)
147 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wunused-local-typedef&quot;)
148 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wc++98-compat&quot;)
149 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wc++98-compat-pedantic&quot;)
150 
151 <link linkend="_doctest_8h_1a8015d10af2883db80a955ce0d523886d">DOCTEST_GCC_SUPPRESS_WARNING_PUSH</link>
152 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunknown-pragmas&quot;)
153 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wpragmas&quot;)
154 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Weffc++&quot;)
155 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wstrict-overflow&quot;)
156 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wstrict-aliasing&quot;)
157 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wctor-dtor-privacy&quot;)
158 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wmissing-declarations&quot;)
159 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wnon-virtual-dtor&quot;)
160 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunused-local-typedefs&quot;)
161 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wuseless-cast&quot;)
162 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wnoexcept&quot;)
163 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wsign-promo&quot;)
164 
165 <link linkend="_doctest_8h_1aec6d713a9dde361b8e68afe78c5bf3cf">DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</link>
166 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4616)&#32;<emphasis role="comment">//&#32;invalid&#32;compiler&#32;warning</emphasis>
167 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4619)&#32;<emphasis role="comment">//&#32;invalid&#32;compiler&#32;warning</emphasis>
168 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4996)&#32;<emphasis role="comment">//&#32;The&#32;compiler&#32;encountered&#32;a&#32;deprecated&#32;declaration</emphasis>
169 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4706)&#32;<emphasis role="comment">//&#32;assignment&#32;within&#32;conditional&#32;expression</emphasis>
170 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4512)&#32;<emphasis role="comment">//&#32;&apos;class&apos;&#32;:&#32;assignment&#32;operator&#32;could&#32;not&#32;be&#32;generated</emphasis>
171 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4127)&#32;<emphasis role="comment">//&#32;conditional&#32;expression&#32;is&#32;constant</emphasis>
172 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4820)&#32;<emphasis role="comment">//&#32;padding</emphasis>
173 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4625)&#32;<emphasis role="comment">//&#32;copy&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
174 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4626)&#32;<emphasis role="comment">//&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
175 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5027)&#32;<emphasis role="comment">//&#32;move&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
176 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5026)&#32;<emphasis role="comment">//&#32;move&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
177 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4623)&#32;<emphasis role="comment">//&#32;default&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
178 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4640)&#32;<emphasis role="comment">//&#32;construction&#32;of&#32;local&#32;static&#32;object&#32;is&#32;not&#32;thread-safe</emphasis>
179 <emphasis role="comment">//&#32;static&#32;analysis</emphasis>
180 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26439)&#32;<emphasis role="comment">//&#32;This&#32;kind&#32;of&#32;function&#32;may&#32;not&#32;throw.&#32;Declare&#32;it&#32;&apos;noexcept&apos;</emphasis>
181 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26495)&#32;<emphasis role="comment">//&#32;Always&#32;initialize&#32;a&#32;member&#32;variable</emphasis>
182 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26451)&#32;<emphasis role="comment">//&#32;Arithmetic&#32;overflow&#32;...</emphasis>
183 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26444)&#32;<emphasis role="comment">//&#32;Avoid&#32;unnamed&#32;objects&#32;with&#32;custom&#32;construction&#32;and&#32;dtr...</emphasis>
184 <link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26812)&#32;<emphasis role="comment">//&#32;Prefer&#32;&apos;enum&#32;class&apos;&#32;over&#32;&apos;enum&apos;</emphasis>
185 
186 <emphasis role="comment">//&#32;4548&#32;-&#32;expression&#32;before&#32;comma&#32;has&#32;no&#32;effect;&#32;expected&#32;expression&#32;with&#32;side&#32;-&#32;effect</emphasis>
187 <emphasis role="comment">//&#32;4265&#32;-&#32;class&#32;has&#32;virtual&#32;functions,&#32;but&#32;destructor&#32;is&#32;not&#32;virtual</emphasis>
188 <emphasis role="comment">//&#32;4986&#32;-&#32;exception&#32;specification&#32;does&#32;not&#32;match&#32;previous&#32;declaration</emphasis>
189 <emphasis role="comment">//&#32;4350&#32;-&#32;behavior&#32;change:&#32;&apos;member1&apos;&#32;called&#32;instead&#32;of&#32;&apos;member2&apos;</emphasis>
190 <emphasis role="comment">//&#32;4668&#32;-&#32;&apos;x&apos;&#32;is&#32;not&#32;defined&#32;as&#32;a&#32;preprocessor&#32;macro,&#32;replacing&#32;with&#32;&apos;0&apos;&#32;for&#32;&apos;#if/#elif&apos;</emphasis>
191 <emphasis role="comment">//&#32;4365&#32;-&#32;conversion&#32;from&#32;&apos;int&apos;&#32;to&#32;&apos;unsigned&#32;long&apos;,&#32;signed/unsigned&#32;mismatch</emphasis>
192 <emphasis role="comment">//&#32;4774&#32;-&#32;format&#32;string&#32;expected&#32;in&#32;argument&#32;&apos;x&apos;&#32;is&#32;not&#32;a&#32;string&#32;literal</emphasis>
193 <emphasis role="comment">//&#32;4820&#32;-&#32;padding&#32;in&#32;structs</emphasis>
194 
195 <emphasis role="comment">//&#32;only&#32;4&#32;should&#32;be&#32;disabled&#32;globally:</emphasis>
196 <emphasis role="comment">//&#32;-&#32;4514&#32;#&#32;unreferenced&#32;inline&#32;function&#32;has&#32;been&#32;removed</emphasis>
197 <emphasis role="comment">//&#32;-&#32;4571&#32;#&#32;SEH&#32;related</emphasis>
198 <emphasis role="comment">//&#32;-&#32;4710&#32;#&#32;function&#32;not&#32;inlined</emphasis>
199 <emphasis role="comment">//&#32;-&#32;4711&#32;#&#32;function&#32;&apos;x&apos;&#32;selected&#32;for&#32;automatic&#32;inline&#32;expansion</emphasis>
200 
201 <emphasis role="preprocessor">#define&#32;DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_PUSH&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4548)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
204 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4265)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
205 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4986)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
206 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4350)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
207 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4668)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4365)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4774)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4820)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4625)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4626)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(5027)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(5026)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(4623)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(5039)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(5045)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING(5105)</emphasis>
219 
220 <emphasis role="preprocessor">#define&#32;DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END&#32;DOCTEST_MSVC_SUPPRESS_WARNING_POP</emphasis>
221 
222 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
223 <emphasis role="comment">//&#32;==&#32;FEATURE&#32;DETECTION&#32;============================================================================</emphasis>
224 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
225 
226 <emphasis role="comment">//&#32;general&#32;compiler&#32;feature&#32;support&#32;table:&#32;https://en.cppreference.com/w/cpp/compiler_support</emphasis>
227 <emphasis role="comment">//&#32;MSVC&#32;C++11&#32;feature&#32;support&#32;table:&#32;https://msdn.microsoft.com/en-us/library/hh567368.aspx</emphasis>
228 <emphasis role="comment">//&#32;GCC&#32;C++11&#32;feature&#32;support&#32;table:&#32;https://gcc.gnu.org/projects/cxx-status.html</emphasis>
229 <emphasis role="comment">//&#32;MSVC&#32;version&#32;table:</emphasis>
230 <emphasis role="comment">//&#32;https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering</emphasis>
231 <emphasis role="comment">//&#32;MSVC++&#32;14.2&#32;(16)&#32;_MSC_VER&#32;==&#32;1920&#32;(Visual&#32;Studio&#32;2019)</emphasis>
232 <emphasis role="comment">//&#32;MSVC++&#32;14.1&#32;(15)&#32;_MSC_VER&#32;==&#32;1910&#32;(Visual&#32;Studio&#32;2017)</emphasis>
233 <emphasis role="comment">//&#32;MSVC++&#32;14.0&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1900&#32;(Visual&#32;Studio&#32;2015)</emphasis>
234 <emphasis role="comment">//&#32;MSVC++&#32;12.0&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1800&#32;(Visual&#32;Studio&#32;2013)</emphasis>
235 <emphasis role="comment">//&#32;MSVC++&#32;11.0&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1700&#32;(Visual&#32;Studio&#32;2012)</emphasis>
236 <emphasis role="comment">//&#32;MSVC++&#32;10.0&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1600&#32;(Visual&#32;Studio&#32;2010)</emphasis>
237 <emphasis role="comment">//&#32;MSVC++&#32;9.0&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1500&#32;(Visual&#32;Studio&#32;2008)</emphasis>
238 <emphasis role="comment">//&#32;MSVC++&#32;8.0&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MSC_VER&#32;==&#32;1400&#32;(Visual&#32;Studio&#32;2005)</emphasis>
239 
240 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_WINDOWS_SEH)</emphasis>
241 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_WINDOWS_SEH</emphasis>
242 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
243 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_NO_WINDOWS_SEH)&#32;&amp;&amp;&#32;defined(DOCTEST_CONFIG_WINDOWS_SEH)</emphasis>
244 <emphasis role="preprocessor">#undef&#32;DOCTEST_CONFIG_WINDOWS_SEH</emphasis>
245 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_WINDOWS_SEH</emphasis>
246 
247 <emphasis role="preprocessor">#if&#32;!defined(_WIN32)&#32;&amp;&amp;&#32;!defined(__QNX__)&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_POSIX_SIGNALS)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
248 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!defined(__EMSCRIPTEN__)</emphasis>
249 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_POSIX_SIGNALS</emphasis>
250 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_WIN32</emphasis>
251 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS)&#32;&amp;&amp;&#32;defined(DOCTEST_CONFIG_POSIX_SIGNALS)</emphasis>
252 <emphasis role="preprocessor">#undef&#32;DOCTEST_CONFIG_POSIX_SIGNALS</emphasis>
253 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_POSIX_SIGNALS</emphasis>
254 
255 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
256 <emphasis role="preprocessor">#if&#32;!defined(__cpp_exceptions)&#32;&amp;&amp;&#32;!defined(__EXCEPTIONS)&#32;&amp;&amp;&#32;!defined(_CPPUNWIND)</emphasis>
257 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
258 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;no&#32;exceptions</emphasis>
259 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
260 
261 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</emphasis>
262 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
263 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
264 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
265 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</emphasis>
266 
267 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_NO_EXCEPTIONS)&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)</emphasis>
268 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</emphasis>
269 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS&#32;&amp;&amp;&#32;!DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</emphasis>
270 
271 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN)&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_IMPLEMENT)</emphasis>
272 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_IMPLEMENT</emphasis>
273 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</emphasis>
274 
275 <emphasis role="preprocessor">#if&#32;defined(_WIN32)&#32;||&#32;defined(__CYGWIN__)</emphasis>
276 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC</emphasis>
277 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_EXPORT&#32;__declspec(dllexport)</emphasis>
278 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_IMPORT&#32;__declspec(dllimport)</emphasis>
279 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
280 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_EXPORT&#32;__attribute__((dllexport))</emphasis>
281 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_IMPORT&#32;__attribute__((dllimport))</emphasis>
282 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
283 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;_WIN32</emphasis>
284 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_EXPORT&#32;__attribute__((visibility(&quot;default&quot;</emphasis>)))
285 <emphasis role="preprocessor">#define&#32;DOCTEST_SYMBOL_IMPORT</emphasis>
286 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_WIN32</emphasis>
287 
288 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</emphasis>
289 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_IMPLEMENT</emphasis>
290 <emphasis role="preprocessor">#define&#32;DOCTEST_INTERFACE&#32;DOCTEST_SYMBOL_EXPORT</emphasis>
291 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENT</emphasis>
292 <emphasis role="preprocessor">#define&#32;DOCTEST_INTERFACE&#32;DOCTEST_SYMBOL_IMPORT</emphasis>
293 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENT</emphasis>
294 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</emphasis>
295 <emphasis role="preprocessor">#define&#32;DOCTEST_INTERFACE</emphasis>
296 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL</emphasis>
297 
298 <emphasis role="preprocessor">#define&#32;DOCTEST_EMPTY</emphasis>
299 
300 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC</emphasis>
301 <emphasis role="preprocessor">#define&#32;DOCTEST_NOINLINE&#32;__declspec(noinline)</emphasis>
302 <emphasis role="preprocessor">#define&#32;DOCTEST_UNUSED</emphasis>
303 <emphasis role="preprocessor">#define&#32;DOCTEST_ALIGNMENT(x)</emphasis>
304 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
305 <emphasis role="preprocessor">#define&#32;DOCTEST_NOINLINE&#32;__attribute__((noinline))</emphasis>
306 <emphasis role="preprocessor">#define&#32;DOCTEST_UNUSED&#32;__attribute__((unused))</emphasis>
307 <emphasis role="preprocessor">#define&#32;DOCTEST_ALIGNMENT(x)&#32;__attribute__((aligned(x)))</emphasis>
308 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
309 
310 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_NORETURN</emphasis>
311 <emphasis role="preprocessor">#define&#32;DOCTEST_NORETURN&#32;[[noreturn]]</emphasis>
312 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_NORETURN</emphasis>
313 
314 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_NOEXCEPT</emphasis>
315 <emphasis role="preprocessor">#define&#32;DOCTEST_NOEXCEPT&#32;noexcept</emphasis>
316 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_NOEXCEPT</emphasis>
317 
318 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
319 <emphasis role="comment">//&#32;==&#32;FEATURE&#32;DETECTION&#32;END&#32;========================================================================</emphasis>
320 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
321 
322 <emphasis role="comment">//&#32;internal&#32;macros&#32;for&#32;string&#32;concatenation&#32;and&#32;anonymous&#32;variable&#32;name&#32;generation</emphasis>
323 <emphasis role="preprocessor">#define&#32;DOCTEST_CAT_IMPL(s1,&#32;s2)&#32;s1##s2</emphasis>
324 <emphasis role="preprocessor">#define&#32;DOCTEST_CAT(s1,&#32;s2)&#32;DOCTEST_CAT_IMPL(s1,&#32;s2)</emphasis>
325 <emphasis role="preprocessor">#ifdef&#32;__COUNTER__&#32;</emphasis><emphasis role="comment">//&#32;not&#32;standard&#32;and&#32;may&#32;be&#32;missing&#32;for&#32;some&#32;compilers</emphasis>
326 <emphasis role="preprocessor">#define&#32;DOCTEST_ANONYMOUS(x)&#32;DOCTEST_CAT(x,&#32;__COUNTER__)</emphasis>
327 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;__COUNTER__</emphasis>
328 <emphasis role="preprocessor">#define&#32;DOCTEST_ANONYMOUS(x)&#32;DOCTEST_CAT(x,&#32;__LINE__)</emphasis>
329 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__COUNTER__</emphasis>
330 
331 <emphasis role="preprocessor">#define&#32;DOCTEST_TOSTR(x)&#32;#x</emphasis>
332 
333 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</emphasis>
334 <emphasis role="preprocessor">#define&#32;DOCTEST_REF_WRAP(x)&#32;x&amp;</emphasis>
335 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</emphasis>
336 <emphasis role="preprocessor">#define&#32;DOCTEST_REF_WRAP(x)&#32;x</emphasis>
337 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE</emphasis>
338 
339 <emphasis role="comment">//&#32;not&#32;using&#32;__APPLE__&#32;because...&#32;this&#32;is&#32;how&#32;Catch&#32;does&#32;it</emphasis>
340 <emphasis role="preprocessor">#ifdef&#32;__MAC_OS_X_VERSION_MIN_REQUIRED</emphasis>
341 <emphasis role="preprocessor">#define&#32;DOCTEST_PLATFORM_MAC</emphasis>
342 <emphasis role="preprocessor">#elif&#32;defined(__IPHONE_OS_VERSION_MIN_REQUIRED)</emphasis>
343 <emphasis role="preprocessor">#define&#32;DOCTEST_PLATFORM_IPHONE</emphasis>
344 <emphasis role="preprocessor">#elif&#32;defined(_WIN32)</emphasis>
345 <emphasis role="preprocessor">#define&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
346 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM</emphasis>
347 <emphasis role="preprocessor">#define&#32;DOCTEST_PLATFORM_LINUX</emphasis>
348 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM</emphasis>
349 
350 <emphasis role="preprocessor">#define&#32;DOCTEST_GLOBAL_NO_WARNINGS(var)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wglobal-constructors&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
352 &#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wunused-variable&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
353 &#32;&#32;&#32;&#32;static&#32;int&#32;var&#32;DOCTEST_UNUSED&#32;<emphasis role="comment">//&#32;NOLINT(fuchsia-statically-constructed-objects,cert-err58-cpp)</emphasis>
354 <emphasis role="preprocessor">#define&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP</emphasis>
355 
356 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_BREAK_INTO_DEBUGGER</emphasis>
357 <emphasis role="comment">//&#32;should&#32;probably&#32;take&#32;a&#32;look&#32;at&#32;https://github.com/scottt/debugbreak</emphasis>
358 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_MAC</emphasis>
359 <emphasis role="preprocessor">#define&#32;DOCTEST_BREAK_INTO_DEBUGGER()&#32;__asm__(&quot;int&#32;$3\n&quot;</emphasis>&#32;:&#32;:)
360 <emphasis role="preprocessor">#elif&#32;DOCTEST_MSVC</emphasis>
361 <emphasis role="preprocessor">#define&#32;DOCTEST_BREAK_INTO_DEBUGGER()&#32;__debugbreak()</emphasis>
362 <emphasis role="preprocessor">#elif&#32;defined(__MINGW32__)</emphasis>
363 <link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wredundant-decls&quot;</emphasis>)
364 extern&#32;&quot;C&quot;&#32;__declspec(dllimport)&#32;<emphasis role="keywordtype">void</emphasis>&#32;__stdcall&#32;DebugBreak();
365 <link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
366 <emphasis role="preprocessor">#define&#32;DOCTEST_BREAK_INTO_DEBUGGER()&#32;::DebugBreak()</emphasis>
367 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;linux</emphasis>
368 <emphasis role="preprocessor">#define&#32;DOCTEST_BREAK_INTO_DEBUGGER()&#32;((void)0)</emphasis>
369 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;linux</emphasis>
370 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_BREAK_INTO_DEBUGGER</emphasis>
371 
372 <emphasis role="comment">//&#32;this&#32;is&#32;kept&#32;here&#32;for&#32;backwards&#32;compatibility&#32;since&#32;the&#32;config&#32;option&#32;was&#32;changed</emphasis>
373 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_USE_IOSFWD</emphasis>
374 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_USE_STD_HEADERS</emphasis>
375 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_USE_IOSFWD</emphasis>
376 
377 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_USE_STD_HEADERS</emphasis>
378 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
379 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
380 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
381 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_USE_STD_HEADERS</emphasis>
382 
383 <emphasis role="preprocessor">#if&#32;DOCTEST_CLANG</emphasis>
384 <emphasis role="comment">//&#32;to&#32;detect&#32;if&#32;libc++&#32;is&#32;being&#32;used&#32;with&#32;clang&#32;(the&#32;_LIBCPP_VERSION&#32;identifier)</emphasis>
385 <emphasis role="preprocessor">#include&#32;&lt;ciso646&gt;</emphasis>
386 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;clang</emphasis>
387 
388 <emphasis role="preprocessor">#ifdef&#32;_LIBCPP_VERSION</emphasis>
389 <emphasis role="preprocessor">#define&#32;DOCTEST_STD_NAMESPACE_BEGIN&#32;_LIBCPP_BEGIN_NAMESPACE_STD</emphasis>
390 <emphasis role="preprocessor">#define&#32;DOCTEST_STD_NAMESPACE_END&#32;_LIBCPP_END_NAMESPACE_STD</emphasis>
391 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;_LIBCPP_VERSION</emphasis>
392 <emphasis role="preprocessor">#define&#32;DOCTEST_STD_NAMESPACE_BEGIN&#32;namespace&#32;std&#32;{</emphasis>
393 <emphasis role="preprocessor">#define&#32;DOCTEST_STD_NAMESPACE_END&#32;}</emphasis>
394 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_LIBCPP_VERSION</emphasis>
395 
396 <emphasis role="comment">//&#32;Forward&#32;declaring&#32;&apos;X&apos;&#32;in&#32;namespace&#32;std&#32;is&#32;not&#32;permitted&#32;by&#32;the&#32;C++&#32;Standard.</emphasis>
397 <link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(4643)
398 
399 <link linkend="_doctest_8h_1a758d9627ba7331f195ffbba94e5931a1">DOCTEST_STD_NAMESPACE_BEGIN</link>&#32;<emphasis role="comment">//&#32;NOLINT&#32;(cert-dcl58-cpp)</emphasis>
400 typedef&#32;decltype(<emphasis role="keywordtype">nullptr</emphasis>)&#32;nullptr_t;
401 template&#32;&lt;class&#32;charT&gt;
402 struct&#32;<link linkend="_structchar__traits">char_traits</link>;
403 template&#32;&lt;&gt;
404 struct&#32;<link linkend="_structchar__traits">char_traits</link>&lt;<emphasis role="keywordtype">char</emphasis>&gt;;
405 template&#32;&lt;class&#32;charT,&#32;class&#32;traits&gt;
406 class&#32;<link linkend="_classbasic__ostream">basic_ostream</link>;
407 typedef&#32;<link linkend="_classbasic__ostream">basic_ostream</link>&lt;<emphasis role="keywordtype">char</emphasis>,&#32;<link linkend="_structchar__traits">char_traits</link>&lt;<emphasis role="keywordtype">char</emphasis>&gt;&gt;&#32;<link linkend="_classbasic__ostream">ostream</link>;
408 template&#32;&lt;class...&#32;Types&gt;
409 class&#32;<link linkend="_classtuple">tuple</link>;
410 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC&#32;&gt;=&#32;DOCTEST_COMPILER(19,&#32;20,&#32;0)</emphasis>
411 <emphasis role="comment">//&#32;see&#32;this&#32;issue&#32;on&#32;why&#32;this&#32;is&#32;needed:&#32;https://github.com/onqtam/doctest/issues/183</emphasis>
412 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Ty&gt;
413 <emphasis role="keyword">class&#32;</emphasis>allocator;
414 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_Elem,&#32;<emphasis role="keyword">class</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
415 <emphasis role="keyword">class&#32;</emphasis>basic_string;
416 <emphasis role="keyword">using</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&#32;=&#32;basic_string&lt;char,&#32;char_traits&lt;char&gt;,&#32;allocator&lt;char&gt;&gt;;
417 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;VS&#32;2019</emphasis>
418 <link linkend="_doctest_8h_1ac0ed37fb9c99f6ea1ce9c3e1b73e3dec">DOCTEST_STD_NAMESPACE_END</link>
419 
420 <link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
421 
422 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_USE_STD_HEADERS</emphasis>
423 
424 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
425 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
426 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
427 
428 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{
429 
430 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a0b03060093b3894c976b6ae84e55f3f2">is_running_in_test</link>;
431 
432 <emphasis role="comment">//&#32;A&#32;24&#32;byte&#32;string&#32;class&#32;(can&#32;be&#32;as&#32;small&#32;as&#32;17&#32;for&#32;x64&#32;and&#32;13&#32;for&#32;x86)&#32;that&#32;can&#32;hold&#32;strings&#32;with&#32;length</emphasis>
433 <emphasis role="comment">//&#32;of&#32;up&#32;to&#32;23&#32;chars&#32;on&#32;the&#32;stack&#32;before&#32;going&#32;on&#32;the&#32;heap&#32;-&#32;the&#32;last&#32;byte&#32;of&#32;the&#32;buffer&#32;is&#32;used&#32;for:</emphasis>
434 <emphasis role="comment">//&#32;-&#32;&quot;is&#32;small&quot;&#32;bit&#32;-&#32;the&#32;highest&#32;bit&#32;-&#32;if&#32;&quot;0&quot;&#32;then&#32;it&#32;is&#32;small&#32;-&#32;otherwise&#32;its&#32;&quot;1&quot;&#32;(128)</emphasis>
435 <emphasis role="comment">//&#32;-&#32;if&#32;small&#32;-&#32;capacity&#32;left&#32;before&#32;going&#32;on&#32;the&#32;heap&#32;-&#32;using&#32;the&#32;lowest&#32;5&#32;bits</emphasis>
436 <emphasis role="comment">//&#32;-&#32;if&#32;small&#32;-&#32;2&#32;bits&#32;are&#32;left&#32;unused&#32;-&#32;the&#32;second&#32;and&#32;third&#32;highest&#32;ones</emphasis>
437 <emphasis role="comment">//&#32;-&#32;if&#32;small&#32;-&#32;acts&#32;as&#32;a&#32;null&#32;terminator&#32;if&#32;strlen()&#32;is&#32;23&#32;(24&#32;including&#32;the&#32;null&#32;terminator)</emphasis>
438 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;the&#32;&quot;is&#32;small&quot;&#32;bit&#32;remains&#32;&quot;0&quot;&#32;(&quot;as&#32;well&#32;as&#32;the&#32;capacity&#32;left&quot;)&#32;so&#32;its&#32;OK</emphasis>
439 <emphasis role="comment">//&#32;Idea&#32;taken&#32;from&#32;this&#32;lecture&#32;about&#32;the&#32;string&#32;implementation&#32;of&#32;facebook/folly&#32;-&#32;fbstring</emphasis>
440 <emphasis role="comment">//&#32;https://www.youtube.com/watch?v=kPR8h4-qZdk</emphasis>
441 <emphasis role="comment">//&#32;TODO:</emphasis>
442 <emphasis role="comment">//&#32;-&#32;optimizations&#32;-&#32;like&#32;not&#32;deleting&#32;memory&#32;unnecessarily&#32;in&#32;operator=&#32;and&#32;etc.</emphasis>
443 <emphasis role="comment">//&#32;-&#32;resize/reserve/clear</emphasis>
444 <emphasis role="comment">//&#32;-&#32;substr</emphasis>
445 <emphasis role="comment">//&#32;-&#32;replace</emphasis>
446 <emphasis role="comment">//&#32;-&#32;back/front</emphasis>
447 <emphasis role="comment">//&#32;-&#32;iterator&#32;stuff</emphasis>
448 <emphasis role="comment">//&#32;-&#32;find&#32;&amp;&#32;friends</emphasis>
449 <emphasis role="comment">//&#32;-&#32;push_back/pop_back</emphasis>
450 <emphasis role="comment">//&#32;-&#32;assign/insert/erase</emphasis>
451 <emphasis role="comment">//&#32;-&#32;relational&#32;operators&#32;as&#32;free&#32;functions&#32;-&#32;taking&#32;const&#32;char*&#32;as&#32;one&#32;of&#32;the&#32;params</emphasis>
452 <emphasis role="keyword">class&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>
453 {
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;len&#32;&#32;=&#32;24;&#32;&#32;&#32;&#32;&#32;&#32;
455 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;last&#32;=&#32;len&#32;-&#32;1;&#32;
456 
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>view&#32;<emphasis role="comment">//&#32;len&#32;should&#32;be&#32;more&#32;than&#32;sizeof(view)&#32;-&#32;because&#32;of&#32;the&#32;final&#32;byte&#32;for&#32;flags</emphasis>
458 &#32;&#32;&#32;&#32;{
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;ptr;
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size;
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;capacity;
462 &#32;&#32;&#32;&#32;};
463 
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
465 &#32;&#32;&#32;&#32;{
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buf[len];
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;view&#32;<link linkend="_classdoctest_1_1_string_1a5c77ed634a1b81aea739a73fb01d986a">data</link>;
468 &#32;&#32;&#32;&#32;};
469 
470 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isOnStack()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(buf[last]&#32;&amp;&#32;128)&#32;==&#32;0;&#32;}
471 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setOnHeap();
472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;setLast(<emphasis role="keywordtype">unsigned</emphasis>&#32;in&#32;=&#32;last);
473 
474 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;copy(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other);
475 
476 <emphasis role="keyword">public</emphasis>:
477 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String</link>();
478 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1af5dce5deeb8f25a4866efdff75e92975">~String</link>();
479 
480 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;noExplicitConstructor</emphasis>
481 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1abb4449cbc613cd973ae774c704fca5dd">String</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
482 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1a01d9f84ab0a3dc67b195678b6073dd4c">String</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in_size);
483 
484 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1a27ca7976da20bdebbf225fa496c38ad1">String</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;other);
485 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;<link linkend="_classdoctest_1_1_string_1a43d58193ddd859ffc1dbd8ea4d263103">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;other);
486 
487 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;<link linkend="_classdoctest_1_1_string_1a3025142a313b3d9bacb6bfd32c1bc36f">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;other);
488 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;<link linkend="_classdoctest_1_1_string_1a6ddb6cf1b744a0ae1d4e26b3c8dfa827">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>;
489 
490 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1a4bbdcb36cd68988953c3bb2d18e53210">String</link>(<link linkend="_classdoctest_1_1_string">String</link>&amp;&amp;&#32;other);
491 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;<link linkend="_classdoctest_1_1_string_1afb06cd600ae7282bad5f2e9e3e4fad2c">operator=</link>(<link linkend="_classdoctest_1_1_string">String</link>&amp;&amp;&#32;other);
492 
493 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;<link linkend="_classdoctest_1_1_string_1adf69290bc23e8c7bf60a9bcf765ebc10">operator[]</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i)&#32;<emphasis role="keyword">const</emphasis>;
494 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&amp;&#32;<link linkend="_classdoctest_1_1_string_1a6984a8468af784f4694c1811623ebd7f">operator[]</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i);
495 
496 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;only&#32;functions&#32;I&apos;m&#32;willing&#32;to&#32;leave&#32;in&#32;the&#32;interface&#32;-&#32;available&#32;for&#32;inlining</emphasis>
497 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_classdoctest_1_1_string_1a59fcdcf1abd7d66572158049c1b4a8c0">c_str</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_classdoctest_1_1_string">String</link>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<link linkend="_classdoctest_1_1_string_1a59fcdcf1abd7d66572158049c1b4a8c0">c_str</link>();&#32;}&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
498 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string_1a4a59b9aa0980d93e15a4cf459dab7f7e">c_str</link>()&#32;{
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isOnStack())
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(buf);
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data.ptr;
502 &#32;&#32;&#32;&#32;}
503 
504 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1a9fbc7b09f1660b236f12fc2adce6183d">size</link>()&#32;<emphasis role="keyword">const</emphasis>;
505 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1adad8703f08950d173d2cb1426391fcdf">capacity</link>()&#32;<emphasis role="keyword">const</emphasis>;
506 
507 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1aef87d1f106d32d8c31af87335b44164d">compare</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;other,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;no_case&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1adb57becb56e054d981e7c2b967a7e359">compare</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;other,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;no_case&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
509 };
510 
511 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
512 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
513 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
514 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
515 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
516 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;rhs);
517 
518 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1a7817aba561f42fc42fdccb1b312c7678">operator&lt;&lt;</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;in);
519 
520 <emphasis role="keyword">namespace&#32;</emphasis>Color&#32;{
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92">Enum</link>
522 &#32;&#32;&#32;&#32;{
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a82bb3f0edc1798267a82ac34c1c098f2">None</link>&#32;=&#32;0,
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a0bf060b447441fbf2e4beeb25370a808">White</link>,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Red</link>,
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Green</link>,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aada3ad8958b1319450cc20f3f8e5e2d6">Blue</link>,
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Cyan</link>,
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Yellow</link>,
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aa2a431a059ed0e85160db8967c8ace58">Grey</link>,
531 
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Bright</link>&#32;=&#32;0x10,
533 
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a236dfdbcd49d10dbf1a31f9e2947a671">BrightRed</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Bright</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Red</link>,
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a016090b96620a42a63dadf0265977664">BrightGreen</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Bright</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Green</link>,
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a44f079a43a4709abd7d6f22b317838a2">LightGrey</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Bright</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aa2a431a059ed0e85160db8967c8ace58">Grey</link>,
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a4f80853796b4875d61ff5e4ad138492e">BrightWhite</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Bright</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a0bf060b447441fbf2e4beeb25370a808">White</link>
538 &#32;&#32;&#32;&#32;};
539 
540 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1_color_1a2cc3f4bdda7bfd2e0e3faf7e678d3b98">operator&lt;&lt;</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;s,&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92">Color::Enum</link>&#32;code);
541 }&#32;<emphasis role="comment">//&#32;namespace&#32;Color</emphasis>
542 
543 <emphasis role="keyword">namespace&#32;</emphasis>assertType&#32;{
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">Enum</link>
545 &#32;&#32;&#32;&#32;{
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;macro&#32;traits</emphasis>
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>&#32;&#32;&#32;&#32;=&#32;1,
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>&#32;&#32;&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
551 
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">is_throws</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>,
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;&#32;&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">is_throws</link>,
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>,
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">is_nothrow</link>&#32;&#32;&#32;&#32;&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>,
557 
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">is_nothrow</link>,
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>,&#32;<emphasis role="comment">//&#32;not&#32;checked&#32;anywhere&#32;-&#32;used&#32;just&#32;to&#32;distinguish&#32;the&#32;types</emphasis>
560 
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7010ae6142f085a3bfd85caa251c7499">is_eq</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3d624cd25af4d9bb1c29bd84f356e58d">is_ne</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7010ae6142f085a3bfd85caa251c7499">is_eq</link>,
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abcad551db5972ed3918d2dae14c556f1">is_lt</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3d624cd25af4d9bb1c29bd84f356e58d">is_ne</link>,
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a21d83a0fcc556d3c90614579e5cd2599">is_gt</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abcad551db5972ed3918d2dae14c556f1">is_lt</link>,
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a79ca2d90e99907eb5fe2971865bfcb30">is_ge</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a21d83a0fcc556d3c90614579e5cd2599">is_gt</link>,
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3e1b485ee74c36fc1d0ba5902032af87">is_le</link>&#32;=&#32;2&#32;*&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a79ca2d90e99907eb5fe2971865bfcb30">is_ge</link>,
569 
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;macro&#32;types</emphasis>
571 
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af972d8a41e3090304ef38ad43483314d">DT_WARN</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a4431fd22794b06d854c7f9fbf43b10b8">DT_CHECK</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a807ade2ef3e65b909e1551d8c8406d54">DT_REQUIRE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
575 
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a710e0f57342dff74ba39e74419443435">DT_WARN_FALSE</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aa518f2714c2f58bb1ed3b2d2f8c1b075">DT_CHECK_FALSE</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae81f0c9c945715690c794c4e7cbb7bbf">DT_REQUIRE_FALSE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
579 
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9575f9ac61737539cde0fc3353e3d424">DT_WARN_THROWS</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">is_throws</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abf34f9af14d1c3d9b23dc80fc553e607">DT_CHECK_THROWS</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">is_throws</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a961340742b11d7e37f3874fef305d609">DT_REQUIRE_THROWS</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">is_throws</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
583 
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad915d4c9681ce4f6ad8a5e0967cb0f04">DT_WARN_THROWS_AS</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a389b826746dde155cb46687c7e565cce">DT_CHECK_THROWS_AS</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a180912d780568b6d9f1f0ef4a96a7be6">DT_REQUIRE_THROWS_AS</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
587 
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae6357eecb1d854cd7ad71e72c52c2f6d">DT_WARN_THROWS_WITH</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a5b0d08bf133f70f746ebd2f8b8e514d5">DT_CHECK_THROWS_WITH</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7b37f7677433a6da93a9e15c3ab62d24">DT_REQUIRE_THROWS_WITH</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ac76f8fa71f1b776034cd7db2687c99c8">DT_WARN_THROWS_WITH_AS</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a13d5a33071d51aaaebcd08c4fd012035">DT_CHECK_THROWS_WITH_AS</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a81ed09bf509081b6c5887f196a593438">DT_REQUIRE_THROWS_WITH_AS</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">is_throws_with</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
595 
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab2aade9d6de83d7d0548e784a502d67f">DT_WARN_NOTHROW</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">is_nothrow</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a5c330f1952cb85a8416902e237ec6f1f">DT_CHECK_NOTHROW</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">is_nothrow</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2ab93f3a9dfd9c597e4810cd22fe6d16">DT_REQUIRE_NOTHROW</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">is_nothrow</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a856e0bc4639d22946b02ca5aae7f6c2c">DT_WARN_EQ</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7010ae6142f085a3bfd85caa251c7499">is_eq</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a25ea7bcb831f008cfbcfd5da41e9008e">DT_CHECK_EQ</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7010ae6142f085a3bfd85caa251c7499">is_eq</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab2880914ce3960d556aa8681e9e47ad4">DT_REQUIRE_EQ</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7010ae6142f085a3bfd85caa251c7499">is_eq</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
603 
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a64e5a52a68ac1280d1a0910578d342cd">DT_WARN_NE</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3d624cd25af4d9bb1c29bd84f356e58d">is_ne</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad2d533f5a46b17df1170d4b29ccd572a">DT_CHECK_NE</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3d624cd25af4d9bb1c29bd84f356e58d">is_ne</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3c0d1c2454abd45b63391ee3970b133c">DT_REQUIRE_NE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3d624cd25af4d9bb1c29bd84f356e58d">is_ne</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af5a8a1175f296c626efaaf728a8a5b96">DT_WARN_GT</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a21d83a0fcc556d3c90614579e5cd2599">is_gt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a4dbd73b6541c25b5c6fe059e970d937a">DT_CHECK_GT</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a21d83a0fcc556d3c90614579e5cd2599">is_gt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a65b68e53d865150051f880273a6c8462">DT_REQUIRE_GT</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a21d83a0fcc556d3c90614579e5cd2599">is_gt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
611 
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af78432b9b33a8765b326441c42a0c1b8">DT_WARN_LT</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abcad551db5972ed3918d2dae14c556f1">is_lt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a18449655ab3feda0b66aa7306a85aeb5">DT_CHECK_LT</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abcad551db5972ed3918d2dae14c556f1">is_lt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6dabfc7a1ec170e2ec6e31de8e703085">DT_REQUIRE_LT</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abcad551db5972ed3918d2dae14c556f1">is_lt</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
615 
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a493f8d19aa6056a3e8f475772548349b">DT_WARN_GE</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a79ca2d90e99907eb5fe2971865bfcb30">is_ge</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3afc68d23bf246717c10e7bc0231dc062c">DT_CHECK_GE</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a79ca2d90e99907eb5fe2971865bfcb30">is_ge</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a54599a5076fe992159f2e88cad185682">DT_REQUIRE_GE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a79ca2d90e99907eb5fe2971865bfcb30">is_ge</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
619 
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a1d40a679871797392c64dd8b4324f4e8">DT_WARN_LE</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3e1b485ee74c36fc1d0ba5902032af87">is_le</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad711b30f529eb092f9bcf90600a07eb1">DT_CHECK_LE</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3e1b485ee74c36fc1d0ba5902032af87">is_le</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a49c183d4be8babc83bbb3754303f7d45">DT_REQUIRE_LE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3e1b485ee74c36fc1d0ba5902032af87">is_le</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
623 
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9bc05989c4bd086562f3a0e05ab07ceb">DT_WARN_UNARY</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae649bc4be44cb5e296ee851a7637c018">DT_CHECK_UNARY</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0e430d8916b3d685b5df30d602d06b6d">DT_REQUIRE_UNARY</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad0c3e97290a20b0942a2988c2c413f45">DT_WARN_UNARY_FALSE</link>&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">is_warn</link>,
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae8c9c5080e302b840ab4e053d5160191">DT_CHECK_UNARY_FALSE</link>&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">is_check</link>,
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a23caa06098e51bbb331da066e98ebd4e">DT_REQUIRE_UNARY_FALSE</link>&#32;=&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">is_normal</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">is_false</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3adfaee7d6a907d7681e53e0e91734e058">is_unary</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">is_require</link>,
631 &#32;&#32;&#32;&#32;};
632 }&#32;<emphasis role="comment">//&#32;namespace&#32;assertType</emphasis>
633 
634 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at);
635 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a3fcfa9f7f479ad1b46d142e210c8ca75">failureString</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at);
636 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file);
637 
638 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>
639 {
640 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1ac3e8095418a13cd7bbc921cce5b3c5c6">m_file</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;file&#32;in&#32;which&#32;the&#32;test&#32;was&#32;registered</emphasis>
641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1aaabb9765e7aa39416c058a9cbccef57f">m_line</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;line&#32;where&#32;the&#32;test&#32;was&#32;registered</emphasis>
642 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_test_case_data_1a0cb34895130be773e624526d68e5b2cd">m_name</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;name&#32;of&#32;the&#32;test&#32;case</emphasis>
643 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_test_case_data_1ae264da66ff0e88a34c467d364dd18840">m_test_suite</link>;&#32;<emphasis role="comment">//&#32;the&#32;test&#32;suite&#32;in&#32;which&#32;the&#32;test&#32;was&#32;added</emphasis>
644 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_test_case_data_1abd855851b4b9edbaf46c3458abc1ba80">m_description</link>;
645 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1a0c2353bd3fd8c2fa84d34ab4e973e038">m_skip</link>;
646 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1a887b70bf52f74724f0d7fe99d43a8783">m_may_fail</link>;
647 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1a037f6dfb931aff9c9b17f31203a3987e">m_should_fail</link>;
648 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1a6c5995f53ad39769bf06600e562ea9eb">m_expected_failures</link>;
649 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_data_1a8cab4a7998b486bafa81498f93dd4d91">m_timeout</link>;
650 };
651 
652 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_assert_data">AssertData</link>
653 {
654 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;common&#32;-&#32;for&#32;all&#32;asserts</emphasis>
655 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>*&#32;<link linkend="_structdoctest_1_1_assert_data_1ab26ee6e05feaefc982c4f5481458cbda">m_test_case</link>;
656 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1a0b3b2866b13ba048c0beea51bd798749">m_at</link>;
657 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1ac22c9ed0d8c6edec58c4b26a0a00e714">m_file</link>;
658 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1a1142f5fb5d171964b7677a9d23f81548">m_line</link>;
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1af8fe9e24ffba3f575c7384a85f96297a">m_expr</link>;
660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1ac9ddaf3e6532fdadba3c1f74eb931d4a">m_failed</link>;
661 
662 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exception-related&#32;-&#32;for&#32;all&#32;asserts</emphasis>
663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1a3e9d4c7eeff7c4fe310b0597bf7027b8">m_threw</link>;
664 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1_assert_data_1a1fdbef933ef26c0bc174f9ec716924cd">m_exception</link>;
665 
666 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;normal&#32;asserts</emphasis>
667 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1_assert_data_1a1c6b5804b7dd4d8ba70126cb598f30bd">m_decomp</link>;
668 
669 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;specific&#32;exception-related&#32;asserts</emphasis>
670 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_assert_data_1ace744d365532d299052c8a80a63f7079">m_threw_as</link>;
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_assert_data_1a1c476dc606780aefdb7db2d7ca146199">m_exception_type</link>;
672 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_assert_data_1aa01e5c79855d78e3612b6d77a0fef54b">m_exception_string</link>;
673 };
674 
675 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_message_data">MessageData</link>
676 {
677 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_message_data_1a0ef5cfd7a399ee475d6357b6dcddfe53">m_string</link>;
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_message_data_1acd1e6a5c4f03ed6e098cdab5956a3e17">m_file</link>;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_message_data_1a7c1cf03250a68db5befbba63b3824d93">m_line</link>;
680 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;<link linkend="_structdoctest_1_1_message_data_1a24e0a3f475609ce8e02cecc4cb0d3b48">m_severity</link>;
681 };
682 
683 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_subcase_signature">SubcaseSignature</link>
684 {
685 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_subcase_signature_1a61081d1b920e862241e6f81731fb8a58">m_name</link>;
686 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1_subcase_signature_1adc680b4597c89fb81ae8fed7fc41414d">m_file</link>;
687 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_subcase_signature_1a73fb5432d0f8b82ffbe262b86af5c643">m_line</link>;
688 
689 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_subcase_signature_1a07364f9dddf615f51e15f09b994d4bef">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_subcase_signature">SubcaseSignature</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>;
690 };
691 
692 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_i_context_scope">IContextScope</link>
693 {
694 &#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_context_scope_1a067a2f9a9e53b010eb7b0a2ab88c76fd">IContextScope</link>();
695 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_structdoctest_1_1_i_context_scope_1aa99357c233d6a040451628bc6a6c6c2e">~IContextScope</link>();
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_context_scope_1affbf0f9bf8107a4a8a805d237288141d">stringify</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
697 };
698 
699 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1_context_options">ContextOptions</link>&#32;
700 {
701 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;<link linkend="_structdoctest_1_1_context_options_1a1ee59adf440880ebd7b31516471ddcab">cout</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stdout&#32;stream&#32;-&#32;std::cout&#32;by&#32;default</emphasis>
702 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;<link linkend="_structdoctest_1_1_context_options_1af4424b66280bdf050e0cc0dbf8975487">cerr</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stderr&#32;stream&#32;-&#32;std::cerr&#32;by&#32;default</emphasis>
703 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_context_options_1a0590006b4d10296c9a697e32ff886f74">binary_name</link>;&#32;<emphasis role="comment">//&#32;the&#32;test&#32;binary&#32;name</emphasis>
704 
705 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;==&#32;parameters&#32;from&#32;the&#32;command&#32;line</emphasis>
706 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;<link linkend="_structdoctest_1_1_context_options_1a51b278efd4662f92bb3f7eb6a57974ba">out</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;output&#32;filename</emphasis>
707 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;&#32;&#32;<link linkend="_structdoctest_1_1_context_options_1a397c99d733e24fc87f8da6f6eda855da">order_by</link>;&#32;&#32;<emphasis role="comment">//&#32;how&#32;tests&#32;should&#32;be&#32;ordered</emphasis>
708 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1ab312bdc6f3c16646f04f75742f87ce0a">rand_seed</link>;&#32;<emphasis role="comment">//&#32;the&#32;seed&#32;for&#32;rand&#32;ordering</emphasis>
709 
710 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a9f26ee60a5259e73f9f25ce3f4883a97">first</link>;&#32;<emphasis role="comment">//&#32;the&#32;first&#32;(matching)&#32;test&#32;to&#32;be&#32;executed</emphasis>
711 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a5aaf1b28f6a46d8acb40898a502b6bef">last</link>;&#32;&#32;<emphasis role="comment">//&#32;the&#32;last&#32;(matching)&#32;test&#32;to&#32;be&#32;executed</emphasis>
712 
713 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a8ba5bfec2229bc2da9ab917f4bdee5e7">abort_after</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stop&#32;tests&#32;after&#32;this&#32;many&#32;failed&#32;assertions</emphasis>
714 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a93281aa958eed5c2a1533d404b1ebeff">subcase_filter_levels</link>;&#32;<emphasis role="comment">//&#32;apply&#32;the&#32;subcase&#32;filters&#32;for&#32;the&#32;first&#32;N&#32;levels</emphasis>
715 
716 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a5c7bc4cf57fadf73e626666a0a548b92">success</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;include&#32;successful&#32;assertions&#32;in&#32;output</emphasis>
717 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a08571475229452c2eb933da314a74dff">case_sensitive</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;filtering&#32;should&#32;be&#32;case&#32;sensitive</emphasis>
718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a85d785559ea88e0bd61890f77f00a82f">exit</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;program&#32;should&#32;be&#32;exited&#32;after&#32;the&#32;tests&#32;are&#32;ran/whatever</emphasis>
719 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a0fc3e0c1cf669cffd1f826c005fc4223">duration</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;print&#32;the&#32;time&#32;duration&#32;of&#32;each&#32;test&#32;case</emphasis>
720 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a642d847a76880d946bdd62b35eba3f63">no_throw</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;skip&#32;exceptions-related&#32;assertion&#32;macros</emphasis>
721 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1adcbcab2df10d87307a4754ac9588d35f">no_exitcode</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;framework&#32;should&#32;return&#32;0&#32;as&#32;the&#32;exitcode</emphasis>
722 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1aad35f517c65f792ddc72a672d9014222">no_run</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;not&#32;run&#32;the&#32;tests&#32;at&#32;all&#32;(can&#32;be&#32;done&#32;with&#32;an&#32;&quot;*&quot;&#32;exclude)</emphasis>
723 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1ad7371979d5134b109dd00fba771b0271">no_version</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;not&#32;print&#32;the&#32;version&#32;of&#32;the&#32;framework</emphasis>
724 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a4fc9b6673b818b8cb5969725f16b59c3">no_colors</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;output&#32;to&#32;the&#32;console&#32;should&#32;be&#32;colorized</emphasis>
725 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a8cd276e86a209f3d5486eb6c5a2a29bf">force_colors</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;forces&#32;the&#32;use&#32;of&#32;colors&#32;even&#32;when&#32;a&#32;tty&#32;cannot&#32;be&#32;detected</emphasis>
726 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1af82a6fc802b8ed33a84ea96e85b0d911">no_breaks</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;not&#32;break&#32;into&#32;the&#32;debugger</emphasis>
727 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a56344ffa781ee4da6cbf3f6c11da8564">no_skip</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;skip&#32;test&#32;cases&#32;which&#32;are&#32;marked&#32;to&#32;be&#32;skipped</emphasis>
728 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1aab894e731a6fc86cf095288ec7d0c0f2">gnu_file_line</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;line&#32;numbers&#32;should&#32;be&#32;surrounded&#32;with&#32;:x:&#32;and&#32;not&#32;(x):</emphasis>
729 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a1e9a8bf8feba5cfe25558e5977c4bd7c">no_path_in_filenames</link>;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;path&#32;to&#32;files&#32;should&#32;be&#32;removed&#32;from&#32;the&#32;output</emphasis>
730 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a880207c3b4cc98fc5c8d94998841e837">no_line_numbers</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;source&#32;code&#32;line&#32;numbers&#32;should&#32;be&#32;omitted&#32;from&#32;the&#32;output</emphasis>
731 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a4e22eec59e63ed4ff6ab4dfce2389c99">no_skipped_summary</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;don&apos;t&#32;print&#32;&quot;skipped&quot;&#32;in&#32;the&#32;summary&#32;!!!&#32;UNDOCUMENTED&#32;!!!</emphasis>
732 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a7932d4aa0f360efec8cc201ec63c8366">no_time_in_output</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;omit&#32;any&#32;time/timestamps&#32;from&#32;output&#32;!!!&#32;UNDOCUMENTED&#32;!!!</emphasis>
733 
734 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a9d542a95ee03f61c233fff51e7461400">help</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;print&#32;the&#32;help</emphasis>
735 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a08931527a9e5e634e64a336e5493a7c1">version</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;print&#32;the&#32;version</emphasis>
736 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a4651b5efbaf2ffc03d60fb4140d21dd3">count</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;only&#32;the&#32;count&#32;of&#32;matching&#32;tests&#32;is&#32;to&#32;be&#32;retrieved</emphasis>
737 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a813e1543c358ab8a7a432b4ad2b32e56">list_test_cases</link>;&#32;&#32;<emphasis role="comment">//&#32;to&#32;list&#32;all&#32;tests&#32;matching&#32;the&#32;filters</emphasis>
738 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1a579399a66b278cbf96b6183d337f486b">list_test_suites</link>;&#32;<emphasis role="comment">//&#32;to&#32;list&#32;all&#32;suites&#32;matching&#32;the&#32;filters</emphasis>
739 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options_1ad3daf077ac3182db5175f8baff49fce0">list_reporters</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;lists&#32;all&#32;registered&#32;reporters</emphasis>
740 };
741 
742 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
743 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING)&#32;||&#32;defined(DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS)</emphasis>
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;CONDITION,&#32;<emphasis role="keyword">typename</emphasis>&#32;TYPE&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
745 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>enable_if
746 &#32;&#32;&#32;&#32;{};
747 
748 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;TYPE&gt;
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>enable_if&lt;true,&#32;TYPE&gt;
750 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;TYPE&#32;type;&#32;};
751 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING)&#32;||&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
752 
753 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
754 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1remove__reference">remove_reference</link>&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structdoctest_1_1detail_1_1remove__reference_1ab3cba0e8bc4c71b7f4ecdf85476ec4cc">type</link>;&#32;};
755 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1remove__reference">remove_reference</link>&lt;T&amp;&gt;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structdoctest_1_1detail_1_1remove__reference_3_01_t_01_6_01_4_1a37201537c0190f14f504d9f507bc042a">type</link>;&#32;};
756 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1remove__reference">remove_reference</link>&lt;T&amp;&amp;&gt;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structdoctest_1_1detail_1_1remove__reference_3_01_t_01_6_6_01_4_1af5f63a14f4e74e0c3c733c00e2f37213">type</link>;&#32;};
757 
758 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1remove__const">remove_const</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structdoctest_1_1detail_1_1remove__const_1ad6a97a5d2fcb5f513bbff8ea12e280f8">type</link>;&#32;};
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1remove__const">remove_const</link>&lt;const&#32;T&gt;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;<link linkend="_structdoctest_1_1detail_1_1remove__const_3_01const_01_t_01_4_1ab1e642665bafaad4023fba5295290b17">type</link>;&#32;};
760 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
761 
762 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1deferred__false">deferred_false</link>
764 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;unusedStructMember</emphasis>
765 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1deferred__false_1abc8eec7a8439ab592f76068cb408d106">value</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;};
766 
767 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>has_insertion_operator_impl&#32;{
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&#32;&amp;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>();
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1aca675e788cb45921358501d70f0a2529">DOCTEST_REF_WRAP</link>(T)&#32;val();
771 
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>,&#32;<emphasis role="keyword">class</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check">check</link>&#32;{
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check_1a23284c81951701aaabe0305a9d495040">value</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
776 
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check">check</link>&lt;T,&#32;decltype(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>()&#32;&lt;&lt;&#32;val&lt;T&gt;(),&#32;void())&gt;&#32;{
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check_1a23284c81951701aaabe0305a9d495040">value</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
781 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;has_insertion_operator_impl</emphasis>
782 
783 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;
784 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check">has_insertion_operator</link>&#32;=&#32;<link linkend="_structdoctest_1_1detail_1_1has__insertion__operator__impl_1_1check">has_insertion_operator_impl::check&lt;T&gt;</link>;
785 
786 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a4027cb5407ce2ff132645e89bba97010">my_memcpy</link>(<emphasis role="keywordtype">void</emphasis>*&#32;dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;src,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num);
787 
788 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;<link linkend="_namespacedoctest_1_1detail_1ab4df12a4ff9fad5f16edcc1c54f6c4fc">getTlsOss</link>();&#32;<emphasis role="comment">//&#32;returns&#32;a&#32;thread-local&#32;ostringstream</emphasis>
789 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1_1detail_1a7b0b3df5fe79d7ffa8fa138201476df1">getTlsOssResult</link>();
790 
791 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;C&gt;
792 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_string_maker_base">StringMakerBase</link>
793 &#32;&#32;&#32;&#32;{
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_maker_base_1a67d29f2a5de9a522d8e8607c1a39db9b">convert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(T))&#32;{
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;{?}&quot;</emphasis>;
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
798 &#32;&#32;&#32;&#32;};
799 
800 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
801 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_string_maker_base">StringMakerBase</link>&lt;true&gt;
802 &#32;&#32;&#32;&#32;{
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_maker_base_3_01true_01_4_1ae1a11dee413117f36e335677589b047f">convert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(T)&#32;in)&#32;{
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_namespacedoctest_1_1detail_1ab4df12a4ff9fad5f16edcc1c54f6c4fc">getTlsOss</link>()&#32;&lt;&lt;&#32;in;
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a7b0b3df5fe79d7ffa8fa138201476df1">getTlsOssResult</link>();
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
808 &#32;&#32;&#32;&#32;};
809 
810 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">rawMemoryToString</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size);
811 
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
813 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">rawMemoryToString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(T)&#32;<emphasis role="keywordtype">object</emphasis>)&#32;{
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">rawMemoryToString</link>(&amp;<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">object</emphasis>));
815 &#32;&#32;&#32;&#32;}
816 
817 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
818 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1_1detail_1ad64c6c2fd8d7302e8a5e3452cdfb3f75">type_to_string</link>()&#32;{
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&lt;&gt;&quot;</emphasis>;
820 &#32;&#32;&#32;&#32;}
821 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
822 
823 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
824 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1_string_maker">StringMaker</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_maker_base">detail::StringMakerBase</link>&lt;detail::has_insertion_operator&lt;T&gt;::value&gt;
825 {};
826 
827 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
828 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1_string_maker">StringMaker</link>&lt;T*&gt;
829 {
830 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1_string_maker_3_01_t_01_5_01_4_1a79dfd2e72f48a1d9941b924d6ac23104">convert</link>(U*&#32;p)&#32;{
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p)
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">detail::rawMemoryToString</link>(p);
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>;
835 &#32;&#32;&#32;&#32;}
836 };
837 
838 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;R,&#32;<emphasis role="keyword">typename</emphasis>&#32;C&gt;
839 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1_string_maker">StringMaker</link>&lt;R&#32;C::*&gt;
840 {
841 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1_string_maker_3_01_r_01_c_1_1_5_01_4_1a06144903aacd73ed31c2fb043be8abb0">convert</link>(R&#32;C::*p)&#32;{
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p)
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">detail::rawMemoryToString</link>(p);
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>;
845 &#32;&#32;&#32;&#32;}
846 };
847 
848 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
849 <link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(T)&#32;value)&#32;{
850 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_maker_base_1a67d29f2a5de9a522d8e8607c1a39db9b">StringMaker&lt;T&gt;::convert</link>(value);
851 }
852 
853 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
854 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">char</emphasis>*&#32;in);
855 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
856 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
857 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">bool</emphasis>&#32;in);
858 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">float</emphasis>&#32;in);
859 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">double</emphasis>&#32;in);
860 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
861 
862 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">char</emphasis>&#32;in);
863 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;in);
864 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
865 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;in);
866 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
867 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;in);
868 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
869 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
870 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
871 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
872 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
873 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(std::nullptr_t&#32;in);
874 
875 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC&#32;&gt;=&#32;DOCTEST_COMPILER(19,&#32;20,&#32;0)</emphasis>
876 <emphasis role="comment">//&#32;see&#32;this&#32;issue&#32;on&#32;why&#32;this&#32;is&#32;needed:&#32;https://github.com/onqtam/doctest/issues/183</emphasis>
877 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;in);
878 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;VS&#32;2019</emphasis>
879 
880 <emphasis role="keyword">class&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>
881 {
882 <emphasis role="keyword">public</emphasis>:
883 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a86f0d1b44c1cf095697f23ccdab00802">Approx</link>(<emphasis role="keywordtype">double</emphasis>&#32;value);
884 
885 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;<link linkend="_classdoctest_1_1_approx_1aae907c5ea1c4ac94e134db9e35da7dce">operator()</link>(<emphasis role="keywordtype">double</emphasis>&#32;value)&#32;<emphasis role="keyword">const</emphasis>;
886 
887 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
888 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
889 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;value,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::enable_if&lt;std::is_constructible&lt;double,&#32;T&gt;::value&gt;::type*&#32;=
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>))&#32;{
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(value));
893 &#32;&#32;&#32;&#32;}
894 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
895 
896 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;<link linkend="_classdoctest_1_1_approx_1a3a9093777280fcf5fd79e79b1c202ba8">epsilon</link>(<emphasis role="keywordtype">double</emphasis>&#32;newEpsilon);
897 
898 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
899 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
900 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::enable_if&lt;std::is_constructible&lt;double,&#32;T&gt;::value,&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&gt;::type&#32;epsilon(
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;newEpsilon)&#32;{
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_epsilon&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(newEpsilon);
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
904 &#32;&#32;&#32;&#32;}
905 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
906 
907 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;<link linkend="_classdoctest_1_1_approx_1a040114c288b721e97d7cdd22faf69c90">scale</link>(<emphasis role="keywordtype">double</emphasis>&#32;newScale);
908 
909 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
910 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
911 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;detail::enable_if&lt;std::is_constructible&lt;double,&#32;T&gt;::value,&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&gt;::type&#32;scale(
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;newScale)&#32;{
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_scale&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(newScale);
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
915 &#32;&#32;&#32;&#32;}
916 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
917 
918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
919 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a2b6b56551f113fd12f4a52b4d3e5fd7e">operator==</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
920 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a1b99d0c4c3924a253474e68ae30e1175">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
921 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a44d4bbc575291095c884848887538233">operator!=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
922 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1ae86972ba14656f422afdcc60cd2cdb08">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
923 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1af2fef67cf4508a446eeaf38dafae661f">operator&lt;=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
924 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a7f32e572caa5ee152b8ade301fcfd838">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
925 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1acf882dbff26c57cd8404da3edd46f45e">operator&gt;=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
926 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_approx_1a52e1bcec19171f0ec55cc3a280188a03">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
927 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt; </link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
928 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt; </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
929 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt; </link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;rhs);
930 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt; </link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&#32;&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs);
931 
932 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_classdoctest_1_1_approx_1aa1ba324952b7844d35fc569b1c6c139a">toString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;in);
933 
934 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
935 <emphasis role="preprocessor">#define&#32;DOCTEST_APPROX_PREFIX&#32;\</emphasis>
936 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;&#32;friend&#32;typename&#32;detail::enable_if&lt;std::is_constructible&lt;double,&#32;T&gt;::value,&#32;bool&gt;::type</emphasis>
937 
938 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keywordtype">double</emphasis>(lhs),&#32;rhs);&#32;}
939 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(rhs,&#32;lhs);&#32;}
940 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(lhs,&#32;rhs);&#32;}
941 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(rhs,&#32;lhs);&#32;}
942 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;double(lhs)&#32;&lt;&#32;rhs.m_value&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
943 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&lt;&#32;double(rhs)&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
944 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;double(lhs)&#32;&gt;&#32;rhs.m_value&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
945 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&gt;&#32;double(rhs)&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
946 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt; </link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;double(lhs)&#32;&lt;&#32;rhs.m_value&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
947 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt; </link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&lt;&#32;double(rhs)&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
948 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt; </link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;double(lhs)&#32;&gt;&#32;rhs.m_value&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
949 &#32;&#32;&#32;&#32;DOCTEST_APPROX_PREFIX&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt; </link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&gt;&#32;double(rhs)&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
950 <emphasis role="preprocessor">#undef&#32;DOCTEST_APPROX_PREFIX</emphasis>
951 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS</emphasis>
952 
953 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
954 
955 <emphasis role="keyword">private</emphasis>:
956 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;m_epsilon;
957 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;m_scale;
958 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;m_value;
959 };
960 
961 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_approx">Approx</link>&amp;&#32;in);
962 
963 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options">ContextOptions</link>*&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>();
964 
965 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_DISABLE)</emphasis>
966 
967 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
968 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
969 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
970 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>decay_array&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T&#32;type;&#32;};
971 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;N&gt;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>decay_array&lt;T[N]&gt;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T*&#32;type;&#32;};
972 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>decay_array&lt;T[]&gt;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;T*&#32;type;&#32;};
973 
974 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_char_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;value&#32;=&#32;1&#32;};&#32;};
975 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_char_pointer&lt;char*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;value&#32;=&#32;0&#32;};&#32;};
976 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_char_pointer&lt;const&#32;char*&gt;&#32;{&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;value&#32;=&#32;0&#32;};&#32;};
977 
978 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;T&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>can_use_op&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;not_char_pointer&lt;typename&#32;decay_array&lt;T&gt;::type&gt;&#32;{};
979 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
980 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
981 
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_failure_exception">TestFailureException</link>
983 &#32;&#32;&#32;&#32;{
984 &#32;&#32;&#32;&#32;};
985 
986 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1acec9ff072dd86af95225a8beb9c57298">checkIfShouldThrow</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at);
987 
988 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
989 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a4ef00bd4c0653f31a2e60e5e5f2fcf10">DOCTEST_NORETURN</link>
990 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
991 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a60ffd50b9ee7adfcafc078f333aac8b6">throwException</link>();
992 
993 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_subcase">Subcase</link>
994 &#32;&#32;&#32;&#32;{
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_subcase_signature">SubcaseSignature</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_subcase_1a54730e9b88cf33ea4a5c873164029202">m_signature</link>;
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_entered&#32;=&#32;<emphasis role="keyword">false</emphasis>;
997 
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_subcase_1a8f7d4a5ddfb8ae48663e5cfc786e6f12">Subcase</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line);
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_subcase_1a4812988371d226236be53c302c86abe2">~Subcase</link>();
1000 
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;bool()&#32;<emphasis role="keyword">const</emphasis>;
1002 &#32;&#32;&#32;&#32;};
1003 
1004 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
1005 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_namespacedoctest_1_1detail_1a6879a79aea397a22e296e4afd0a90e3b">stringifyBinaryExpr</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;op,
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(R)&#32;rhs)&#32;{
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(lhs)&#32;+&#32;op&#32;+&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(rhs);
1008 &#32;&#32;&#32;&#32;}
1009 
1010 <emphasis role="preprocessor">#define&#32;DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op,&#32;op_str,&#32;op_macro)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1011 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1012 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_NOINLINE&#32;Result&#32;operator&#32;op(const&#32;DOCTEST_REF_WRAP(R)&#32;rhs)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1013 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bool&#32;res&#32;=&#32;op_macro(lhs,&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1014 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(m_at&#32;&amp;&#32;assertType::is_false)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1015 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;!res;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1016 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(!res&#32;||&#32;doctest::getContextOptions()-&gt;success)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1017 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Result(res,&#32;stringifyBinaryExpr(lhs,&#32;op_str,&#32;rhs));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1018 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;Result(res);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
1020 
1021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;more&#32;checks&#32;could&#32;be&#32;added&#32;-&#32;like&#32;in&#32;Catch:</emphasis>
1022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/catchorg/Catch2/pull/1480/files</emphasis>
1023 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/catchorg/Catch2/pull/1481/files</emphasis>
1024 <emphasis role="preprocessor">#define&#32;DOCTEST_FORBIT_EXPRESSION(rt,&#32;op)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;rt&amp;&#32;operator&#32;op(const&#32;R&amp;)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1027 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(deferred_false&lt;R&gt;::value,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1028 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Expression&#32;Too&#32;Complex&#32;Please&#32;Rewrite&#32;As&#32;Binary&#32;Comparison!&quot;</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;*this;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1030 &#32;&#32;&#32;&#32;}
1031 
1032 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>
1033 &#32;&#32;&#32;&#32;{
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_result_1a03ff571186856a429ada967ddfdf3006">m_passed</link>;
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_1a97968e037266580a799ab3deb9365b79">m_decomp</link>;
1036 
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_result_1ae4d2e8633aedaffa31f5c8b8530f522c">Result</link>(<emphasis role="keywordtype">bool</emphasis>&#32;passed,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;decomposition&#32;=&#32;<link linkend="_classdoctest_1_1_string">String</link>());
1038 
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;forbidding&#32;some&#32;expressions&#32;based&#32;on&#32;this&#32;table:&#32;https://en.cppreference.com/w/cpp/language/operator_precedence</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&amp;)
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;^)
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;|)
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&amp;&amp;)
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;||)
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;==)
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;!=)
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&lt;)
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&gt;)
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&lt;=)
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&gt;=)
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;=)
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;+=)
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;-=)
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;*=)
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;/=)
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;%=)
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&lt;&lt;=)
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&gt;&gt;=)
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;&amp;=)
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;^=)
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>,&#32;|=)
1062 &#32;&#32;&#32;&#32;};
1063 
1064 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</emphasis>
1065 
1066 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a628491cf2971a026350d5401986bf6d3">DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</link>
1067 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(<emphasis role="stringliteral">&quot;-Wsign-conversion&quot;</emphasis>)
1068 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wsign-compare&quot;)
1069 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wdouble-promotion&quot;)</emphasis>
1070 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wconversion&quot;)</emphasis>
1071 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_CLANG_SUPPRESS_WARNING(&quot;-Wfloat-equal&quot;)</emphasis>
1072 
1073 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a8015d10af2883db80a955ce0d523886d">DOCTEST_GCC_SUPPRESS_WARNING_PUSH</link>
1074 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wsign-conversion&quot;)
1075 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wsign-compare&quot;)
1076 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wdouble-promotion&quot;)</emphasis>
1077 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wconversion&quot;)</emphasis>
1078 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_GCC_SUPPRESS_WARNING(&quot;-Wfloat-equal&quot;)</emphasis>
1079 
1080 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aec6d713a9dde361b8e68afe78c5bf3cf">DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</link>
1081 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://stackoverflow.com/questions/39479163&#32;what&apos;s&#32;the&#32;difference&#32;between&#32;4018&#32;and&#32;4389</emphasis>
1082 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4388)&#32;<emphasis role="comment">//&#32;signed/unsigned&#32;mismatch</emphasis>
1083 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4389)&#32;<emphasis role="comment">//&#32;&apos;operator&apos;&#32;:&#32;signed/unsigned&#32;mismatch</emphasis>
1084 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4018)&#32;<emphasis role="comment">//&#32;&apos;expression&apos;&#32;:&#32;signed/unsigned&#32;mismatch</emphasis>
1085 &#32;&#32;&#32;&#32;<emphasis role="comment">//DOCTEST_MSVC_SUPPRESS_WARNING(4805)&#32;//&#32;&apos;operation&apos;&#32;:&#32;unsafe&#32;mix&#32;of&#32;type&#32;&apos;type&apos;&#32;and&#32;type&#32;&apos;type&apos;&#32;in&#32;operation</emphasis>
1086 
1087 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</emphasis>
1088 
1089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1090 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1091 <emphasis role="preprocessor">#define&#32;DOCTEST_COMPARISON_RETURN_TYPE&#32;bool</emphasis>
1092 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1093 <emphasis role="preprocessor">#define&#32;DOCTEST_COMPARISON_RETURN_TYPE&#32;typename&#32;enable_if&lt;can_use_op&lt;L&gt;::value&#32;||&#32;can_use_op&lt;R&gt;::value,&#32;bool&gt;::type</emphasis>
1094 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569af644d2e3091c342ab78b12da1fcb06dc">eq</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>(lhs)&#32;==&#32;<link linkend="_classdoctest_1_1_string">String</link>(rhs);&#32;}
1095 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a851b5dd9ab390a406621216da112ac9c">ne</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>(lhs)&#32;!=&#32;<link linkend="_classdoctest_1_1_string">String</link>(rhs);&#32;}
1096 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569aea0e8621512e05d78d88ff2d2c164a6b">lt</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(lhs)&#32;&lt;&#32;&#32;String(rhs);&#32;}
1097 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a3efb665f41cd9490d9739e1ad228918e">gt</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(lhs)&#32;&gt;&#32;&#32;String(rhs);&#32;}
1098 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a58efccb94f787a00914adc6db077347b">le</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(lhs)&#32;&lt;=&#32;String(rhs);&#32;}
1099 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a1de9460fcfb6a1681f13d54083f88313">ge</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(lhs)&#32;&gt;=&#32;String(rhs);&#32;}
1100 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1102 
1103 <emphasis role="preprocessor">#define&#32;DOCTEST_RELATIONAL_OP(name,&#32;op)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;L,&#32;typename&#32;R&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1105 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_COMPARISON_RETURN_TYPE&#32;name(const&#32;DOCTEST_REF_WRAP(L)&#32;lhs,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;DOCTEST_REF_WRAP(R)&#32;rhs)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs&#32;op&#32;rhs;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
1109 
1110 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569af644d2e3091c342ab78b12da1fcb06dc">eq</link>,&#32;==)
1111 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a851b5dd9ab390a406621216da112ac9c">ne</link>,&#32;!=)
1112 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569aea0e8621512e05d78d88ff2d2c164a6b">lt</link>,&#32;&lt;)
1113 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a3efb665f41cd9490d9739e1ad228918e">gt</link>,&#32;&gt;)
1114 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a58efccb94f787a00914adc6db077347b">le</link>,&#32;&lt;=)
1115 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2fb9073f4525cca30d5a8bb5d32f62c4">DOCTEST_RELATIONAL_OP</link>(<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a1de9460fcfb6a1681f13d54083f88313">ge</link>,&#32;&gt;=)
1116 
1117 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1118 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_EQ(l,&#32;r)&#32;l&#32;==&#32;r</emphasis>
1119 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_NE(l,&#32;r)&#32;l&#32;!=&#32;r</emphasis>
1120 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_GT(l,&#32;r)&#32;l&#32;&gt;&#32;r</emphasis>
1121 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_LT(l,&#32;r)&#32;l&#32;&lt;&#32;r</emphasis>
1122 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_GE(l,&#32;r)&#32;l&#32;&gt;=&#32;r</emphasis>
1123 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_LE(l,&#32;r)&#32;l&#32;&lt;=&#32;r</emphasis>
1124 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1125 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_EQ(l,&#32;r)&#32;eq(l,&#32;r)</emphasis>
1126 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_NE(l,&#32;r)&#32;ne(l,&#32;r)</emphasis>
1127 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_GT(l,&#32;r)&#32;gt(l,&#32;r)</emphasis>
1128 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_LT(l,&#32;r)&#32;lt(l,&#32;r)</emphasis>
1129 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_GE(l,&#32;r)&#32;ge(l,&#32;r)</emphasis>
1130 <emphasis role="preprocessor">#define&#32;DOCTEST_CMP_LE(l,&#32;r)&#32;le(l,&#32;r)</emphasis>
1131 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1132 
1133 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
1134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;copyCtorAndEqOperator</emphasis>
1135 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Expression_lhs
1136 &#32;&#32;&#32;&#32;{
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;L&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs;
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;m_at;
1139 
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Expression_lhs(L&#32;in,&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at)
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;lhs(in)
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_at(at)&#32;{}
1143 
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>&#32;<emphasis role="keyword">operator</emphasis>&#32;Result()&#32;{
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;res&#32;=&#32;!!lhs;
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">assertType::is_false</link>)&#32;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;!res;
1148 
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!res&#32;||&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;success)
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result(res,&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(lhs));
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result(res);
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1153 
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(==,&#32;<emphasis role="stringliteral">&quot;&#32;==&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1affded31d2dc937d95785e3d17332765b">DOCTEST_CMP_EQ</link>)&#32;
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(!=,&#32;<emphasis role="stringliteral">&quot;&#32;!=&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a4848f1d467fb5ef1dae4f31d56b8760a">DOCTEST_CMP_NE</link>)&#32;
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(&gt;,&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&gt;&#32;&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a6cd6ec78f910453372adbdca54d28e96">DOCTEST_CMP_GT</link>)&#32;
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(&lt;,&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&lt;&#32;&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1ad17ac1cc3242c45a461b1364c13cde55">DOCTEST_CMP_LT</link>)&#32;
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(&gt;=,&#32;<emphasis role="stringliteral">&quot;&#32;&gt;=&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a8d05cc6960a068bd84bc215d98112973">DOCTEST_CMP_GE</link>)&#32;
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a924a81d1115ba1ad170b51800e46d3cf">DOCTEST_DO_BINARY_EXPRESSION_COMPARISON</link>(&lt;=,&#32;<emphasis role="stringliteral">&quot;&#32;&lt;=&#32;&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a324adcbcbb7e31481c2f619a5a0d5a56">DOCTEST_CMP_LE</link>)&#32;
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1162 
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;forbidding&#32;some&#32;expressions&#32;based&#32;on&#32;this&#32;table:&#32;https://en.cppreference.com/w/cpp/language/operator_precedence</emphasis>
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&amp;)
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;^)
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;|)
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&amp;&amp;)
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;||)
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;=)
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;+=)
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;-=)
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;*=)
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;/=)
1174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;%=)
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&lt;&lt;=)
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&gt;&gt;=)
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&amp;=)
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;^=)
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;|=)
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;these&#32;2&#32;are&#32;unfortunate&#32;because&#32;they&#32;should&#32;be&#32;allowed&#32;-&#32;they&#32;have&#32;higher&#32;precedence&#32;over&#32;the&#32;comparisons,&#32;but&#32;the</emphasis>
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ExpressionDecomposer&#32;class&#32;uses&#32;the&#32;left&#32;shift&#32;operator&#32;to&#32;capture&#32;the&#32;left&#32;operand&#32;of&#32;the&#32;binary&#32;expression...</emphasis>
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&lt;&lt;)
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a004774d0eca7e70aee66a4a80b3aa1c8">DOCTEST_FORBIT_EXPRESSION</link>(Expression_lhs,&#32;&gt;&gt;)
1184 &#32;&#32;&#32;&#32;};
1185 
1186 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</emphasis>
1187 
1188 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
1189 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
1190 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
1191 
1192 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION</emphasis>
1193 
1194 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_expression_decomposer">ExpressionDecomposer</link>
1195 &#32;&#32;&#32;&#32;{
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_expression_decomposer_1a1a71b19bd41d2cbd1c8b4006412870c4">m_at</link>;
1197 
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_expression_decomposer_1a6bf2c46ebf0dc68106be801a90776e65">ExpressionDecomposer</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at);
1199 
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;right&#32;operator&#32;for&#32;capturing&#32;expressions&#32;is&#32;&quot;&lt;=&quot;&#32;instead&#32;of&#32;&quot;&lt;&lt;&quot;&#32;(based&#32;on&#32;the&#32;operator&#32;precedence&#32;table)</emphasis>
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;then&#32;there&#32;will&#32;be&#32;warnings&#32;from&#32;GCC&#32;about&#32;&quot;-Wparentheses&quot;&#32;and&#32;since&#32;&quot;_Pragma()&quot;&#32;is&#32;problematic&#32;this&#32;will&#32;stay&#32;for&#32;now...</emphasis>
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/catchorg/Catch2/issues/870</emphasis>
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://github.com/catchorg/Catch2/issues/565</emphasis>
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Expression_lhs&lt;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&gt;&#32;<link linkend="_namespacedoctest_1a7817aba561f42fc42fdccb1b312c7678">operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;operand)&#32;{
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Expression_lhs&lt;const&#32;DOCTEST_REF_WRAP(L)&gt;(operand,&#32;m_at);
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1208 &#32;&#32;&#32;&#32;};
1209 
1210 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">TestSuite</link>
1211 &#32;&#32;&#32;&#32;{
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1ab6260436f6fd52d473c0020ff916753c">m_test_suite</link>;
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1a0458cf84f4f2d308162b26c95a1bbbce">m_description</link>;
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1a82ecf10ca3db6bff60a087378267caea">m_skip</link>;
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1aeaf438e6731c002c2447e8e87c46c82b">m_may_fail</link>;
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1a3c5953ed157cfc68dfc37cce66fb4103">m_should_fail</link>;
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1ab0167ce62046912d83780302cb86adca">m_expected_failures</link>;
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1a430d6e400dd91b9a21c7bb06ede81ec9">m_timeout</link>;
1219 
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">TestSuite</link>&amp;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1ad2551def823db67f1516b78a5e2a967d">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
1221 
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">TestSuite</link>&amp;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite_1a15a89c55da84b7dc5aa40277ab37c7c5">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;in)&#32;{
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.fill(*<emphasis role="keyword">this</emphasis>);
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1227 &#32;&#32;&#32;&#32;};
1228 
1229 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_namespacedoctest_1_1detail_1a7b2c60631c5f4906b26acf2e6b0e6e45">funcType</link>)();
1230 
1231 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>
1232 &#32;&#32;&#32;&#32;{
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a7b2c60631c5f4906b26acf2e6b0e6e45">funcType</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1aba46691733c89216ce6b0ac0b7dc6b42">m_test</link>;&#32;<emphasis role="comment">//&#32;a&#32;function&#32;pointer&#32;to&#32;the&#32;test&#32;case</emphasis>
1234 
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1ad29513e7194ebb6e53e3b1df27ebf48f">m_type</link>;&#32;<emphasis role="comment">//&#32;for&#32;templated&#32;test&#32;cases&#32;-&#32;gets&#32;appended&#32;to&#32;the&#32;real&#32;name</emphasis>
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1af5183eb061a33329ede72791ad3457f9">m_template_id</link>;&#32;<emphasis role="comment">//&#32;an&#32;ID&#32;used&#32;to&#32;distinguish&#32;between&#32;the&#32;different&#32;versions&#32;of&#32;a&#32;templated&#32;test&#32;case</emphasis>
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1a30f21f77461de7bd68dc44362171b62a">m_full_name</link>;&#32;<emphasis role="comment">//&#32;contains&#32;the&#32;name&#32;(only&#32;for&#32;templated&#32;test&#32;cases!)&#32;+&#32;the&#32;template&#32;type</emphasis>
1238 
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1a589d99e8322a4d830d5173545cd3dabe">TestCase</link>(<link linkend="_namespacedoctest_1_1detail_1a7b2c60631c5f4906b26acf2e6b0e6e45">funcType</link>&#32;test,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">TestSuite</link>&amp;&#32;test_suite,
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;type&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;template_id&#32;=&#32;-1);
1241 
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1a0d8aa1f3d0cbd31f3bc4a74d9c6add23">TestCase</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;other);
1243 
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1a3e767f89d496f2dc80ebbab72677c754">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(26434)&#32;<emphasis role="comment">//&#32;hides&#32;a&#32;non-virtual&#32;function</emphasis>
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;operator=(const&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;other);
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
1247 
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;operator*(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
1249 
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;operator*(const&#32;T&amp;&#32;in)&#32;{
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;in.fill(*<emphasis role="keyword">this</emphasis>);
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1255 
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case_1a865f5906758263125b68b8d785a05ca1">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;other)&#32;<emphasis role="keyword">const</emphasis>;
1257 &#32;&#32;&#32;&#32;};
1258 
1259 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;forward&#32;declarations&#32;of&#32;functions&#32;used&#32;by&#32;the&#32;macros</emphasis>
1260 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a00f99edefb8490a8e2602d58c96431f4">regTest</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_case">TestCase</link>&amp;&#32;tc);
1261 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1ae79cb8df06d35468dd0ba9f04c85802c">setTestSuite</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">TestSuite</link>&amp;&#32;ts);
1262 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>();
1263 
1264 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1265 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1aad401b097a9af4df1d4a9d0911957c0f">instantiationHelper</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
1266 
1267 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>binaryAssertComparison&#32;{
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569">Enum</link>
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569af644d2e3091c342ab78b12da1fcb06dc">eq</link>&#32;=&#32;0,
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a851b5dd9ab390a406621216da112ac9c">ne</link>,
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a3efb665f41cd9490d9739e1ad228918e">gt</link>,
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569aea0e8621512e05d78d88ff2d2c164a6b">lt</link>,
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a1de9460fcfb6a1681f13d54083f88313">ge</link>,
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a58efccb94f787a00914adc6db077347b">le</link>
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1277 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;binaryAssertComparison</emphasis>
1278 
1279 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1280 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">class</emphasis>&#32;L,&#32;<emphasis role="keyword">class</emphasis>&#32;R&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_relational_comparator">RelationalComparator</link>&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_relational_comparator_1a51062ad46cd23c982838a0a51df70512">operator()</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L),&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(R)&#32;&#32;&#32;&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;};
1281 
1282 <emphasis role="preprocessor">#define&#32;DOCTEST_BINARY_RELATIONAL_OP(n,&#32;op)&#32;\</emphasis>
1283 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;class&#32;L,&#32;class&#32;R&gt;&#32;struct&#32;RelationalComparator&lt;n,&#32;L,&#32;R&gt;&#32;{&#32;bool&#32;operator()(const&#32;DOCTEST_REF_WRAP(L)&#32;lhs,&#32;const&#32;DOCTEST_REF_WRAP(R)&#32;rhs)&#32;const&#32;{&#32;return&#32;op(lhs,&#32;rhs);&#32;}&#32;};</emphasis>
1284 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1285 
1286 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(0,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569af644d2e3091c342ab78b12da1fcb06dc">eq</link>)
1287 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(1,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a851b5dd9ab390a406621216da112ac9c">ne</link>)
1288 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(2,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a3efb665f41cd9490d9739e1ad228918e">gt</link>)
1289 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(3,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569aea0e8621512e05d78d88ff2d2c164a6b">lt</link>)
1290 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(4,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a1de9460fcfb6a1681f13d54083f88313">ge</link>)
1291 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a709ccd44cac02b9af890e6e1880e406e">DOCTEST_BINARY_RELATIONAL_OP</link>(5,&#32;<link linkend="_namespacedoctest_1_1detail_1_1binary_assert_comparison_1a2117cafa5b007d26f2e0988f3a081569a58efccb94f787a00914adc6db077347b">le</link>)
1292 
1293 &#32;&#32;&#32;&#32;struct&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder">ResultBuilder</link>&#32;:&#32;public&#32;<link linkend="_structdoctest_1_1_assert_data">AssertData</link>
1294 &#32;&#32;&#32;&#32;{
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1af1af5a8d0991b4fe3548107f111e968d">ResultBuilder</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;exception_type&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;exception_string&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1297 
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1a86c0ca727fead43263de4a7e9a59ad23">setResult</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>&amp;&#32;res);
1299 
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;comparison,&#32;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1ab3d55b158b3ae687f80bca94db6bb701">binary_assert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;lhs,
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(R)&#32;rhs)&#32;{
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!<link linkend="_structdoctest_1_1detail_1_1_relational_comparator">RelationalComparator&lt;comparison, L, R&gt;</link>()(lhs,&#32;rhs);
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_failed&#32;||&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;<link linkend="_structdoctest_1_1_context_options_1a5c7bc4cf57fadf73e626666a0a548b92">success</link>)
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_decomp&#32;=&#32;<link linkend="_namespacedoctest_1_1detail_1a6879a79aea397a22e296e4afd0a90e3b">stringifyBinaryExpr</link>(lhs,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;rhs);
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1307 
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1a98c33e90242e2859255a79cb38489f3b">unary_assert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;val)&#32;{
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!val;
1311 
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">assertType::is_false</link>)&#32;
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!m_failed;
1314 
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_failed&#32;||&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;success)
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_decomp&#32;=&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(val);
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1318 
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1a5eece6aa3b1a2cb366cf5a0cc6c854a3">translateException</link>();
1320 
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1a2af75dd1d8db8d3aa949d78025854085">log</link>();
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_result_builder_1a03686f862471728c2980d72e02980213">react</link>()&#32;<emphasis role="keyword">const</emphasis>;
1323 &#32;&#32;&#32;&#32;};
1324 
1325 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>assertAction&#32;{
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1assert_action_1a38ba820518d42da988fab24b2f3d0548">Enum</link>
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1assert_action_1a38ba820518d42da988fab24b2f3d0548aad8b44f340e17ab74bf8386e63b25191">nothing</link>&#32;&#32;&#32;&#32;&#32;=&#32;0,
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1assert_action_1a38ba820518d42da988fab24b2f3d0548a22a154d8ba87f66a1e02fe72fe8530cb">dbgbreak</link>&#32;&#32;&#32;&#32;=&#32;1,
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1assert_action_1a38ba820518d42da988fab24b2f3d0548a3f8411bdb0657d9c725828004fed1009">shouldthrow</link>&#32;=&#32;2
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1332 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;assertAction</emphasis>
1333 
1334 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a0ff832be68bf666d856aefd539e1ce81">failed_out_of_a_testing_context</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_assert_data">AssertData</link>&amp;&#32;ad);
1335 
1336 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a6d4efb043e9e5a6fa0db64f0e230a7a7">decomp_assert</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,&#32;<link linkend="_structdoctest_1_1detail_1_1_result">Result</link>&#32;result);
1338 
1339 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_OUT_OF_TESTS(decomp)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1340 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1341 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(!is_running_in_test)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(failed)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1343 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ResultBuilder&#32;rb(at,&#32;file,&#32;line,&#32;expr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1344 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rb.m_failed&#32;=&#32;failed;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1345 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rb.m_decomp&#32;=&#32;decomp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1346 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failed_out_of_a_testing_context(rb);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1347 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(isDebuggerActive()&#32;&amp;&amp;&#32;!getContextOptions()-&gt;no_breaks)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1348 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_BREAK_INTO_DEBUGGER();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1349 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(checkIfShouldThrow(at))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;throwException();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1353 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1354 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
1355 
1356 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_IN_TESTS(decomp)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1357 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;ResultBuilder&#32;rb(at,&#32;file,&#32;line,&#32;expr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1358 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;rb.m_failed&#32;=&#32;failed;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1359 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(rb.m_failed&#32;||&#32;getContextOptions()-&gt;success)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1360 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rb.m_decomp&#32;=&#32;decomp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1361 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(rb.log())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1362 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_BREAK_INTO_DEBUGGER();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1363 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(rb.m_failed&#32;&amp;&amp;&#32;checkIfShouldThrow(at))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1364 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;throwException()</emphasis>
1365 
1366 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;comparison,&#32;<emphasis role="keyword">typename</emphasis>&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;R&gt;
1367 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a570279a22ca888528e87a426853a0288">binary_assert</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;lhs,
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(R)&#32;rhs)&#32;{
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;failed&#32;=&#32;!<link linkend="_structdoctest_1_1detail_1_1_relational_comparator">RelationalComparator&lt;comparison, L, R&gt;</link>()(lhs,&#32;rhs);
1371 
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IF&#32;THE&#32;DEBUGGER&#32;BREAKS&#32;HERE&#32;-&#32;GO&#32;1&#32;LEVEL&#32;UP&#32;IN&#32;THE&#32;CALLSTACK&#32;FOR&#32;THE&#32;FAILING&#32;ASSERT</emphasis>
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;THIS&#32;IS&#32;THE&#32;EFFECT&#32;OF&#32;HAVING&#32;&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;&#32;DEFINED</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1ab4f2e4a4e2bbb1ea221db5cdf117a014">DOCTEST_ASSERT_OUT_OF_TESTS</link>(<link linkend="_namespacedoctest_1_1detail_1a6879a79aea397a22e296e4afd0a90e3b">stringifyBinaryExpr</link>(lhs,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;rhs));
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a91330bd2fb42d1fac4aa07e425a20f2e">DOCTEST_ASSERT_IN_TESTS</link>(<link linkend="_namespacedoctest_1_1detail_1a6879a79aea397a22e296e4afd0a90e3b">stringifyBinaryExpr</link>(lhs,&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;rhs));
1378 &#32;&#32;&#32;&#32;}
1379 
1380 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
1381 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a5343d1b26df7f86767d5e7026c03bf0f">unary_assert</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_doctest_8h_1af2901cafb023c57fb672ccb1bf14f2eb">DOCTEST_REF_WRAP</link>(L)&#32;val)&#32;{
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;failed&#32;=&#32;!val;
1384 
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6539bad84e35008dc4a4a2c2d0793318">assertType::is_false</link>)&#32;
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failed&#32;=&#32;!failed;
1387 
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IF&#32;THE&#32;DEBUGGER&#32;BREAKS&#32;HERE&#32;-&#32;GO&#32;1&#32;LEVEL&#32;UP&#32;IN&#32;THE&#32;CALLSTACK&#32;FOR&#32;THE&#32;FAILING&#32;ASSERT</emphasis>
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;THIS&#32;IS&#32;THE&#32;EFFECT&#32;OF&#32;HAVING&#32;&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;&#32;DEFINED</emphasis>
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1ab4f2e4a4e2bbb1ea221db5cdf117a014">DOCTEST_ASSERT_OUT_OF_TESTS</link>(<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(val));
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a91330bd2fb42d1fac4aa07e425a20f2e">DOCTEST_ASSERT_IN_TESTS</link>(<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(val));
1394 &#32;&#32;&#32;&#32;}
1395 
1396 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator">IExceptionTranslator</link>
1397 &#32;&#32;&#32;&#32;{
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator_1a3818157edf68f08110c7212ee87ff61e">IExceptionTranslator</link>();
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator_1a9031aa45964213709841eba4b3e19d48">~IExceptionTranslator</link>();
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator_1a9c56005e4c83c13b859cc2e31102bfbc">translate</link>(<link linkend="_classdoctest_1_1_string">String</link>&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
1401 &#32;&#32;&#32;&#32;};
1402 
1403 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1404 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classdoctest_1_1detail_1_1_exception_translator">ExceptionTranslator</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator">IExceptionTranslator</link>&#32;
1405 &#32;&#32;&#32;&#32;{
1406 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_exception_translator_1a3ac05488993c40c6ba55ce51a6bf7eae">ExceptionTranslator</link>(<link linkend="_classdoctest_1_1_string">String</link>&#32;(*translateFunction)(T))
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_translateFunction(translateFunction)&#32;{}
1409 
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_exception_translator_1a56484c4218a06bbbd1548335a8b64110">translate</link>(<link linkend="_classdoctest_1_1_string">String</link>&amp;&#32;res)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{
1411 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;&#32;<emphasis role="comment">//&#32;lgtm&#32;[cpp/rethrow-no-exception]</emphasis>
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;catchExceptionByValue</emphasis>
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(T&#32;ex)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;m_translateFunction(ex);&#32;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(...)&#32;{}&#32;
1419 <emphasis role="preprocessor">#endif&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((void)res);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;silence&#32;-Wunused-parameter</emphasis>
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1423 
1424 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;(*m_translateFunction)(T);
1426 &#32;&#32;&#32;&#32;};
1427 
1428 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a3887426da16e0d12e6f0e270a767a6a5">registerExceptionTranslatorImpl</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_i_exception_translator">IExceptionTranslator</link>*&#32;et);
1429 
1430 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;C&gt;
1431 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_string_stream_base">StringStreamBase</link>
1432 &#32;&#32;&#32;&#32;{
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_stream_base_1a0eca8e2711f17a565fea3696635a3833">convert</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;in)&#32;{
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(in);
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1437 
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;always&#32;treat&#32;char*&#32;as&#32;a&#32;string&#32;in&#32;this&#32;context&#32;-&#32;no&#32;matter</emphasis>
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING&#32;is&#32;defined</emphasis>
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_stream_base_1a7c248639907b26e46344b91d7ab90be7">convert</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;<link linkend="_classdoctest_1_1_string">String</link>(in);&#32;}
1441 &#32;&#32;&#32;&#32;};
1442 
1443 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1444 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_string_stream_base">StringStreamBase</link>&lt;true&gt;
1445 &#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_stream_base_3_01true_01_4_1a3f86285d254474498065e6b70522e2b7">convert</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;in)&#32;{
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*s&#32;&lt;&lt;&#32;in;
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1450 &#32;&#32;&#32;&#32;};
1451 
1452 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1453 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1detail_1_1_string_stream">StringStream</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_string_stream_base">StringStreamBase</link>&lt;has_insertion_operator&lt;T&gt;::value&gt;
1454 &#32;&#32;&#32;&#32;{};
1455 
1456 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;value)&#32;{
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_string_stream_base_1a0eca8e2711f17a565fea3696635a3833">StringStream&lt;T&gt;::convert</link>(s,&#32;value);
1459 &#32;&#32;&#32;&#32;}
1460 
1461 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1462 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
1463 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in);
1464 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
1465 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;in);
1466 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">float</emphasis>&#32;in);
1467 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">double</emphasis>&#32;in);
1468 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
1469 
1470 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;in);
1471 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;in);
1472 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
1473 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;in);
1474 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
1475 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;in);
1476 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
1477 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
1478 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
1479 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in);
1480 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in);
1481 
1482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ContextScope&#32;base&#32;class&#32;used&#32;to&#32;allow&#32;implementing&#32;methods&#32;of&#32;ContextScope&#32;</emphasis>
1483 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;that&#32;don&apos;t&#32;depend&#32;on&#32;the&#32;template&#32;parameter&#32;in&#32;doctest.cpp.</emphasis>
1484 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_base">ContextScopeBase</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1_i_context_scope">IContextScope</link>&#32;{
1485 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_base_1af3a3ff7ad6b98142ef0f7e1d01912d48">ContextScopeBase</link>();
1487 
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_base_1a6f223de9a972b08bf1b9e9d2d99ab4c6">destroy</link>();
1489 &#32;&#32;&#32;&#32;};
1490 
1491 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classdoctest_1_1detail_1_1_context_scope">ContextScope</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_base">ContextScopeBase</link>
1492 &#32;&#32;&#32;&#32;{
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;L&#32;&amp;lambda_;
1494 
1495 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_1a344c76a0374615d567a084c0a0ffd215">ContextScope</link>(<emphasis role="keyword">const</emphasis>&#32;L&#32;&amp;lambda)&#32;:&#32;lambda_(lambda)&#32;{}
1497 
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_1afca3228fdeb0e86257a21f826c4247ff">ContextScope</link>(<link linkend="_classdoctest_1_1detail_1_1_context_scope">ContextScope</link>&#32;&amp;&amp;other)&#32;:&#32;lambda_(other.lambda_)&#32;{}
1499 
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_1a4636ac32ae41ae108c7ada4a164ffaeb">stringify</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s)<emphasis role="keyword">&#32;const&#32;override&#32;</emphasis>{&#32;lambda_(s);&#32;}
1501 
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope_1a1ee7d4702398ee8d0e80ab843aa260d7">~ContextScope</link>()<emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;destroy();&#32;}
1503 &#32;&#32;&#32;&#32;};
1504 
1505 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder">MessageBuilder</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_structdoctest_1_1_message_data">MessageData</link>
1506 &#32;&#32;&#32;&#32;{
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1a5319d522ba62c91e59ffa7f6982756e5">m_stream</link>;
1508 
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1a93cb6f180968d38cb0f18b08ec6c9000">MessageBuilder</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;severity);
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1aaaaf33f49c6d66425af9c2306010ae7e">MessageBuilder</link>()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1aa8dca00768780164f52e309276692f96">~MessageBuilder</link>();
1512 
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder">MessageBuilder</link>&amp;&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1a07930b5dcf6e8d96859dc4e75352fcaf">operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;in)&#32;{
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a71b40611173c82709726b36715229179">toStream</link>(m_stream,&#32;in);
1516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1518 
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1a9bcc5d56e1764a7e07efebca55e43cce">log</link>();
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_message_builder_1a3a65c5e39a0c04ae8e2a7c34997a2e4d">react</link>();
1521 &#32;&#32;&#32;&#32;};
1522 &#32;&#32;&#32;&#32;
1523 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;L&gt;
1524 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope">ContextScope&lt;L&gt;</link>&#32;<link linkend="_namespacedoctest_1_1detail_1af15c2ff0484248d0966fc38a4b0d3a66">MakeContextScope</link>(<emphasis role="keyword">const</emphasis>&#32;L&#32;&amp;lambda)&#32;{
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_context_scope">ContextScope&lt;L&gt;</link>(lambda);
1526 &#32;&#32;&#32;&#32;}
1527 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
1528 
1529 <emphasis role="preprocessor">#define&#32;DOCTEST_DEFINE_DECORATOR(name,&#32;type,&#32;def)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;name&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1531 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type&#32;data;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name(type&#32;in&#32;=&#32;def)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;data(in)&#32;{}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;fill(detail::TestCase&amp;&#32;state)&#32;const&#32;{&#32;state.DOCTEST_CAT(m_,&#32;name)&#32;=&#32;data;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1536 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;fill(detail::TestSuite&amp;&#32;state)&#32;const&#32;{&#32;state.DOCTEST_CAT(m_,&#32;name)&#32;=&#32;data;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1537 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
1538 
1539 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(test_suite,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1540 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(description,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1541 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(skip,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
1542 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(timeout,&#32;<emphasis role="keywordtype">double</emphasis>,&#32;0);
1543 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(may_fail,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
1544 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(should_fail,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
1545 <link linkend="_namespacedoctest_1a104a0e533475e45acbddd9266c4d687e">DOCTEST_DEFINE_DECORATOR</link>(expected_failures,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;0);
1546 
1547 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1548 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1a8e23e6bb4c6982688652060dbe41385d">registerExceptionTranslator</link>(<link linkend="_classdoctest_1_1_string">String</link>&#32;(*translateFunction)(T))&#32;{
1549 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wexit-time-destructors&quot;</emphasis>)
1550 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_classdoctest_1_1detail_1_1_exception_translator">detail::ExceptionTranslator&lt;T&gt;</link>&#32;exceptionTranslator(translateFunction);
1551 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
1552 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a3887426da16e0d12e6f0e270a767a6a5">detail::registerExceptionTranslatorImpl</link>(&amp;exceptionTranslator);
1553 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1554 }
1555 
1556 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest</emphasis>
1557 
1558 <emphasis role="comment">//&#32;in&#32;a&#32;separate&#32;namespace&#32;outside&#32;of&#32;doctest&#32;because&#32;the&#32;DOCTEST_TEST_SUITE&#32;macro</emphasis>
1559 <emphasis role="comment">//&#32;introduces&#32;an&#32;anonymous&#32;namespace&#32;in&#32;which&#32;getCurrentTestSuite&#32;gets&#32;overridden</emphasis>
1560 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest__detail__test__suite__ns">doctest_detail_test_suite_ns</link>&#32;{
1561 <link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">doctest::detail::TestSuite</link>&amp;&#32;<link linkend="_namespacedoctest__detail__test__suite__ns_1a63d04c2e0ba35dff1e33cf0a24ec66c8">getCurrentTestSuite</link>();
1562 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest_detail_test_suite_ns</emphasis>
1563 
1564 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{
1565 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
1566 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1567 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1a8e23e6bb4c6982688652060dbe41385d">registerExceptionTranslator</link>(String&#32;(*)(T))&#32;{
1568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1569 }
1570 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
1571 
1572 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
1573 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;void&#32;(*<link linkend="_namespacedoctest_1_1detail_1a5b5db6997f20389de5735e3ee3439b95">assert_handler</link>)(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_assert_data">AssertData</link>&amp;);
1574 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ContextState;
1575 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
1576 
1577 <emphasis role="keyword">class&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_classdoctest_1_1_context">Context</link>
1578 {
1579 &#32;&#32;&#32;&#32;detail::ContextState*&#32;p;
1580 
1581 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;parseArgs(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;withDefaults&#32;=&#32;<emphasis role="keyword">false</emphasis>);
1582 
1583 <emphasis role="keyword">public</emphasis>:
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a881bc2d0fe207d672e1debe830768a98">Context</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc&#32;=&#32;0,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>);
1585 
1586 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_context_1a33b344fbc4803dca81147c4a4cc9edbd">~Context</link>();
1587 
1588 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1ad55229220bf9ca74e6e0c6323bf672e1">applyCommandLine</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv);
1589 
1590 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a60ad57a46c19db2b142468c3acac448a">addFilter</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filter,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;value);
1591 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1aaa878723e89310d5aa3f516bc7ab3165">clearFilters</link>();
1592 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a95e7a0230c5897f0eae36718f51d2f05">setOption</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;option,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value);
1593 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a4352ffc196c4ba56045270e45baa2754">setOption</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;option,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;value);
1594 
1595 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a219b10301380b81c84c0824a6876d9aa">shouldExit</link>();
1596 
1597 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1ae85cecc7689f009e23cba383484773b2">setAsDefaultForAssertsOutOfTestCases</link>();
1598 
1599 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a669dd0a596a611eeb0decdb78b661a90">setAssertHandler</link>(<link linkend="_namespacedoctest_1_1detail_1a5b5db6997f20389de5735e3ee3439b95">detail::assert_handler</link>&#32;ah);
1600 
1601 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a8059b137ef41cbe6c5d8160806a3cc63">run</link>();
1602 };
1603 
1604 <emphasis role="keyword">namespace&#32;</emphasis>TestCaseFailureReason&#32;{
1605 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">Enum</link>
1606 &#32;&#32;&#32;&#32;{
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">None</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0,
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca06ab32ff93cacaa65c6a2667ddde64e9">AssertFailure</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1,&#32;&#32;&#32;<emphasis role="comment">//&#32;an&#32;assertion&#32;has&#32;failed&#32;in&#32;the&#32;test&#32;case</emphasis>
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0474331a35ec33aefa287574dbe9a142">Exception</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;2,&#32;&#32;&#32;<emphasis role="comment">//&#32;test&#32;case&#32;threw&#32;an&#32;exception</emphasis>
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca362a350971c370e7bf89f1993aeb2eeb">Crash</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;4,&#32;&#32;&#32;<emphasis role="comment">//&#32;a&#32;crash...</emphasis>
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab87a56a01139c003c5f90678c37a0cb3">TooManyFailedAsserts</link>&#32;&#32;&#32;&#32;&#32;=&#32;8,&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;abort-after&#32;option</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca90b6713d67ca5273d0b7aa2d2ac60ab1">Timeout</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;16,&#32;&#32;<emphasis role="comment">//&#32;see&#32;the&#32;timeout&#32;decorator</emphasis>
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca214290d44846106400115f44d2d21cb9">ShouldHaveFailedButDidnt</link>&#32;=&#32;32,&#32;&#32;<emphasis role="comment">//&#32;see&#32;the&#32;should_fail&#32;decorator</emphasis>
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0ea1283c0437f975df930c28820a3920">ShouldHaveFailedAndDid</link>&#32;&#32;&#32;=&#32;64,&#32;&#32;<emphasis role="comment">//&#32;see&#32;the&#32;should_fail&#32;decorator</emphasis>
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caaab68fabc66bf5c3a606985f59a11afe">DidntFailExactlyNumTimes</link>&#32;=&#32;128,&#32;<emphasis role="comment">//&#32;see&#32;the&#32;expected_failures&#32;decorator</emphasis>
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab0e5ba77e37e755a83a01fdb2ad57b4d">FailedExactlyNumTimes</link>&#32;&#32;&#32;&#32;=&#32;256,&#32;<emphasis role="comment">//&#32;see&#32;the&#32;expected_failures&#32;decorator</emphasis>
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caa038bc08a903185cf809dd05056d6a75">CouldHaveFailedAndDid</link>&#32;&#32;&#32;&#32;=&#32;512&#32;&#32;<emphasis role="comment">//&#32;see&#32;the&#32;may_fail&#32;decorator</emphasis>
1618 &#32;&#32;&#32;&#32;};
1619 }&#32;<emphasis role="comment">//&#32;namespace&#32;TestCaseFailureReason</emphasis>
1620 
1621 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_current_test_case_stats">CurrentTestCaseStats</link>
1622 {
1623 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_current_test_case_stats_1ac8731bc4e8e32b86cf2940f4dcb61dec">numAssertsCurrentTest</link>;
1624 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_current_test_case_stats_1a2fb52eed7bcef7322a816f418f0fb942">numAssertsFailedCurrentTest</link>;
1625 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structdoctest_1_1_current_test_case_stats_1a29b1963f1d624d9f939f404726298f48">seconds</link>;
1626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_current_test_case_stats_1aaa58c52fd07a20e6e4daf19eecb2e2ba">failure_flags</link>;&#32;<emphasis role="comment">//&#32;use&#32;TestCaseFailureReason::Enum</emphasis>
1627 };
1628 
1629 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_test_case_exception">TestCaseException</link>
1630 {
1631 &#32;&#32;&#32;&#32;<link linkend="_classdoctest_1_1_string">String</link>&#32;<link linkend="_structdoctest_1_1_test_case_exception_1a656c8971ccbedc7d3a0a38f7c6af927e">error_string</link>;
1632 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_case_exception_1af30d801dae6dd2f4ea01690bbf5faeca">is_crash</link>;
1633 };
1634 
1635 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_test_run_stats">TestRunStats</link>
1636 {
1637 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats_1a2f4b38f2f6225b798029b64c1d425999">numTestCases</link>;
1638 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats_1afd49da305793d2c2622f0b33a63e87b6">numTestCasesPassingFilters</link>;
1639 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats_1aecbf62d51a6c96875d72124c27096e1d">numTestSuitesPassingFilters</link>;
1640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats_1adb4acfac3623bf752eff3f8d6ce2ffe7">numTestCasesFailed</link>;
1641 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_run_stats_1a58f52d165ab0af01acb7d69a7fc53c3a">numAsserts</link>;
1642 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_test_run_stats_1a27c7ff2c0190e4bad60555cdc68d8f30">numAssertsFailed</link>;
1643 };
1644 
1645 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdoctest_1_1_query_data">QueryData</link>
1646 {
1647 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats">TestRunStats</link>*&#32;&#32;run_stats&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1648 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>**&#32;data&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1649 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num_data&#32;&#32;=&#32;0;
1650 };
1651 
1652 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<link linkend="_structdoctest_1_1_i_reporter">IReporter</link>
1653 {
1654 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;constructor&#32;has&#32;to&#32;accept&#32;&quot;const&#32;ContextOptions&amp;&quot;&#32;as&#32;a&#32;single&#32;argument</emphasis>
1655 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;has&#32;most&#32;of&#32;the&#32;options&#32;for&#32;the&#32;run&#32;+&#32;a&#32;pointer&#32;to&#32;the&#32;stdout&#32;stream</emphasis>
1656 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reporter(const&#32;ContextOptions&amp;&#32;in)</emphasis>
1657 
1658 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;a&#32;query&#32;should&#32;be&#32;reported&#32;(listing&#32;test&#32;cases,&#32;printing&#32;the&#32;version,&#32;etc.)</emphasis>
1659 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1ae7e30d1c2cd332094c66d39bf3a85e52">report_query</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_query_data">QueryData</link>&amp;)&#32;=&#32;0;
1660 
1661 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;the&#32;whole&#32;test&#32;run&#32;starts</emphasis>
1662 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a7f4a4b654726d4b266c91cc0e1569f96">test_run_start</link>()&#32;=&#32;0;
1663 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;the&#32;whole&#32;test&#32;run&#32;ends&#32;(caching&#32;a&#32;pointer&#32;to&#32;the&#32;input&#32;doesn&apos;t&#32;make&#32;sense&#32;here)</emphasis>
1664 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a610495b7caa29e36b5ea62bff62952ed">test_run_end</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_run_stats">TestRunStats</link>&amp;)&#32;=&#32;0;
1665 
1666 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;a&#32;test&#32;case&#32;is&#32;started&#32;(safe&#32;to&#32;cache&#32;a&#32;pointer&#32;to&#32;the&#32;input)</emphasis>
1667 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1afa107df2d0230607e2f86f1876f48526">test_case_start</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>&amp;)&#32;=&#32;0;
1668 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;a&#32;test&#32;case&#32;is&#32;reentered&#32;because&#32;of&#32;unfinished&#32;subcases&#32;(safe&#32;to&#32;cache&#32;a&#32;pointer&#32;to&#32;the&#32;input)</emphasis>
1669 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a46c2fe41e5fa3d6930a3cb26d81ed764">test_case_reenter</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>&amp;)&#32;=&#32;0;
1670 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;a&#32;test&#32;case&#32;has&#32;ended</emphasis>
1671 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a43f8f19681dd5d42218ecb4fd935cda7">test_case_end</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_current_test_case_stats">CurrentTestCaseStats</link>&amp;)&#32;=&#32;0;
1672 
1673 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;an&#32;exception&#32;is&#32;thrown&#32;from&#32;the&#32;test&#32;case&#32;(or&#32;it&#32;crashes)</emphasis>
1674 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a40b0cdf1ad59dabc736e35fde63d516f">test_case_exception</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_exception">TestCaseException</link>&amp;)&#32;=&#32;0;
1675 
1676 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;whenever&#32;a&#32;subcase&#32;is&#32;entered&#32;(don&apos;t&#32;cache&#32;pointers&#32;to&#32;the&#32;input)</emphasis>
1677 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a03ef82d6fb9afe8b0e3bbe24f28dd268">subcase_start</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_subcase_signature">SubcaseSignature</link>&amp;)&#32;=&#32;0;
1678 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;whenever&#32;a&#32;subcase&#32;is&#32;exited&#32;(don&apos;t&#32;cache&#32;pointers&#32;to&#32;the&#32;input)</emphasis>
1679 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a05196dd1a5f7e40e8c734cd2a37d4e1e">subcase_end</link>()&#32;=&#32;0;
1680 
1681 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;for&#32;each&#32;assert&#32;(don&apos;t&#32;cache&#32;pointers&#32;to&#32;the&#32;input)</emphasis>
1682 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a5bb54923eab233bb02f2fcfc178fa12a">log_assert</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_assert_data">AssertData</link>&amp;)&#32;=&#32;0;
1683 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;for&#32;each&#32;message&#32;(don&apos;t&#32;cache&#32;pointers&#32;to&#32;the&#32;input)</emphasis>
1684 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1a2b2cb4f15aa7417d4903a0edc3147018">log_message</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_message_data">MessageData</link>&amp;)&#32;=&#32;0;
1685 
1686 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;when&#32;a&#32;test&#32;case&#32;is&#32;skipped&#32;either&#32;because&#32;it&#32;doesn&apos;t&#32;pass&#32;the&#32;filters,&#32;has&#32;a&#32;skip&#32;decorator</emphasis>
1687 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;isn&apos;t&#32;in&#32;the&#32;execution&#32;range&#32;(between&#32;first&#32;and&#32;last)&#32;(safe&#32;to&#32;cache&#32;a&#32;pointer&#32;to&#32;the&#32;input)</emphasis>
1688 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1ab4ecfea9cd9582aad4a5e90e0c8ba45d">test_case_skipped</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_test_case_data">TestCaseData</link>&amp;)&#32;=&#32;0;
1689 
1690 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;doctest&#32;will&#32;not&#32;be&#32;managing&#32;the&#32;lifetimes&#32;of&#32;reporters&#32;given&#32;to&#32;it&#32;but&#32;this&#32;would&#32;still&#32;be&#32;nice&#32;to&#32;have</emphasis>
1691 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter_1ae772182e42f2a3b163497f2b8bc3636d">~IReporter</link>();
1692 
1693 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;obtain&#32;all&#32;currently&#32;active&#32;contexts&#32;and&#32;stringify&#32;them&#32;if&#32;one&#32;wishes&#32;to&#32;do&#32;so</emphasis>
1694 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter_1a7d520de46d9104c0eeb02375fabad32d">get_num_active_contexts</link>();
1695 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_i_context_scope">IContextScope</link>*&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_structdoctest_1_1_i_reporter_1ad34f2f1954ff43b6e8fe2dc595cec53a">get_active_contexts</link>();
1696 
1697 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;iterate&#32;through&#32;contexts&#32;which&#32;have&#32;been&#32;stringified&#32;automatically&#32;in&#32;their&#32;destructors&#32;when&#32;an&#32;exception&#32;has&#32;been&#32;thrown</emphasis>
1698 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter_1ac8b96fef046edc609a3374a61b84797d">get_num_stringified_contexts</link>();
1699 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classdoctest_1_1_string">String</link>*&#32;<link linkend="_structdoctest_1_1_i_reporter_1a6db31e528efe08c9bc9b4037a2143c3a">get_stringified_contexts</link>();
1700 };
1701 
1702 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
1703 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_structdoctest_1_1_i_reporter">IReporter</link>*&#32;(*reporterCreatorFunc)(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options">ContextOptions</link>&amp;);
1704 
1705 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a9c16ffc635ec47f07797d21ede26b1a5">DOCTEST_INTERFACE</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a828e011bb6028ab94eb14a3c7d8bd2c4">registerReporterImpl</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;prio,&#32;<link linkend="_namespacedoctest_1_1detail_1a431bc1f18ee82461ef2cf98aad891526">reporterCreatorFunc</link>&#32;c,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isReporter);
1706 
1707 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Reporter&gt;
1708 &#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter">IReporter</link>*&#32;<link linkend="_namespacedoctest_1_1detail_1ac78a52271e895d8485356c4516a18685">reporterCreator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structdoctest_1_1_context_options">ContextOptions</link>&amp;&#32;o)&#32;{
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Reporter(o);
1710 &#32;&#32;&#32;&#32;}
1711 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
1712 
1713 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Reporter&gt;
1714 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1a9e878a811f7bf0a615b3a39de3004673">registerReporter</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;priority,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isReporter)&#32;{
1715 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a828e011bb6028ab94eb14a3c7d8bd2c4">detail::registerReporterImpl</link>(name,&#32;priority,&#32;detail::reporterCreator&lt;Reporter&gt;,&#32;isReporter);
1716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1717 }
1718 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest</emphasis>
1719 
1720 <emphasis role="comment">//&#32;if&#32;registering&#32;is&#32;not&#32;disabled</emphasis>
1721 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_DISABLE)</emphasis>
1722 
1723 <emphasis role="comment">//&#32;common&#32;code&#32;in&#32;asserts&#32;-&#32;for&#32;convenience</emphasis>
1724 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_LOG_AND_REACT(b)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1725 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(b.log())&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1726 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_BREAK_INTO_DEBUGGER();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1727 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;b.react()</emphasis>
1728 
1729 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</emphasis>
1730 <emphasis role="preprocessor">#define&#32;DOCTEST_WRAP_IN_TRY(x)&#32;x;</emphasis>
1731 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</emphasis>
1732 <emphasis role="preprocessor">#define&#32;DOCTEST_WRAP_IN_TRY(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1733 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;try&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1734 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1735 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;catch(...)&#32;{&#32;_DOCTEST_RB.translateException();&#32;}</emphasis>
1736 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS</emphasis>
1737 
1738 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</emphasis>
1739 <emphasis role="preprocessor">#define&#32;DOCTEST_CAST_TO_VOID(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1740 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wuseless-cast&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1741 &#32;&#32;&#32;&#32;static_cast&lt;void&gt;(__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1742 &#32;&#32;&#32;&#32;DOCTEST_GCC_SUPPRESS_WARNING_POP
1743 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</emphasis>
1744 <emphasis role="preprocessor">#define&#32;DOCTEST_CAST_TO_VOID(...)&#32;__VA_ARGS__;</emphasis>
1745 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS</emphasis>
1746 
1747 <emphasis role="comment">//&#32;registers&#32;the&#32;test&#32;by&#32;initializing&#32;a&#32;dummy&#32;var&#32;with&#32;a&#32;function</emphasis>
1748 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_FUNCTION(global_prefix,&#32;f,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1749 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;global_prefix&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1750 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::regTest(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1751 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::TestCase(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1752 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f,&#32;__FILE__,&#32;__LINE__,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1753 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest_detail_test_suite_ns::getCurrentTestSuite())&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1754 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decorators);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1755 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()</emphasis>
1756 
1757 <emphasis role="preprocessor">#define&#32;DOCTEST_IMPLEMENT_FIXTURE(der,&#32;base,&#32;func,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1758 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1759 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;der&#32;:&#32;public&#32;base&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1760 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1761 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;void&#32;f();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1762 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1763 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;void&#32;func()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1764 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;der&#32;v;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1765 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v.f();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1766 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1767 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY,&#32;func,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1768 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1769 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;DOCTEST_NOINLINE&#32;void&#32;der::f()</emphasis>
1770 
1771 <emphasis role="preprocessor">#define&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION(f,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1772 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;f();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1773 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY,&#32;f,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1774 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;f()</emphasis>
1775 
1776 <emphasis role="preprocessor">#define&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f,&#32;proxy,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1777 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;doctest::detail::funcType&#32;proxy()&#32;{&#32;return&#32;f;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1778 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_REGISTER_FUNCTION(inline&#32;const,&#32;proxy(),&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1779 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;f()</emphasis>
1780 
1781 <emphasis role="comment">//&#32;for&#32;registering&#32;tests</emphasis>
1782 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE(decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1783 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;decorators)</emphasis>
1784 
1785 <emphasis role="comment">//&#32;for&#32;registering&#32;tests&#32;in&#32;classes&#32;-&#32;requires&#32;C++17&#32;for&#32;inline&#32;variables!</emphasis>
1786 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;||&#32;(DOCTEST_MSVC&#32;&gt;=&#32;DOCTEST_COMPILER(19,&#32;12,&#32;0)&#32;&amp;&amp;&#32;_MSVC_LANG&#32;&gt;=&#32;201703L)</emphasis>
1787 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_CLASS(decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1788 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1789 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_PROXY_),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1790 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decorators)</emphasis>
1791 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_TEST_CASE_CLASS</emphasis>
1792 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_CLASS(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1793 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER</emphasis>
1794 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_TEST_CASE_CLASS</emphasis>
1795 
1796 <emphasis role="comment">//&#32;for&#32;registering&#32;tests&#32;with&#32;a&#32;fixture</emphasis>
1797 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_FIXTURE(c,&#32;decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1798 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(_DOCTEST_ANON_CLASS_),&#32;c,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1799 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;decorators)</emphasis>
1800 
1801 <emphasis role="comment">//&#32;for&#32;converting&#32;types&#32;to&#32;strings&#32;without&#32;the&#32;&lt;typeinfo&gt;&#32;header&#32;and&#32;demangling</emphasis>
1802 <emphasis role="preprocessor">#define&#32;DOCTEST_TYPE_TO_STRING_IMPL(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1803 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1804 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;const&#32;char*&#32;type_to_string&lt;__VA_ARGS__&gt;()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1805 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;&quot;&lt;&quot;</emphasis>&#32;#__VA_ARGS__&#32;&quot;&gt;&quot;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1806 &#32;&#32;&#32;&#32;}
1807 <emphasis role="preprocessor">#define&#32;DOCTEST_TYPE_TO_STRING(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1808 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;doctest&#32;{&#32;namespace&#32;detail&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1809 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_TYPE_TO_STRING_IMPL(__VA_ARGS__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1810 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1812 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1813 
1814 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,&#32;T,&#32;iter,&#32;func)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1815 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1816 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;func();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1817 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1818 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;Tuple&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1819 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;iter;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1820 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;Type,&#32;typename...&#32;Rest&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1821 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;iter&lt;std::tuple&lt;Type,&#32;Rest...&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1822 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1823 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter(const&#32;char*&#32;file,&#32;unsigned&#32;line,&#32;int&#32;index)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1824 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::regTest(doctest::detail::TestCase(func&lt;Type&gt;,&#32;file,&#32;line,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1825 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest_detail_test_suite_ns::getCurrentTestSuite(),&#32;&#32;&#32;\</emphasis>
1826 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::type_to_string&lt;Type&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1827 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int(line)&#32;*&#32;1000&#32;+&#32;index)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1828 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;dec);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1829 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter&lt;std::tuple&lt;Rest...&gt;&gt;(file,&#32;line,&#32;index&#32;+&#32;1);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1830 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1831 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1832 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1833 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;iter&lt;std::tuple&lt;&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1834 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1835 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter(const&#32;char*,&#32;unsigned,&#32;int)&#32;{}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1836 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1837 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1838 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1839 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;func()</emphasis>
1840 
1841 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec,&#32;T,&#32;id)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1842 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,&#32;T,&#32;DOCTEST_CAT(id,&#32;ITERATOR),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1843 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_))</emphasis>
1844 
1845 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,&#32;anon,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1846 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon,&#32;DUMMY))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1847 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::instantiationHelper(DOCTEST_CAT(id,&#32;ITERATOR)&lt;__VA_ARGS__&gt;(__FILE__,&#32;__LINE__,&#32;0));\</emphasis>
1848 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()</emphasis>
1849 
1850 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1851 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_),&#32;std::tuple&lt;__VA_ARGS__&gt;)&#32;\</emphasis>
1852 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1853 
1854 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_APPLY(id,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1855 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id,&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_),&#32;__VA_ARGS__)&#32;\</emphasis>
1856 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1857 
1858 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec,&#32;T,&#32;anon,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1859 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec,&#32;T,&#32;DOCTEST_CAT(anon,&#32;ITERATOR),&#32;anon);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1860 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon,&#32;anon,&#32;std::tuple&lt;__VA_ARGS__&gt;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1861 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1862 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;void&#32;anon()</emphasis>
1863 
1864 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE(dec,&#32;T,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1865 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec,&#32;T,&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_),&#32;__VA_ARGS__)</emphasis>
1866 
1867 <emphasis role="comment">//&#32;for&#32;subcases</emphasis>
1868 <emphasis role="preprocessor">#define&#32;DOCTEST_SUBCASE(name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1869 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(const&#32;doctest::detail::Subcase&#32;&amp;&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_SUBCASE_)&#32;DOCTEST_UNUSED&#32;=&#32;\</emphasis>
1870 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::Subcase(name,&#32;__FILE__,&#32;__LINE__))</emphasis>
1871 
1872 <emphasis role="comment">//&#32;for&#32;grouping&#32;tests&#32;in&#32;test&#32;suites&#32;by&#32;using&#32;code&#32;blocks</emphasis>
1873 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE_IMPL(decorators,&#32;ns_name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1874 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;ns_name&#32;{&#32;namespace&#32;doctest_detail_test_suite_ns&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1875 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;DOCTEST_NOINLINE&#32;doctest::detail::TestSuite&amp;&#32;getCurrentTestSuite()&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1876 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1877 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Wexit-time-destructors&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;doctest::detail::TestSuite&#32;data;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;bool&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inited&#32;=&#32;false;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_POP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(!inited)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data*&#32;decorators;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inited&#32;=&#32;true;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;data;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1889 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1890 &#32;&#32;&#32;&#32;namespace&#32;ns_name
1891 
1892 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE(decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1893 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_TEST_SUITE_IMPL(decorators,&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_SUITE_))</emphasis>
1894 
1895 <emphasis role="comment">//&#32;for&#32;starting&#32;a&#32;testsuite&#32;block</emphasis>
1896 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE_BEGIN(decorators)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1897 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1898 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::setTestSuite(doctest::detail::TestSuite()&#32;*&#32;decorators);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1899 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1900 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1901 
1902 <emphasis role="comment">//&#32;for&#32;ending&#32;a&#32;testsuite&#32;block</emphasis>
1903 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1904 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1905 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::setTestSuite(doctest::detail::TestSuite()&#32;*&#32;&quot;&quot;</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1906 &#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1907 &#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)
1908 
1909 <emphasis role="comment">//&#32;for&#32;registering&#32;exception&#32;translators</emphasis>
1910 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName,&#32;signature)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1911 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;doctest::String&#32;translatorName(signature);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1912 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1913 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::registerExceptionTranslator(translatorName);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1914 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1915 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doctest::String&#32;translatorName(signature)</emphasis>
1916 
1917 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1918 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_),&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1919 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;signature)</emphasis>
1920 
1921 <emphasis role="comment">//&#32;for&#32;registering&#32;reporters</emphasis>
1922 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_REPORTER(name,&#32;priority,&#32;reporter)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1923 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1924 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::registerReporter&lt;reporter&gt;(name,&#32;priority,&#32;true);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1925 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1926 
1927 <emphasis role="comment">//&#32;for&#32;registering&#32;listeners</emphasis>
1928 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_LISTENER(name,&#32;priority,&#32;reporter)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1929 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_))&#32;=&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1930 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::registerReporter&lt;reporter&gt;(name,&#32;priority,&#32;false);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1931 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_GLOBAL_NO_WARNINGS_END()&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
1932 
1933 <emphasis role="comment">//&#32;for&#32;logging</emphasis>
1934 <emphasis role="preprocessor">#define&#32;DOCTEST_INFO(expression)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1935 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_),&#32;DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_),&#32;&#32;\</emphasis>
1936 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_),&#32;expression)</emphasis>
1937 
1938 <emphasis role="preprocessor">#define&#32;DOCTEST_INFO_IMPL(lambda_name,&#32;mb_name,&#32;s_name,&#32;expression)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1939 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4626)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1940 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;auto&#32;lambda_name&#32;=&#32;[&amp;](std::ostream*&#32;s_name)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1941 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::MessageBuilder&#32;mb_name(__FILE__,&#32;__LINE__,&#32;doctest::assertType::is_warn);&#32;\</emphasis>
1942 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb_name.m_stream&#32;=&#32;s_name;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1943 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb_name&#32;&lt;&lt;&#32;expression;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1944 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1945 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_MSVC_SUPPRESS_WARNING_POP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1946 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;auto&#32;DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_)&#32;=&#32;doctest::detail::MakeContextScope(lambda_name)</emphasis>
1947 
1948 <emphasis role="preprocessor">#define&#32;DOCTEST_CAPTURE(x)&#32;DOCTEST_INFO(#x&#32;&quot;&#32;:=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;x)
1949 
1950 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_AT_IMPL(type,&#32;file,&#32;line,&#32;mb,&#32;x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1951 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1952 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::MessageBuilder&#32;mb(file,&#32;line,&#32;doctest::assertType::type);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1953 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mb&#32;&lt;&lt;&#32;x;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1954 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(mb);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1955 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
1956 
1957 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1958 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_MESSAGE_AT(file,&#32;line,&#32;x)&#32;DOCTEST_ADD_AT_IMPL(is_warn,&#32;file,&#32;line,&#32;DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_),&#32;x)</emphasis>
1959 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_FAIL_CHECK_AT(file,&#32;line,&#32;x)&#32;DOCTEST_ADD_AT_IMPL(is_check,&#32;file,&#32;line,&#32;DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_),&#32;x)</emphasis>
1960 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_FAIL_AT(file,&#32;line,&#32;x)&#32;DOCTEST_ADD_AT_IMPL(is_require,&#32;file,&#32;line,&#32;DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_),&#32;x)</emphasis>
1961 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1962 
1963 <emphasis role="preprocessor">#define&#32;DOCTEST_MESSAGE(x)&#32;DOCTEST_ADD_MESSAGE_AT(__FILE__,&#32;__LINE__,&#32;x)</emphasis>
1964 <emphasis role="preprocessor">#define&#32;DOCTEST_FAIL_CHECK(x)&#32;DOCTEST_ADD_FAIL_CHECK_AT(__FILE__,&#32;__LINE__,&#32;x)</emphasis>
1965 <emphasis role="preprocessor">#define&#32;DOCTEST_FAIL(x)&#32;DOCTEST_ADD_FAIL_AT(__FILE__,&#32;__LINE__,&#32;x)</emphasis>
1966 
1967 <emphasis role="preprocessor">#define&#32;DOCTEST_TO_LVALUE(...)&#32;__VA_ARGS__&#32;</emphasis><emphasis role="comment">//&#32;Not&#32;removed&#32;to&#32;keep&#32;backwards&#32;compatibility.</emphasis>
1968 
1969 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
1970 
1971 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_IMPLEMENT_2(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1972 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Woverloaded-shift-op-parentheses&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1973 &#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;#__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1975 &#32;&#32;&#32;&#32;DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.setResult(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;__VA_ARGS__))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1978 &#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1979 &#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP
1980 
1981 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_IMPLEMENT_1(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1982 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1983 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_IMPLEMENT_2(assert_type,&#32;__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1984 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
1985 
1986 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
1987 
1988 <emphasis role="comment">//&#32;necessary&#32;for&#32;&lt;ASSERT&gt;_MESSAGE</emphasis>
1989 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_IMPLEMENT_2&#32;DOCTEST_ASSERT_IMPLEMENT_1</emphasis>
1990 
1991 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_IMPLEMENT_1(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1992 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(&quot;-Woverloaded-shift-op-parentheses&quot;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1993 &#32;&#32;&#32;&#32;doctest::detail::decomp_assert(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::assertType::assert_type,&#32;__FILE__,&#32;__LINE__,&#32;#__VA_ARGS__,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;__VA_ARGS__)&#32;DOCTEST_CLANG_SUPPRESS_WARNING_POP
1997 
1998 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
1999 
2000 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN,&#32;__VA_ARGS__)</emphasis>
2001 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK,&#32;__VA_ARGS__)</emphasis>
2002 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE,&#32;__VA_ARGS__)</emphasis>
2003 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_FALSE(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE,&#32;__VA_ARGS__)</emphasis>
2004 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_FALSE(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE,&#32;__VA_ARGS__)</emphasis>
2005 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_FALSE(...)&#32;DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE,&#32;__VA_ARGS__)</emphasis>
2006 
2007 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
2008 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN,&#32;cond);&#32;}&#32;while(false)</emphasis>
2009 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK,&#32;cond);&#32;}&#32;while(false)</emphasis>
2010 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE,&#32;cond);&#32;}&#32;while(false)</emphasis>
2011 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_FALSE_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE,&#32;cond);&#32;}&#32;while(false)</emphasis>
2012 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_FALSE_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE,&#32;cond);&#32;}&#32;while(false)</emphasis>
2013 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_FALSE_MESSAGE(cond,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE,&#32;cond);&#32;}&#32;while(false)</emphasis>
2014 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
2015 
2016 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;assert_type,&#32;message,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2017 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2018 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(!doctest::getContextOptions()-&gt;no_throw)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2019 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;\</emphasis>
2020 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;#expr,&#32;#__VA_ARGS__,&#32;message);&#32;&#32;&#32;&#32;\</emphasis>
2021 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2022 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CAST_TO_VOID(expr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2023 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;catch(const&#32;doctest::detail::remove_const&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2024 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::remove_reference&lt;__VA_ARGS__&gt;::type&gt;::type&amp;)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2025 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DOCTEST_RB.translateException();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2026 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DOCTEST_RB.m_threw_as&#32;=&#32;true;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2027 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;catch(...)&#32;{&#32;_DOCTEST_RB.translateException();&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2028 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2029 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2030 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
2031 
2032 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_THROWS_WITH(expr,&#32;expr_str,&#32;assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(!doctest::getContextOptions()-&gt;no_throw)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2035 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;\</emphasis>
2036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;expr_str,&#32;&quot;&quot;</emphasis>,&#32;__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CAST_TO_VOID(expr)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;catch(...)&#32;{&#32;_DOCTEST_RB.translateException();&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
2042 &#32;&#32;&#32;&#32;}&#32;while(false)
2043 
2044 <emphasis role="preprocessor">#define&#32;DOCTEST_ASSERT_NOTHROW(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2045 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2046 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;&#32;&#32;&#32;&#32;\</emphasis>
2047 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;#__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2048 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;try&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2049 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CAST_TO_VOID(__VA_ARGS__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2050 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;catch(...)&#32;{&#32;_DOCTEST_RB.translateException();&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2051 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2052 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
2053 
2054 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
2055 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS(...)&#32;DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),&#32;#__VA_ARGS__,&#32;DT_WARN_THROWS,&#32;&quot;&quot;</emphasis>)
2056 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS(...)&#32;DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),&#32;#__VA_ARGS__,&#32;DT_CHECK_THROWS,&#32;&quot;&quot;</emphasis>)
2057 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS(...)&#32;DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__),&#32;#__VA_ARGS__,&#32;DT_REQUIRE_THROWS,&#32;&quot;&quot;</emphasis>)
2058 
2059 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_WARN_THROWS_AS,&#32;&quot;&quot;</emphasis>,&#32;__VA_ARGS__)
2060 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_CHECK_THROWS_AS,&#32;&quot;&quot;</emphasis>,&#32;__VA_ARGS__)
2061 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_REQUIRE_THROWS_AS,&#32;&quot;&quot;</emphasis>,&#32;__VA_ARGS__)
2062 
2063 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_WITH(expr,&#32;#expr,&#32;DT_WARN_THROWS_WITH,&#32;__VA_ARGS__)</emphasis>
2064 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_WITH(expr,&#32;#expr,&#32;DT_CHECK_THROWS_WITH,&#32;__VA_ARGS__)</emphasis>
2065 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH(expr,&#32;...)&#32;DOCTEST_ASSERT_THROWS_WITH(expr,&#32;#expr,&#32;DT_REQUIRE_THROWS_WITH,&#32;__VA_ARGS__)</emphasis>
2066 
2067 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS(expr,&#32;message,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_WARN_THROWS_WITH_AS,&#32;message,&#32;__VA_ARGS__)</emphasis>
2068 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS(expr,&#32;message,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_CHECK_THROWS_WITH_AS,&#32;message,&#32;__VA_ARGS__)</emphasis>
2069 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS(expr,&#32;message,&#32;...)&#32;DOCTEST_ASSERT_THROWS_AS(expr,&#32;DT_REQUIRE_THROWS_WITH_AS,&#32;message,&#32;__VA_ARGS__)</emphasis>
2070 
2071 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW(...)&#32;DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW,&#32;__VA_ARGS__)</emphasis>
2072 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW(...)&#32;DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW,&#32;__VA_ARGS__)</emphasis>
2073 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW(...)&#32;DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW,&#32;__VA_ARGS__)</emphasis>
2074 
2075 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_WARN_THROWS(expr);&#32;}&#32;while(false)</emphasis>
2076 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_CHECK_THROWS(expr);&#32;}&#32;while(false)</emphasis>
2077 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_REQUIRE_THROWS(expr);&#32;}&#32;while(false)</emphasis>
2078 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_WARN_THROWS_AS(expr,&#32;ex);&#32;}&#32;while(false)</emphasis>
2079 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_CHECK_THROWS_AS(expr,&#32;ex);&#32;}&#32;while(false)</emphasis>
2080 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_REQUIRE_THROWS_AS(expr,&#32;ex);&#32;}&#32;while(false)</emphasis>
2081 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_WARN_THROWS_WITH(expr,&#32;with);&#32;}&#32;while(false)</emphasis>
2082 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_CHECK_THROWS_WITH(expr,&#32;with);&#32;}&#32;while(false)</emphasis>
2083 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_REQUIRE_THROWS_WITH(expr,&#32;with);&#32;}&#32;while(false)</emphasis>
2084 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_WARN_THROWS_WITH_AS(expr,&#32;with,&#32;ex);&#32;}&#32;while(false)</emphasis>
2085 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_CHECK_THROWS_WITH_AS(expr,&#32;with,&#32;ex);&#32;}&#32;while(false)</emphasis>
2086 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_REQUIRE_THROWS_WITH_AS(expr,&#32;with,&#32;ex);&#32;}&#32;while(false)</emphasis>
2087 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_WARN_NOTHROW(expr);&#32;}&#32;while(false)</emphasis>
2088 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_CHECK_NOTHROW(expr);&#32;}&#32;while(false)</emphasis>
2089 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,&#32;msg)&#32;do&#32;{&#32;DOCTEST_INFO(msg);&#32;DOCTEST_REQUIRE_NOTHROW(expr);&#32;}&#32;while(false)</emphasis>
2090 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
2091 
2092 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
2093 
2094 <emphasis role="preprocessor">#define&#32;DOCTEST_BINARY_ASSERT(assert_type,&#32;comp,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2095 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2096 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;&#32;&#32;&#32;&#32;\</emphasis>
2097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;#__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2098 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WRAP_IN_TRY(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2099 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DOCTEST_RB.binary_assert&lt;doctest::detail::binaryAssertComparison::comp&gt;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2100 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__VA_ARGS__))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
2103 
2104 <emphasis role="preprocessor">#define&#32;DOCTEST_UNARY_ASSERT(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2105 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;do&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2106 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::detail::ResultBuilder&#32;_DOCTEST_RB(doctest::assertType::assert_type,&#32;__FILE__,&#32;&#32;&#32;&#32;&#32;\</emphasis>
2107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__LINE__,&#32;#__VA_ARGS__);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2108 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.unary_assert(__VA_ARGS__))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2109 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2110 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;while(false)</emphasis>
2111 
2112 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
2113 
2114 <emphasis role="preprocessor">#define&#32;DOCTEST_BINARY_ASSERT(assert_type,&#32;comparison,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2115 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doctest::detail::binary_assert&lt;doctest::detail::binaryAssertComparison::comparison&gt;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2116 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;doctest::assertType::assert_type,&#32;__FILE__,&#32;__LINE__,&#32;#__VA_ARGS__,&#32;__VA_ARGS__)</emphasis>
2117 
2118 <emphasis role="preprocessor">#define&#32;DOCTEST_UNARY_ASSERT(assert_type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;doctest::detail::unary_assert(doctest::assertType::assert_type,&#32;__FILE__,&#32;__LINE__,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#__VA_ARGS__,&#32;__VA_ARGS__)</emphasis>
2121 
2122 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_SUPER_FAST_ASSERTS</emphasis>
2123 
2124 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_EQ(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_EQ,&#32;eq,&#32;__VA_ARGS__)</emphasis>
2125 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_EQ(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_EQ,&#32;eq,&#32;__VA_ARGS__)</emphasis>
2126 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_EQ(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ,&#32;eq,&#32;__VA_ARGS__)</emphasis>
2127 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NE(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_NE,&#32;ne,&#32;__VA_ARGS__)</emphasis>
2128 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NE(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_NE,&#32;ne,&#32;__VA_ARGS__)</emphasis>
2129 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NE(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE,&#32;ne,&#32;__VA_ARGS__)</emphasis>
2130 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_GT(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_GT,&#32;gt,&#32;__VA_ARGS__)</emphasis>
2131 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_GT(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_GT,&#32;gt,&#32;__VA_ARGS__)</emphasis>
2132 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_GT(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT,&#32;gt,&#32;__VA_ARGS__)</emphasis>
2133 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_LT(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_LT,&#32;lt,&#32;__VA_ARGS__)</emphasis>
2134 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_LT(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_LT,&#32;lt,&#32;__VA_ARGS__)</emphasis>
2135 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_LT(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT,&#32;lt,&#32;__VA_ARGS__)</emphasis>
2136 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_GE(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_GE,&#32;ge,&#32;__VA_ARGS__)</emphasis>
2137 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_GE(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_GE,&#32;ge,&#32;__VA_ARGS__)</emphasis>
2138 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_GE(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE,&#32;ge,&#32;__VA_ARGS__)</emphasis>
2139 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_LE(...)&#32;DOCTEST_BINARY_ASSERT(DT_WARN_LE,&#32;le,&#32;__VA_ARGS__)</emphasis>
2140 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_LE(...)&#32;DOCTEST_BINARY_ASSERT(DT_CHECK_LE,&#32;le,&#32;__VA_ARGS__)</emphasis>
2141 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_LE(...)&#32;DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE,&#32;le,&#32;__VA_ARGS__)</emphasis>
2142 
2143 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_UNARY(...)&#32;DOCTEST_UNARY_ASSERT(DT_WARN_UNARY,&#32;__VA_ARGS__)</emphasis>
2144 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_UNARY(...)&#32;DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY,&#32;__VA_ARGS__)</emphasis>
2145 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_UNARY(...)&#32;DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY,&#32;__VA_ARGS__)</emphasis>
2146 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_UNARY_FALSE(...)&#32;DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE,&#32;__VA_ARGS__)</emphasis>
2147 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_UNARY_FALSE(...)&#32;DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE,&#32;__VA_ARGS__)</emphasis>
2148 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_UNARY_FALSE(...)&#32;DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE,&#32;__VA_ARGS__)</emphasis>
2149 
2150 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
2151 
2152 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS</emphasis>
2153 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS</emphasis>
2154 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS</emphasis>
2155 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_AS</emphasis>
2156 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_AS</emphasis>
2157 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_AS</emphasis>
2158 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_WITH</emphasis>
2159 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_WITH</emphasis>
2160 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_WITH</emphasis>
2161 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_WITH_AS</emphasis>
2162 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_WITH_AS</emphasis>
2163 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_WITH_AS</emphasis>
2164 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_NOTHROW</emphasis>
2165 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_NOTHROW</emphasis>
2166 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_NOTHROW</emphasis>
2167 
2168 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_MESSAGE</emphasis>
2169 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_MESSAGE</emphasis>
2170 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_MESSAGE</emphasis>
2171 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_AS_MESSAGE</emphasis>
2172 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_AS_MESSAGE</emphasis>
2173 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_AS_MESSAGE</emphasis>
2174 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_WITH_MESSAGE</emphasis>
2175 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_WITH_MESSAGE</emphasis>
2176 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_WITH_MESSAGE</emphasis>
2177 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_THROWS_WITH_AS_MESSAGE</emphasis>
2178 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE</emphasis>
2179 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE</emphasis>
2180 <emphasis role="preprocessor">#undef&#32;DOCTEST_WARN_NOTHROW_MESSAGE</emphasis>
2181 <emphasis role="preprocessor">#undef&#32;DOCTEST_CHECK_NOTHROW_MESSAGE</emphasis>
2182 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_NOTHROW_MESSAGE</emphasis>
2183 
2184 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</emphasis>
2185 
2186 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS(...)&#32;((void)0)</emphasis>
2187 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS(...)&#32;((void)0)</emphasis>
2188 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS(...)&#32;((void)0)</emphasis>
2189 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2190 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2191 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2192 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2193 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2194 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2195 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2196 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2197 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2198 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW(...)&#32;((void)0)</emphasis>
2199 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW(...)&#32;((void)0)</emphasis>
2200 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW(...)&#32;((void)0)</emphasis>
2201 
2202 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2203 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2204 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2205 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2206 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2207 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2208 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2209 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2210 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2211 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2212 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2213 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2214 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2215 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2216 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2217 
2218 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</emphasis>
2219 
2220 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE</emphasis>
2221 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_FALSE</emphasis>
2222 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_MESSAGE</emphasis>
2223 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_FALSE_MESSAGE</emphasis>
2224 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_EQ</emphasis>
2225 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_NE</emphasis>
2226 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_GT</emphasis>
2227 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_LT</emphasis>
2228 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_GE</emphasis>
2229 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_LE</emphasis>
2230 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_UNARY</emphasis>
2231 <emphasis role="preprocessor">#undef&#32;DOCTEST_REQUIRE_UNARY_FALSE</emphasis>
2232 
2233 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS</emphasis>
2234 
2235 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
2236 
2237 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
2238 <emphasis role="comment">//&#32;==&#32;WHAT&#32;FOLLOWS&#32;IS&#32;VERSIONS&#32;OF&#32;THE&#32;MACROS&#32;THAT&#32;DO&#32;NOT&#32;DO&#32;ANY&#32;REGISTERING!&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==</emphasis>
2239 <emphasis role="comment">//&#32;==&#32;THIS&#32;CAN&#32;BE&#32;ENABLED&#32;BY&#32;DEFINING&#32;DOCTEST_CONFIG_DISABLE&#32;GLOBALLY!&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==</emphasis>
2240 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
2241 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2242 
2243 <emphasis role="preprocessor">#define&#32;DOCTEST_IMPLEMENT_FIXTURE(der,&#32;base,&#32;func,&#32;name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2244 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;namespace&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2245 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2246 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;struct&#32;der&#32;:&#32;public&#32;base&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2247 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;void&#32;f();&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2248 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2249 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2250 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;der&lt;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;::f()</emphasis>
2251 
2252 <emphasis role="preprocessor">#define&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION(f,&#32;name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2253 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2254 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;inline&#32;void&#32;f()</emphasis>
2255 
2256 <emphasis role="comment">//&#32;for&#32;registering&#32;tests</emphasis>
2257 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE(name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;name)</emphasis>
2259 
2260 <emphasis role="comment">//&#32;for&#32;registering&#32;tests&#32;in&#32;classes</emphasis>
2261 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_CLASS(name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2262 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;name)</emphasis>
2263 
2264 <emphasis role="comment">//&#32;for&#32;registering&#32;tests&#32;with&#32;a&#32;fixture</emphasis>
2265 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_FIXTURE(x,&#32;name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2266 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(_DOCTEST_ANON_CLASS_),&#32;x,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2267 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),&#32;name)</emphasis>
2268 
2269 <emphasis role="comment">//&#32;for&#32;converting&#32;types&#32;to&#32;strings&#32;without&#32;the&#32;&lt;typeinfo&gt;&#32;header&#32;and&#32;demangling</emphasis>
2270 <emphasis role="preprocessor">#define&#32;DOCTEST_TYPE_TO_STRING(...)&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
2271 <emphasis role="preprocessor">#define&#32;DOCTEST_TYPE_TO_STRING_IMPL(...)</emphasis>
2272 
2273 <emphasis role="comment">//&#32;for&#32;typed&#32;tests</emphasis>
2274 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE(name,&#32;type,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2275 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2276 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_)()</emphasis>
2277 
2278 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name,&#32;type,&#32;id)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2279 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2280 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_)()</emphasis>
2281 
2282 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2283 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
2284 
2285 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_APPLY(id,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2286 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
2287 
2288 <emphasis role="comment">//&#32;for&#32;subcases</emphasis>
2289 <emphasis role="preprocessor">#define&#32;DOCTEST_SUBCASE(name)</emphasis>
2290 
2291 <emphasis role="comment">//&#32;for&#32;a&#32;testsuite&#32;block</emphasis>
2292 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE(name)&#32;namespace</emphasis>
2293 
2294 <emphasis role="comment">//&#32;for&#32;starting&#32;a&#32;testsuite&#32;block</emphasis>
2295 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE_BEGIN(name)&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
2296 
2297 <emphasis role="comment">//&#32;for&#32;ending&#32;a&#32;testsuite&#32;block</emphasis>
2298 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_SUITE_END&#32;typedef&#32;int&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)</emphasis>
2299 
2300 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2301 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;DOCTEST_UNUSED_TEMPLATE_TYPE&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2302 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;inline&#32;doctest::String&#32;DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_)(signature)</emphasis>
2303 
2304 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_REPORTER(name,&#32;priority,&#32;reporter)</emphasis>
2305 <emphasis role="preprocessor">#define&#32;DOCTEST_REGISTER_LISTENER(name,&#32;priority,&#32;reporter)</emphasis>
2306 
2307 <emphasis role="preprocessor">#define&#32;DOCTEST_INFO(x)&#32;((void)0)</emphasis>
2308 <emphasis role="preprocessor">#define&#32;DOCTEST_CAPTURE(x)&#32;((void)0)</emphasis>
2309 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_MESSAGE_AT(file,&#32;line,&#32;x)&#32;((void)0)</emphasis>
2310 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_FAIL_CHECK_AT(file,&#32;line,&#32;x)&#32;((void)0)</emphasis>
2311 <emphasis role="preprocessor">#define&#32;DOCTEST_ADD_FAIL_AT(file,&#32;line,&#32;x)&#32;((void)0)</emphasis>
2312 <emphasis role="preprocessor">#define&#32;DOCTEST_MESSAGE(x)&#32;((void)0)</emphasis>
2313 <emphasis role="preprocessor">#define&#32;DOCTEST_FAIL_CHECK(x)&#32;((void)0)</emphasis>
2314 <emphasis role="preprocessor">#define&#32;DOCTEST_FAIL(x)&#32;((void)0)</emphasis>
2315 
2316 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN(...)&#32;((void)0)</emphasis>
2317 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK(...)&#32;((void)0)</emphasis>
2318 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE(...)&#32;((void)0)</emphasis>
2319 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_FALSE(...)&#32;((void)0)</emphasis>
2320 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_FALSE(...)&#32;((void)0)</emphasis>
2321 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_FALSE(...)&#32;((void)0)</emphasis>
2322 
2323 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2324 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2325 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2326 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_FALSE_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2327 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_FALSE_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2328 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_FALSE_MESSAGE(cond,&#32;msg)&#32;((void)0)</emphasis>
2329 
2330 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS(...)&#32;((void)0)</emphasis>
2331 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS(...)&#32;((void)0)</emphasis>
2332 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS(...)&#32;((void)0)</emphasis>
2333 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2334 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2335 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS(expr,&#32;...)&#32;((void)0)</emphasis>
2336 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2337 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2338 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH(expr,&#32;...)&#32;((void)0)</emphasis>
2339 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2340 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2341 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS(expr,&#32;with,&#32;...)&#32;((void)0)</emphasis>
2342 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW(...)&#32;((void)0)</emphasis>
2343 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW(...)&#32;((void)0)</emphasis>
2344 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW(...)&#32;((void)0)</emphasis>
2345 
2346 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2347 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2348 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2349 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2350 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2351 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2352 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2353 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2354 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr,&#32;with,&#32;msg)&#32;((void)0)</emphasis>
2355 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2356 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2357 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr,&#32;with,&#32;ex,&#32;msg)&#32;((void)0)</emphasis>
2358 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2359 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2360 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr,&#32;msg)&#32;((void)0)</emphasis>
2361 
2362 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_EQ(...)&#32;((void)0)</emphasis>
2363 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_EQ(...)&#32;((void)0)</emphasis>
2364 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_EQ(...)&#32;((void)0)</emphasis>
2365 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_NE(...)&#32;((void)0)</emphasis>
2366 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_NE(...)&#32;((void)0)</emphasis>
2367 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_NE(...)&#32;((void)0)</emphasis>
2368 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_GT(...)&#32;((void)0)</emphasis>
2369 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_GT(...)&#32;((void)0)</emphasis>
2370 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_GT(...)&#32;((void)0)</emphasis>
2371 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_LT(...)&#32;((void)0)</emphasis>
2372 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_LT(...)&#32;((void)0)</emphasis>
2373 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_LT(...)&#32;((void)0)</emphasis>
2374 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_GE(...)&#32;((void)0)</emphasis>
2375 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_GE(...)&#32;((void)0)</emphasis>
2376 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_GE(...)&#32;((void)0)</emphasis>
2377 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_LE(...)&#32;((void)0)</emphasis>
2378 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_LE(...)&#32;((void)0)</emphasis>
2379 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_LE(...)&#32;((void)0)</emphasis>
2380 
2381 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_UNARY(...)&#32;((void)0)</emphasis>
2382 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_UNARY(...)&#32;((void)0)</emphasis>
2383 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_UNARY(...)&#32;((void)0)</emphasis>
2384 <emphasis role="preprocessor">#define&#32;DOCTEST_WARN_UNARY_FALSE(...)&#32;((void)0)</emphasis>
2385 <emphasis role="preprocessor">#define&#32;DOCTEST_CHECK_UNARY_FALSE(...)&#32;((void)0)</emphasis>
2386 <emphasis role="preprocessor">#define&#32;DOCTEST_REQUIRE_UNARY_FALSE(...)&#32;((void)0)</emphasis>
2387 
2388 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2389 
2390 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
2391 <emphasis role="comment">//&#32;KEPT&#32;FOR&#32;BACKWARDS&#32;COMPATIBILITY&#32;-&#32;FORWARDING&#32;TO&#32;THE&#32;RIGHT&#32;MACROS</emphasis>
2392 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_EQ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_EQ</emphasis>
2393 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_EQ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_EQ</emphasis>
2394 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_EQ&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_EQ</emphasis>
2395 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_NE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_NE</emphasis>
2396 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_NE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_NE</emphasis>
2397 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_NE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_NE</emphasis>
2398 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_GT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_GT</emphasis>
2399 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_GT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_GT</emphasis>
2400 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_GT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_GT</emphasis>
2401 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_LT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_LT</emphasis>
2402 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_LT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_LT</emphasis>
2403 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_LT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_LT</emphasis>
2404 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_GE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_GE</emphasis>
2405 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_GE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_GE</emphasis>
2406 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_GE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_GE</emphasis>
2407 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_LE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_LE</emphasis>
2408 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_LE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_LE</emphasis>
2409 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_LE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_LE</emphasis>
2410 
2411 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_UNARY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_WARN_UNARY</emphasis>
2412 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_UNARY&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_CHECK_UNARY</emphasis>
2413 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_UNARY&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_REQUIRE_UNARY</emphasis>
2414 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_WARN_UNARY_FALSE&#32;&#32;&#32;&#32;DOCTEST_WARN_UNARY_FALSE</emphasis>
2415 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_CHECK_UNARY_FALSE&#32;&#32;&#32;DOCTEST_CHECK_UNARY_FALSE</emphasis>
2416 <emphasis role="preprocessor">#define&#32;DOCTEST_FAST_REQUIRE_UNARY_FALSE&#32;DOCTEST_REQUIRE_UNARY_FALSE</emphasis>
2417 
2418 <emphasis role="preprocessor">#define&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE&#32;DOCTEST_TEST_CASE_TEMPLATE_INVOKE</emphasis>
2419 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
2420 
2421 <emphasis role="comment">//&#32;BDD&#32;style&#32;macros</emphasis>
2422 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
2423 <emphasis role="preprocessor">#define&#32;DOCTEST_SCENARIO(name)&#32;DOCTEST_TEST_CASE(&quot;&#32;&#32;Scenario:&#32;&quot;</emphasis>&#32;name)
2424 <emphasis role="preprocessor">#define&#32;DOCTEST_SCENARIO_CLASS(name)&#32;DOCTEST_TEST_CASE_CLASS(&quot;&#32;&#32;Scenario:&#32;&quot;</emphasis>&#32;name)
2425 <emphasis role="preprocessor">#define&#32;DOCTEST_SCENARIO_TEMPLATE(name,&#32;T,&#32;...)&#32;&#32;DOCTEST_TEST_CASE_TEMPLATE(&quot;&#32;&#32;Scenario:&#32;&quot;</emphasis>&#32;name,&#32;T,&#32;__VA_ARGS__)
2426 <emphasis role="preprocessor">#define&#32;DOCTEST_SCENARIO_TEMPLATE_DEFINE(name,&#32;T,&#32;id)&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE(&quot;&#32;&#32;Scenario:&#32;&quot;</emphasis>&#32;name,&#32;T,&#32;id)
2427 
2428 <emphasis role="preprocessor">#define&#32;DOCTEST_GIVEN(name)&#32;&#32;&#32;&#32;&#32;DOCTEST_SUBCASE(&quot;&#32;&#32;&#32;Given:&#32;&quot;</emphasis>&#32;name)
2429 <emphasis role="preprocessor">#define&#32;DOCTEST_WHEN(name)&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SUBCASE(&quot;&#32;&#32;&#32;&#32;When:&#32;&quot;</emphasis>&#32;name)
2430 <emphasis role="preprocessor">#define&#32;DOCTEST_AND_WHEN(name)&#32;&#32;DOCTEST_SUBCASE(&quot;And&#32;when:&#32;&quot;</emphasis>&#32;name)
2431 <emphasis role="preprocessor">#define&#32;DOCTEST_THEN(name)&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SUBCASE(&quot;&#32;&#32;&#32;&#32;Then:&#32;&quot;</emphasis>&#32;name)
2432 <emphasis role="preprocessor">#define&#32;DOCTEST_AND_THEN(name)&#32;&#32;DOCTEST_SUBCASE(&quot;&#32;&#32;&#32;&#32;&#32;And:&#32;&quot;</emphasis>&#32;name)
2433 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
2434 
2435 <emphasis role="comment">//&#32;==&#32;SHORT&#32;VERSIONS&#32;OF&#32;THE&#32;MACROS</emphasis>
2436 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES)</emphasis>
2437 
2438 <emphasis role="preprocessor">#define&#32;TEST_CASE&#32;DOCTEST_TEST_CASE</emphasis>
2439 <emphasis role="preprocessor">#define&#32;TEST_CASE_CLASS&#32;DOCTEST_TEST_CASE_CLASS</emphasis>
2440 <emphasis role="preprocessor">#define&#32;TEST_CASE_FIXTURE&#32;DOCTEST_TEST_CASE_FIXTURE</emphasis>
2441 <emphasis role="preprocessor">#define&#32;TYPE_TO_STRING&#32;DOCTEST_TYPE_TO_STRING</emphasis>
2442 <emphasis role="preprocessor">#define&#32;TEST_CASE_TEMPLATE&#32;DOCTEST_TEST_CASE_TEMPLATE</emphasis>
2443 <emphasis role="preprocessor">#define&#32;TEST_CASE_TEMPLATE_DEFINE&#32;DOCTEST_TEST_CASE_TEMPLATE_DEFINE</emphasis>
2444 <emphasis role="preprocessor">#define&#32;TEST_CASE_TEMPLATE_INVOKE&#32;DOCTEST_TEST_CASE_TEMPLATE_INVOKE</emphasis>
2445 <emphasis role="preprocessor">#define&#32;TEST_CASE_TEMPLATE_APPLY&#32;DOCTEST_TEST_CASE_TEMPLATE_APPLY</emphasis>
2446 <emphasis role="preprocessor">#define&#32;SUBCASE&#32;DOCTEST_SUBCASE</emphasis>
2447 <emphasis role="preprocessor">#define&#32;TEST_SUITE&#32;DOCTEST_TEST_SUITE</emphasis>
2448 <emphasis role="preprocessor">#define&#32;TEST_SUITE_BEGIN&#32;DOCTEST_TEST_SUITE_BEGIN</emphasis>
2449 <emphasis role="preprocessor">#define&#32;TEST_SUITE_END&#32;DOCTEST_TEST_SUITE_END</emphasis>
2450 <emphasis role="preprocessor">#define&#32;REGISTER_EXCEPTION_TRANSLATOR&#32;DOCTEST_REGISTER_EXCEPTION_TRANSLATOR</emphasis>
2451 <emphasis role="preprocessor">#define&#32;REGISTER_REPORTER&#32;DOCTEST_REGISTER_REPORTER</emphasis>
2452 <emphasis role="preprocessor">#define&#32;REGISTER_LISTENER&#32;DOCTEST_REGISTER_LISTENER</emphasis>
2453 <emphasis role="preprocessor">#define&#32;INFO&#32;DOCTEST_INFO</emphasis>
2454 <emphasis role="preprocessor">#define&#32;CAPTURE&#32;DOCTEST_CAPTURE</emphasis>
2455 <emphasis role="preprocessor">#define&#32;ADD_MESSAGE_AT&#32;DOCTEST_ADD_MESSAGE_AT</emphasis>
2456 <emphasis role="preprocessor">#define&#32;ADD_FAIL_CHECK_AT&#32;DOCTEST_ADD_FAIL_CHECK_AT</emphasis>
2457 <emphasis role="preprocessor">#define&#32;ADD_FAIL_AT&#32;DOCTEST_ADD_FAIL_AT</emphasis>
2458 <emphasis role="preprocessor">#define&#32;MESSAGE&#32;DOCTEST_MESSAGE</emphasis>
2459 <emphasis role="preprocessor">#define&#32;FAIL_CHECK&#32;DOCTEST_FAIL_CHECK</emphasis>
2460 <emphasis role="preprocessor">#define&#32;FAIL&#32;DOCTEST_FAIL</emphasis>
2461 <emphasis role="preprocessor">#define&#32;TO_LVALUE&#32;DOCTEST_TO_LVALUE</emphasis>
2462 
2463 <emphasis role="preprocessor">#define&#32;WARN&#32;DOCTEST_WARN</emphasis>
2464 <emphasis role="preprocessor">#define&#32;WARN_FALSE&#32;DOCTEST_WARN_FALSE</emphasis>
2465 <emphasis role="preprocessor">#define&#32;WARN_THROWS&#32;DOCTEST_WARN_THROWS</emphasis>
2466 <emphasis role="preprocessor">#define&#32;WARN_THROWS_AS&#32;DOCTEST_WARN_THROWS_AS</emphasis>
2467 <emphasis role="preprocessor">#define&#32;WARN_THROWS_WITH&#32;DOCTEST_WARN_THROWS_WITH</emphasis>
2468 <emphasis role="preprocessor">#define&#32;WARN_THROWS_WITH_AS&#32;DOCTEST_WARN_THROWS_WITH_AS</emphasis>
2469 <emphasis role="preprocessor">#define&#32;WARN_NOTHROW&#32;DOCTEST_WARN_NOTHROW</emphasis>
2470 <emphasis role="preprocessor">#define&#32;CHECK&#32;DOCTEST_CHECK</emphasis>
2471 <emphasis role="preprocessor">#define&#32;CHECK_FALSE&#32;DOCTEST_CHECK_FALSE</emphasis>
2472 <emphasis role="preprocessor">#define&#32;CHECK_THROWS&#32;DOCTEST_CHECK_THROWS</emphasis>
2473 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_AS&#32;DOCTEST_CHECK_THROWS_AS</emphasis>
2474 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH&#32;DOCTEST_CHECK_THROWS_WITH</emphasis>
2475 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH_AS&#32;DOCTEST_CHECK_THROWS_WITH_AS</emphasis>
2476 <emphasis role="preprocessor">#define&#32;CHECK_NOTHROW&#32;DOCTEST_CHECK_NOTHROW</emphasis>
2477 <emphasis role="preprocessor">#define&#32;REQUIRE&#32;DOCTEST_REQUIRE</emphasis>
2478 <emphasis role="preprocessor">#define&#32;REQUIRE_FALSE&#32;DOCTEST_REQUIRE_FALSE</emphasis>
2479 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS&#32;DOCTEST_REQUIRE_THROWS</emphasis>
2480 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_AS&#32;DOCTEST_REQUIRE_THROWS_AS</emphasis>
2481 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH&#32;DOCTEST_REQUIRE_THROWS_WITH</emphasis>
2482 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH_AS&#32;DOCTEST_REQUIRE_THROWS_WITH_AS</emphasis>
2483 <emphasis role="preprocessor">#define&#32;REQUIRE_NOTHROW&#32;DOCTEST_REQUIRE_NOTHROW</emphasis>
2484 
2485 <emphasis role="preprocessor">#define&#32;WARN_MESSAGE&#32;DOCTEST_WARN_MESSAGE</emphasis>
2486 <emphasis role="preprocessor">#define&#32;WARN_FALSE_MESSAGE&#32;DOCTEST_WARN_FALSE_MESSAGE</emphasis>
2487 <emphasis role="preprocessor">#define&#32;WARN_THROWS_MESSAGE&#32;DOCTEST_WARN_THROWS_MESSAGE</emphasis>
2488 <emphasis role="preprocessor">#define&#32;WARN_THROWS_AS_MESSAGE&#32;DOCTEST_WARN_THROWS_AS_MESSAGE</emphasis>
2489 <emphasis role="preprocessor">#define&#32;WARN_THROWS_WITH_MESSAGE&#32;DOCTEST_WARN_THROWS_WITH_MESSAGE</emphasis>
2490 <emphasis role="preprocessor">#define&#32;WARN_THROWS_WITH_AS_MESSAGE&#32;DOCTEST_WARN_THROWS_WITH_AS_MESSAGE</emphasis>
2491 <emphasis role="preprocessor">#define&#32;WARN_NOTHROW_MESSAGE&#32;DOCTEST_WARN_NOTHROW_MESSAGE</emphasis>
2492 <emphasis role="preprocessor">#define&#32;CHECK_MESSAGE&#32;DOCTEST_CHECK_MESSAGE</emphasis>
2493 <emphasis role="preprocessor">#define&#32;CHECK_FALSE_MESSAGE&#32;DOCTEST_CHECK_FALSE_MESSAGE</emphasis>
2494 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_MESSAGE&#32;DOCTEST_CHECK_THROWS_MESSAGE</emphasis>
2495 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_AS_MESSAGE&#32;DOCTEST_CHECK_THROWS_AS_MESSAGE</emphasis>
2496 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH_MESSAGE&#32;DOCTEST_CHECK_THROWS_WITH_MESSAGE</emphasis>
2497 <emphasis role="preprocessor">#define&#32;CHECK_THROWS_WITH_AS_MESSAGE&#32;DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE</emphasis>
2498 <emphasis role="preprocessor">#define&#32;CHECK_NOTHROW_MESSAGE&#32;DOCTEST_CHECK_NOTHROW_MESSAGE</emphasis>
2499 <emphasis role="preprocessor">#define&#32;REQUIRE_MESSAGE&#32;DOCTEST_REQUIRE_MESSAGE</emphasis>
2500 <emphasis role="preprocessor">#define&#32;REQUIRE_FALSE_MESSAGE&#32;DOCTEST_REQUIRE_FALSE_MESSAGE</emphasis>
2501 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_MESSAGE&#32;DOCTEST_REQUIRE_THROWS_MESSAGE</emphasis>
2502 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_AS_MESSAGE&#32;DOCTEST_REQUIRE_THROWS_AS_MESSAGE</emphasis>
2503 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH_MESSAGE&#32;DOCTEST_REQUIRE_THROWS_WITH_MESSAGE</emphasis>
2504 <emphasis role="preprocessor">#define&#32;REQUIRE_THROWS_WITH_AS_MESSAGE&#32;DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE</emphasis>
2505 <emphasis role="preprocessor">#define&#32;REQUIRE_NOTHROW_MESSAGE&#32;DOCTEST_REQUIRE_NOTHROW_MESSAGE</emphasis>
2506 
2507 <emphasis role="preprocessor">#define&#32;SCENARIO&#32;DOCTEST_SCENARIO</emphasis>
2508 <emphasis role="preprocessor">#define&#32;SCENARIO_CLASS&#32;DOCTEST_SCENARIO_CLASS</emphasis>
2509 <emphasis role="preprocessor">#define&#32;SCENARIO_TEMPLATE&#32;DOCTEST_SCENARIO_TEMPLATE</emphasis>
2510 <emphasis role="preprocessor">#define&#32;SCENARIO_TEMPLATE_DEFINE&#32;DOCTEST_SCENARIO_TEMPLATE_DEFINE</emphasis>
2511 <emphasis role="preprocessor">#define&#32;GIVEN&#32;DOCTEST_GIVEN</emphasis>
2512 <emphasis role="preprocessor">#define&#32;WHEN&#32;DOCTEST_WHEN</emphasis>
2513 <emphasis role="preprocessor">#define&#32;AND_WHEN&#32;DOCTEST_AND_WHEN</emphasis>
2514 <emphasis role="preprocessor">#define&#32;THEN&#32;DOCTEST_THEN</emphasis>
2515 <emphasis role="preprocessor">#define&#32;AND_THEN&#32;DOCTEST_AND_THEN</emphasis>
2516 
2517 <emphasis role="preprocessor">#define&#32;WARN_EQ&#32;DOCTEST_WARN_EQ</emphasis>
2518 <emphasis role="preprocessor">#define&#32;CHECK_EQ&#32;DOCTEST_CHECK_EQ</emphasis>
2519 <emphasis role="preprocessor">#define&#32;REQUIRE_EQ&#32;DOCTEST_REQUIRE_EQ</emphasis>
2520 <emphasis role="preprocessor">#define&#32;WARN_NE&#32;DOCTEST_WARN_NE</emphasis>
2521 <emphasis role="preprocessor">#define&#32;CHECK_NE&#32;DOCTEST_CHECK_NE</emphasis>
2522 <emphasis role="preprocessor">#define&#32;REQUIRE_NE&#32;DOCTEST_REQUIRE_NE</emphasis>
2523 <emphasis role="preprocessor">#define&#32;WARN_GT&#32;DOCTEST_WARN_GT</emphasis>
2524 <emphasis role="preprocessor">#define&#32;CHECK_GT&#32;DOCTEST_CHECK_GT</emphasis>
2525 <emphasis role="preprocessor">#define&#32;REQUIRE_GT&#32;DOCTEST_REQUIRE_GT</emphasis>
2526 <emphasis role="preprocessor">#define&#32;WARN_LT&#32;DOCTEST_WARN_LT</emphasis>
2527 <emphasis role="preprocessor">#define&#32;CHECK_LT&#32;DOCTEST_CHECK_LT</emphasis>
2528 <emphasis role="preprocessor">#define&#32;REQUIRE_LT&#32;DOCTEST_REQUIRE_LT</emphasis>
2529 <emphasis role="preprocessor">#define&#32;WARN_GE&#32;DOCTEST_WARN_GE</emphasis>
2530 <emphasis role="preprocessor">#define&#32;CHECK_GE&#32;DOCTEST_CHECK_GE</emphasis>
2531 <emphasis role="preprocessor">#define&#32;REQUIRE_GE&#32;DOCTEST_REQUIRE_GE</emphasis>
2532 <emphasis role="preprocessor">#define&#32;WARN_LE&#32;DOCTEST_WARN_LE</emphasis>
2533 <emphasis role="preprocessor">#define&#32;CHECK_LE&#32;DOCTEST_CHECK_LE</emphasis>
2534 <emphasis role="preprocessor">#define&#32;REQUIRE_LE&#32;DOCTEST_REQUIRE_LE</emphasis>
2535 <emphasis role="preprocessor">#define&#32;WARN_UNARY&#32;DOCTEST_WARN_UNARY</emphasis>
2536 <emphasis role="preprocessor">#define&#32;CHECK_UNARY&#32;DOCTEST_CHECK_UNARY</emphasis>
2537 <emphasis role="preprocessor">#define&#32;REQUIRE_UNARY&#32;DOCTEST_REQUIRE_UNARY</emphasis>
2538 <emphasis role="preprocessor">#define&#32;WARN_UNARY_FALSE&#32;DOCTEST_WARN_UNARY_FALSE</emphasis>
2539 <emphasis role="preprocessor">#define&#32;CHECK_UNARY_FALSE&#32;DOCTEST_CHECK_UNARY_FALSE</emphasis>
2540 <emphasis role="preprocessor">#define&#32;REQUIRE_UNARY_FALSE&#32;DOCTEST_REQUIRE_UNARY_FALSE</emphasis>
2541 
2542 <emphasis role="comment">//&#32;KEPT&#32;FOR&#32;BACKWARDS&#32;COMPATIBILITY</emphasis>
2543 <emphasis role="preprocessor">#define&#32;FAST_WARN_EQ&#32;DOCTEST_FAST_WARN_EQ</emphasis>
2544 <emphasis role="preprocessor">#define&#32;FAST_CHECK_EQ&#32;DOCTEST_FAST_CHECK_EQ</emphasis>
2545 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_EQ&#32;DOCTEST_FAST_REQUIRE_EQ</emphasis>
2546 <emphasis role="preprocessor">#define&#32;FAST_WARN_NE&#32;DOCTEST_FAST_WARN_NE</emphasis>
2547 <emphasis role="preprocessor">#define&#32;FAST_CHECK_NE&#32;DOCTEST_FAST_CHECK_NE</emphasis>
2548 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_NE&#32;DOCTEST_FAST_REQUIRE_NE</emphasis>
2549 <emphasis role="preprocessor">#define&#32;FAST_WARN_GT&#32;DOCTEST_FAST_WARN_GT</emphasis>
2550 <emphasis role="preprocessor">#define&#32;FAST_CHECK_GT&#32;DOCTEST_FAST_CHECK_GT</emphasis>
2551 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_GT&#32;DOCTEST_FAST_REQUIRE_GT</emphasis>
2552 <emphasis role="preprocessor">#define&#32;FAST_WARN_LT&#32;DOCTEST_FAST_WARN_LT</emphasis>
2553 <emphasis role="preprocessor">#define&#32;FAST_CHECK_LT&#32;DOCTEST_FAST_CHECK_LT</emphasis>
2554 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_LT&#32;DOCTEST_FAST_REQUIRE_LT</emphasis>
2555 <emphasis role="preprocessor">#define&#32;FAST_WARN_GE&#32;DOCTEST_FAST_WARN_GE</emphasis>
2556 <emphasis role="preprocessor">#define&#32;FAST_CHECK_GE&#32;DOCTEST_FAST_CHECK_GE</emphasis>
2557 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_GE&#32;DOCTEST_FAST_REQUIRE_GE</emphasis>
2558 <emphasis role="preprocessor">#define&#32;FAST_WARN_LE&#32;DOCTEST_FAST_WARN_LE</emphasis>
2559 <emphasis role="preprocessor">#define&#32;FAST_CHECK_LE&#32;DOCTEST_FAST_CHECK_LE</emphasis>
2560 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_LE&#32;DOCTEST_FAST_REQUIRE_LE</emphasis>
2561 
2562 <emphasis role="preprocessor">#define&#32;FAST_WARN_UNARY&#32;DOCTEST_FAST_WARN_UNARY</emphasis>
2563 <emphasis role="preprocessor">#define&#32;FAST_CHECK_UNARY&#32;DOCTEST_FAST_CHECK_UNARY</emphasis>
2564 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_UNARY&#32;DOCTEST_FAST_REQUIRE_UNARY</emphasis>
2565 <emphasis role="preprocessor">#define&#32;FAST_WARN_UNARY_FALSE&#32;DOCTEST_FAST_WARN_UNARY_FALSE</emphasis>
2566 <emphasis role="preprocessor">#define&#32;FAST_CHECK_UNARY_FALSE&#32;DOCTEST_FAST_CHECK_UNARY_FALSE</emphasis>
2567 <emphasis role="preprocessor">#define&#32;FAST_REQUIRE_UNARY_FALSE&#32;DOCTEST_FAST_REQUIRE_UNARY_FALSE</emphasis>
2568 
2569 <emphasis role="preprocessor">#define&#32;TEST_CASE_TEMPLATE_INSTANTIATE&#32;DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE</emphasis>
2570 
2571 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES</emphasis>
2572 
2573 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_DISABLE)</emphasis>
2574 
2575 <emphasis role="comment">//&#32;this&#32;is&#32;here&#32;to&#32;clear&#32;the&#32;&apos;current&#32;test&#32;suite&apos;&#32;for&#32;the&#32;current&#32;translation&#32;unit&#32;-&#32;at&#32;the&#32;top</emphasis>
2576 <link linkend="_doctest_8h_1a3ca1fc8ae12659768e3226db19a2c7ee">DOCTEST_TEST_SUITE_END</link>();
2577 
2578 <emphasis role="comment">//&#32;add&#32;stringification&#32;for&#32;primitive/fundamental&#32;types</emphasis>
2579 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{&#32;<emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
2580 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">bool</emphasis>)
2581 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">float</emphasis>)
2582 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">double</emphasis>)
2583 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>)
2584 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">char</emphasis>)
2585 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)
2586 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)
2587 <emphasis role="preprocessor">#if&#32;!DOCTEST_MSVC&#32;||&#32;defined(_NATIVE_WCHAR_T_DEFINED)</emphasis>
2588 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">wchar_t</emphasis>)
2589 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;not&#32;MSVC&#32;or&#32;wchar_t&#32;support&#32;enabled</emphasis>
2590 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2591 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2592 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">int</emphasis>)
2593 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2594 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2595 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2596 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2597 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a46b09edcbd9aa9ddb23c5ca122d89e7b">DOCTEST_TYPE_TO_STRING_IMPL</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
2598 }}&#32;<emphasis role="comment">//&#32;namespace&#32;doctest::detail</emphasis>
2599 
2600 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2601 
2602 <link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
2603 <link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
2604 <link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
2605 
2606 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_LIBRARY_INCLUDED</emphasis>
2607 
2608 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_SINGLE_HEADER</emphasis>
2609 <emphasis role="preprocessor">#define&#32;DOCTEST_SINGLE_HEADER</emphasis>
2610 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_SINGLE_HEADER</emphasis>
2611 
2612 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_IMPLEMENT)&#32;||&#32;!defined(DOCTEST_SINGLE_HEADER)</emphasis>
2613 
2614 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_SINGLE_HEADER</emphasis>
2615 <emphasis role="preprocessor">#include&#32;&quot;doctest_fwd.h&quot;</emphasis>
2616 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_SINGLE_HEADER</emphasis>
2617 
2618 <link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wunused-macros&quot;</emphasis>)
2619 
2620 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_LIBRARY_IMPLEMENTATION</emphasis>
2621 <emphasis role="preprocessor">#define&#32;DOCTEST_LIBRARY_IMPLEMENTATION</emphasis>
2622 
2623 <link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
2624 
2625 <link linkend="_doctest_8h_1a628491cf2971a026350d5401986bf6d3">DOCTEST_CLANG_SUPPRESS_WARNING_PUSH</link>
2626 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(<emphasis role="stringliteral">&quot;-Wunknown-pragmas&quot;</emphasis>)
2627 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wpadded&quot;)
2628 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wweak-vtables&quot;)
2629 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wglobal-constructors&quot;)
2630 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wexit-time-destructors&quot;)
2631 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-prototypes&quot;)
2632 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wsign-conversion&quot;)
2633 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wshorten-64-to-32&quot;)
2634 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-variable-declarations&quot;)
2635 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wswitch&quot;)
2636 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wswitch-enum&quot;)
2637 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wcovered-switch-default&quot;)
2638 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-noreturn&quot;)
2639 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wunused-local-typedef&quot;)
2640 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wdisabled-macro-expansion&quot;)
2641 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-braces&quot;)
2642 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wmissing-field-initializers&quot;)
2643 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wc++98-compat&quot;)
2644 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wc++98-compat-pedantic&quot;)
2645 <link linkend="_doctest_8h_1abfc21b2dc3aad9632b9e2689f468646c">DOCTEST_CLANG_SUPPRESS_WARNING</link>(&quot;-Wunused-member-function&quot;)
2646 
2647 <link linkend="_doctest_8h_1a8015d10af2883db80a955ce0d523886d">DOCTEST_GCC_SUPPRESS_WARNING_PUSH</link>
2648 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunknown-pragmas&quot;)
2649 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wpragmas&quot;)
2650 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wconversion&quot;)
2651 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Weffc++&quot;)
2652 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wsign-conversion&quot;)
2653 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wstrict-overflow&quot;)
2654 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wstrict-aliasing&quot;)
2655 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wmissing-field-initializers&quot;)
2656 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wmissing-braces&quot;)
2657 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wmissing-declarations&quot;)
2658 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wswitch&quot;)
2659 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wswitch-enum&quot;)
2660 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wswitch-default&quot;)
2661 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunsafe-loop-optimizations&quot;)
2662 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wold-style-cast&quot;)
2663 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunused-local-typedefs&quot;)
2664 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wuseless-cast&quot;)
2665 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wunused-function&quot;)
2666 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wmultiple-inheritance&quot;)
2667 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wnoexcept&quot;)
2668 <link linkend="_doctest_8h_1a361747fc17fa1c6609c3cc939b4fc983">DOCTEST_GCC_SUPPRESS_WARNING</link>(&quot;-Wsuggest-attribute&quot;)
2669 
2670 <link linkend="_doctest_8h_1aec6d713a9dde361b8e68afe78c5bf3cf">DOCTEST_MSVC_SUPPRESS_WARNING_PUSH</link>
2671 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4616)&#32;<emphasis role="comment">//&#32;invalid&#32;compiler&#32;warning</emphasis>
2672 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4619)&#32;<emphasis role="comment">//&#32;invalid&#32;compiler&#32;warning</emphasis>
2673 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4996)&#32;<emphasis role="comment">//&#32;The&#32;compiler&#32;encountered&#32;a&#32;deprecated&#32;declaration</emphasis>
2674 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4267)&#32;<emphasis role="comment">//&#32;&apos;var&apos;&#32;:&#32;conversion&#32;from&#32;&apos;x&apos;&#32;to&#32;&apos;y&apos;,&#32;possible&#32;loss&#32;of&#32;data</emphasis>
2675 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4706)&#32;<emphasis role="comment">//&#32;assignment&#32;within&#32;conditional&#32;expression</emphasis>
2676 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4512)&#32;<emphasis role="comment">//&#32;&apos;class&apos;&#32;:&#32;assignment&#32;operator&#32;could&#32;not&#32;be&#32;generated</emphasis>
2677 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4127)&#32;<emphasis role="comment">//&#32;conditional&#32;expression&#32;is&#32;constant</emphasis>
2678 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4530)&#32;<emphasis role="comment">//&#32;C++&#32;exception&#32;handler&#32;used,&#32;but&#32;unwind&#32;semantics&#32;not&#32;enabled</emphasis>
2679 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4577)&#32;<emphasis role="comment">//&#32;&apos;noexcept&apos;&#32;used&#32;with&#32;no&#32;exception&#32;handling&#32;mode&#32;specified</emphasis>
2680 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4774)&#32;<emphasis role="comment">//&#32;format&#32;string&#32;expected&#32;in&#32;argument&#32;is&#32;not&#32;a&#32;string&#32;literal</emphasis>
2681 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4365)&#32;<emphasis role="comment">//&#32;conversion&#32;from&#32;&apos;int&apos;&#32;to&#32;&apos;unsigned&apos;,&#32;signed/unsigned&#32;mismatch</emphasis>
2682 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4820)&#32;<emphasis role="comment">//&#32;padding&#32;in&#32;structs</emphasis>
2683 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4640)&#32;<emphasis role="comment">//&#32;construction&#32;of&#32;local&#32;static&#32;object&#32;is&#32;not&#32;thread-safe</emphasis>
2684 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5039)&#32;<emphasis role="comment">//&#32;pointer&#32;to&#32;potentially&#32;throwing&#32;function&#32;passed&#32;to&#32;extern&#32;C</emphasis>
2685 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5045)&#32;<emphasis role="comment">//&#32;Spectre&#32;mitigation&#32;stuff</emphasis>
2686 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4626)&#32;<emphasis role="comment">//&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
2687 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5027)&#32;<emphasis role="comment">//&#32;move&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
2688 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(5026)&#32;<emphasis role="comment">//&#32;move&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
2689 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4625)&#32;<emphasis role="comment">//&#32;copy&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted</emphasis>
2690 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(4800)&#32;<emphasis role="comment">//&#32;forcing&#32;value&#32;to&#32;bool&#32;&apos;true&apos;&#32;or&#32;&apos;false&apos;&#32;(performance&#32;warning)</emphasis>
2691 <emphasis role="comment">//&#32;static&#32;analysis</emphasis>
2692 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26439)&#32;<emphasis role="comment">//&#32;This&#32;kind&#32;of&#32;function&#32;may&#32;not&#32;throw.&#32;Declare&#32;it&#32;&apos;noexcept&apos;</emphasis>
2693 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26495)&#32;<emphasis role="comment">//&#32;Always&#32;initialize&#32;a&#32;member&#32;variable</emphasis>
2694 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26451)&#32;<emphasis role="comment">//&#32;Arithmetic&#32;overflow&#32;...</emphasis>
2695 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26444)&#32;<emphasis role="comment">//&#32;Avoid&#32;unnamed&#32;objects&#32;with&#32;custom&#32;construction&#32;and&#32;dtor...</emphasis>
2696 <link linkend="_namespacedoctest_1_1detail_1a3b966d87ac1e25498fae773355c43d90">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26812)&#32;<emphasis role="comment">//&#32;Prefer&#32;&apos;enum&#32;class&apos;&#32;over&#32;&apos;enum&apos;</emphasis>
2697 
2698 <link linkend="_doctest_8h_1ad3e5c37dc8bd7b0f9346c99c6aab2d1d">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN</link>
2699 
2700 <emphasis role="comment">//&#32;required&#32;includes&#32;-&#32;will&#32;go&#32;only&#32;in&#32;one&#32;translation&#32;unit!</emphasis>
2701 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
2702 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
2703 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
2704 <emphasis role="comment">//&#32;borland&#32;(Embarcadero)&#32;compiler&#32;requires&#32;math.h&#32;and&#32;not&#32;cmath&#32;-&#32;https://github.com/onqtam/doctest/pull/37</emphasis>
2705 <emphasis role="preprocessor">#ifdef&#32;__BORLANDC__</emphasis>
2706 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
2707 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__BORLANDC__</emphasis>
2708 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
2709 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
2710 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>
2711 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
2712 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
2713 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
2714 <emphasis role="preprocessor">#include&#32;&lt;fstream&gt;</emphasis>
2715 <emphasis role="preprocessor">#include&#32;&lt;sstream&gt;</emphasis>
2716 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
2717 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
2718 <emphasis role="preprocessor">#include&#32;&lt;iomanip&gt;</emphasis>
2719 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
2720 <emphasis role="preprocessor">#include&#32;&lt;atomic&gt;</emphasis>
2721 <emphasis role="preprocessor">#include&#32;&lt;mutex&gt;</emphasis>
2722 <emphasis role="preprocessor">#include&#32;&lt;set&gt;</emphasis>
2723 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
2724 <emphasis role="preprocessor">#include&#32;&lt;exception&gt;</emphasis>
2725 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
2726 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_POSIX_SIGNALS</emphasis>
2727 <emphasis role="preprocessor">#include&#32;&lt;csignal&gt;</emphasis>
2728 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_POSIX_SIGNALS</emphasis>
2729 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
2730 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
2731 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
2732 
2733 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_MAC</emphasis>
2734 <emphasis role="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
2735 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
2736 <emphasis role="preprocessor">#include&#32;&lt;sys/sysctl.h&gt;</emphasis>
2737 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_MAC</emphasis>
2738 
2739 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2740 
2741 <emphasis role="comment">//&#32;defines&#32;for&#32;a&#32;leaner&#32;windows.h</emphasis>
2742 <emphasis role="preprocessor">#ifndef&#32;WIN32_LEAN_AND_MEAN</emphasis>
2743 <emphasis role="preprocessor">#define&#32;WIN32_LEAN_AND_MEAN</emphasis>
2744 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;WIN32_LEAN_AND_MEAN</emphasis>
2745 <emphasis role="preprocessor">#ifndef&#32;NOMINMAX</emphasis>
2746 <emphasis role="preprocessor">#define&#32;NOMINMAX</emphasis>
2747 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;NOMINMAX</emphasis>
2748 
2749 <emphasis role="comment">//&#32;not&#32;sure&#32;what&#32;AfxWin.h&#32;is&#32;for&#32;-&#32;here&#32;I&#32;do&#32;what&#32;Catch&#32;does</emphasis>
2750 <emphasis role="preprocessor">#ifdef&#32;__AFXDLL</emphasis>
2751 <emphasis role="preprocessor">#include&#32;&lt;AfxWin.h&gt;</emphasis>
2752 <emphasis role="preprocessor">#else</emphasis>
2753 <emphasis role="preprocessor">#if&#32;defined(__MINGW32__)&#32;||&#32;defined(__MINGW64__)</emphasis>
2754 <emphasis role="preprocessor">#include&#32;&lt;windows.h&gt;</emphasis>
2755 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;MINGW</emphasis>
2756 <emphasis role="preprocessor">#include&#32;&lt;Windows.h&gt;</emphasis>
2757 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MINGW</emphasis>
2758 <emphasis role="preprocessor">#endif</emphasis>
2759 <emphasis role="preprocessor">#include&#32;&lt;io.h&gt;</emphasis>
2760 
2761 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2762 
2763 <emphasis role="preprocessor">#include&#32;&lt;sys/time.h&gt;</emphasis>
2764 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
2765 
2766 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2767 
2768 <emphasis role="comment">//&#32;this&#32;is&#32;a&#32;fix&#32;for&#32;https://github.com/onqtam/doctest/issues/348</emphasis>
2769 <emphasis role="comment">//&#32;https://mail.gnome.org/archives/xml/2012-January/msg00000.html</emphasis>
2770 <emphasis role="preprocessor">#if&#32;!defined(HAVE_UNISTD_H)&#32;&amp;&amp;&#32;!defined(STDOUT_FILENO)</emphasis>
2771 <emphasis role="preprocessor">#define&#32;STDOUT_FILENO&#32;fileno(stdout)</emphasis>
2772 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;HAVE_UNISTD_H</emphasis>
2773 
2774 <link linkend="_doctest_8h_1acca96650713994a51c3deb8e4bdec43d">DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END</link>
2775 
2776 <emphasis role="comment">//&#32;counts&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;a&#32;C&#32;array</emphasis>
2777 <emphasis role="preprocessor">#define&#32;DOCTEST_COUNTOF(x)&#32;(sizeof(x)&#32;/&#32;sizeof(x[0]))</emphasis>
2778 
2779 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2780 <emphasis role="preprocessor">#define&#32;DOCTEST_BRANCH_ON_DISABLED(if_disabled,&#32;if_not_disabled)&#32;if_disabled</emphasis>
2781 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2782 <emphasis role="preprocessor">#define&#32;DOCTEST_BRANCH_ON_DISABLED(if_disabled,&#32;if_not_disabled)&#32;if_not_disabled</emphasis>
2783 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2784 
2785 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_OPTIONS_PREFIX</emphasis>
2786 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;&quot;dt-&quot;</emphasis>
2787 <emphasis role="preprocessor">#endif</emphasis>
2788 
2789 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_THREAD_LOCAL</emphasis>
2790 <emphasis role="preprocessor">#define&#32;DOCTEST_THREAD_LOCAL&#32;thread_local</emphasis>
2791 <emphasis role="preprocessor">#endif</emphasis>
2792 
2793 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</emphasis>
2794 <emphasis role="preprocessor">#define&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;DOCTEST_CONFIG_OPTIONS_PREFIX</emphasis>
2795 <emphasis role="preprocessor">#else</emphasis>
2796 <emphasis role="preprocessor">#define&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;&quot;&quot;</emphasis>
2797 <emphasis role="preprocessor">#endif</emphasis>
2798 
2799 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{
2800 
2801 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a0b03060093b3894c976b6ae84e55f3f2">is_running_in_test</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2802 
2803 <emphasis role="keyword">namespace&#32;</emphasis>{
2804 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
2805 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;case&#32;insensitive&#32;strcmp</emphasis>
2806 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;stricmp(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;a,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;b)&#32;{
2807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;;&#32;a++,&#32;b++)&#32;{
2808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;d&#32;=&#32;tolower(*a)&#32;-&#32;tolower(*b);
2809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(d&#32;!=&#32;0&#32;||&#32;!*a)
2810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d;
2811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2812 &#32;&#32;&#32;&#32;}
2813 
2814 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
2815 &#32;&#32;&#32;&#32;String&#32;fpToString(T&#32;value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;precision)&#32;{
2816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;oss;
2817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;std::setprecision(precision)&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;value;
2818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;d&#32;=&#32;oss.str();
2819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;d.find_last_not_of(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
2820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(i&#32;!=&#32;std::string::npos&#32;&amp;&amp;&#32;i&#32;!=&#32;d.size()&#32;-&#32;1)&#32;{
2821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(d[i]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)
2822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
2823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;d.substr(0,&#32;i&#32;+&#32;1);
2824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;d.c_str();
2826 &#32;&#32;&#32;&#32;}
2827 
2828 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Endianness
2829 &#32;&#32;&#32;&#32;{
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Arch
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Big,
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Little
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2835 
2836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Arch&#32;which()&#32;{
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;1;
2838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;casting&#32;any&#32;data&#32;pointer&#32;to&#32;char*&#32;is&#32;allowed</emphasis>
2839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ptr&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;x);
2840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*ptr)
2841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Little;
2842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Big;
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2844 &#32;&#32;&#32;&#32;};
2845 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
2846 
2847 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
2848 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a4027cb5407ce2ff132645e89bba97010">my_memcpy</link>(<emphasis role="keywordtype">void</emphasis>*&#32;dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;src,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;num)&#32;{&#32;memcpy(dest,&#32;src,&#32;num);&#32;}
2849 
2850 &#32;&#32;&#32;&#32;String&#32;<link linkend="_namespacedoctest_1_1detail_1adb894f73b88fb3b39d6c48d80451f5ff">rawMemoryToString</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<emphasis role="keywordtype">object</emphasis>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;size)&#32;{
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reverse&#32;order&#32;for&#32;little&#32;endian&#32;architectures</emphasis>
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0,&#32;end&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(size),&#32;inc&#32;=&#32;1;
2853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(Endianness::which()&#32;==&#32;Endianness::Little)&#32;{
2854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;&#32;&#32;=&#32;end&#32;-&#32;1;
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end&#32;=&#32;inc&#32;=&#32;-1;
2856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2857 
2858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;bytes&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(object);
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;&#32;&#32;oss;
2860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis>&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&lt;&lt;&#32;std::hex;
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;i&#32;!=&#32;end;&#32;i&#32;+=&#32;inc)
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss&#32;&lt;&lt;&#32;std::setw(2)&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(bytes[i]);
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;oss.str().<link linkend="_classdoctest_1_1_string_1a59fcdcf1abd7d66572158049c1b4a8c0">c_str</link>();
2864 &#32;&#32;&#32;&#32;}
2865 
2866 &#32;&#32;&#32;&#32;DOCTEST_THREAD_LOCAL&#32;std::ostringstream&#32;g_oss;&#32;<emphasis role="comment">//&#32;NOLINT(cert-err58-cpp)</emphasis>
2867 
2868 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;<link linkend="_namespacedoctest_1_1detail_1ab4df12a4ff9fad5f16edcc1c54f6c4fc">getTlsOss</link>()&#32;{
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_oss.clear();&#32;<emphasis role="comment">//&#32;there&#32;shouldn&apos;t&#32;be&#32;anything&#32;worth&#32;clearing&#32;in&#32;the&#32;flags</emphasis>
2870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_oss.str(<emphasis role="stringliteral">&quot;&quot;</emphasis>);&#32;<emphasis role="comment">//&#32;the&#32;slow&#32;way&#32;of&#32;resetting&#32;a&#32;string&#32;stream</emphasis>
2871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//g_oss.seekp(0);&#32;//&#32;optimal&#32;reset&#32;-&#32;as&#32;seen&#32;here:&#32;https://stackoverflow.com/a/624291/3162383</emphasis>
2872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;g_oss;
2873 &#32;&#32;&#32;&#32;}
2874 
2875 &#32;&#32;&#32;&#32;String&#32;<link linkend="_namespacedoctest_1_1detail_1a7b0b3df5fe79d7ffa8fa138201476df1">getTlsOssResult</link>()&#32;{
2876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//g_oss&#32;&lt;&lt;&#32;std::ends;&#32;//&#32;needed&#32;-&#32;as&#32;shown&#32;here:&#32;https://stackoverflow.com/a/624291/3162383</emphasis>
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;g_oss.str().<link linkend="_classdoctest_1_1_string_1a59fcdcf1abd7d66572158049c1b4a8c0">c_str</link>();
2878 &#32;&#32;&#32;&#32;}
2879 
2880 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_DISABLE</emphasis>
2881 
2882 <emphasis role="keyword">namespace&#32;</emphasis>timer_large_integer
2883 {
2884 &#32;&#32;&#32;&#32;
2885 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_PLATFORM_WINDOWS)</emphasis>
2886 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;ULONGLONG&#32;type;
2887 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2888 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
2889 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;uint64_t&#32;type;
2890 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2891 }
2892 
2893 <emphasis role="keyword">typedef</emphasis>&#32;timer_large_integer::type&#32;ticks_t;
2894 
2895 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_GETCURRENTTICKS</emphasis>
2896 &#32;&#32;&#32;&#32;ticks_t&#32;getCurrentTicks()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;DOCTEST_CONFIG_GETCURRENTTICKS();&#32;}
2897 <emphasis role="preprocessor">#elif&#32;defined(DOCTEST_PLATFORM_WINDOWS)</emphasis>
2898 &#32;&#32;&#32;&#32;ticks_t&#32;getCurrentTicks()&#32;{
2899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;LARGE_INTEGER&#32;hz&#32;=&#32;{0},&#32;hzo&#32;=&#32;{0};
2900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!hz.QuadPart)&#32;{
2901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QueryPerformanceFrequency(&amp;hz);
2902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QueryPerformanceCounter(&amp;hzo);
2903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LARGE_INTEGER&#32;t;
2905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QueryPerformanceCounter(&amp;t);
2906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((t.QuadPart&#32;-&#32;hzo.QuadPart)&#32;*&#32;LONGLONG(1000000))&#32;/&#32;hz.QuadPart;
2907 &#32;&#32;&#32;&#32;}
2908 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2909 &#32;&#32;&#32;&#32;ticks_t&#32;getCurrentTicks()&#32;{
2910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timeval&#32;t;
2911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gettimeofday(&amp;t,&#32;<emphasis role="keyword">nullptr</emphasis>);
2912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ticks_t<emphasis role="keyword">&gt;</emphasis>(t.tv_sec)&#32;*&#32;1000000&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ticks_t<emphasis role="keyword">&gt;</emphasis>(t.tv_usec);
2913 &#32;&#32;&#32;&#32;}
2914 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
2915 
2916 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Timer
2917 &#32;&#32;&#32;&#32;{
2918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start()&#32;{&#32;m_ticks&#32;=&#32;getCurrentTicks();&#32;}
2919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;getElapsedMicroseconds()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(getCurrentTicks()&#32;-&#32;m_ticks);
2921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//unsigned&#32;int&#32;getElapsedMilliseconds()&#32;const&#32;{</emphasis>
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;static_cast&lt;unsigned&#32;int&gt;(getElapsedMicroseconds()&#32;/&#32;1000);</emphasis>
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;getElapsedSeconds()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(getCurrentTicks()&#32;-&#32;m_ticks)&#32;/&#32;1000000.0;&#32;}
2926 
2927 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ticks_t&#32;m_ticks&#32;=&#32;0;
2929 &#32;&#32;&#32;&#32;};
2930 
2931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;holds&#32;both&#32;parameters&#32;from&#32;the&#32;command&#32;line&#32;and&#32;runtime&#32;data&#32;for&#32;tests</emphasis>
2932 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ContextState&#32;:&#32;ContextOptions,&#32;TestRunStats,&#32;CurrentTestCaseStats
2933 &#32;&#32;&#32;&#32;{
2934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic&lt;int&gt;&#32;numAssertsCurrentTest_atomic;
2935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic&lt;int&gt;&#32;numAssertsFailedCurrentTest_atomic;
2936 
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::vector&lt;String&gt;&gt;&#32;filters&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(filters)(9);&#32;<emphasis role="comment">//&#32;9&#32;different&#32;filters</emphasis>
2938 
2939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;IReporter*&gt;&#32;reporters_currently_used;
2940 
2941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;currentTest&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2942 
2943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a5b5db6997f20389de5735e3ee3439b95">assert_handler</link>&#32;ah&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2944 
2945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Timer&#32;timer;
2946 
2947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;String&gt;&#32;stringifiedContexts;&#32;<emphasis role="comment">//&#32;logging&#32;from&#32;INFO()&#32;due&#32;to&#32;an&#32;exception</emphasis>
2948 
2949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stuff&#32;for&#32;subcases</emphasis>
2950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;SubcaseSignature&gt;&#32;&#32;&#32;&#32;&#32;subcasesStack;
2951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::set&lt;<emphasis role="keyword">decltype</emphasis>(subcasesStack)&gt;&#32;subcasesPassed;
2952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subcasesCurrentMaxLevel;
2953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;should_reenter;
2954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::atomic&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shouldLogCurrentException;
2955 
2956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resetRunData()&#32;{
2957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numTestCases&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
2958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numTestCasesPassingFilters&#32;&#32;=&#32;0;
2959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numTestSuitesPassingFilters&#32;=&#32;0;
2960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numTestCasesFailed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
2961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAsserts&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
2962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsFailed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
2963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsCurrentTest&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
2964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsFailedCurrentTest&#32;=&#32;0;
2965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2966 
2967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;finalizeTestCaseData()&#32;{
2968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;seconds&#32;=&#32;timer.getElapsedSeconds();
2969 
2970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;the&#32;non-atomic&#32;counters</emphasis>
2971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAsserts&#32;+=&#32;numAssertsCurrentTest_atomic;
2972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsFailed&#32;+=&#32;numAssertsFailedCurrentTest_atomic;
2973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsCurrentTest&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;numAssertsCurrentTest_atomic;
2974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numAssertsFailedCurrentTest&#32;=&#32;numAssertsFailedCurrentTest_atomic;
2975 
2976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(numAssertsFailedCurrentTest)
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca06ab32ff93cacaa65c6a2667ddde64e9">TestCaseFailureReason::AssertFailure</link>;
2978 
2979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(Approx(currentTest-&gt;m_timeout).epsilon(DBL_EPSILON)&#32;!=&#32;0&#32;&amp;&amp;
2980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Approx(seconds).epsilon(DBL_EPSILON)&#32;&gt;&#32;currentTest-&gt;m_timeout)
2981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca90b6713d67ca5273d0b7aa2d2ac60ab1">TestCaseFailureReason::Timeout</link>;
2982 
2983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(currentTest-&gt;m_should_fail)&#32;{
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(failure_flags)&#32;{
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0ea1283c0437f975df930c28820a3920">TestCaseFailureReason::ShouldHaveFailedAndDid</link>;
2986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca214290d44846106400115f44d2d21cb9">TestCaseFailureReason::ShouldHaveFailedButDidnt</link>;
2988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(failure_flags&#32;&amp;&amp;&#32;currentTest-&gt;m_may_fail)&#32;{
2990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caa038bc08a903185cf809dd05056d6a75">TestCaseFailureReason::CouldHaveFailedAndDid</link>;
2991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(currentTest-&gt;m_expected_failures&#32;&gt;&#32;0)&#32;{
2992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(numAssertsFailedCurrentTest&#32;==&#32;currentTest-&gt;m_expected_failures)&#32;{
2993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab0e5ba77e37e755a83a01fdb2ad57b4d">TestCaseFailureReason::FailedExactlyNumTimes</link>;
2994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caaab68fabc66bf5c3a606985f59a11afe">TestCaseFailureReason::DidntFailExactlyNumTimes</link>;
2996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2998 
2999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ok_to_fail&#32;=&#32;(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0ea1283c0437f975df930c28820a3920">TestCaseFailureReason::ShouldHaveFailedAndDid</link>&#32;&amp;&#32;failure_flags)&#32;||
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caa038bc08a903185cf809dd05056d6a75">TestCaseFailureReason::CouldHaveFailedAndDid</link>&#32;&amp;&#32;failure_flags)&#32;||
3001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab0e5ba77e37e755a83a01fdb2ad57b4d">TestCaseFailureReason::FailedExactlyNumTimes</link>&#32;&amp;&#32;failure_flags);
3002 
3003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;any&#32;subcase&#32;has&#32;failed&#32;-&#32;the&#32;whole&#32;test&#32;case&#32;has&#32;failed</emphasis>
3004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(failure_flags&#32;&amp;&amp;&#32;!ok_to_fail)
3005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numTestCasesFailed++;
3006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3007 &#32;&#32;&#32;&#32;};
3008 
3009 &#32;&#32;&#32;&#32;ContextState*&#32;g_cs&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
3010 
3011 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;used&#32;to&#32;avoid&#32;locks&#32;for&#32;the&#32;debug&#32;output</emphasis>
3012 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;figure&#32;out&#32;if&#32;this&#32;is&#32;indeed&#32;necessary/correct&#32;-&#32;seems&#32;like&#32;either&#32;there&#32;still</emphasis>
3013 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;could&#32;be&#32;a&#32;race&#32;or&#32;that&#32;there&#32;wouldn&apos;t&#32;be&#32;a&#32;race&#32;even&#32;if&#32;using&#32;the&#32;context&#32;directly</emphasis>
3014 &#32;&#32;&#32;&#32;DOCTEST_THREAD_LOCAL&#32;<emphasis role="keywordtype">bool</emphasis>&#32;g_no_colors;
3015 
3016 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
3017 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3018 
3019 <emphasis role="keywordtype">void</emphasis>&#32;String::setOnHeap()&#32;{&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;buf[last])&#32;=&#32;128;&#32;}
3020 <emphasis role="keywordtype">void</emphasis>&#32;String::setLast(<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;buf[last]&#32;=&#32;char(in);&#32;}
3021 
3022 <emphasis role="keywordtype">void</emphasis>&#32;String::copy(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other)&#32;{
3023 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
3024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(other.isOnStack())&#32;{
3025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(buf,&#32;other.buf,&#32;len);
3026 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setOnHeap();
3028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.size&#32;&#32;&#32;&#32;&#32;=&#32;other.data.size;
3029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.capacity&#32;=&#32;data.size&#32;+&#32;1;
3030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.ptr&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[data.capacity];
3031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(data.ptr,&#32;other.data.ptr,&#32;data.size&#32;+&#32;1);
3032 &#32;&#32;&#32;&#32;}
3033 }
3034 
3035 <link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String::String</link>()&#32;{
3036 &#32;&#32;&#32;&#32;buf[0]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
3037 &#32;&#32;&#32;&#32;setLast();
3038 }
3039 
3040 <link linkend="_classdoctest_1_1_string_1af5dce5deeb8f25a4866efdff75e92975">String::~String</link>()&#32;{
3041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!isOnStack())
3042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;data.ptr;
3043 }
3044 
3045 <link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String::String</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)
3046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;String(in,&#32;strlen(in))&#32;{}
3047 
3048 <link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String::String</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in_size)&#32;{
3049 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
3050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(in_size&#32;&lt;=&#32;last)&#32;{
3051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(buf,&#32;in,&#32;in_size&#32;+&#32;1);
3052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setLast(last&#32;-&#32;in_size);
3053 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setOnHeap();
3055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.size&#32;&#32;&#32;&#32;&#32;=&#32;in_size;
3056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.capacity&#32;=&#32;data.size&#32;+&#32;1;
3057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.ptr&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[data.capacity];
3058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(data.ptr,&#32;in,&#32;in_size&#32;+&#32;1);
3059 &#32;&#32;&#32;&#32;}
3060 }
3061 
3062 <link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String::String</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other)&#32;{&#32;copy(other);&#32;}
3063 
3064 String&amp;&#32;<link linkend="_classdoctest_1_1_string_1a43d58193ddd859ffc1dbd8ea4d263103">String::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other)&#32;{
3065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;other)&#32;{
3066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!isOnStack())
3067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;data.ptr;
3068 
3069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy(other);
3070 &#32;&#32;&#32;&#32;}
3071 
3072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3073 }
3074 
3075 String&amp;&#32;<link linkend="_classdoctest_1_1_string_1a3025142a313b3d9bacb6bfd32c1bc36f">String::operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other)&#32;{
3076 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;my_old_size&#32;=&#32;size();
3077 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;other_size&#32;&#32;=&#32;other.size();
3078 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;total_size&#32;&#32;=&#32;my_old_size&#32;+&#32;other_size;
3079 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
3080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isOnStack())&#32;{
3081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(total_size&#32;&lt;&#32;len)&#32;{
3082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;append&#32;to&#32;the&#32;current&#32;stack&#32;space</emphasis>
3083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(buf&#32;+&#32;my_old_size,&#32;other.c_str(),&#32;other_size&#32;+&#32;1);
3084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setLast(last&#32;-&#32;total_size);
3085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alloc&#32;new&#32;chunk</emphasis>
3087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;temp&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[total_size&#32;+&#32;1];
3088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;current&#32;data&#32;to&#32;new&#32;location&#32;before&#32;writing&#32;in&#32;the&#32;union</emphasis>
3089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(temp,&#32;buf,&#32;my_old_size);&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;+1&#32;(&apos;\0&apos;)&#32;for&#32;speed</emphasis>
3090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;data&#32;in&#32;union</emphasis>
3091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setOnHeap();
3092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.size&#32;&#32;&#32;&#32;&#32;=&#32;total_size;
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.capacity&#32;=&#32;data.size&#32;+&#32;1;
3094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.ptr&#32;&#32;&#32;&#32;&#32;&#32;=&#32;temp;
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transfer&#32;the&#32;rest&#32;of&#32;the&#32;data</emphasis>
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(data.ptr&#32;+&#32;my_old_size,&#32;other.c_str(),&#32;other_size&#32;+&#32;1);
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3098 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(data.capacity&#32;&gt;&#32;total_size)&#32;{
3100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;append&#32;to&#32;the&#32;current&#32;heap&#32;block</emphasis>
3101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.size&#32;=&#32;total_size;
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(data.ptr&#32;+&#32;my_old_size,&#32;other.c_str(),&#32;other_size&#32;+&#32;1);
3103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;resize</emphasis>
3105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.capacity&#32;*=&#32;2;
3106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(data.capacity&#32;&lt;=&#32;total_size)
3107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.capacity&#32;=&#32;total_size&#32;+&#32;1;
3108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alloc&#32;new&#32;chunk</emphasis>
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;temp&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>[data.capacity];
3110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copy&#32;current&#32;data&#32;to&#32;new&#32;location&#32;before&#32;releasing&#32;it</emphasis>
3111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(temp,&#32;data.ptr,&#32;my_old_size);&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;+1&#32;(&apos;\0&apos;)&#32;for&#32;speed</emphasis>
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;release&#32;old&#32;chunk</emphasis>
3113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;data.ptr;
3114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;the&#32;rest&#32;of&#32;the&#32;union&#32;members</emphasis>
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.size&#32;=&#32;total_size;
3116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data.ptr&#32;&#32;=&#32;temp;
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;transfer&#32;the&#32;rest&#32;of&#32;the&#32;data</emphasis>
3118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(data.ptr&#32;+&#32;my_old_size,&#32;other.c_str(),&#32;other_size&#32;+&#32;1);
3119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3120 &#32;&#32;&#32;&#32;}
3121 
3122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3123 }
3124 
3125 String&#32;<link linkend="_classdoctest_1_1_string_1a6ddb6cf1b744a0ae1d4e26b3c8dfa827">String::operator+</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(*<emphasis role="keyword">this</emphasis>)&#32;+=&#32;other;&#32;}
3126 
3127 <link linkend="_classdoctest_1_1_string_1ab18d26f6c9e728c2fac77a501b8ca5f5">String::String</link>(String&amp;&amp;&#32;other)&#32;{
3128 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
3129 &#32;&#32;&#32;&#32;memcpy(buf,&#32;other.buf,&#32;len);
3130 &#32;&#32;&#32;&#32;other.buf[0]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
3131 &#32;&#32;&#32;&#32;other.setLast();
3132 }
3133 
3134 String&amp;&#32;<link linkend="_classdoctest_1_1_string_1a43d58193ddd859ffc1dbd8ea4d263103">String::operator=</link>(String&amp;&amp;&#32;other)&#32;{
3135 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std;
3136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;other)&#32;{
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!isOnStack())
3138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;data.ptr;
3139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(buf,&#32;other.buf,&#32;len);
3140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.buf[0]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.setLast();
3142 &#32;&#32;&#32;&#32;}
3143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3144 }
3145 
3146 <emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1adf69290bc23e8c7bf60a9bcf765ebc10">String::operator[]</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">const_cast&lt;</emphasis>String*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<emphasis role="keyword">operator</emphasis>[](i);&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
3148 }
3149 
3150 <emphasis role="keywordtype">char</emphasis>&amp;&#32;<link linkend="_classdoctest_1_1_string_1adf69290bc23e8c7bf60a9bcf765ebc10">String::operator[]</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i)&#32;{
3151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isOnStack())
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(buf)[i];
3153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data.ptr[i];
3154 }
3155 
3156 <link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wmaybe-uninitialized&quot;</emphasis>)
3157 <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1a9fbc7b09f1660b236f12fc2adce6183d">String::size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isOnStack())
3159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;last&#32;-&#32;(unsigned(buf[last])&#32;&amp;&#32;31);&#32;<emphasis role="comment">//&#32;using&#32;&quot;last&quot;&#32;would&#32;work&#32;only&#32;if&#32;&quot;len&quot;&#32;is&#32;32</emphasis>
3160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data.size;
3161 }
3162 <link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
3163 
3164 <emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1adad8703f08950d173d2cb1426391fcdf">String::capacity</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
3165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isOnStack())
3166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;len;
3167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data.capacity;
3168 }
3169 
3170 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1aef87d1f106d32d8c31af87335b44164d">String::compare</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;other,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;no_case)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(no_case)
3172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;doctest::stricmp(c_str(),&#32;other);
3173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strcmp(c_str(),&#32;other);
3174 }
3175 
3176 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classdoctest_1_1_string_1aef87d1f106d32d8c31af87335b44164d">String::compare</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;other,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;no_case)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare(other.c_str(),&#32;no_case);
3178 }
3179 
3180 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3181 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.compare(rhs)&#32;==&#32;0;&#32;}
3182 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.compare(rhs)&#32;!=&#32;0;&#32;}
3183 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt; </link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.compare(rhs)&#32;&lt;&#32;0;&#32;}
3184 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt; </link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.compare(rhs)&#32;&gt;&#32;0;&#32;}
3185 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs&#32;!=&#32;rhs)&#32;?&#32;lhs.compare(rhs)&#32;&lt;&#32;0&#32;:&#32;<emphasis role="keyword">true</emphasis>;&#32;}
3186 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(lhs&#32;!=&#32;rhs)&#32;?&#32;lhs.compare(rhs)&#32;&gt;&#32;0&#32;:&#32;<emphasis role="keyword">true</emphasis>;&#32;}
3187 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3188 
3189 <link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1a7817aba561f42fc42fdccb1b312c7678">operator&lt;&lt;</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;s&#32;&lt;&lt;&#32;in.c_str();&#32;}
3190 
3191 <emphasis role="keyword">namespace&#32;</emphasis>{
3192 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;color_to_stream(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;,&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92">Color::Enum</link>)&#32;DOCTEST_BRANCH_ON_DISABLED({},&#32;;)
3193 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3194 
3195 <emphasis role="keyword">namespace&#32;</emphasis>Color&#32;{
3196 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1a7817aba561f42fc42fdccb1b312c7678">operator&lt;&lt;</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;s,&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92">Color::Enum</link>&#32;code)&#32;{
3197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;color_to_stream(s,&#32;code);
3198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s;
3199 &#32;&#32;&#32;&#32;}
3200 }&#32;<emphasis role="comment">//&#32;namespace&#32;Color</emphasis>
3201 
3202 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3203 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at)&#32;{
3204 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(4062)&#32;<emphasis role="comment">//&#32;enum&#32;&apos;x&apos;&#32;in&#32;switch&#32;of&#32;enum&#32;&apos;y&apos;&#32;is&#32;not&#32;handled</emphasis>
3205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(at)&#32;{&#32;&#32;
3206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af972d8a41e3090304ef38ad43483314d">assertType::DT_WARN</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN&quot;</emphasis>;
3207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a4431fd22794b06d854c7f9fbf43b10b8">assertType::DT_CHECK</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK&quot;</emphasis>;
3208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a807ade2ef3e65b909e1551d8c8406d54">assertType::DT_REQUIRE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE&quot;</emphasis>;
3209 
3210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a710e0f57342dff74ba39e74419443435">assertType::DT_WARN_FALSE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_FALSE&quot;</emphasis>;
3211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aa518f2714c2f58bb1ed3b2d2f8c1b075">assertType::DT_CHECK_FALSE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_FALSE&quot;</emphasis>;
3212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae81f0c9c945715690c794c4e7cbb7bbf">assertType::DT_REQUIRE_FALSE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_FALSE&quot;</emphasis>;
3213 
3214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9575f9ac61737539cde0fc3353e3d424">assertType::DT_WARN_THROWS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_THROWS&quot;</emphasis>;
3215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3abf34f9af14d1c3d9b23dc80fc553e607">assertType::DT_CHECK_THROWS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_THROWS&quot;</emphasis>;
3216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a961340742b11d7e37f3874fef305d609">assertType::DT_REQUIRE_THROWS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_THROWS&quot;</emphasis>;
3217 
3218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad915d4c9681ce4f6ad8a5e0967cb0f04">assertType::DT_WARN_THROWS_AS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_THROWS_AS&quot;</emphasis>;
3219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a389b826746dde155cb46687c7e565cce">assertType::DT_CHECK_THROWS_AS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_THROWS_AS&quot;</emphasis>;
3220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a180912d780568b6d9f1f0ef4a96a7be6">assertType::DT_REQUIRE_THROWS_AS</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_THROWS_AS&quot;</emphasis>;
3221 
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae6357eecb1d854cd7ad71e72c52c2f6d">assertType::DT_WARN_THROWS_WITH</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_THROWS_WITH&quot;</emphasis>;
3223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a5b0d08bf133f70f746ebd2f8b8e514d5">assertType::DT_CHECK_THROWS_WITH</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_THROWS_WITH&quot;</emphasis>;
3224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a7b37f7677433a6da93a9e15c3ab62d24">assertType::DT_REQUIRE_THROWS_WITH</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_THROWS_WITH&quot;</emphasis>;
3225 
3226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ac76f8fa71f1b776034cd7db2687c99c8">assertType::DT_WARN_THROWS_WITH_AS</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_THROWS_WITH_AS&quot;</emphasis>;
3227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a13d5a33071d51aaaebcd08c4fd012035">assertType::DT_CHECK_THROWS_WITH_AS</link>&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_THROWS_WITH_AS&quot;</emphasis>;
3228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a81ed09bf509081b6c5887f196a593438">assertType::DT_REQUIRE_THROWS_WITH_AS</link>&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_THROWS_WITH_AS&quot;</emphasis>;
3229 
3230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab2aade9d6de83d7d0548e784a502d67f">assertType::DT_WARN_NOTHROW</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_NOTHROW&quot;</emphasis>;
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a5c330f1952cb85a8416902e237ec6f1f">assertType::DT_CHECK_NOTHROW</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_NOTHROW&quot;</emphasis>;
3232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2ab93f3a9dfd9c597e4810cd22fe6d16">assertType::DT_REQUIRE_NOTHROW</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_NOTHROW&quot;</emphasis>;
3233 
3234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a856e0bc4639d22946b02ca5aae7f6c2c">assertType::DT_WARN_EQ</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_EQ&quot;</emphasis>;
3235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a25ea7bcb831f008cfbcfd5da41e9008e">assertType::DT_CHECK_EQ</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_EQ&quot;</emphasis>;
3236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab2880914ce3960d556aa8681e9e47ad4">assertType::DT_REQUIRE_EQ</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_EQ&quot;</emphasis>;
3237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a64e5a52a68ac1280d1a0910578d342cd">assertType::DT_WARN_NE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_NE&quot;</emphasis>;
3238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad2d533f5a46b17df1170d4b29ccd572a">assertType::DT_CHECK_NE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_NE&quot;</emphasis>;
3239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a3c0d1c2454abd45b63391ee3970b133c">assertType::DT_REQUIRE_NE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_NE&quot;</emphasis>;
3240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af5a8a1175f296c626efaaf728a8a5b96">assertType::DT_WARN_GT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_GT&quot;</emphasis>;
3241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a4dbd73b6541c25b5c6fe059e970d937a">assertType::DT_CHECK_GT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_GT&quot;</emphasis>;
3242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a65b68e53d865150051f880273a6c8462">assertType::DT_REQUIRE_GT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_GT&quot;</emphasis>;
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3af78432b9b33a8765b326441c42a0c1b8">assertType::DT_WARN_LT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_LT&quot;</emphasis>;
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a18449655ab3feda0b66aa7306a85aeb5">assertType::DT_CHECK_LT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_LT&quot;</emphasis>;
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a6dabfc7a1ec170e2ec6e31de8e703085">assertType::DT_REQUIRE_LT</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_LT&quot;</emphasis>;
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a493f8d19aa6056a3e8f475772548349b">assertType::DT_WARN_GE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_GE&quot;</emphasis>;
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3afc68d23bf246717c10e7bc0231dc062c">assertType::DT_CHECK_GE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_GE&quot;</emphasis>;
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a54599a5076fe992159f2e88cad185682">assertType::DT_REQUIRE_GE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_GE&quot;</emphasis>;
3249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a1d40a679871797392c64dd8b4324f4e8">assertType::DT_WARN_LE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_LE&quot;</emphasis>;
3250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad711b30f529eb092f9bcf90600a07eb1">assertType::DT_CHECK_LE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_LE&quot;</emphasis>;
3251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a49c183d4be8babc83bbb3754303f7d45">assertType::DT_REQUIRE_LE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_LE&quot;</emphasis>;
3252 
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9bc05989c4bd086562f3a0e05ab07ceb">assertType::DT_WARN_UNARY</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_UNARY&quot;</emphasis>;
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae649bc4be44cb5e296ee851a7637c018">assertType::DT_CHECK_UNARY</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_UNARY&quot;</emphasis>;
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0e430d8916b3d685b5df30d602d06b6d">assertType::DT_REQUIRE_UNARY</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_UNARY&quot;</emphasis>;
3256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ad0c3e97290a20b0942a2988c2c413f45">assertType::DT_WARN_UNARY_FALSE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARN_UNARY_FALSE&quot;</emphasis>;
3257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ae8c9c5080e302b840ab4e053d5160191">assertType::DT_CHECK_UNARY_FALSE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;CHECK_UNARY_FALSE&quot;</emphasis>;
3258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a23caa06098e51bbb331da066e98ebd4e">assertType::DT_REQUIRE_UNARY_FALSE</link>&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;REQUIRE_UNARY_FALSE&quot;</emphasis>;
3259 &#32;&#32;&#32;&#32;}
3260 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
3261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3262 }
3263 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3264 
3265 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a3fcfa9f7f479ad1b46d142e210c8ca75">failureString</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at)&#32;{
3266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>)&#32;
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;WARNING&quot;</emphasis>;
3268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">assertType::is_check</link>)&#32;
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;ERROR&quot;</emphasis>;
3270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">assertType::is_require</link>)&#32;
3271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;FATAL&#32;ERROR&quot;</emphasis>;
3272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3273 }
3274 
3275 <link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wnull-dereference&quot;</emphasis>)
3276 <link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wnull-dereference&quot;</emphasis>)
3277 <emphasis role="comment">//&#32;depending&#32;on&#32;the&#32;current&#32;options&#32;this&#32;will&#32;remove&#32;the&#32;path&#32;of&#32;filenames</emphasis>
3278 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file)&#32;{
3279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;no_path_in_filenames)&#32;{
3280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;back&#32;&#32;&#32;&#32;=&#32;std::strrchr(file,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
3281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;forward&#32;=&#32;std::strrchr(file,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
3282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(back&#32;||&#32;forward)&#32;{
3283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(back&#32;&gt;&#32;forward)
3284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward&#32;=&#32;back;
3285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;forward&#32;+&#32;1;
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3287 &#32;&#32;&#32;&#32;}
3288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;file;
3289 }
3290 <link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
3291 <link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
3292 
3293 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structdoctest_1_1_subcase_signature_1a07364f9dddf615f51e15f09b994d4bef">SubcaseSignature::operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;SubcaseSignature&amp;&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_line&#32;!=&#32;other.m_line)
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_line&#32;&lt;&#32;other.m_line;
3296 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::strcmp(m_file,&#32;other.m_file)&#32;!=&#32;0)
3297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::strcmp(m_file,&#32;other.m_file)&#32;&lt;&#32;0;
3298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_name.compare(other.m_name)&#32;&lt;&#32;0;
3299 }
3300 
3301 <link linkend="_structdoctest_1_1_i_context_scope_1a067a2f9a9e53b010eb7b0a2ab88c76fd">IContextScope::IContextScope</link>()&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3302 <link linkend="_structdoctest_1_1_i_context_scope_1aa99357c233d6a040451628bc6a6c6c2e">IContextScope::~IContextScope</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3303 
3304 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
3305 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(in));&#32;}
3306 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>)&#32;+&#32;(in&#32;?&#32;in&#32;:&#32;<emphasis role="stringliteral">&quot;{null&#32;string}&quot;</emphasis>)&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>;&#32;}
3307 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
3308 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">bool</emphasis>&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;in&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>;&#32;}
3309 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">float</emphasis>&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fpToString(in,&#32;5)&#32;+&#32;<emphasis role="stringliteral">&quot;f&quot;</emphasis>;&#32;}
3310 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">double</emphasis>&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fpToString(in,&#32;10);&#32;}
3311 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;fpToString(in,&#32;15);&#32;}
3312 
3313 <emphasis role="preprocessor">#define&#32;DOCTEST_TO_STRING_OVERLOAD(type,&#32;fmt)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3314 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;String&#32;toString(type&#32;in)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3315 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char&#32;buf[64];&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3316 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sprintf(buf,&#32;fmt,&#32;in);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3317 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;buf;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
3319 
3320 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">char</emphasis>,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>)
3321 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>)
3322 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>,&#32;<emphasis role="stringliteral">&quot;%u&quot;</emphasis>)
3323 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>)
3324 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>,&#32;<emphasis role="stringliteral">&quot;%u&quot;</emphasis>)
3325 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="stringliteral">&quot;%d&quot;</emphasis>)
3326 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">unsigned</emphasis>,&#32;<emphasis role="stringliteral">&quot;%u&quot;</emphasis>)
3327 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="stringliteral">&quot;%ld&quot;</emphasis>)
3328 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>,&#32;<emphasis role="stringliteral">&quot;%lu&quot;</emphasis>)
3329 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="stringliteral">&quot;%lld&quot;</emphasis>)
3330 DOCTEST_TO_STRING_OVERLOAD(<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>,&#32;<emphasis role="stringliteral">&quot;%llu&quot;</emphasis>)
3331 
3332 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(std::nullptr_t)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;NULL&quot;</emphasis>;&#32;}
3333 
3334 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC&#32;&gt;=&#32;DOCTEST_COMPILER(19,&#32;20,&#32;0)</emphasis>
3335 <emphasis role="comment">//&#32;see&#32;this&#32;issue&#32;on&#32;why&#32;this&#32;is&#32;needed:&#32;https://github.com/onqtam/doctest/issues/183</emphasis>
3336 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;in)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;in.<link linkend="_classdoctest_1_1_string_1a59fcdcf1abd7d66572158049c1b4a8c0">c_str</link>();&#32;}
3337 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;VS&#32;2019</emphasis>
3338 
3339 <link linkend="_classdoctest_1_1_approx_1a86f0d1b44c1cf095697f23ccdab00802">Approx::Approx</link>(<emphasis role="keywordtype">double</emphasis>&#32;value)
3340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_epsilon(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(std::numeric_limits&lt;float&gt;::epsilon())&#32;*&#32;100)
3341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_scale(1.0)
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_value(value)&#32;{}
3343 
3344 Approx&#32;<link linkend="_classdoctest_1_1_approx_1aae907c5ea1c4ac94e134db9e35da7dce">Approx::operator()</link>(<emphasis role="keywordtype">double</emphasis>&#32;value)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3345 &#32;&#32;&#32;&#32;Approx&#32;approx(value);
3346 &#32;&#32;&#32;&#32;approx.epsilon(m_epsilon);
3347 &#32;&#32;&#32;&#32;approx.scale(m_scale);
3348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;approx;
3349 }
3350 
3351 Approx&amp;&#32;<link linkend="_classdoctest_1_1_approx_1a3a9093777280fcf5fd79e79b1c202ba8">Approx::epsilon</link>(<emphasis role="keywordtype">double</emphasis>&#32;newEpsilon)&#32;{
3352 &#32;&#32;&#32;&#32;m_epsilon&#32;=&#32;newEpsilon;
3353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3354 }
3355 Approx&amp;&#32;<link linkend="_classdoctest_1_1_approx_1a040114c288b721e97d7cdd22faf69c90">Approx::scale</link>(<emphasis role="keywordtype">double</emphasis>&#32;newScale)&#32;{
3356 &#32;&#32;&#32;&#32;m_scale&#32;=&#32;newScale;
3357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3358 }
3359 
3360 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{
3361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Thanks&#32;to&#32;Richard&#32;Harris&#32;for&#32;his&#32;help&#32;refining&#32;this&#32;formula</emphasis>
3362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::fabs(lhs&#32;-&#32;rhs.m_value)&#32;&lt;
3363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.m_epsilon&#32;*&#32;(rhs.m_scale&#32;+&#32;std::max&lt;double&gt;(std::fabs(lhs),&#32;std::fabs(rhs.m_value)));
3364 }
3365 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(rhs,&#32;lhs);&#32;}
3366 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(lhs,&#32;rhs);&#32;}
3367 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ab9a88e4c19857cd86a0f037d27bcad72">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacedoctest_1ae332e5e775f83a532884303780f79f9f">operator==</link>(rhs,&#32;lhs);&#32;}
3368 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.m_value&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
3369 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1a27c6c308e814ad9384499bafc03f9e39">operator&lt;=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&lt;&#32;rhs&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
3370 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.m_value&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
3371 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1ac32accb42e937cf870de2f6865ea236a">operator&gt;=</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&gt;&#32;rhs&#32;||&#32;lhs&#32;==&#32;rhs;&#32;}
3372 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt;</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&#32;rhs.m_value&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
3373 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&lt;&#32;rhs&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
3374 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt;</link>(<emphasis role="keywordtype">double</emphasis>&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&gt;&#32;rhs.m_value&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
3375 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1acef5990b03a973c74ff2dd6cfc112913">operator&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;lhs,&#32;<emphasis role="keywordtype">double</emphasis>&#32;rhs)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs.m_value&#32;&gt;&#32;rhs&#32;&amp;&amp;&#32;lhs&#32;!=&#32;rhs;&#32;}
3376 
3377 String&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">toString</link>(<emphasis role="keyword">const</emphasis>&#32;Approx&amp;&#32;in)&#32;{
3378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(<emphasis role="stringliteral">&quot;Approx(&#32;&quot;</emphasis>)&#32;+&#32;<link linkend="_namespacedoctest_1a8907bf35788959391343a2304f004e17">doctest::toString</link>(in.m_value)&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;)&quot;</emphasis>;
3379 }
3380 <emphasis role="keyword">const</emphasis>&#32;ContextOptions*&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;DOCTEST_BRANCH_ON_DISABLED(<emphasis role="keyword">nullptr</emphasis>,&#32;g_cs);&#32;}
3381 
3382 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest</emphasis>
3383 
3384 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_DISABLE</emphasis>
3385 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{
3386 <link linkend="_classdoctest_1_1_context_1a881bc2d0fe207d672e1debe830768a98">Context::Context</link>(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*)&#32;{}
3387 <link linkend="_classdoctest_1_1_context_1a33b344fbc4803dca81147c4a4cc9edbd">Context::~Context</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3388 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1ad55229220bf9ca74e6e0c6323bf672e1">Context::applyCommandLine</link>(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*)&#32;{}
3389 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a60ad57a46c19db2b142468c3acac448a">Context::addFilter</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)&#32;{}
3390 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1aaa878723e89310d5aa3f516bc7ab3165">Context::clearFilters</link>()&#32;{}
3391 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a95e7a0230c5897f0eae36718f51d2f05">Context::setOption</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>)&#32;{}
3392 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a95e7a0230c5897f0eae36718f51d2f05">Context::setOption</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)&#32;{}
3393 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a219b10301380b81c84c0824a6876d9aa">Context::shouldExit</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
3394 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1ae85cecc7689f009e23cba383484773b2">Context::setAsDefaultForAssertsOutOfTestCases</link>()&#32;{}
3395 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdoctest_1_1_context_1a669dd0a596a611eeb0decdb78b661a90">Context::setAssertHandler</link>(<link linkend="_namespacedoctest_1_1detail_1a5b5db6997f20389de5735e3ee3439b95">detail::assert_handler</link>)&#32;{}
3396 <emphasis role="keywordtype">int</emphasis>&#32;&#32;<link linkend="_classdoctest_1_1_context_1a8059b137ef41cbe6c5d8160806a3cc63">Context::run</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3397 
3398 <link linkend="_structdoctest_1_1_i_reporter_1ae772182e42f2a3b163497f2b8bc3636d">IReporter::~IReporter</link>()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3399 
3400 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter_1a7d520de46d9104c0eeb02375fabad32d">IReporter::get_num_active_contexts</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3401 <emphasis role="keyword">const</emphasis>&#32;IContextScope*&#32;<emphasis role="keyword">const</emphasis>*&#32;<link linkend="_structdoctest_1_1_i_reporter_1ad34f2f1954ff43b6e8fe2dc595cec53a">IReporter::get_active_contexts</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
3402 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter_1ac8b96fef046edc609a3374a61b84797d">IReporter::get_num_stringified_contexts</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3403 <emphasis role="keyword">const</emphasis>&#32;String*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1_i_reporter_1a6db31e528efe08c9bc9b4037a2143c3a">IReporter::get_stringified_contexts</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
3404 
3405 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1a9e878a811f7bf0a615b3a39de3004673">registerReporter</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;IReporter*)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3406 
3407 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest</emphasis>
3408 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
3409 
3410 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_COLORS_NONE)</emphasis>
3411 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_COLORS_WINDOWS)&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_COLORS_ANSI)</emphasis>
3412 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
3413 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3414 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;linux</emphasis>
3415 <emphasis role="preprocessor">#define&#32;DOCTEST_CONFIG_COLORS_ANSI</emphasis>
3416 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;platform</emphasis>
3417 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_COLORS_WINDOWS&#32;&amp;&amp;&#32;DOCTEST_CONFIG_COLORS_ANSI</emphasis>
3418 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_COLORS_NONE</emphasis>
3419 
3420 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest__detail__test__suite__ns">doctest_detail_test_suite_ns</link>&#32;{
3421 <emphasis role="comment">//&#32;holds&#32;the&#32;current&#32;test&#32;suite</emphasis>
3422 <link linkend="_structdoctest_1_1detail_1_1_test_suite">doctest::detail::TestSuite</link>&amp;&#32;<link linkend="_namespacedoctest__detail__test__suite__ns_1a63d04c2e0ba35dff1e33cf0a24ec66c8">getCurrentTestSuite</link>()&#32;{
3423 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structdoctest_1_1detail_1_1_test_suite">doctest::detail::TestSuite</link>&#32;data;
3424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
3425 }
3426 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest_detail_test_suite_ns</emphasis>
3427 
3428 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacedoctest">doctest</link>&#32;{
3429 <emphasis role="keyword">namespace&#32;</emphasis>{
3430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;int&#32;(priority)&#32;is&#32;part&#32;of&#32;the&#32;key&#32;for&#32;automatic&#32;sorting&#32;-&#32;sadly&#32;one&#32;can&#32;register&#32;a</emphasis>
3431 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reporter&#32;with&#32;a&#32;duplicate&#32;name&#32;and&#32;a&#32;different&#32;priority&#32;but&#32;hopefully&#32;that&#32;won&apos;t&#32;happen&#32;often&#32;:|</emphasis>
3432 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::map&lt;std::pair&lt;int,&#32;String&gt;,&#32;<link linkend="_namespacedoctest_1_1detail_1a431bc1f18ee82461ef2cf98aad891526">reporterCreatorFunc</link>&gt;&#32;reporterMap;
3433 
3434 &#32;&#32;&#32;&#32;reporterMap&amp;&#32;getReporters()&#32;{
3435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;reporterMap&#32;data;
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
3437 &#32;&#32;&#32;&#32;}
3438 &#32;&#32;&#32;&#32;reporterMap&amp;&#32;getListeners()&#32;{
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;reporterMap&#32;data;
3440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
3441 &#32;&#32;&#32;&#32;}
3442 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3443 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
3444 <emphasis role="preprocessor">#define&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(function,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3445 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;for(auto&amp;&#32;curr_rep&#32;:&#32;g_cs-&gt;reporters_currently_used)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3446 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;curr_rep-&gt;function(__VA_ARGS__)</emphasis>
3447 
3448 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1acec9ff072dd86af95225a8beb9c57298">checkIfShouldThrow</link>(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3">assertType::Enum</link>&#32;at)&#32;{
3449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">assertType::is_require</link>)&#32;
3450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3451 
3452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">assertType::is_check</link>)&#32;
3453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;abort_after&#32;&gt;&#32;0&#32;&amp;&amp;
3454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(g_cs-&gt;numAssertsFailed&#32;+&#32;g_cs-&gt;numAssertsFailedCurrentTest_atomic)&#32;&gt;=
3455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;abort_after)
3456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3457 
3458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3459 &#32;&#32;&#32;&#32;}
3460 
3461 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3462 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a4ef00bd4c0653f31a2e60e5e5f2fcf10">DOCTEST_NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a60ffd50b9ee7adfcafc078f333aac8b6">throwException</link>()&#32;{
3463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;shouldLogCurrentException&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;TestFailureException();
3465 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;NOLINT(cert-err60-cpp)</emphasis>
3466 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3467 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a60ffd50b9ee7adfcafc078f333aac8b6">throwException</link>()&#32;{}
3468 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3469 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3470 
3471 <emphasis role="keyword">namespace&#32;</emphasis>{
3472 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
3473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;matching&#32;of&#32;a&#32;string&#32;against&#32;a&#32;wildcard&#32;mask&#32;(case&#32;sensitivity&#32;configurable)&#32;taken&#32;from</emphasis>
3474 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing</emphasis>
3475 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;wildcmp(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;wild,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;caseSensitive)&#32;{
3476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cp&#32;=&#32;str;
3477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;mp&#32;=&#32;wild;
3478 
3479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>((*str)&#32;&amp;&amp;&#32;(*wild&#32;!=&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>))&#32;{
3480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((caseSensitive&#32;?&#32;(*wild&#32;!=&#32;*str)&#32;:&#32;(tolower(*wild)&#32;!=&#32;tolower(*str)))&#32;&amp;&amp;
3481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*wild&#32;!=&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>))&#32;{
3482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
3483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wild++;
3485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str++;
3486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3487 
3488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(*str)&#32;{
3489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*wild&#32;==&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>)&#32;{
3490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!*++wild)&#32;{
3491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
3492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mp&#32;=&#32;wild;
3494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp&#32;=&#32;str&#32;+&#32;1;
3495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>((caseSensitive&#32;?&#32;(*wild&#32;==&#32;*str)&#32;:&#32;(tolower(*wild)&#32;==&#32;tolower(*str)))&#32;||
3496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*wild&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>))&#32;{
3497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wild++;
3498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str++;
3499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
3500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wild&#32;=&#32;mp;&#32;&#32;&#32;
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;&#32;=&#32;cp++;&#32;
3502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3504 
3505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(*wild&#32;==&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>)&#32;{
3506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wild++;
3507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!*wild;
3509 &#32;&#32;&#32;&#32;}
3510 
3512 &#32;&#32;&#32;&#32;<emphasis role="comment">//unsigned&#32;hashStr(unsigned&#32;const&#32;char*&#32;str)&#32;{</emphasis>
3513 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;unsigned&#32;long&#32;hash&#32;=&#32;5381;</emphasis>
3514 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;char&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c;</emphasis>
3515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;while((c&#32;=&#32;*str++))</emphasis>
3516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&#32;=&#32;((hash&#32;&lt;&lt;&#32;5)&#32;+&#32;hash)&#32;+&#32;c;&#32;//&#32;hash&#32;*&#32;33&#32;+&#32;c</emphasis>
3517 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;hash;</emphasis>
3518 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
3519 
3520 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;checks&#32;if&#32;the&#32;name&#32;matches&#32;any&#32;of&#32;the&#32;filters&#32;(and&#32;can&#32;be&#32;configured&#32;what&#32;to&#32;do&#32;when&#32;empty)</emphasis>
3521 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matchesAny(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;String&gt;&amp;&#32;filters,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matchEmpty,
3522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;caseSensitive)&#32;{
3523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(filters.empty()&#32;&amp;&amp;&#32;matchEmpty)
3524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;filters)
3526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(wildcmp(name,&#32;curr.c_str(),&#32;caseSensitive))
3527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3529 &#32;&#32;&#32;&#32;}
3530 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3531 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
3532 
3533 &#32;&#32;&#32;&#32;<link linkend="_structdoctest_1_1detail_1_1_subcase_1a8f7d4a5ddfb8ae48663e5cfc786e6f12">Subcase::Subcase</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line)
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_signature({name,&#32;file,&#32;line})&#32;{
3535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ContextState*&#32;s&#32;=&#32;g_cs;
3536 
3537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;subcase&#32;filters</emphasis>
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s-&gt;subcasesStack.size()&#32;&lt;&#32;size_t(s-&gt;subcase_filter_levels))&#32;{
3539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!matchesAny(m_signature.m_name.c_str(),&#32;s-&gt;filters[6],&#32;<emphasis role="keyword">true</emphasis>,&#32;s-&gt;case_sensitive))
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(matchesAny(m_signature.m_name.c_str(),&#32;s-&gt;filters[7],&#32;<emphasis role="keyword">false</emphasis>,&#32;s-&gt;case_sensitive))
3542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
3545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;a&#32;Subcase&#32;on&#32;the&#32;same&#32;level&#32;has&#32;already&#32;been&#32;entered</emphasis>
3546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s-&gt;subcasesStack.size()&#32;&lt;&#32;size_t(s-&gt;subcasesCurrentMaxLevel))&#32;{
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s-&gt;should_reenter&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3550 
3551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;push&#32;the&#32;current&#32;signature&#32;to&#32;the&#32;stack&#32;so&#32;we&#32;can&#32;check&#32;if&#32;the</emphasis>
3552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;current&#32;stack&#32;+&#32;the&#32;current&#32;new&#32;subcase&#32;have&#32;been&#32;traversed</emphasis>
3553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s-&gt;subcasesStack.push_back(m_signature);
3554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(s-&gt;subcasesPassed.count(s-&gt;subcasesStack)&#32;!=&#32;0)&#32;{
3555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pop&#32;-&#32;revert&#32;to&#32;previous&#32;stack&#32;since&#32;we&apos;ve&#32;already&#32;passed&#32;this</emphasis>
3556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s-&gt;subcasesStack.pop_back();
3557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3559 
3560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s-&gt;subcasesCurrentMaxLevel&#32;=&#32;s-&gt;subcasesStack.size();
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_entered&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3562 
3563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start,&#32;m_signature);
3564 &#32;&#32;&#32;&#32;}
3565 
3566 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(4996)&#32;<emphasis role="comment">//&#32;std::uncaught_exception&#32;is&#32;deprecated&#32;in&#32;C++17&#32;</emphasis>
3567 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(&quot;-Wdeprecated-declarations&quot;)&#32;
3568 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(&quot;-Wdeprecated-declarations&quot;)
3569 
3570 &#32;&#32;&#32;&#32;Subcase::~Subcase()&#32;{
3571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_entered)&#32;{
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;mark&#32;the&#32;subcase&#32;stack&#32;as&#32;passed&#32;if&#32;no&#32;subcases&#32;have&#32;been&#32;skipped</emphasis>
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g_cs-&gt;should_reenter&#32;==&#32;<emphasis role="keyword">false</emphasis>)
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;subcasesPassed.insert(g_cs-&gt;subcasesStack);
3575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;subcasesStack.pop_back();
3576 
3577 <emphasis role="preprocessor">#if&#32;defined(__cpp_lib_uncaught_exceptions)&#32;&amp;&amp;&#32;__cpp_lib_uncaught_exceptions&#32;&gt;=&#32;201411L</emphasis>
3578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::uncaught_exceptions()&#32;&gt;&#32;0
3579 #<emphasis role="keywordflow">else</emphasis>
3580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::uncaught_exception()
3581 #endif
3582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;g_cs-&gt;shouldLogCurrentException)&#32;{
3583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(
3584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_case_exception,&#32;{<emphasis role="stringliteral">&quot;exception&#32;thrown&#32;in&#32;subcase&#32;-&#32;will&#32;translate&#32;later&#32;&quot;</emphasis>
3585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;when&#32;the&#32;whole&#32;test&#32;case&#32;has&#32;been&#32;exited&#32;(cannot&#32;&quot;</emphasis>
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;translate&#32;while&#32;there&#32;is&#32;an&#32;active&#32;exception)&quot;</emphasis>,
3587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;false});
3588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;shouldLogCurrentException&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>);
3591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3592 &#32;&#32;&#32;&#32;}
3593 
3594 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>&#32;&#32;
3595 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>&#32;&#32;&#32;&#32;
3596 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
3597 
3598 &#32;&#32;&#32;&#32;Subcase::operator&#32;bool()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_entered;&#32;}
3599 
3600 &#32;&#32;&#32;&#32;Result::Result(<emphasis role="keywordtype">bool</emphasis>&#32;passed,&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;decomposition)
3601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_passed(passed)
3602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;m_decomp(decomposition)&#32;{}
3603 
3604 &#32;&#32;&#32;&#32;ExpressionDecomposer::ExpressionDecomposer(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at)
3605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;m_at(at)&#32;{}
3606 
3607 &#32;&#32;&#32;&#32;TestSuite&amp;&#32;TestSuite::operator*(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{
3608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_test_suite&#32;=&#32;in;
3609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clear&#32;state</emphasis>
3610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_description&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_skip&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_may_fail&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_should_fail&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_expected_failures&#32;=&#32;0;
3615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timeout&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3617 &#32;&#32;&#32;&#32;}
3618 
3619 &#32;&#32;&#32;&#32;TestCase::TestCase(<link linkend="_namespacedoctest_1_1detail_1a7b2c60631c5f4906b26acf2e6b0e6e45">funcType</link>&#32;test,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;TestSuite&amp;&#32;test_suite,
3620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;type,&#32;<emphasis role="keywordtype">int</emphasis>&#32;template_id)&#32;{
3621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_file&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;file;
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_line&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;line;
3623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_name&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;<emphasis role="comment">//&#32;will&#32;be&#32;later&#32;overridden&#32;in&#32;operator*</emphasis>
3624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_test_suite&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_test_suite;
3625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_description&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_description;
3626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_skip&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_skip;
3627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_may_fail&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_may_fail;
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_should_fail&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_should_fail;
3629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_expected_failures&#32;=&#32;test_suite.m_expected_failures;
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_timeout&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test_suite.m_timeout;
3631 
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_test&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;test;
3633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;type;
3634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_template_id&#32;=&#32;template_id;
3635 &#32;&#32;&#32;&#32;}
3636 
3637 &#32;&#32;&#32;&#32;TestCase::TestCase(<emphasis role="keyword">const</emphasis>&#32;TestCase&amp;&#32;other)
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;TestCaseData()&#32;{
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;other;
3640 &#32;&#32;&#32;&#32;}
3641 
3642 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(26434)&#32;<emphasis role="comment">//&#32;hides&#32;a&#32;non-virtual&#32;function</emphasis>
3643 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1ac5c55a5916aeff43fc7c2b61a41bcd88">DOCTEST_MSVC_SUPPRESS_WARNING</link>(26437)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;slice</emphasis>
3644 &#32;&#32;&#32;&#32;TestCase&amp;&#32;TestCase::operator=(const&#32;TestCase&amp;&#32;other)&#32;{
3645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>TestCaseData&amp;<emphasis role="keyword">&gt;</emphasis>(*this)&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>TestCaseData&amp;<emphasis role="keyword">&gt;</emphasis>(other);
3646 
3647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_test&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;other.m_test;
3648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;other.m_type;
3649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_template_id&#32;=&#32;other.m_template_id;
3650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_full_name&#32;&#32;&#32;=&#32;other.m_full_name;
3651 
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_template_id&#32;!=&#32;-1)
3653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_name&#32;=&#32;m_full_name.c_str();
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3655 &#32;&#32;&#32;&#32;}
3656 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
3657 
3658 &#32;&#32;&#32;&#32;TestCase&amp;&#32;TestCase::operator*(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{
3659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_name&#32;=&#32;in;
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;make&#32;a&#32;new&#32;name&#32;with&#32;an&#32;appended&#32;type&#32;for&#32;templated&#32;test&#32;case</emphasis>
3661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_template_id&#32;!=&#32;-1)&#32;{
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_full_name&#32;=&#32;String(m_name)&#32;+&#32;m_type;
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;redirect&#32;the&#32;name&#32;to&#32;point&#32;to&#32;the&#32;newly&#32;constructed&#32;full&#32;name</emphasis>
3664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_name&#32;=&#32;m_full_name.c_str();
3665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3667 &#32;&#32;&#32;&#32;}
3668 
3669 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1afa15b277b9a277793b7adf129e0128d9">TestCase::operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;TestCase&amp;&#32;other)<emphasis role="keyword">&#32;const&#32;</emphasis>{
3670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_line&#32;!=&#32;other.m_line)
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_line&#32;&lt;&#32;other.m_line;
3672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;file_cmp&#32;=&#32;m_file.compare(other.m_file);
3673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(file_cmp&#32;!=&#32;0)
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;file_cmp&#32;&lt;&#32;0;
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_template_id&#32;&lt;&#32;other.m_template_id;
3676 &#32;&#32;&#32;&#32;}
3677 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3678 <emphasis role="keyword">namespace&#32;</emphasis>{
3679 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
3680 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;sorting&#32;tests&#32;by&#32;file/line</emphasis>
3681 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;fileOrderComparator(<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;rhs)&#32;{
3682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;needed&#32;because&#32;MSVC&#32;gives&#32;different&#32;case&#32;for&#32;drive&#32;letters</emphasis>
3683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;__FILE__&#32;when&#32;evaluated&#32;in&#32;a&#32;header&#32;and&#32;a&#32;source&#32;file</emphasis>
3684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;res&#32;=&#32;lhs-&gt;m_file.compare(rhs-&gt;m_file,&#32;<emphasis role="keywordtype">bool</emphasis>(<link linkend="_doctest_8h_1ac15060779a07a8f5ffc6af7543283a6a">DOCTEST_MSVC</link>));
3685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(res&#32;!=&#32;0)
3686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res&#32;&lt;&#32;0;
3687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(lhs-&gt;m_line&#32;!=&#32;rhs-&gt;m_line)
3688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs-&gt;m_line&#32;&lt;&#32;rhs-&gt;m_line;
3689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs-&gt;m_template_id&#32;&lt;&#32;rhs-&gt;m_template_id;
3690 &#32;&#32;&#32;&#32;}
3691 
3692 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;sorting&#32;tests&#32;by&#32;suite/file/line</emphasis>
3693 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;suiteOrderComparator(<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;rhs)&#32;{
3694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;res&#32;=&#32;std::strcmp(lhs-&gt;m_test_suite,&#32;rhs-&gt;m_test_suite);
3695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(res&#32;!=&#32;0)
3696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res&#32;&lt;&#32;0;
3697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fileOrderComparator(lhs,&#32;rhs);
3698 &#32;&#32;&#32;&#32;}
3699 
3700 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;sorting&#32;tests&#32;by&#32;name/suite/file/line</emphasis>
3701 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;nameOrderComparator(<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCase*&#32;rhs)&#32;{
3702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;res&#32;=&#32;std::strcmp(lhs-&gt;m_name,&#32;rhs-&gt;m_name);
3703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(res&#32;!=&#32;0)
3704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res&#32;&lt;&#32;0;
3705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;suiteOrderComparator(lhs,&#32;rhs);
3706 &#32;&#32;&#32;&#32;}
3707 
3708 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;the&#32;registered&#32;tests</emphasis>
3709 &#32;&#32;&#32;&#32;std::set&lt;TestCase&gt;&amp;&#32;getRegisteredTests()&#32;{
3710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::set&lt;TestCase&gt;&#32;data;
3711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
3712 &#32;&#32;&#32;&#32;}
3713 
3714 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3715 &#32;&#32;&#32;&#32;HANDLE&#32;g_stdoutHandle;
3716 &#32;&#32;&#32;&#32;WORD&#32;&#32;&#32;g_origFgAttrs;
3717 &#32;&#32;&#32;&#32;WORD&#32;&#32;&#32;g_origBgAttrs;
3718 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;g_attrsInitted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3719 
3720 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;colors_init()&#32;{
3721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!g_attrsInitted)&#32;{
3722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_stdoutHandle&#32;=&#32;GetStdHandle(STD_OUTPUT_HANDLE);
3723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_attrsInitted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CONSOLE_SCREEN_BUFFER_INFO&#32;csbiInfo;
3725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetConsoleScreenBufferInfo(g_stdoutHandle,&#32;&amp;csbiInfo);
3726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_origFgAttrs&#32;=&#32;csbiInfo.wAttributes&#32;&amp;&#32;~(BACKGROUND_GREEN&#32;|&#32;BACKGROUND_RED&#32;|
3727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BACKGROUND_BLUE&#32;|&#32;BACKGROUND_INTENSITY);
3728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_origBgAttrs&#32;=&#32;csbiInfo.wAttributes&#32;&amp;&#32;~(FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|
3729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FOREGROUND_BLUE&#32;|&#32;FOREGROUND_INTENSITY);
3730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
3732 &#32;&#32;&#32;&#32;}
3733 
3734 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dumy_init_console_colors&#32;=&#32;colors_init();
3735 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3736 
3737 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wdeprecated-declarations&quot;</emphasis>)
3738 &#32;&#32;&#32;&#32;void&#32;color_to_stream(std::<link linkend="_classbasic__ostream">ostream</link>&amp;&#32;s,&#32;Color::<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">Enum</link>&#32;code)&#32;{
3739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((void)s);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;DOCTEST_CONFIG_COLORS_NONE&#32;or&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((void)code);&#32;<emphasis role="comment">//&#32;for&#32;DOCTEST_CONFIG_COLORS_NONE</emphasis>
3741 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_COLORS_ANSI</emphasis>
3742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g_no_colors&#32;||
3743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(isatty(STDOUT_FILENO)&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;<link linkend="_structdoctest_1_1_context_options_1a8cd276e86a209f3d5486eb6c5a2a29bf">force_colors</link>&#32;==&#32;<emphasis role="keyword">false</emphasis>))
3744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3745 
3746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(code)&#32;{&#32;
3749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;31m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Color::Green</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;32m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aada3ad8958b1319450cc20f3f8e5e2d6">Color::Blue</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;34m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;36m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>:&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;33m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aa2a431a059ed0e85160db8967c8ace58">Color::Grey</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[1;30m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a44f079a43a4709abd7d6f22b317838a2">Color::LightGrey</link>:&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0;37m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a236dfdbcd49d10dbf1a31f9e2947a671">Color::BrightRed</link>:&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[1;31m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a016090b96620a42a63dadf0265977664">Color::BrightGreen</link>:&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[1;32m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a4f80853796b4875d61ff5e4ad138492e">Color::BrightWhite</link>:&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[1;37m&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
3759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Color::Bright</link>:&#32;<emphasis role="comment">//&#32;invalid</emphasis>
3760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>:
3761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a0bf060b447441fbf2e4beeb25370a808">Color::White</link>:
3762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col&#32;=&#32;<emphasis role="stringliteral">&quot;[0m&quot;</emphasis>;
3763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\033&quot;</emphasis>&#32;&lt;&lt;&#32;col;
3766 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_COLORS_ANSI</emphasis>
3767 
3768 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g_no_colors&#32;||
3770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(isatty(fileno(stdout))&#32;==&#32;<emphasis role="keyword">false</emphasis>&#32;&amp;&amp;&#32;<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;<link linkend="_structdoctest_1_1_context_options_1a8cd276e86a209f3d5486eb6c5a2a29bf">force_colors</link>&#32;==&#32;<emphasis role="keyword">false</emphasis>))
3771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3772 
3773 <emphasis role="preprocessor">#define&#32;DOCTEST_SET_ATTR(x)&#32;SetConsoleTextAttribute(g_stdoutHandle,&#32;x&#32;|&#32;g_origBgAttrs)</emphasis>
3774 
3775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(code)&#32;{
3777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a0bf060b447441fbf2e4beeb25370a808">Color::White</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_BLUE);&#32;<emphasis role="keywordflow">break</emphasis>;
3778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_RED);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Color::Green</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_GREEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aada3ad8958b1319450cc20f3f8e5e2d6">Color::Blue</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_BLUE);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_BLUE&#32;|&#32;FOREGROUND_GREEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>:&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_RED&#32;|&#32;FOREGROUND_GREEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aa2a431a059ed0e85160db8967c8ace58">Color::Grey</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a44f079a43a4709abd7d6f22b317838a2">Color::LightGrey</link>:&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a236dfdbcd49d10dbf1a31f9e2947a671">Color::BrightRed</link>:&#32;&#32;&#32;DOCTEST_SET_ATTR(FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_RED);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a016090b96620a42a63dadf0265977664">Color::BrightGreen</link>:&#32;DOCTEST_SET_ATTR(FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_GREEN);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a4f80853796b4875d61ff5e4ad138492e">Color::BrightWhite</link>:&#32;DOCTEST_SET_ATTR(FOREGROUND_INTENSITY&#32;|&#32;FOREGROUND_GREEN&#32;|&#32;FOREGROUND_RED&#32;|&#32;FOREGROUND_BLUE);&#32;<emphasis role="keywordflow">break</emphasis>;
3788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>:
3789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a7659647d16a78c607f9bafaa207b9e07">Color::Bright</link>:&#32;<emphasis role="comment">//&#32;invalid</emphasis>
3790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_SET_ATTR(g_origFgAttrs);
3791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3793 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_COLORS_WINDOWS</emphasis>
3794 &#32;&#32;&#32;&#32;}
3795 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
3796 
3797 &#32;&#32;&#32;&#32;std::vector&lt;const&#32;IExceptionTranslator*&gt;&amp;&#32;getExceptionTranslators()&#32;{
3798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::vector&lt;const&#32;IExceptionTranslator*&gt;&#32;data;
3799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data;
3800 &#32;&#32;&#32;&#32;}
3801 
3802 &#32;&#32;&#32;&#32;String&#32;translateActiveException()&#32;{
3803 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;res;
3805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;&#32;translators&#32;=&#32;getExceptionTranslators();
3806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;translators)
3807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(curr-&gt;translate(res))
3808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;res;
3809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
3810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wcatch-value&quot;</emphasis>)
3811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">try</emphasis>&#32;{
3812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;
3813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(std::exception&amp;&#32;ex)&#32;{
3814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ex.what();
3815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(std::string&amp;&#32;msg)&#32;{
3816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg.c_str();
3817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;msg)&#32;{
3818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg;
3819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(...)&#32;{
3820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;unknown&#32;exception&quot;</emphasis>;
3821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
3823 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
3824 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
3826 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
3827 &#32;&#32;&#32;&#32;}
3828 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3829 
3830 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
3831 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;used&#32;by&#32;the&#32;macros&#32;for&#32;registering&#32;tests</emphasis>
3832 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a00f99edefb8490a8e2602d58c96431f4">regTest</link>(<emphasis role="keyword">const</emphasis>&#32;TestCase&amp;&#32;tc)&#32;{
3833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getRegisteredTests().insert(tc);
3834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
3835 &#32;&#32;&#32;&#32;}
3836 
3837 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sets&#32;the&#32;current&#32;test&#32;suite</emphasis>
3838 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1ae79cb8df06d35468dd0ba9f04c85802c">setTestSuite</link>(<emphasis role="keyword">const</emphasis>&#32;TestSuite&amp;&#32;ts)&#32;{
3839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest__detail__test__suite__ns_1a63d04c2e0ba35dff1e33cf0a24ec66c8">doctest_detail_test_suite_ns::getCurrentTestSuite</link>()&#32;=&#32;ts;
3840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
3841 &#32;&#32;&#32;&#32;}
3842 
3843 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_IS_DEBUGGER_ACTIVE</emphasis>
3844 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;DOCTEST_IS_DEBUGGER_ACTIVE();&#32;}
3845 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_IS_DEBUGGER_ACTIVE</emphasis>
3846 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_MAC</emphasis>
3847 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;function&#32;is&#32;taken&#32;directly&#32;from&#32;the&#32;following&#32;technical&#32;note:</emphasis>
3848 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://developer.apple.com/library/archive/qa/qa1361/_index.html</emphasis>
3849 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;the&#32;current&#32;process&#32;is&#32;being&#32;debugged&#32;(either</emphasis>
3850 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;running&#32;under&#32;the&#32;debugger&#32;or&#32;has&#32;a&#32;debugger&#32;attached&#32;post&#32;facto).</emphasis>
3851 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;{
3852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[4];
3853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kinfo_proc&#32;info;
3854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;size;
3855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;the&#32;flags&#32;so&#32;that,&#32;if&#32;sysctl&#32;fails&#32;for&#32;some&#32;bizarre</emphasis>
3856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reason,&#32;we&#32;get&#32;a&#32;predictable&#32;result.</emphasis>
3857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info.kp_proc.p_flag&#32;=&#32;0;
3858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;mib,&#32;which&#32;tells&#32;sysctl&#32;the&#32;info&#32;we&#32;want,&#32;in&#32;this&#32;case</emphasis>
3859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&apos;re&#32;looking&#32;for&#32;information&#32;about&#32;a&#32;specific&#32;process&#32;ID.</emphasis>
3860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[0]&#32;=&#32;CTL_KERN;
3861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[1]&#32;=&#32;KERN_PROC;
3862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[2]&#32;=&#32;KERN_PROC_PID;
3863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mib[3]&#32;=&#32;getpid();
3864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;sysctl.</emphasis>
3865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(info);
3866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sysctl(mib,&#32;DOCTEST_COUNTOF(mib),&#32;&amp;info,&#32;&amp;size,&#32;0,&#32;0)&#32;!=&#32;0)&#32;{
3867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nCall&#32;to&#32;sysctl&#32;failed&#32;-&#32;unable&#32;to&#32;determine&#32;if&#32;debugger&#32;is&#32;active&#32;**\n&quot;</emphasis>;
3868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;re&#32;being&#32;debugged&#32;if&#32;the&#32;P_TRACED&#32;flag&#32;is&#32;set.</emphasis>
3871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((info.kp_proc.p_flag&#32;&amp;&#32;P_TRACED)&#32;!=&#32;0);
3872 &#32;&#32;&#32;&#32;}
3873 <emphasis role="preprocessor">#elif&#32;DOCTEST_MSVC&#32;||&#32;defined(__MINGW32__)&#32;||&#32;defined(__MINGW64__)</emphasis>
3874 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;{&#32;return&#32;::IsDebuggerPresent()&#32;!=&#32;0;&#32;}
3875 <emphasis role="preprocessor">#else</emphasis>
3876 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
3877 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;Platform</emphasis>
3878 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_IS_DEBUGGER_ACTIVE</emphasis>
3879 
3880 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a3887426da16e0d12e6f0e270a767a6a5">registerExceptionTranslatorImpl</link>(<emphasis role="keyword">const</emphasis>&#32;IExceptionTranslator*&#32;et)&#32;{
3881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::find(getExceptionTranslators().begin(),&#32;getExceptionTranslators().end(),&#32;et)&#32;==
3882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getExceptionTranslators().end())
3883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getExceptionTranslators().push_back(et);
3884 &#32;&#32;&#32;&#32;}
3885 
3886 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
3887 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3889 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING</emphasis>
3890 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;std::boolalpha&#32;&lt;&lt;&#32;in&#32;&lt;&lt;&#32;std::noboolalpha;&#32;}
3891 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">float</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3892 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">double</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3893 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">double</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3894 
3895 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3896 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3897 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3898 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3899 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3900 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3901 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3902 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3903 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3904 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3905 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a22df719818a3df2b975ba0f7045cc8fd">toStream</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>*&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;in)&#32;{&#32;*s&#32;&lt;&lt;&#32;in;&#32;}
3906 
3907 &#32;&#32;&#32;&#32;DOCTEST_THREAD_LOCAL&#32;std::vector&lt;IContextScope*&gt;&#32;g_infoContexts;&#32;<emphasis role="comment">//&#32;for&#32;logging&#32;with&#32;INFO()</emphasis>
3908 
3909 &#32;&#32;&#32;&#32;ContextScopeBase::ContextScopeBase()&#32;{
3910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_infoContexts.push_back(<emphasis role="keyword">this</emphasis>);
3911 &#32;&#32;&#32;&#32;}
3912 
3913 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(4996)&#32;<emphasis role="comment">//&#32;std::uncaught_exception&#32;is&#32;deprecated&#32;in&#32;C++17&#32;</emphasis>
3914 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a93a351e10b8ce997502f34e89a755b6e">DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH</link>(&quot;-Wdeprecated-declarations&quot;)&#32;
3915 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(&quot;-Wdeprecated-declarations&quot;)
3916 
3917 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;destroy&#32;cannot&#32;be&#32;inlined&#32;into&#32;the&#32;destructor&#32;because&#32;that&#32;would&#32;mean&#32;calling&#32;stringify&#32;after</emphasis>
3918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ContextScope&#32;has&#32;been&#32;destroyed&#32;(base&#32;class&#32;destructors&#32;run&#32;after&#32;derived&#32;class&#32;destructors).</emphasis>
3919 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Instead,&#32;ContextScope&#32;calls&#32;this&#32;method&#32;directly&#32;from&#32;its&#32;destructor.</emphasis>
3920 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ContextScopeBase::destroy()&#32;{
3921 <emphasis role="preprocessor">#if&#32;defined(__cpp_lib_uncaught_exceptions)&#32;&amp;&amp;&#32;__cpp_lib_uncaught_exceptions&#32;&gt;=&#32;201411L</emphasis>
3922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::uncaught_exceptions()&#32;&gt;&#32;0)&#32;{
3923 <emphasis role="preprocessor">#else</emphasis>
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::uncaught_exception())&#32;{
3925 <emphasis role="preprocessor">#endif</emphasis>
3926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;s;
3927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;stringify(&amp;s);
3928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;stringifiedContexts.push_back(s.str().c_str());
3929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_infoContexts.pop_back();
3931 &#32;&#32;&#32;&#32;}
3932 
3933 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>&#32;&#32;
3934 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>&#32;&#32;&#32;&#32;
3935 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
3936 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
3937 <emphasis role="keyword">namespace&#32;</emphasis>{
3938 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
3939 
3940 <emphasis role="preprocessor">#if&#32;!defined(DOCTEST_CONFIG_POSIX_SIGNALS)&#32;&amp;&amp;&#32;!defined(DOCTEST_CONFIG_WINDOWS_SEH)</emphasis>
3941 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>FatalConditionHandler
3942 &#32;&#32;&#32;&#32;{
3943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;{}
3944 &#32;&#32;&#32;&#32;};
3945 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_POSIX_SIGNALS&#32;||&#32;DOCTEST_CONFIG_WINDOWS_SEH</emphasis>
3946 
3947 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportFatal(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;);
3948 
3949 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
3950 
3951 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SignalDefs
3952 &#32;&#32;&#32;&#32;{
3953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DWORD&#32;id;
3954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name;
3955 &#32;&#32;&#32;&#32;};
3956 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;is&#32;no&#32;1-1&#32;mapping&#32;between&#32;signals&#32;and&#32;windows&#32;exceptions.</emphasis>
3957 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Windows&#32;can&#32;easily&#32;distinguish&#32;between&#32;SO&#32;and&#32;SigSegV,</emphasis>
3958 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;SigInt,&#32;SigTerm,&#32;etc&#32;are&#32;handled&#32;differently.</emphasis>
3959 &#32;&#32;&#32;&#32;SignalDefs&#32;signalDefs[]&#32;=&#32;{
3960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{EXCEPTION_ILLEGAL_INSTRUCTION,&#32;<emphasis role="stringliteral">&quot;SIGILL&#32;-&#32;Illegal&#32;instruction&#32;signal&quot;</emphasis>},
3961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{EXCEPTION_STACK_OVERFLOW,&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Stack&#32;overflow&quot;</emphasis>},
3962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{EXCEPTION_ACCESS_VIOLATION,&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Segmentation&#32;violation&#32;signal&quot;</emphasis>},
3963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{EXCEPTION_INT_DIVIDE_BY_ZERO,&#32;<emphasis role="stringliteral">&quot;Divide&#32;by&#32;zero&#32;error&quot;</emphasis>},
3964 &#32;&#32;&#32;&#32;};
3965 
3966 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>FatalConditionHandler
3967 &#32;&#32;&#32;&#32;{
3968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;LONG&#32;CALLBACK&#32;handleException(PEXCEPTION_POINTERS&#32;ExceptionInfo)&#32;{
3969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DOCTEST_COUNTOF(signalDefs);&#32;++i)&#32;{
3970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode&#32;==&#32;signalDefs[i].id)&#32;{
3971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportFatal(signalDefs[i].name);
3972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;its&#32;not&#32;an&#32;exception&#32;we&#32;care&#32;about,&#32;pass&#32;it&#32;along.</emphasis>
3976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;stops&#32;us&#32;from&#32;eating&#32;debugger&#32;breaks&#32;etc.</emphasis>
3977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXCEPTION_CONTINUE_SEARCH;
3978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3979 
3980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler()&#32;{
3981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;32k&#32;seems&#32;enough&#32;for&#32;doctest&#32;to&#32;handle&#32;stack&#32;overflow,</emphasis>
3983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;the&#32;value&#32;was&#32;found&#32;experimentally,&#32;so&#32;there&#32;is&#32;no&#32;strong&#32;guarantee</emphasis>
3984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guaranteeSize&#32;=&#32;32&#32;*&#32;1024;
3985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Register&#32;an&#32;unhandled&#32;exception&#32;filter</emphasis>
3986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousTop&#32;=&#32;SetUnhandledExceptionFilter(handleException);
3987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Pass&#32;in&#32;guarantee&#32;size&#32;to&#32;be&#32;filled</emphasis>
3988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetThreadStackGuarantee(&amp;guaranteeSize);
3989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3990 
3991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;{
3992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isSet)&#32;{
3993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unregister&#32;handler&#32;and&#32;restore&#32;the&#32;old&#32;guarantee</emphasis>
3994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetUnhandledExceptionFilter(previousTop);
3995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetThreadStackGuarantee(&amp;guaranteeSize);
3996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousTop&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
3997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4000 
4001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~FatalConditionHandler()&#32;{&#32;reset();&#32;}
4002 
4003 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isSet;
4005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;ULONG&#32;guaranteeSize;
4006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;LPTOP_LEVEL_EXCEPTION_FILTER&#32;previousTop;
4007 &#32;&#32;&#32;&#32;};
4008 
4009 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FatalConditionHandler::isSet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4010 &#32;&#32;&#32;&#32;ULONG&#32;FatalConditionHandler::guaranteeSize&#32;=&#32;0;
4011 &#32;&#32;&#32;&#32;LPTOP_LEVEL_EXCEPTION_FILTER&#32;FatalConditionHandler::previousTop&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4012 
4013 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
4014 
4015 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SignalDefs
4016 &#32;&#32;&#32;&#32;{
4017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;id;
4018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name;
4019 &#32;&#32;&#32;&#32;};
4020 &#32;&#32;&#32;&#32;SignalDefs&#32;signalDefs[]&#32;=&#32;{{SIGINT,&#32;<emphasis role="stringliteral">&quot;SIGINT&#32;-&#32;Terminal&#32;interrupt&#32;signal&quot;</emphasis>},
4021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{SIGILL,&#32;<emphasis role="stringliteral">&quot;SIGILL&#32;-&#32;Illegal&#32;instruction&#32;signal&quot;</emphasis>},
4022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{SIGFPE,&#32;<emphasis role="stringliteral">&quot;SIGFPE&#32;-&#32;Floating&#32;point&#32;error&#32;signal&quot;</emphasis>},
4023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{SIGSEGV,&#32;<emphasis role="stringliteral">&quot;SIGSEGV&#32;-&#32;Segmentation&#32;violation&#32;signal&quot;</emphasis>},
4024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{SIGTERM,&#32;<emphasis role="stringliteral">&quot;SIGTERM&#32;-&#32;Termination&#32;request&#32;signal&quot;</emphasis>},
4025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{SIGABRT,&#32;<emphasis role="stringliteral">&quot;SIGABRT&#32;-&#32;Abort&#32;(abnormal&#32;termination)&#32;signal&quot;</emphasis>}};
4026 
4027 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>FatalConditionHandler
4028 &#32;&#32;&#32;&#32;{
4029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet;
4030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>sigaction&#32;oldSigActions[DOCTEST_COUNTOF(signalDefs)];
4031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;stack_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oldSigStack;
4032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;altStackMem[4&#32;*&#32;SIGSTKSZ];
4033 
4034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;handleSignal(<emphasis role="keywordtype">int</emphasis>&#32;sig)&#32;{
4035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name&#32;=&#32;<emphasis role="stringliteral">&quot;&lt;unknown&#32;signal&gt;&quot;</emphasis>;
4036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DOCTEST_COUNTOF(signalDefs);&#32;++i)&#32;{
4037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SignalDefs&amp;&#32;def&#32;=&#32;signalDefs[i];
4038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(sig&#32;==&#32;def.id)&#32;{
4039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;=&#32;def.name;
4040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reset();
4044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reportFatal(name);
4045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">raise</emphasis>(sig);
4046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4047 
4048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler()&#32;{
4049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_t&#32;sigStack;
4051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_sp&#32;&#32;&#32;&#32;=&#32;altStackMem;
4052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_size&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(altStackMem);
4053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigStack.ss_flags&#32;=&#32;0;
4054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaltstack(&amp;sigStack,&#32;&amp;oldSigStack);
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sigaction&#32;sa&#32;=&#32;{};
4056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sa.sa_handler&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;handleSignal;&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
4057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sa.sa_flags&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;SA_ONSTACK;
4058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DOCTEST_COUNTOF(signalDefs);&#32;++i)&#32;{
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaction(signalDefs[i].<emphasis role="keywordtype">id</emphasis>,&#32;&amp;sa,&#32;&amp;oldSigActions[i]);
4060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4062 
4063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~FatalConditionHandler()&#32;{&#32;reset();&#32;}
4064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;reset()&#32;{
4065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isSet)&#32;{
4066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;signals&#32;back&#32;to&#32;previous&#32;values&#32;--&#32;hopefully&#32;nobody&#32;overwrote&#32;them&#32;in&#32;the&#32;meantime</emphasis>
4067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(std::size_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;DOCTEST_COUNTOF(signalDefs);&#32;++i)&#32;{
4068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaction(signalDefs[i].<emphasis role="keywordtype">id</emphasis>,&#32;&amp;oldSigActions[i],&#32;<emphasis role="keyword">nullptr</emphasis>);
4069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;old&#32;stack</emphasis>
4071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sigaltstack(&amp;oldSigStack,&#32;<emphasis role="keyword">nullptr</emphasis>);
4072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isSet&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4075 &#32;&#32;&#32;&#32;};
4076 
4077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler::isSet&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4078 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sigaction&#32;FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)]&#32;=&#32;{};
4079 &#32;&#32;&#32;&#32;stack_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler::oldSigStack&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
4080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler::altStackMem[]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
4081 
4082 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
4083 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_POSIX_SIGNALS&#32;||&#32;DOCTEST_CONFIG_WINDOWS_SEH</emphasis>
4084 
4085 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
4086 
4087 <emphasis role="keyword">namespace&#32;</emphasis>{
4088 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
4089 
4090 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
4091 <emphasis role="preprocessor">#define&#32;DOCTEST_OUTPUT_DEBUG_STRING(text)&#32;::OutputDebugStringA(text)</emphasis>
4092 <emphasis role="preprocessor">#else</emphasis>
4093 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;integration&#32;with&#32;XCode&#32;and&#32;other&#32;IDEs</emphasis>
4094 <emphasis role="preprocessor">#define&#32;DOCTEST_OUTPUT_DEBUG_STRING(text)&#32;</emphasis><emphasis role="comment">//&#32;NOLINT(clang-diagnostic-unused-macros)</emphasis>
4095 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;Platform</emphasis>
4096 
4097 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addAssert(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at)&#32;{
4098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>)&#32;==&#32;0)&#32;
4099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;numAssertsCurrentTest_atomic++;
4100 &#32;&#32;&#32;&#32;}
4101 
4102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addFailedAssert(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at)&#32;{
4103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>)&#32;==&#32;0)&#32;
4104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;numAssertsFailedCurrentTest_atomic++;
4105 &#32;&#32;&#32;&#32;}
4106 
4107 <emphasis role="preprocessor">#if&#32;defined(DOCTEST_CONFIG_POSIX_SIGNALS)&#32;||&#32;defined(DOCTEST_CONFIG_WINDOWS_SEH)</emphasis>
4108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;reportFatal(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;message)&#32;{
4109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca362a350971c370e7bf89f1993aeb2eeb">TestCaseFailureReason::Crash</link>;
4110 
4111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,&#32;{message.c_str(),&#32;<emphasis role="keyword">true</emphasis>});
4112 
4113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(g_cs-&gt;subcasesStack.size())&#32;{
4114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;subcasesStack.pop_back();
4115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>);
4116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4117 
4118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;finalizeTestCaseData();
4119 
4120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end,&#32;*g_cs);
4121 
4122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end,&#32;*g_cs);
4123 &#32;&#32;&#32;&#32;}
4124 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_POSIX_SIGNALS&#32;||&#32;DOCTEST_CONFIG_WINDOWS_SEH</emphasis>
4125 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
4126 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
4127 
4128 &#32;&#32;&#32;&#32;ResultBuilder::ResultBuilder(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,
4129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;exception_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;exception_string)&#32;{
4130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_test_case&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;g_cs-&gt;currentTest;
4131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_at&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;at;
4132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_file&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;file;
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_line&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;line;
4134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_expr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;expr;
4135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_threw&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_threw_as&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exception_type&#32;&#32;&#32;=&#32;exception_type;
4139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exception_string&#32;=&#32;exception_string;
4140 <emphasis role="preprocessor">#if&#32;DOCTEST_MSVC</emphasis>
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_expr[0]&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>)&#32;<emphasis role="comment">//&#32;this&#32;happens&#32;when&#32;variadic&#32;macros&#32;are&#32;disabled&#32;under&#32;MSVC</emphasis>
4142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++m_expr;
4143 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;MSVC</emphasis>
4144 &#32;&#32;&#32;&#32;}
4145 
4146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResultBuilder::setResult(<emphasis role="keyword">const</emphasis>&#32;Result&amp;&#32;res)&#32;{
4147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_decomp&#32;=&#32;res.m_decomp;
4148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!res.m_passed;
4149 &#32;&#32;&#32;&#32;}
4150 
4151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResultBuilder::translateException()&#32;{
4152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_threw&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exception&#32;=&#32;translateActiveException();
4154 &#32;&#32;&#32;&#32;}
4155 
4156 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ResultBuilder::log()&#32;{
4157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">assertType::is_throws</link>)&#32;{&#32;
4158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!m_threw;
4159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>((m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>)&#32;&amp;&amp;&#32;(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>))&#32;{&#32;
4160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!m_threw_as&#32;||&#32;(m_exception&#32;!=&#32;m_exception_string);
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>)&#32;{&#32;
4162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;!m_threw_as;
4163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>)&#32;{&#32;
4164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;m_exception&#32;!=&#32;m_exception_string;
4165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">assertType::is_nothrow</link>)&#32;{&#32;
4166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_failed&#32;=&#32;m_threw;
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4168 
4169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_exception.size())
4170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_exception&#32;=&#32;String(<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>)&#32;+&#32;m_exception&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;&quot;</emphasis>;
4171 
4172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_namespacedoctest_1a0b03060093b3894c976b6ae84e55f3f2">is_running_in_test</link>)&#32;{
4173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addAssert(m_at);
4174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert,&#32;*<emphasis role="keyword">this</emphasis>);
4175 
4176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_failed)
4177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addFailedAssert(m_at);
4178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(m_failed)&#32;{
4179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a0ff832be68bf666d856aefd539e1ce81">failed_out_of_a_testing_context</link>(*<emphasis role="keyword">this</emphasis>);
4180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4181 
4182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;m_failed&#32;&amp;&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;&amp;&amp;
4183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;<link linkend="_structdoctest_1_1_context_options_1af82a6fc802b8ed33a84ea96e85b0d911">no_breaks</link>;&#32;<emphasis role="comment">//&#32;break&#32;into&#32;debugger</emphasis>
4184 &#32;&#32;&#32;&#32;}
4185 
4186 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ResultBuilder::react()<emphasis role="keyword">&#32;const&#32;</emphasis>{
4187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_failed&#32;&amp;&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1acec9ff072dd86af95225a8beb9c57298">checkIfShouldThrow</link>(m_at))
4188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a60ffd50b9ee7adfcafc078f333aac8b6">throwException</link>();
4189 &#32;&#32;&#32;&#32;}
4190 
4191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a0ff832be68bf666d856aefd539e1ce81">failed_out_of_a_testing_context</link>(<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;&#32;ad)&#32;{
4192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g_cs-&gt;ah)
4193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs-&gt;ah(ad);
4194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::abort();
4196 &#32;&#32;&#32;&#32;}
4197 
4198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a6d4efb043e9e5a6fa0db64f0e230a7a7">decomp_assert</link>(<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;expr,
4199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result&#32;result)&#32;{
4200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;failed&#32;=&#32;!result.m_passed;
4201 
4202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
4203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IF&#32;THE&#32;DEBUGGER&#32;BREAKS&#32;HERE&#32;-&#32;GO&#32;1&#32;LEVEL&#32;UP&#32;IN&#32;THE&#32;CALLSTACK&#32;FOR&#32;THE&#32;FAILING&#32;ASSERT</emphasis>
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;THIS&#32;IS&#32;THE&#32;EFFECT&#32;OF&#32;HAVING&#32;&apos;DOCTEST_CONFIG_SUPER_FAST_ASSERTS&apos;&#32;DEFINED</emphasis>
4205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;###################################################################################</emphasis>
4206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1ab4f2e4a4e2bbb1ea221db5cdf117a014">DOCTEST_ASSERT_OUT_OF_TESTS</link>(result.m_decomp);
4207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a91330bd2fb42d1fac4aa07e425a20f2e">DOCTEST_ASSERT_IN_TESTS</link>(result.m_decomp);
4208 &#32;&#32;&#32;&#32;}
4209 
4210 &#32;&#32;&#32;&#32;MessageBuilder::MessageBuilder(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;severity)&#32;{
4211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_stream&#32;&#32;&#32;=&#32;<link linkend="_namespacedoctest_1_1detail_1ab4df12a4ff9fad5f16edcc1c54f6c4fc">getTlsOss</link>();
4212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_file&#32;&#32;&#32;&#32;&#32;=&#32;file;
4213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_line&#32;&#32;&#32;&#32;&#32;=&#32;line;
4214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_severity&#32;=&#32;severity;
4215 &#32;&#32;&#32;&#32;}
4216 
4217 &#32;&#32;&#32;&#32;IExceptionTranslator::IExceptionTranslator()&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4218 &#32;&#32;&#32;&#32;IExceptionTranslator::~IExceptionTranslator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4219 
4220 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;MessageBuilder::log()&#32;{
4221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_string&#32;=&#32;<link linkend="_namespacedoctest_1_1detail_1a7b0b3df5fe79d7ffa8fa138201476df1">getTlsOssResult</link>();
4222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(log_message,&#32;*<emphasis role="keyword">this</emphasis>);
4223 
4224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isWarn&#32;=&#32;m_severity&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>;
4225 
4226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;warn&#32;is&#32;just&#32;a&#32;message&#32;in&#32;this&#32;context&#32;so&#32;we&#32;don&apos;t&#32;treat&#32;it&#32;as&#32;an&#32;assert</emphasis>
4227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!isWarn)&#32;{
4228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addAssert(m_severity);
4229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addFailedAssert(m_severity);
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4231 
4232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>()&#32;&amp;&amp;&#32;!<link linkend="_namespacedoctest_1a13c02a469cfc2264d547fc0fc3a55569">getContextOptions</link>()-&gt;<link linkend="_structdoctest_1_1_context_options_1af82a6fc802b8ed33a84ea96e85b0d911">no_breaks</link>&#32;&amp;&amp;&#32;!isWarn;&#32;<emphasis role="comment">//&#32;break</emphasis>
4233 &#32;&#32;&#32;&#32;}
4234 
4235 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;MessageBuilder::react()&#32;{
4236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(m_severity&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">assertType::is_require</link>)&#32;
4237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1a60ffd50b9ee7adfcafc078f333aac8b6">throwException</link>();
4238 &#32;&#32;&#32;&#32;}
4239 
4240 &#32;&#32;&#32;&#32;MessageBuilder::~MessageBuilder()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4241 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
4242 <emphasis role="keyword">namespace&#32;</emphasis>{
4243 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
4244 
4245 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Ex&gt;
4246 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a4ef00bd4c0653f31a2e60e5e5f2fcf10">DOCTEST_NORETURN</link>&#32;<emphasis role="keywordtype">void</emphasis>&#32;throw_exception(Ex&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;e)&#32;{
4247 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
4248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;e;
4249 <emphasis role="preprocessor">#else&#32;&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
4250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;doctest&#32;will&#32;terminate&#32;because&#32;it&#32;needed&#32;to&#32;throw&#32;an&#32;exception.\n&quot;</emphasis>
4251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;message&#32;was:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
4252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::terminate();
4253 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
4254 &#32;&#32;&#32;&#32;}
4255 
4256 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_INTERNAL_ERROR</emphasis>
4257 <emphasis role="preprocessor">#define&#32;DOCTEST_INTERNAL_ERROR(msg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;throw_exception(std::logic_error(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__FILE__&#32;&quot;:&quot;</emphasis>&#32;DOCTEST_TOSTR(__LINE__)&#32;&quot;:&#32;Internal&#32;doctest&#32;error:&#32;&quot;&#32;msg))
4260 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_INTERNAL_ERROR</emphasis>
4261 
4262 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
4263 
4264 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4265 <emphasis role="comment">//&#32;The&#32;following&#32;code&#32;has&#32;been&#32;taken&#32;verbatim&#32;from&#32;Catch2/include/internal/catch_xmlwriter.h/cpp</emphasis>
4266 <emphasis role="comment">//&#32;This&#32;is&#32;done&#32;so&#32;cherry-picking&#32;bug&#32;fixes&#32;is&#32;trivial&#32;-&#32;even&#32;the&#32;style/formatting&#32;is&#32;untouched.</emphasis>
4267 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4268 
4269 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>XmlEncode&#32;{
4270 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;ForWhat&#32;{&#32;ForTextNodes,&#32;ForAttributes&#32;};
4272 
4273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlEncode(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;ForWhat&#32;forWhat&#32;=&#32;ForTextNodes&#32;);
4274 
4275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;encodeTo(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;)&#32;<emphasis role="keyword">const</emphasis>;
4276 
4277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1_color_1a2cc3f4bdda7bfd2e0e3faf7e678d3b98">operator &lt;&lt; </link>(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;XmlEncode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;xmlEncode&#32;);
4278 
4279 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_str;
4281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ForWhat&#32;m_forWhat;
4282 &#32;&#32;&#32;&#32;};
4283 
4284 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>XmlWriter&#32;{
4285 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4286 
4287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ScopedElement&#32;{
4288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
4289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement(&#32;XmlWriter*&#32;writer&#32;);
4290 
4291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<link linkend="_doctest_8h_1a0a3c492342c533baad7b21af7903e6b4">DOCTEST_NOEXCEPT</link>;
4292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;operator=(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<link linkend="_doctest_8h_1a0a3c492342c533baad7b21af7903e6b4">DOCTEST_NOEXCEPT</link>;
4293 
4294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ScopedElement();
4295 
4296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;indent&#32;=&#32;<emphasis role="keyword">true</emphasis>&#32;);
4297 
4298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
4300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;writeAttribute(&#32;name,&#32;attribute&#32;);
4301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4303 
4304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;XmlWriter*&#32;m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4307 
4308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;=&#32;std::cout&#32;);
4309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~XmlWriter();
4310 
4311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter(&#32;XmlWriter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
4312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;operator=(&#32;XmlWriter&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
4313 
4314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;startElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;);
4315 
4316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&#32;scopedElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;);
4317 
4318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;endElement();
4319 
4320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;);
4321 
4322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;attribute&#32;);
4323 
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;attribute&#32;);
4325 
4326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
4327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;T&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;rss;
4329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rss&#32;&lt;&lt;&#32;attribute;
4330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;writeAttribute(&#32;name,&#32;rss.str()&#32;);
4331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4332 
4333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&amp;&#32;writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;indent&#32;=&#32;<emphasis role="keyword">true</emphasis>&#32;);
4334 
4335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//XmlWriter&amp;&#32;writeComment(&#32;std::string&#32;const&amp;&#32;text&#32;);</emphasis>
4336 
4337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//void&#32;writeStylesheetRef(&#32;std::string&#32;const&amp;&#32;url&#32;);</emphasis>
4338 
4339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//XmlWriter&amp;&#32;writeBlankLine();</emphasis>
4340 
4341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ensureTagClosed();
4342 
4343 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
4344 
4345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;writeDeclaration();
4346 
4347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;newlineIfNecessary();
4348 
4349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;m_needsNewline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;std::string&gt;&#32;m_tags;
4352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;m_indent;
4353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;m_os;
4354 &#32;&#32;&#32;&#32;};
4355 
4356 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4357 <emphasis role="comment">//&#32;The&#32;following&#32;code&#32;has&#32;been&#32;taken&#32;verbatim&#32;from&#32;Catch2/include/internal/catch_xmlwriter.h/cpp</emphasis>
4358 <emphasis role="comment">//&#32;This&#32;is&#32;done&#32;so&#32;cherry-picking&#32;bug&#32;fixes&#32;is&#32;trivial&#32;-&#32;even&#32;the&#32;style/formatting&#32;is&#32;untouched.</emphasis>
4359 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4360 
4361 <emphasis role="keyword">using</emphasis>&#32;uchar&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;char;
4362 
4363 <emphasis role="keyword">namespace&#32;</emphasis>{
4364 
4365 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;trailingBytes(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
4366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xE0)&#32;==&#32;0xC0)&#32;{
4367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;2;
4368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF0)&#32;==&#32;0xE0)&#32;{
4370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3;
4371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF8)&#32;==&#32;0xF0)&#32;{
4373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;4;
4374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_INTERNAL_ERROR(<emphasis role="stringliteral">&quot;Invalid&#32;multibyte&#32;utf-8&#32;start&#32;byte&#32;encountered&quot;</emphasis>);
4376 &#32;&#32;&#32;&#32;}
4377 
4378 &#32;&#32;&#32;&#32;uint32_t&#32;headerValue(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
4379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xE0)&#32;==&#32;0xC0)&#32;{
4380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x1F;
4381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF0)&#32;==&#32;0xE0)&#32;{
4383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x0F;
4384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((c&#32;&amp;&#32;0xF8)&#32;==&#32;0xF0)&#32;{
4386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c&#32;&amp;&#32;0x07;
4387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_INTERNAL_ERROR(<emphasis role="stringliteral">&quot;Invalid&#32;multibyte&#32;utf-8&#32;start&#32;byte&#32;encountered&quot;</emphasis>);
4389 &#32;&#32;&#32;&#32;}
4390 
4391 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;hexEscapeChar(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{
4392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::fmtflags&#32;f(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>.flags());
4393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\\x&quot;</emphasis>
4394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::uppercase&#32;&lt;&lt;&#32;std::hex&#32;&lt;&lt;&#32;std::setfill(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&lt;&lt;&#32;std::setw(2)
4395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(c);
4396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>.flags(f);
4397 &#32;&#32;&#32;&#32;}
4398 
4399 }&#32;<emphasis role="comment">//&#32;anonymous&#32;namespace</emphasis>
4400 
4401 &#32;&#32;&#32;&#32;XmlEncode::XmlEncode(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;str,&#32;ForWhat&#32;forWhat&#32;)
4402 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_str(&#32;str&#32;),
4403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_forWhat(&#32;forWhat&#32;)
4404 &#32;&#32;&#32;&#32;{}
4405 
4406 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlEncode::encodeTo(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;)<emphasis role="keyword">&#32;const&#32;</emphasis>{
4407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apostrophe&#32;escaping&#32;not&#32;necessary&#32;if&#32;we&#32;always&#32;use&#32;&quot;&#32;to&#32;write&#32;attributes</emphasis>
4408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(see:&#32;https://www.w3.org/TR/xml/#syntax)</emphasis>
4409 
4410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(&#32;std::size_t&#32;idx&#32;=&#32;0;&#32;idx&#32;&lt;&#32;m_str.size();&#32;++&#32;idx&#32;)&#32;{
4411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uchar&#32;c&#32;=&#32;m_str[idx];
4412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)&#32;{
4413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>:&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;lt;&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
4414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&amp;&apos;</emphasis>:&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;amp;&quot;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
4415 
4416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&gt;&apos;</emphasis>:
4417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See:&#32;https://www.w3.org/TR/xml/#syntax</emphasis>
4418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;&gt;&#32;2&#32;&amp;&amp;&#32;m_str[idx&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>&#32;&amp;&amp;&#32;m_str[idx&#32;-&#32;2]&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)
4419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;gt;&quot;</emphasis>;
4420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;c;
4422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4423 
4424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>:
4425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_forWhat&#32;==&#32;ForAttributes)
4426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&amp;quot;&quot;</emphasis>;
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;c;
4429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4430 
4431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
4432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;control&#32;characters&#32;and&#32;invalid&#32;utf-8</emphasis>
4433 
4434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Escape&#32;control&#32;characters&#32;in&#32;standard&#32;ascii</emphasis>
4435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0</emphasis>
4436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;0x09&#32;||&#32;(c&#32;&gt;&#32;0x0D&#32;&amp;&amp;&#32;c&#32;&lt;&#32;0x20)&#32;||&#32;c&#32;==&#32;0x7F)&#32;{
4437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;c);
4438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4440 
4441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Plain&#32;ASCII:&#32;Write&#32;it&#32;to&#32;stream</emphasis>
4442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;0x7F)&#32;{
4443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;c;
4444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4446 
4447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;UTF-8&#32;territory</emphasis>
4448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;encoding&#32;is&#32;valid&#32;and&#32;if&#32;it&#32;is&#32;not,&#32;hex&#32;escape&#32;bytes.</emphasis>
4449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Important:&#32;We&#32;do&#32;not&#32;check&#32;the&#32;exact&#32;decoded&#32;values&#32;for&#32;validity,&#32;only&#32;the&#32;encoding&#32;format</emphasis>
4450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;that&#32;this&#32;bytes&#32;is&#32;a&#32;valid&#32;lead&#32;byte:</emphasis>
4451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;means&#32;that&#32;it&#32;is&#32;not&#32;encoded&#32;as&#32;1111&#32;1XXX</emphasis>
4452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Or&#32;as&#32;10XX&#32;XXXX</emphasis>
4453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;&#32;0xC0&#32;||
4454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;&gt;=&#32;0xF8)&#32;{
4455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;c);
4456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4458 
4459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;encBytes&#32;=&#32;trailingBytes(c);
4460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Are&#32;there&#32;enough&#32;bytes&#32;left&#32;to&#32;avoid&#32;accessing&#32;out-of-bounds&#32;memory?</emphasis>
4461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idx&#32;+&#32;encBytes&#32;-&#32;1&#32;&gt;=&#32;m_str.size())&#32;{
4462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;c);
4463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;header&#32;is&#32;valid,&#32;check&#32;data</emphasis>
4466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;next&#32;encBytes&#32;bytes&#32;must&#32;together&#32;be&#32;a&#32;valid&#32;utf-8</emphasis>
4467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;means:&#32;bitpattern&#32;10XX&#32;XXXX&#32;and&#32;the&#32;extracted&#32;value&#32;is&#32;sane&#32;(ish)</emphasis>
4468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;value&#32;=&#32;headerValue(c);
4470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;n&#32;=&#32;1;&#32;n&#32;&lt;&#32;encBytes;&#32;++n)&#32;{
4471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uchar&#32;nc&#32;=&#32;m_str[idx&#32;+&#32;n];
4472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid&#32;&amp;=&#32;((nc&#32;&amp;&#32;0xC0)&#32;==&#32;0x80);
4473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;=&#32;(value&#32;&lt;&lt;&#32;6)&#32;|&#32;(nc&#32;&amp;&#32;0x3F);
4474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4475 
4476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(
4477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wrong&#32;bit&#32;pattern&#32;of&#32;following&#32;bytes</emphasis>
4478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!valid)&#32;||
4479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Overlong&#32;encodings</emphasis>
4480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(value&#32;&lt;&#32;0x80)&#32;||
4481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value&#32;&lt;&#32;0x800&#32;&#32;&#32;&amp;&amp;&#32;encBytes&#32;&gt;&#32;2)&#32;||&#32;<emphasis role="comment">//&#32;removed&#32;&quot;0x80&#32;&lt;=&#32;value&#32;&amp;&amp;&quot;&#32;because&#32;redundant</emphasis>
4482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0x800&#32;&lt;&#32;value&#32;&amp;&amp;&#32;value&#32;&lt;&#32;0x10000&#32;&amp;&amp;&#32;encBytes&#32;&gt;&#32;3)&#32;||
4483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Encoded&#32;value&#32;out&#32;of&#32;range</emphasis>
4484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(value&#32;&gt;=&#32;0x110000)
4485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)&#32;{
4486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hexEscapeChar(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;c);
4487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4489 
4490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;got&#32;here,&#32;this&#32;is&#32;in&#32;fact&#32;a&#32;valid(ish)&#32;utf-8&#32;sequence</emphasis>
4491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;n&#32;=&#32;0;&#32;n&#32;&lt;&#32;encBytes;&#32;++n)&#32;{
4492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;m_str[idx&#32;+&#32;n];
4493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;idx&#32;+=&#32;encBytes&#32;-&#32;1;
4495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
4496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4498 &#32;&#32;&#32;&#32;}
4499 
4500 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1_color_1a2cc3f4bdda7bfd2e0e3faf7e678d3b98">operator &lt;&lt; </link>(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;XmlEncode&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;xmlEncode&#32;)&#32;{
4501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xmlEncode.encodeTo(&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;);
4502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>;
4503 &#32;&#32;&#32;&#32;}
4504 
4505 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::ScopedElement(&#32;XmlWriter*&#32;writer&#32;)
4506 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_writer(&#32;writer&#32;)
4507 &#32;&#32;&#32;&#32;{}
4508 
4509 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::ScopedElement(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<link linkend="_doctest_8h_1a0a3c492342c533baad7b21af7903e6b4">DOCTEST_NOEXCEPT</link>
4510 &#32;&#32;&#32;&#32;:&#32;&#32;&#32;m_writer(&#32;other.m_writer&#32;){
4511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4512 &#32;&#32;&#32;&#32;}
4513 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&amp;&#32;XmlWriter::ScopedElement::operator=(&#32;ScopedElement&amp;&amp;&#32;other&#32;)&#32;<link linkend="_doctest_8h_1a0a3c492342c533baad7b21af7903e6b4">DOCTEST_NOEXCEPT</link>&#32;{
4514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;m_writer&#32;)&#32;{
4515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;endElement();
4516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer&#32;=&#32;other.m_writer;
4518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_writer&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4520 &#32;&#32;&#32;&#32;}
4521 
4522 
4523 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement::~ScopedElement()&#32;{
4524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_writer&#32;)
4525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;endElement();
4526 &#32;&#32;&#32;&#32;}
4527 
4528 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&amp;&#32;XmlWriter::ScopedElement::writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;indent&#32;)&#32;{
4529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_writer-&gt;writeText(&#32;text,&#32;indent&#32;);
4530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4531 &#32;&#32;&#32;&#32;}
4532 
4533 &#32;&#32;&#32;&#32;XmlWriter::XmlWriter(&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;)&#32;:&#32;m_os(&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;)
4534 &#32;&#32;&#32;&#32;{
4535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writeDeclaration();
4536 &#32;&#32;&#32;&#32;}
4537 
4538 &#32;&#32;&#32;&#32;XmlWriter::~XmlWriter()&#32;{
4539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;!m_tags.empty()&#32;)
4540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;endElement();
4541 &#32;&#32;&#32;&#32;}
4542 
4543 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::startElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;{
4544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
4545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
4546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&lt;&apos;</emphasis>&#32;&lt;&lt;&#32;name;
4547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tags.push_back(&#32;name&#32;);
4548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_indent&#32;+=&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>;
4549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4551 &#32;&#32;&#32;&#32;}
4552 
4553 &#32;&#32;&#32;&#32;XmlWriter::ScopedElement&#32;XmlWriter::scopedElement(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name&#32;)&#32;{
4554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScopedElement&#32;scoped(&#32;<emphasis role="keyword">this</emphasis>&#32;);
4555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;startElement(&#32;name&#32;);
4556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;scoped;
4557 &#32;&#32;&#32;&#32;}
4558 
4559 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::endElement()&#32;{
4560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newlineIfNecessary();
4561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_indent&#32;=&#32;m_indent.substr(&#32;0,&#32;m_indent.size()-2&#32;);
4562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_tagIsOpen&#32;)&#32;{
4563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;/&gt;&quot;</emphasis>;
4564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
4567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;/&quot;</emphasis>&#32;&lt;&lt;&#32;m_tags.back()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>;
4568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;std::endl;
4570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tags.pop_back();
4571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4572 &#32;&#32;&#32;&#32;}
4573 
4574 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;attribute&#32;)&#32;{
4575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!name.empty()&#32;&amp;&amp;&#32;!attribute.empty()&#32;)
4576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;XmlEncode(&#32;attribute,&#32;XmlEncode::ForAttributes&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
4577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4578 &#32;&#32;&#32;&#32;}
4579 
4580 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;attribute&#32;)&#32;{
4581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!name.empty()&#32;&amp;&amp;&#32;attribute&#32;&amp;&amp;&#32;attribute[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;)
4582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;XmlEncode(&#32;attribute,&#32;XmlEncode::ForAttributes&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
4583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4584 &#32;&#32;&#32;&#32;}
4585 
4586 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeAttribute(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;name,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;attribute&#32;)&#32;{
4587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;&lt;&lt;&#32;name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;=\&quot;&quot;</emphasis>&#32;&lt;&lt;&#32;(&#32;attribute&#32;?&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>&#32;)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>;
4588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4589 &#32;&#32;&#32;&#32;}
4590 
4591 &#32;&#32;&#32;&#32;XmlWriter&amp;&#32;XmlWriter::writeText(&#32;std::string&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;text,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;indent&#32;)&#32;{
4592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;!text.empty()&#32;){
4593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;tagWasOpen&#32;=&#32;m_tagIsOpen;
4594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ensureTagClosed();
4595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;tagWasOpen&#32;&amp;&amp;&#32;indent&#32;)
4596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent;
4597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;XmlEncode(&#32;text&#32;);
4598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_needsNewline&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
4601 &#32;&#32;&#32;&#32;}
4602 
4603 &#32;&#32;&#32;&#32;<emphasis role="comment">//XmlWriter&amp;&#32;XmlWriter::writeComment(&#32;std::string&#32;const&amp;&#32;text&#32;)&#32;{</emphasis>
4604 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;ensureTagClosed();</emphasis>
4605 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;m_indent&#32;&lt;&lt;&#32;&quot;&lt;!--&quot;&#32;&lt;&lt;&#32;text&#32;&lt;&lt;&#32;&quot;--&gt;&quot;;</emphasis>
4606 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;m_needsNewline&#32;=&#32;true;</emphasis>
4607 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;*this;</emphasis>
4608 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
4609 
4610 &#32;&#32;&#32;&#32;<emphasis role="comment">//void&#32;XmlWriter::writeStylesheetRef(&#32;std::string&#32;const&amp;&#32;url&#32;)&#32;{</emphasis>
4611 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;&quot;&lt;?xml-stylesheet&#32;type=\&quot;text/xsl\&quot;&#32;href=\&quot;&quot;&#32;&lt;&lt;&#32;url&#32;&lt;&lt;&#32;&quot;\&quot;?&gt;\n&quot;;</emphasis>
4612 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
4613 
4614 &#32;&#32;&#32;&#32;<emphasis role="comment">//XmlWriter&amp;&#32;XmlWriter::writeBlankLine()&#32;{</emphasis>
4615 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;ensureTagClosed();</emphasis>
4616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;&apos;\n&apos;;</emphasis>
4617 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;return&#32;*this;</emphasis>
4618 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
4619 
4620 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::ensureTagClosed()&#32;{
4621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_tagIsOpen&#32;)&#32;{
4622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
4623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_tagIsOpen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4625 &#32;&#32;&#32;&#32;}
4626 
4627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::writeDeclaration()&#32;{
4628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&lt;?xml&#32;version=\&quot;1.0\&quot;&#32;encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</emphasis>;
4629 &#32;&#32;&#32;&#32;}
4630 
4631 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;XmlWriter::newlineIfNecessary()&#32;{
4632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;m_needsNewline&#32;)&#32;{
4633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_os&#32;&lt;&lt;&#32;std::endl;
4634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m_needsNewline&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4636 &#32;&#32;&#32;&#32;}
4637 
4638 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4639 <emphasis role="comment">//&#32;End&#32;of&#32;copy-pasted&#32;code&#32;from&#32;Catch</emphasis>
4640 <emphasis role="comment">//&#32;=================================================================================================</emphasis>
4641 
4642 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
4643 
4644 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>XmlReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporter
4645 &#32;&#32;&#32;&#32;{
4646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&#32;&#32;xml;
4647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mutex&#32;mutex;
4648 
4649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;caching&#32;pointers/references&#32;to&#32;objects&#32;of&#32;these&#32;types&#32;-&#32;safe&#32;to&#32;do</emphasis>
4650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;opt;
4651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData*&#32;&#32;&#32;tc&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4652 
4653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlReporter(<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;co)
4654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;xml(*co.cout)
4655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;opt(co)&#32;{}
4656 
4657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_contexts()&#32;{
4658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_contexts&#32;=&#32;get_num_active_contexts();
4659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(num_contexts)&#32;{
4660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contexts&#32;=&#32;get_active_contexts();
4661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::stringstream&#32;ss;
4662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_contexts;&#32;++i)&#32;{
4663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contexts[i]-&gt;stringify(&amp;ss);
4664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Info&quot;</emphasis>).writeText(ss.str());
4665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ss.str(<emphasis role="stringliteral">&quot;&quot;</emphasis>);
4666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4669 
4670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line(<emphasis role="keywordtype">unsigned</emphasis>&#32;l)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt.no_line_numbers&#32;?&#32;0&#32;:&#32;l;&#32;}
4671 
4672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_start_impl(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)&#32;{
4673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;open_ts_tag&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;{&#32;<emphasis role="comment">//&#32;we&#32;have&#32;already&#32;opened&#32;a&#32;test&#32;suite</emphasis>
4675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(std::strcmp(tc-&gt;m_test_suite,&#32;in.m_test_suite)&#32;!=&#32;0)&#32;{
4676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;open_ts_tag&#32;=&#32;<emphasis role="keyword">true</emphasis>;
4678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
4681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;open_ts_tag&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;first&#32;test&#32;case&#32;==&gt;&#32;first&#32;test&#32;suite</emphasis>
4682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4683 
4684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(open_ts_tag)&#32;{
4685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;TestSuite&quot;</emphasis>);
4686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;in.m_test_suite);
4687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4688 
4689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tc&#32;=&#32;&amp;in;
4690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;TestCase&quot;</emphasis>)
4691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;in.m_name)
4692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(in.m_file.c_str()))
4693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;line(in.m_line))
4694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;description&quot;</emphasis>,&#32;in.m_description);
4695 
4696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(Approx(in.m_timeout)&#32;!=&#32;0)
4697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;timeout&quot;</emphasis>,&#32;in.m_timeout);
4698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(in.m_may_fail)
4699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;may_fail&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
4700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(in.m_should_fail)
4701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;should_fail&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>);
4702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4703 
4704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
4705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WHAT&#32;FOLLOWS&#32;ARE&#32;OVERRIDES&#32;OF&#32;THE&#32;VIRTUAL&#32;METHODS&#32;OF&#32;THE&#32;REPORTER&#32;INTERFACE</emphasis>
4706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
4707 
4708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;report_query(<emphasis role="keyword">const</emphasis>&#32;QueryData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_run_start();
4710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_reporters)&#32;{
4711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;getListeners())
4712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Listener&quot;</emphasis>)
4713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;priority&quot;</emphasis>,&#32;curr.first.first)
4714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;curr.first.second);
4715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;getReporters())
4716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Reporter&quot;</emphasis>)
4717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;priority&quot;</emphasis>,&#32;curr.first.first)
4718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;curr.first.second);
4719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.count&#32;||&#32;opt.list_test_cases)&#32;{
4720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in.num_data;&#32;++i)&#32;{
4721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;TestCase&quot;</emphasis>).writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;in.data[i]-&gt;m_name)
4722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;testsuite&quot;</emphasis>,&#32;in.data[i]-&gt;m_test_suite)
4723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(in.data[i]-&gt;m_file.c_str()))
4724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;line(in.data[i]-&gt;m_line));
4725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;OverallResultsTestCases&quot;</emphasis>)
4727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;unskipped&quot;</emphasis>,&#32;in.run_stats-&gt;numTestCasesPassingFilters);
4728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_test_suites)&#32;{
4729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in.num_data;&#32;++i)
4730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;TestSuite&quot;</emphasis>).writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;in.data[i]-&gt;m_test_suite);
4731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;OverallResultsTestCases&quot;</emphasis>)
4732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;unskipped&quot;</emphasis>,&#32;in.run_stats-&gt;numTestCasesPassingFilters);
4733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;OverallResultsTestSuites&quot;</emphasis>)
4734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;unskipped&quot;</emphasis>,&#32;in.run_stats-&gt;numTestSuitesPassingFilters);
4735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4738 
4739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_start()<emphasis role="keyword">&#32;override&#32;</emphasis>{
4740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;.exe&#32;extension&#32;-&#32;mainly&#32;to&#32;have&#32;the&#32;same&#32;output&#32;on&#32;UNIX&#32;and&#32;Windows</emphasis>
4741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;binary_name&#32;=&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(opt.binary_name.c_str());
4742 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
4743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(binary_name.rfind(<emphasis role="stringliteral">&quot;.exe&quot;</emphasis>)&#32;!=&#32;std::string::npos)
4744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_name&#32;=&#32;binary_name.substr(0,&#32;binary_name.length()&#32;-&#32;4);
4745 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
4746 
4747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;doctest&quot;</emphasis>).writeAttribute(<emphasis role="stringliteral">&quot;binary&quot;</emphasis>,&#32;binary_name);
4748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_version&#32;==&#32;<emphasis role="keyword">false</emphasis>)
4749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;version&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a253eba2b38340341a13e1111d66b2e83">DOCTEST_VERSION_STR</link>);
4750 
4751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;only&#32;the&#32;consequential&#32;ones&#32;(TODO:&#32;filters)</emphasis>
4752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Options&quot;</emphasis>)
4753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;order_by&quot;</emphasis>,&#32;opt.order_by.c_str())
4754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;rand_seed&quot;</emphasis>,&#32;opt.rand_seed)
4755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;first&quot;</emphasis>,&#32;opt.first)
4756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;last&quot;</emphasis>,&#32;opt.last)
4757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;abort_after&quot;</emphasis>,&#32;opt.abort_after)
4758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;subcase_filter_levels&quot;</emphasis>,&#32;opt.subcase_filter_levels)
4759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;case_sensitive&quot;</emphasis>,&#32;opt.case_sensitive)
4760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;no_throw&quot;</emphasis>,&#32;opt.no_throw)
4761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;no_skip&quot;</emphasis>,&#32;opt.no_skip);
4762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4763 
4764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_end(<emphasis role="keyword">const</emphasis>&#32;TestRunStats&amp;&#32;p)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc)&#32;<emphasis role="comment">//&#32;the&#32;TestSuite&#32;tag&#32;-&#32;only&#32;if&#32;there&#32;has&#32;been&#32;at&#32;least&#32;1&#32;test&#32;case</emphasis>
4766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4767 
4768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;OverallResultsAsserts&quot;</emphasis>)
4769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,&#32;p.numAsserts&#32;-&#32;p.numAssertsFailed)
4770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;p.numAssertsFailed);
4771 
4772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;OverallResultsTestCases&quot;</emphasis>)
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,
4774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p.numTestCasesPassingFilters&#32;-&#32;p.numTestCasesFailed)
4775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;p.numTestCasesFailed);
4776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_skipped_summary&#32;==&#32;<emphasis role="keyword">false</emphasis>)
4777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;skipped&quot;</emphasis>,&#32;p.numTestCases&#32;-&#32;p.numTestCasesPassingFilters);
4778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4779 
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4782 
4783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_start(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_case_start_impl(in);
4785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.ensureTagClosed();
4786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
4788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_reenter(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
4789 
4790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_end(<emphasis role="keyword">const</emphasis>&#32;CurrentTestCaseStats&amp;&#32;st)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;OverallResultsAsserts&quot;</emphasis>)
4792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;successes&quot;</emphasis>,
4793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st.numAssertsCurrentTest&#32;-&#32;st.numAssertsFailedCurrentTest)
4794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;st.numAssertsFailedCurrentTest);
4795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.duration)
4796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;duration&quot;</emphasis>,&#32;st.seconds);
4797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc-&gt;m_expected_failures)
4798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;expected_failures&quot;</emphasis>,&#32;tc-&gt;m_expected_failures);
4799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4800 
4801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4803 
4804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_exception(<emphasis role="keyword">const</emphasis>&#32;TestCaseException&amp;&#32;e)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
4806 
4807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Exception&quot;</emphasis>)
4808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;crash&quot;</emphasis>,&#32;e.is_crash)
4809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(e.error_string.c_str());
4810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4811 
4812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_start(<emphasis role="keyword">const</emphasis>&#32;SubcaseSignature&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
4814 
4815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;SubCase&quot;</emphasis>)
4816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;in.m_name)
4817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(in.m_file))
4818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;line(in.m_line));
4819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.ensureTagClosed();
4820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4821 
4822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_end()<emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;xml.endElement();&#32;}
4823 
4824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_assert(<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;&#32;rb)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!rb.m_failed&#32;&amp;&amp;&#32;!opt.success)
4826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
4827 
4828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
4829 
4830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;Expression&quot;</emphasis>)
4831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;success&quot;</emphasis>,&#32;!rb.m_failed)
4832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;type&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at))
4833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(rb.m_file))
4834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;line(rb.m_line));
4835 
4836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Original&quot;</emphasis>).writeText(rb.m_expr);
4837 
4838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_threw)
4839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Exception&quot;</emphasis>).writeText(rb.m_exception.c_str());
4840 
4841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>)
4842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;ExpectedException&quot;</emphasis>).writeText(rb.m_exception_type);
4843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>)
4844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;ExpectedExceptionString&quot;</emphasis>).writeText(rb.m_exception_string);
4845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a34258afd98e569142dfb5b0a2c468436">assertType::is_normal</link>)&#32;&amp;&amp;&#32;!rb.m_threw)
4846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Expanded&quot;</emphasis>).writeText(rb.m_decomp.c_str());
4847 
4848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_contexts();
4849 
4850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4852 
4853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_message(<emphasis role="keyword">const</emphasis>&#32;MessageData&amp;&#32;mb)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
4855 
4856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;Message&quot;</emphasis>)
4857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;type&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a3fcfa9f7f479ad1b46d142e210c8ca75">failureString</link>(mb.m_severity))
4858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;filename&quot;</emphasis>,&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(mb.m_file))
4859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;line&quot;</emphasis>,&#32;line(mb.m_line));
4860 
4861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;Text&quot;</emphasis>).writeText(mb.m_string.c_str());
4862 
4863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_contexts();
4864 
4865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4867 
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_skipped(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
4869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_skipped_summary&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{
4870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_case_start_impl(in);
4871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;skipped&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>);
4872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
4873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4875 &#32;&#32;&#32;&#32;};
4876 
4877 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a97757bf089f108cf8842727213bf3299">DOCTEST_REGISTER_REPORTER</link>(<emphasis role="stringliteral">&quot;xml&quot;</emphasis>,&#32;0,&#32;XmlReporter);
4878 
4879 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;fulltext_log_assert_to_stream(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;&#32;rb)&#32;{
4880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((rb.m_at&#32;&amp;&#32;(<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>&#32;|&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>))&#32;==
4881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0)&#32;
4882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_expr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;)&#32;&quot;</emphasis>
4883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
4884 
4885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a922a5fb427724cad963fb3dd789a8114">assertType::is_throws</link>)&#32;{&#32;
4886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(rb.m_threw&#32;?&#32;<emphasis role="stringliteral">&quot;threw&#32;as&#32;expected!&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;did&#32;NOT&#32;throw&#32;at&#32;all!&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
4887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>((rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>)&#32;&amp;&amp;
4888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>))&#32;{&#32;
4889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_expr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;\&quot;&quot;</emphasis>
4890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;rb.m_exception_string&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;,&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_exception_type&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;)&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
4891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_threw)&#32;{
4892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!rb.m_failed)&#32;{
4893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;threw&#32;as&#32;expected!\n&quot;</emphasis>;
4894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
4895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;threw&#32;a&#32;DIFFERENT&#32;exception!&#32;(contents:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_exception&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;)\n&quot;</emphasis>;
4896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
4898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;did&#32;NOT&#32;throw&#32;at&#32;all!\n&quot;</emphasis>;
4899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;
4901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a278ed7bf7e411c11e25ad8a60933ef34">assertType::is_throws_as</link>)&#32;{&#32;
4902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_expr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>
4903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;rb.m_exception_type&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;)&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
4904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(rb.m_threw&#32;?&#32;(rb.m_threw_as&#32;?&#32;<emphasis role="stringliteral">&quot;threw&#32;as&#32;expected!&quot;</emphasis>&#32;:
4905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;threw&#32;a&#32;DIFFERENT&#32;exception:&#32;&quot;</emphasis>)&#32;:
4906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;did&#32;NOT&#32;throw&#32;at&#32;all!&quot;</emphasis>)
4907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;rb.m_exception&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
4908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;
4909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3ab79f3f076e62c260e77febd914bb82c3">assertType::is_throws_with</link>)&#32;{&#32;
4910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_expr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;,&#32;\&quot;&quot;</emphasis>
4911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;rb.m_exception_string&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;)&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
4912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(rb.m_threw&#32;?&#32;(!rb.m_failed&#32;?&#32;<emphasis role="stringliteral">&quot;threw&#32;as&#32;expected!&quot;</emphasis>&#32;:
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;threw&#32;a&#32;DIFFERENT&#32;exception:&#32;&quot;</emphasis>)&#32;:
4914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;did&#32;NOT&#32;throw&#32;at&#32;all!&quot;</emphasis>)
4915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;rb.m_exception&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
4916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a0ad6f07c0273891b1c3f2fd84fe666dc">assertType::is_nothrow</link>)&#32;{&#32;
4917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(rb.m_threw&#32;?&#32;<emphasis role="stringliteral">&quot;THREW&#32;exception:&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;didn&apos;t&#32;throw!&quot;</emphasis>)&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>
4918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;rb.m_exception&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
4919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
4920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(rb.m_threw&#32;?&#32;<emphasis role="stringliteral">&quot;THREW&#32;exception:&#32;&quot;</emphasis>&#32;:
4921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!rb.m_failed&#32;?&#32;<emphasis role="stringliteral">&quot;is&#32;correct!\n&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;is&#32;NOT&#32;correct!\n&quot;</emphasis>));
4922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(rb.m_threw)
4923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;rb.m_exception&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
4924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;values:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;(&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;rb.m_decomp&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;)\n&quot;</emphasis>;
4926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4927 &#32;&#32;&#32;&#32;}
4928 
4929 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:</emphasis>
4930 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;log_contexts()</emphasis>
4931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;log_message()</emphasis>
4932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;respond&#32;to&#32;queries</emphasis>
4933 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;honor&#32;remaining&#32;options</emphasis>
4934 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;more&#32;attributes&#32;in&#32;tags</emphasis>
4935 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>JUnitReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporter
4936 &#32;&#32;&#32;&#32;{
4937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XmlWriter&#32;&#32;xml;
4938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mutex&#32;mutex;
4939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Timer&#32;timer;
4940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;String&gt;&#32;deepestSubcaseStackNames;
4941 
4942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>JUnitTestCaseData
4943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4944 <link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wdeprecated-declarations&quot;</emphasis>)&#32;<emphasis role="comment">//&#32;gmtime</emphasis>
4945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;std::<emphasis role="keywordtype">string</emphasis>&#32;getCurrentTimestamp()&#32;{
4946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Beware,&#32;this&#32;is&#32;not&#32;reentrant&#32;because&#32;of&#32;backward&#32;compatibility&#32;issues</emphasis>
4947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Also,&#32;UTC&#32;only,&#32;again&#32;because&#32;of&#32;backward&#32;compatibility&#32;(%z&#32;is&#32;C++11)</emphasis>
4948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time_t&#32;rawtime;
4949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::time(&amp;rawtime);
4950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;timeStampSize&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</emphasis>);
4951 
4952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::tm*&#32;timeInfo;
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timeInfo&#32;=&#32;std::gmtime(&amp;rawtime);
4954 
4955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;timeStamp[timeStampSize];
4956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;fmt&#32;=&#32;<emphasis role="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</emphasis>;
4957 
4958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::strftime(timeStamp,&#32;timeStampSize,&#32;fmt,&#32;timeInfo);
4959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::string(timeStamp);
4960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4961 <link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
4962 
4963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>JUnitTestMessage
4964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JUnitTestMessage(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_message,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_type,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_details)
4966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;message(_message),&#32;type(_type),&#32;details(_details)&#32;{}
4967 
4968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JUnitTestMessage(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_message,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_details)
4969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;message(_message),&#32;type(),&#32;details(_details)&#32;{}
4970 
4971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;message,&#32;type,&#32;details;
4972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4973 
4974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>JUnitTestCase
4975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JUnitTestCase(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_classname,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;_name)
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;classname(_classname),&#32;name(_name),&#32;time(0),&#32;failures()&#32;{}
4978 
4979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;classname,&#32;name;
4980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;time;
4981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;JUnitTestMessage&gt;&#32;failures,&#32;errors;
4982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
4983 
4984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;add(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;classname,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;name)&#32;{
4985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testcases.emplace_back(classname,&#32;name);
4986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4987 
4988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;appendSubcaseNamesToLastTestcase(std::vector&lt;String&gt;&#32;nameStack)&#32;{
4989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr:&#32;nameStack)
4990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(curr.size())
4991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testcases.back().name&#32;+=&#32;std::string(<emphasis role="stringliteral">&quot;/&quot;</emphasis>)&#32;+&#32;curr.c_str();
4992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4993 
4994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addTime(<emphasis role="keywordtype">double</emphasis>&#32;time)&#32;{
4995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(time&#32;&lt;&#32;1e-4)
4996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time&#32;=&#32;0;
4997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testcases.back().time&#32;=&#32;time;
4998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;totalSeconds&#32;+=&#32;time;
4999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5000 
5001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addFailure(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;message,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;type,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;details)&#32;{
5002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testcases.back().failures.emplace_back(message,&#32;type,&#32;details);
5003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++totalFailures;
5004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5005 
5006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;addError(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;message,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;details)&#32;{
5007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testcases.back().errors.emplace_back(message,&#32;details);
5008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++totalErrors;
5009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5010 
5011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;JUnitTestCase&gt;&#32;testcases;
5012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;totalSeconds&#32;=&#32;0;
5013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;totalErrors&#32;=&#32;0,&#32;totalFailures&#32;=&#32;0;
5014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5015 
5016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JUnitTestCaseData&#32;testCaseData;
5017 
5018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;caching&#32;pointers/references&#32;to&#32;objects&#32;of&#32;these&#32;types&#32;-&#32;safe&#32;to&#32;do</emphasis>
5019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;opt;
5020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData*&#32;&#32;&#32;tc&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5021 
5022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JUnitReporter(<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;co)
5023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;xml(*co.cout)
5024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;opt(co)&#32;{}
5025 
5026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line(<emphasis role="keywordtype">unsigned</emphasis>&#32;l)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;opt.no_line_numbers&#32;?&#32;0&#32;:&#32;l;&#32;}
5027 
5028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WHAT&#32;FOLLOWS&#32;ARE&#32;OVERRIDES&#32;OF&#32;THE&#32;VIRTUAL&#32;METHODS&#32;OF&#32;THE&#32;REPORTER&#32;INTERFACE</emphasis>
5030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5031 
5032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;report_query(<emphasis role="keyword">const</emphasis>&#32;QueryData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5033 
5034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_start()<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5035 
5036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_end(<emphasis role="keyword">const</emphasis>&#32;TestRunStats&amp;&#32;p)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;remove&#32;.exe&#32;extension&#32;-&#32;mainly&#32;to&#32;have&#32;the&#32;same&#32;output&#32;on&#32;UNIX&#32;and&#32;Windows</emphasis>
5038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;binary_name&#32;=&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(opt.binary_name.c_str());
5039 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(binary_name.rfind(<emphasis role="stringliteral">&quot;.exe&quot;</emphasis>)&#32;!=&#32;std::string::npos)
5041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;binary_name&#32;=&#32;binary_name.substr(0,&#32;binary_name.length()&#32;-&#32;4);
5042 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;testsuites&quot;</emphasis>);
5044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;testsuite&quot;</emphasis>).writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;binary_name)
5045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;errors&quot;</emphasis>,&#32;testCaseData.totalErrors)
5046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;failures&quot;</emphasis>,&#32;testCaseData.totalFailures)
5047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;tests&quot;</emphasis>,&#32;p.numAsserts);
5048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_time_in_output&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{
5049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;time&quot;</emphasis>,&#32;testCaseData.totalSeconds);
5050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;timestamp&quot;</emphasis>,&#32;JUnitTestCaseData::getCurrentTimestamp());
5051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_version&#32;==&#32;<emphasis role="keyword">false</emphasis>)
5053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;doctest_version&quot;</emphasis>,&#32;<link linkend="_doctest_8h_1a253eba2b38340341a13e1111d66b2e83">DOCTEST_VERSION_STR</link>);
5054 
5055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;testCase&#32;:&#32;testCaseData.testcases)&#32;{
5056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.startElement(<emphasis role="stringliteral">&quot;testcase&quot;</emphasis>)
5057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;classname&quot;</emphasis>,&#32;testCase.classname)
5058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;testCase.name);
5059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_time_in_output&#32;==&#32;<emphasis role="keyword">false</emphasis>)
5060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;time&quot;</emphasis>,&#32;testCase.time);
5061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;not&#32;ideal,&#32;but&#32;it&#32;should&#32;be&#32;enough&#32;to&#32;mimic&#32;gtest&apos;s&#32;junit&#32;output.</emphasis>
5062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.writeAttribute(<emphasis role="stringliteral">&quot;status&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;run&quot;</emphasis>);
5063 
5064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;failure&#32;:&#32;testCase.failures)&#32;{
5065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;failure&quot;</emphasis>)
5066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;message&quot;</emphasis>,&#32;failure.message)
5067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;type&quot;</emphasis>,&#32;failure.type)
5068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(failure.details,&#32;<emphasis role="keyword">false</emphasis>);
5069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5070 
5071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;error&#32;:&#32;testCase.errors)&#32;{
5072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.scopedElement(<emphasis role="stringliteral">&quot;error&quot;</emphasis>)
5073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeAttribute(<emphasis role="stringliteral">&quot;message&quot;</emphasis>,&#32;error.message)
5074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.writeText(error.details);
5075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5076 
5077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
5078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
5080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xml.endElement();
5081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5082 
5083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_start(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.add(<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(in.m_file.c_str()),&#32;in.m_name);
5085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timer.start();
5086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5087 
5088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_reenter(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.addTime(timer.getElapsedSeconds());
5090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);
5091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deepestSubcaseStackNames.clear();
5092 
5093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;timer.start();
5094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.add(<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(in.m_file.c_str()),&#32;in.m_name);
5095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5096 
5097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_end(<emphasis role="keyword">const</emphasis>&#32;CurrentTestCaseStats&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.addTime(timer.getElapsedSeconds());
5099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);
5100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deepestSubcaseStackNames.clear();
5101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5102 
5103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_exception(<emphasis role="keyword">const</emphasis>&#32;TestCaseException&amp;&#32;e)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.addError(<emphasis role="stringliteral">&quot;exception&quot;</emphasis>,&#32;e.error_string.c_str());
5106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5107 
5108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_start(<emphasis role="keyword">const</emphasis>&#32;SubcaseSignature&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deepestSubcaseStackNames.push_back(in.m_name);
5111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5112 
5113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_end()<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5114 
5115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_assert(<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;&#32;rb)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!rb.m_failed)&#32;<emphasis role="comment">//&#32;report&#32;only&#32;failures&#32;&amp;&#32;ignore&#32;the&#32;`success`&#32;option</emphasis>
5117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
5118 
5119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5120 
5121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ostringstream&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>;
5122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(rb.m_file)&#32;&lt;&lt;&#32;(opt.gnu_file_line&#32;?&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>)
5123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;line(rb.m_line)&#32;&lt;&lt;&#32;(opt.gnu_file_line&#32;?&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;):&quot;</emphasis>)&#32;&lt;&lt;&#32;std::endl;
5124 
5125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fulltext_log_assert_to_stream(<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>,&#32;rb);
5126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testCaseData.addFailure(rb.m_decomp.c_str(),&#32;<link linkend="_namespacedoctest_1a44bf1260a82383247d446170810493cf">assertString</link>(rb.m_at),&#32;<link linkend="_namespacedoctest_1_1detail_1_1has__insertion__operator__impl_1a50dfa929b76e3581c300a3a8b87d21e2">os</link>.str());
5127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5128 
5129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_message(<emphasis role="keyword">const</emphasis>&#32;MessageData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5130 
5131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_skipped(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5132 &#32;&#32;&#32;&#32;};
5133 
5134 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a97757bf089f108cf8842727213bf3299">DOCTEST_REGISTER_REPORTER</link>(<emphasis role="stringliteral">&quot;junit&quot;</emphasis>,&#32;0,&#32;JUnitReporter);
5135 
5136 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Whitespace
5137 &#32;&#32;&#32;&#32;{
5138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nrSpaces;
5139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;Whitespace(<emphasis role="keywordtype">int</emphasis>&#32;nr)
5140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;nrSpaces(nr)&#32;{}
5141 &#32;&#32;&#32;&#32;};
5142 
5143 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;<link linkend="_namespacedoctest_1_1_color_1a2cc3f4bdda7bfd2e0e3faf7e678d3b98">operator&lt;&lt;</link>(<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;Whitespace&amp;&#32;ws)&#32;{
5144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(ws.nrSpaces&#32;!=&#32;0)
5145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;&lt;&lt;&#32;std::setw(ws.nrSpaces)&#32;&lt;&lt;&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>;
5146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;out;
5147 &#32;&#32;&#32;&#32;}
5148 
5149 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ConsoleReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;IReporter
5150 &#32;&#32;&#32;&#32;{
5151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s;
5152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasLoggedCurrentTestStart;
5153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;SubcaseSignature&gt;&#32;subcasesStack;
5154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentSubcaseLevel;
5155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::mutex&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mutex;
5156 
5157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;caching&#32;pointers/references&#32;to&#32;objects&#32;of&#32;these&#32;types&#32;-&#32;safe&#32;to&#32;do</emphasis>
5158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;opt;
5159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData*&#32;&#32;&#32;tc;
5160 
5161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConsoleReporter(<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;co)
5162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;s(*co.cout)
5163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;opt(co)&#32;{}
5164 
5165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConsoleReporter(<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;co,&#32;<link linkend="_doctest_8h_1a116af65cb5e924b33ad9d9ecd7a783f3">std::ostream</link>&amp;&#32;ostr)
5166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;s(ostr)
5167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;opt(co)&#32;{}
5168 
5169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WHAT&#32;FOLLOWS&#32;ARE&#32;HELPERS&#32;USED&#32;BY&#32;THE&#32;OVERRIDES&#32;OF&#32;THE&#32;VIRTUAL&#32;METHODS&#32;OF&#32;THE&#32;INTERFACE</emphasis>
5171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5172 
5173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;separator_to_stream()&#32;{
5174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>
5175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;===============================================================================&quot;</emphasis>
5176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5178 
5179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;getSuccessOrFailString(<emphasis role="keywordtype">bool</emphasis>&#32;success,&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at,
5180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;success_str)&#32;{
5181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(success)
5182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success_str;
5183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacedoctest_1a3fcfa9f7f479ad1b46d142e210c8ca75">failureString</link>(at);
5184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5185 
5186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">Color::Enum</link>&#32;getSuccessOrFailColor(<emphasis role="keywordtype">bool</emphasis>&#32;success,&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at)&#32;{
5187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;success&#32;?&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a016090b96620a42a63dadf0265977664">Color::BrightGreen</link>&#32;:
5188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(at&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>)&#32;?&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>;
5189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5190 
5191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;successOrFailColoredStringToStream(<emphasis role="keywordtype">bool</emphasis>&#32;success,&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3c">assertType::Enum</link>&#32;at,
5192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;success_str&#32;=&#32;<emphasis role="stringliteral">&quot;SUCCESS&quot;</emphasis>)&#32;{
5193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;getSuccessOrFailColor(success,&#32;at)
5194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;getSuccessOrFailString(success,&#32;at,&#32;success_str)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
5195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5196 
5197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_contexts()&#32;{
5198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_contexts&#32;=&#32;get_num_active_contexts();
5199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(num_contexts)&#32;{
5200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;contexts&#32;=&#32;get_active_contexts();
5201 
5202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;logged:&#32;&quot;</emphasis>;
5203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_contexts;&#32;++i)&#32;{
5204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(i&#32;==&#32;0&#32;?&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>);
5205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;contexts[i]-&gt;stringify(&amp;s);
5206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5209 
5210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5212 
5213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;was&#32;requested&#32;to&#32;be&#32;made&#32;virtual&#32;so&#32;users&#32;could&#32;override&#32;it</emphasis>
5214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;file_line_to_stream(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;line,
5215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;tail&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)&#32;{
5216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a44f079a43a4709abd7d6f22b317838a2">Color::LightGrey</link>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1a31b19b71f2b30f77f84b6a8bb4943925">skipPathFromFilename</link>(file)&#32;&lt;&lt;&#32;(opt.gnu_file_line&#32;?&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;(&quot;</emphasis>)
5217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(opt.no_line_numbers&#32;?&#32;0&#32;:&#32;line)&#32;<emphasis role="comment">//&#32;0&#32;or&#32;the&#32;real&#32;num&#32;depending&#32;on&#32;the&#32;option</emphasis>
5218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;(opt.gnu_file_line&#32;?&#32;<emphasis role="stringliteral">&quot;:&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;):&quot;</emphasis>)&#32;&lt;&lt;&#32;tail;
5219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5220 
5221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;logTestStart()&#32;{
5222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(hasLoggedCurrentTestStart)
5223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
5224 
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_line_to_stream(tc-&gt;m_file.c_str(),&#32;tc-&gt;m_line,&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
5227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc-&gt;m_description)
5228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;DESCRIPTION:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;tc-&gt;m_description&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc-&gt;m_test_suite&#32;&amp;&amp;&#32;tc-&gt;m_test_suite[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
5230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TEST&#32;SUITE:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;tc-&gt;m_test_suite&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(strncmp(tc-&gt;m_name,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;Scenario:&quot;</emphasis>,&#32;11)&#32;!=&#32;0)
5232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;TEST&#32;CASE:&#32;&#32;&quot;</emphasis>;
5233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;tc-&gt;m_name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5234 
5235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;currentSubcaseLevel;&#32;++i)&#32;{
5236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(subcasesStack[i].m_name[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
5237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;subcasesStack[i].m_name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5239 
5240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(currentSubcaseLevel&#32;!=&#32;subcasesStack.size())&#32;{
5241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nDEEPEST&#32;SUBCASE&#32;STACK&#32;REACHED&#32;(DIFFERENT&#32;FROM&#32;THE&#32;CURRENT&#32;ONE):\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;subcasesStack.size();&#32;++i)&#32;{
5243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(subcasesStack[i].m_name[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
5244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;subcasesStack[i].m_name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5247 
5248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5249 
5250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasLoggedCurrentTestStart&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5252 
5253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printVersion()&#32;{
5254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_version&#32;==&#32;<emphasis role="keyword">false</emphasis>)
5255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;doctest&#32;version&#32;is&#32;\&quot;&quot;</emphasis>
5256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_doctest_8h_1a253eba2b38340341a13e1111d66b2e83">DOCTEST_VERSION_STR</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\&quot;\n&quot;</emphasis>;
5257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5258 
5259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printIntro()&#32;{
5260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion();
5261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;run&#32;with&#32;\&quot;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;help\&quot;&#32;for&#32;options\n&quot;</emphasis>;
5263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5264 
5265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printHelp()&#32;{
5266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizePrefixDisplay&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));
5267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion();
5268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
5269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;boolean&#32;values:&#32;\&quot;1/on/yes/true\&quot;&#32;or&#32;\&quot;0/off/no/false\&quot;\n&quot;</emphasis>;
5272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filter&#32;&#32;values:&#32;\&quot;str1,str2,str3\&quot;&#32;(comma&#32;separated&#32;strings)\n&quot;</emphasis>;
5274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;use&#32;wildcards&#32;for&#32;matching&#32;strings\n&quot;</emphasis>;
5277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;something&#32;passes&#32;a&#32;filter&#32;if&#32;any&#32;of&#32;the&#32;strings&#32;in&#32;a&#32;filter&#32;matches\n&quot;</emphasis>;
5279 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</emphasis>
5280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;ALL&#32;FLAGS,&#32;OPTIONS&#32;AND&#32;FILTERS&#32;ALSO&#32;AVAILABLE&#32;WITH&#32;A&#32;\&quot;&quot;</emphasis>&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;\&quot;&#32;PREFIX!!!\n&quot;</emphasis>;
5283 <emphasis role="preprocessor">#endif</emphasis>
5284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Query&#32;flags&#32;-&#32;the&#32;program&#32;quits&#32;after&#32;them.&#32;Available:\n\n&quot;</emphasis>;
5287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;?,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;help,&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;h&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*0)&#32;&lt;&lt;&#32;&#32;<emphasis role="stringliteral">&quot;prints&#32;this&#32;message\n&quot;</emphasis>;
5289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;v,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;version&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;prints&#32;the&#32;version\n&quot;</emphasis>;
5291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;c,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;count&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;prints&#32;the&#32;number&#32;of&#32;matching&#32;tests\n&quot;</emphasis>;
5293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;ltc,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;list-test-cases&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;lists&#32;all&#32;matching&#32;tests&#32;by&#32;name\n&quot;</emphasis>;
5295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;lts,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;list-test-suites&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;lists&#32;all&#32;matching&#32;test&#32;suites\n&quot;</emphasis>;
5297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;lr,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;list-reporters&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;lists&#32;all&#32;registered&#32;reporters\n\n&quot;</emphasis>;
5299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;==================================================================================&#32;&lt;&lt;&#32;79</emphasis>
5300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;The&#32;available&#32;&lt;int&gt;/&lt;string&gt;&#32;options/filters&#32;are:\n\n&quot;</emphasis>;
5302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;tc,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;test-case=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;&#32;&#32;&#32;&#32;tests&#32;by&#32;their&#32;name\n&quot;</emphasis>;
5304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;tce,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;test-case-exclude=&lt;filters&gt;&#32;&#32;&#32;&quot;</emphasis>
5305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;OUT&#32;tests&#32;by&#32;their&#32;name\n&quot;</emphasis>;
5306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;sf,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;source-file=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;&#32;&#32;&#32;&#32;tests&#32;by&#32;their&#32;file\n&quot;</emphasis>;
5308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;sfe,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;source-file-exclude=&lt;filters&gt;&#32;&quot;</emphasis>
5309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;OUT&#32;tests&#32;by&#32;their&#32;file\n&quot;</emphasis>;
5310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;ts,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;test-suite=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;&#32;&#32;&#32;&#32;tests&#32;by&#32;their&#32;test&#32;suite\n&quot;</emphasis>;
5312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;tse,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;test-suite-exclude=&lt;filters&gt;&#32;&#32;&quot;</emphasis>
5313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;OUT&#32;tests&#32;by&#32;their&#32;test&#32;suite\n&quot;</emphasis>;
5314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;sc,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;subcase=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;&#32;&#32;&#32;&#32;subcases&#32;by&#32;their&#32;name\n&quot;</emphasis>;
5316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;sce,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;subcase-exclude=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;OUT&#32;subcases&#32;by&#32;their&#32;name\n&quot;</emphasis>;
5318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;r,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;reporters=&lt;filters&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;reporters&#32;to&#32;use&#32;(console&#32;is&#32;default)\n&quot;</emphasis>;
5320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;o,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;out=&lt;string&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;output&#32;filename\n&quot;</emphasis>;
5322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;ob,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;order-by=&lt;string&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;how&#32;the&#32;tests&#32;should&#32;be&#32;ordered\n&quot;</emphasis>;
5324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*3)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;string&gt;&#32;-&#32;by&#32;[file/suite/name/rand]\n&quot;</emphasis>;
5325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;rs,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;rand-seed=&lt;int&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;seed&#32;for&#32;random&#32;ordering\n&quot;</emphasis>;
5327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;f,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;first=&lt;int&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;the&#32;first&#32;test&#32;passing&#32;the&#32;filters&#32;to\n&quot;</emphasis>;
5329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*3)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execute&#32;-&#32;for&#32;range-based&#32;execution\n&quot;</emphasis>;
5330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;l,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;last=&lt;int&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;the&#32;last&#32;test&#32;passing&#32;the&#32;filters&#32;to\n&quot;</emphasis>;
5332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*3)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execute&#32;-&#32;for&#32;range-based&#32;execution\n&quot;</emphasis>;
5333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;aa,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;abort-after=&lt;int&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;stop&#32;after&#32;&lt;int&gt;&#32;failed&#32;assertions\n&quot;</emphasis>;
5335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;scfl,--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;subcase-filter-levels=&lt;int&gt;&#32;&#32;&#32;&quot;</emphasis>
5336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;apply&#32;filters&#32;for&#32;the&#32;first&#32;&lt;int&gt;&#32;levels\n&quot;</emphasis>;
5337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Bool&#32;options&#32;-&#32;can&#32;be&#32;used&#32;like&#32;flags&#32;and&#32;true&#32;is&#32;assumed.&#32;Available:\n\n&quot;</emphasis>;
5339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;s,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;success=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;include&#32;successful&#32;assertions&#32;in&#32;output\n&quot;</emphasis>;
5341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;cs,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;case-sensitive=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;filters&#32;being&#32;treated&#32;as&#32;case&#32;sensitive\n&quot;</emphasis>;
5343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;e,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;exit=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;exits&#32;after&#32;the&#32;tests&#32;finish\n&quot;</emphasis>;
5345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;d,&#32;&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;duration=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;prints&#32;the&#32;time&#32;duration&#32;of&#32;each&#32;test\n&quot;</emphasis>;
5347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nt,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-throw=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;skips&#32;exceptions-related&#32;assert&#32;checks\n&quot;</emphasis>;
5349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;ne,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-exitcode=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;returns&#32;(or&#32;exits)&#32;always&#32;with&#32;success\n&quot;</emphasis>;
5351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nr,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-run=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;skips&#32;all&#32;runtime&#32;doctest&#32;operations\n&quot;</emphasis>;
5353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nv,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-version=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;omit&#32;the&#32;framework&#32;version&#32;in&#32;the&#32;output\n&quot;</emphasis>;
5355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nc,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-colors=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;disables&#32;colors&#32;in&#32;output\n&quot;</emphasis>;
5357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;fc,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;force-colors=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;use&#32;colors&#32;even&#32;when&#32;not&#32;in&#32;a&#32;tty\n&quot;</emphasis>;
5359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nb,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-breaks=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;disables&#32;breakpoints&#32;in&#32;debuggers\n&quot;</emphasis>;
5361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;ns,&#32;&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-skip=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;don&apos;t&#32;skip&#32;test&#32;cases&#32;marked&#32;as&#32;skip\n&quot;</emphasis>;
5363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;gfl,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;gnu-file-line=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:n:&#32;vs&#32;(n):&#32;for&#32;line&#32;numbers&#32;in&#32;output\n&quot;</emphasis>;
5365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;npf,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-path-filenames=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;only&#32;filenames&#32;and&#32;no&#32;paths&#32;in&#32;output\n&quot;</emphasis>;
5367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;-&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;nln,&#32;--&quot;</emphasis>&#32;DOCTEST_OPTIONS_PREFIX_DISPLAY&#32;<emphasis role="stringliteral">&quot;no-line-numbers=&lt;bool&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>
5368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;Whitespace(sizePrefixDisplay*1)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;0&#32;instead&#32;of&#32;real&#32;line&#32;numbers&#32;in&#32;output\n&quot;</emphasis>;
5369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;==================================================================================&#32;&lt;&lt;&#32;79</emphasis>
5370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
5371 
5372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;for&#32;more&#32;information&#32;visit&#32;the&#32;project&#32;documentation\n\n&quot;</emphasis>;
5374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5375 
5376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;printRegisteredReporters()&#32;{
5377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion();
5378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;printReporters&#32;=&#32;[<emphasis role="keyword">this</emphasis>]&#32;(<emphasis role="keyword">const</emphasis>&#32;reporterMap&amp;&#32;reporters,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;type)&#32;{
5379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(reporters.size())&#32;{
5380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;listing&#32;all&#32;registered&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;type&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;reporters)
5382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;priority:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setw(5)&#32;&lt;&lt;&#32;curr.first.first
5383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;name:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;curr.first.second&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
5386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printReporters(getListeners(),&#32;<emphasis role="stringliteral">&quot;listeners&quot;</emphasis>);
5387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printReporters(getReporters(),&#32;<emphasis role="stringliteral">&quot;reporters&quot;</emphasis>);
5388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5389 
5390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;list_query_results()&#32;{
5391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.count&#32;||&#32;opt.list_test_cases)&#32;{
5393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestCasesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_test_suites)&#32;{
5397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestCasesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;test&#32;suites&#32;with&#32;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestSuitesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5405 
5406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;WHAT&#32;FOLLOWS&#32;ARE&#32;OVERRIDES&#32;OF&#32;THE&#32;VIRTUAL&#32;METHODS&#32;OF&#32;THE&#32;REPORTER&#32;INTERFACE</emphasis>
5408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;=========================================================================================</emphasis>
5409 
5410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;report_query(<emphasis role="keyword">const</emphasis>&#32;QueryData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.version)&#32;{
5412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printVersion();
5413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.help)&#32;{
5414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printHelp();
5415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_reporters)&#32;{
5416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printRegisteredReporters();
5417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.count&#32;||&#32;opt.list_test_cases)&#32;{
5418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_test_cases)&#32;{
5419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;listing&#32;all&#32;test&#32;case&#32;names\n&quot;</emphasis>;
5421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5423 
5424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in.num_data;&#32;++i)
5425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;in.data[i]-&gt;m_name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5426 
5427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5428 
5429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestCasesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5432 
5433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(opt.list_test_suites)&#32;{
5434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;listing&#32;all&#32;test&#32;suites\n&quot;</emphasis>;
5435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5436 
5437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;in.num_data;&#32;++i)
5438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;in.data[i]-&gt;m_test_suite&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5439 
5440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5441 
5442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestCasesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;test&#32;suites&#32;with&#32;unskipped&#32;test&#32;cases&#32;passing&#32;the&#32;current&#32;filters:&#32;&quot;</emphasis>
5447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;g_cs-&gt;numTestSuitesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5450 
5451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_start()<emphasis role="keyword">&#32;override&#32;</emphasis>{&#32;printIntro();&#32;}
5452 
5453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_run_end(<emphasis role="keyword">const</emphasis>&#32;TestRunStats&amp;&#32;p)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;separator_to_stream();
5455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;std::dec;
5456 
5457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;anythingFailed&#32;=&#32;p.numTestCasesFailed&#32;&gt;&#32;0&#32;||&#32;p.numAssertsFailed&#32;&gt;&#32;0;
5458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;test&#32;cases:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setw(6)
5459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;p.numTestCasesPassingFilters&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>
5460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;((p.numTestCasesPassingFilters&#32;==&#32;0&#32;||&#32;anythingFailed)&#32;?&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;:
5461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Color::Green</link>)
5462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(6)&#32;&lt;&lt;&#32;p.numTestCasesPassingFilters&#32;-&#32;p.numTestCasesFailed&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;passed&quot;</emphasis>
5463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(p.numTestCasesFailed&#32;&gt;&#32;0&#32;?&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>)
5464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(6)&#32;&lt;&lt;&#32;p.numTestCasesFailed&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;failed&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>;
5465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.no_skipped_summary&#32;==&#32;<emphasis role="keyword">false</emphasis>)&#32;{
5466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numSkipped&#32;=&#32;p.numTestCases&#32;-&#32;p.numTestCasesPassingFilters;
5467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(numSkipped&#32;==&#32;0&#32;?&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>)&#32;&lt;&lt;&#32;std::setw(6)&#32;&lt;&lt;&#32;numSkipped
5468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;skipped&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;assertions:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setw(6)
5472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;p.numAsserts&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>
5473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;((p.numAsserts&#32;==&#32;0&#32;||&#32;anythingFailed)&#32;?&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Color::Green</link>)
5474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::setw(6)&#32;&lt;&lt;&#32;(p.numAsserts&#32;-&#32;p.numAssertsFailed)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;passed&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(p.numAssertsFailed&#32;&gt;&#32;0&#32;?&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>)&#32;&lt;&lt;&#32;std::setw(6)
5476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;p.numAssertsFailed&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;failed&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;|\n&quot;</emphasis>;
5477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;[doctest]&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>
5478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Status:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;(p.numTestCasesFailed&#32;&gt;&#32;0&#32;?&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;:&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a11e251a01549ffbc0993c769e787c6ae">Color::Green</link>)
5479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;((p.numTestCasesFailed&#32;&gt;&#32;0)&#32;?&#32;<emphasis role="stringliteral">&quot;FAILURE!&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;SUCCESS!&quot;</emphasis>)&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;std::endl;
5480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5481 
5482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_start(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;&#32;in)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasLoggedCurrentTestStart&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&amp;in;
5485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subcasesStack.clear();
5486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentSubcaseLevel&#32;=&#32;0;
5487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
5489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_reenter(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subcasesStack.clear();
5491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5492 
5493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_end(<emphasis role="keyword">const</emphasis>&#32;CurrentTestCaseStats&amp;&#32;st)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;log&#32;the&#32;preamble&#32;of&#32;the&#32;test&#32;case&#32;only&#32;if&#32;there&#32;is&#32;something</emphasis>
5495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;to&#32;print&#32;-&#32;something&#32;other&#32;than&#32;that&#32;an&#32;assert&#32;has&#32;failed</emphasis>
5496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.duration&#32;||
5497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(st.failure_flags&#32;&amp;&amp;&#32;st.failure_flags&#32;!=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca06ab32ff93cacaa65c6a2667ddde64e9">TestCaseFailureReason::AssertFailure</link>))
5498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logTestStart();
5499 
5500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(opt.duration)
5501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;std::setprecision(6)&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;st.seconds
5502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;s:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;tc-&gt;m_name&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5503 
5504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca90b6713d67ca5273d0b7aa2d2ac60ab1">TestCaseFailureReason::Timeout</link>)
5505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Test&#32;case&#32;exceeded&#32;time&#32;limit&#32;of&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;std::setprecision(6)
5506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;tc-&gt;m_timeout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;!\n&quot;</emphasis>;
5507 
5508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca214290d44846106400115f44d2d21cb9">TestCaseFailureReason::ShouldHaveFailedButDidnt</link>)&#32;{
5509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Should&#32;have&#32;failed&#32;but&#32;didn&apos;t!&#32;Marking&#32;it&#32;as&#32;failed!\n&quot;</emphasis>;
5510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0ea1283c0437f975df930c28820a3920">TestCaseFailureReason::ShouldHaveFailedAndDid</link>)&#32;{
5511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;as&#32;expected&#32;so&#32;marking&#32;it&#32;as&#32;not&#32;failed\n&quot;</emphasis>;
5512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caa038bc08a903185cf809dd05056d6a75">TestCaseFailureReason::CouldHaveFailedAndDid</link>)&#32;{
5513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Allowed&#32;to&#32;fail&#32;so&#32;marking&#32;it&#32;as&#32;not&#32;failed\n&quot;</emphasis>;
5514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3caaab68fabc66bf5c3a606985f59a11afe">TestCaseFailureReason::DidntFailExactlyNumTimes</link>)&#32;{
5515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Didn&apos;t&#32;fail&#32;exactly&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;tc-&gt;m_expected_failures
5516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;times&#32;so&#32;marking&#32;it&#32;as&#32;failed!\n&quot;</emphasis>;
5517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab0e5ba77e37e755a83a01fdb2ad57b4d">TestCaseFailureReason::FailedExactlyNumTimes</link>)&#32;{
5518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a5da6111e5be1d7b01de0ee571cc1bc76">Color::Yellow</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;exactly&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;tc-&gt;m_expected_failures
5519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;times&#32;as&#32;expected&#32;so&#32;marking&#32;it&#32;as&#32;not&#32;failed!\n&quot;</emphasis>;
5520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(st.failure_flags&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab87a56a01139c003c5f90678c37a0cb3">TestCaseFailureReason::TooManyFailedAsserts</link>)&#32;{
5522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Aborting&#32;-&#32;too&#32;many&#32;failed&#32;asserts!\n&quot;</emphasis>;
5523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;&#32;<emphasis role="comment">//&#32;lgtm&#32;[cpp/useless-expression]</emphasis>
5525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5526 
5527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_exception(<emphasis role="keyword">const</emphasis>&#32;TestCaseException&amp;&#32;e)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logTestStart();
5529 
5530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_line_to_stream(tc-&gt;m_file.c_str(),&#32;tc-&gt;m_line,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
5531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;successOrFailColoredStringToStream(<emphasis role="keyword">false</emphasis>,&#32;e.is_crash&#32;?&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3aff8fa549e941fb7ca7adcd49d9ffdf6d">assertType::is_require</link>&#32;:
5532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a9ca6ff629647f2a90d4c01ce68800590">assertType::is_check</link>);
5533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92a67beb0a8d937993ad8b8cf6a238271f9">Color::Red</link>&#32;&lt;&lt;&#32;(e.is_crash&#32;?&#32;<emphasis role="stringliteral">&quot;test&#32;case&#32;CRASHED:&#32;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;test&#32;case&#32;THREW&#32;exception:&#32;&quot;</emphasis>)
5534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_color_1a32e9eaf6013139846e848af6e6cf2b92aee19aacebbc04b150add359e94684c83">Color::Cyan</link>&#32;&lt;&lt;&#32;e.error_string&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5535 
5536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num_stringified_contexts&#32;=&#32;get_num_stringified_contexts();
5537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(num_stringified_contexts)&#32;{
5538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;stringified_contexts&#32;=&#32;get_stringified_contexts();
5539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;logged:&#32;&quot;</emphasis>;
5540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;num_stringified_contexts;&#32;i&#32;&gt;&#32;0;&#32;--i)&#32;{
5541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;(i&#32;==&#32;num_stringified_contexts&#32;?&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;</emphasis>)
5542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;stringified_contexts[i&#32;-&#32;1]&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>;
5546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5547 
5548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_start(<emphasis role="keyword">const</emphasis>&#32;SubcaseSignature&amp;&#32;subc)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subcasesStack.push_back(subc);
5551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++currentSubcaseLevel;
5552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasLoggedCurrentTestStart&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5554 
5555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;subcase_end()<emphasis role="keyword">&#32;override&#32;</emphasis>{
5556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--currentSubcaseLevel;
5558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasLoggedCurrentTestStart&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5560 
5561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_assert(<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;&#32;rb)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!rb.m_failed&#32;&amp;&amp;&#32;!opt.success)
5563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
5564 
5565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5566 
5567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logTestStart();
5568 
5569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_line_to_stream(rb.m_file,&#32;rb.m_line,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
5570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;successOrFailColoredStringToStream(!rb.m_failed,&#32;rb.m_at);
5571 
5572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fulltext_log_assert_to_stream(s,&#32;rb);
5573 
5574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_contexts();
5575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5576 
5577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;log_message(<emphasis role="keyword">const</emphasis>&#32;MessageData&amp;&#32;mb)<emphasis role="keyword">&#32;override&#32;</emphasis>{
5578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mutex);
5579 
5580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logTestStart();
5581 
5582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_line_to_stream(mb.m_file,&#32;mb.m_line,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
5583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;getSuccessOrFailColor(<emphasis role="keyword">false</emphasis>,&#32;mb.m_severity)
5584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;getSuccessOrFailString(mb.m_severity&#32;&amp;&#32;<link linkend="_namespacedoctest_1_1assert_type_1ae1bb5bed722f34f1c38b83cb19d326d3a2dd798b430ccf956bc48c3b48bb4e570">assertType::is_warn</link>,&#32;mb.m_severity,
5585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;MESSAGE&quot;</emphasis>)&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>;
5586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s&#32;&lt;&lt;&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">Color::None</link>&#32;&lt;&lt;&#32;mb.m_string&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
5587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_contexts();
5588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5589 
5590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_case_skipped(<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;)<emphasis role="keyword">&#32;override&#32;</emphasis>{}
5591 &#32;&#32;&#32;&#32;};
5592 
5593 &#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a97757bf089f108cf8842727213bf3299">DOCTEST_REGISTER_REPORTER</link>(<emphasis role="stringliteral">&quot;console&quot;</emphasis>,&#32;0,&#32;ConsoleReporter);
5594 
5595 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5596 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>DebugOutputWindowReporter&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;ConsoleReporter
5597 &#32;&#32;&#32;&#32;{
5598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_THREAD_LOCAL&#32;<emphasis role="keyword">static</emphasis>&#32;std::ostringstream&#32;oss;
5599 
5600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DebugOutputWindowReporter(<emphasis role="keyword">const</emphasis>&#32;ContextOptions&amp;&#32;co)
5601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;ConsoleReporter(co,&#32;oss)&#32;{}
5602 
5603 <emphasis role="preprocessor">#define&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func,&#32;type,&#32;arg)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;void&#32;func(type&#32;arg)&#32;override&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5605 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bool&#32;with_col&#32;=&#32;g_no_colors;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5606 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_no_colors&#32;&#32;&#32;=&#32;false;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5607 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ConsoleReporter::func(arg);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5608 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5609 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oss.str(&quot;&quot;</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_no_colors&#32;=&#32;with_col;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5611 &#32;&#32;&#32;&#32;}
5612 
5613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>)
5614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end,&#32;<emphasis role="keyword">const</emphasis>&#32;TestRunStats&amp;,&#32;in)
5615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;,&#32;in)
5616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;,&#32;in)
5617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end,&#32;<emphasis role="keyword">const</emphasis>&#32;CurrentTestCaseStats&amp;,&#32;in)
5618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseException&amp;,&#32;in)
5619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start,&#32;<emphasis role="keyword">const</emphasis>&#32;SubcaseSignature&amp;,&#32;in)
5620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>)
5621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert,&#32;<emphasis role="keyword">const</emphasis>&#32;AssertData&amp;,&#32;in)
5622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message,&#32;<emphasis role="keyword">const</emphasis>&#32;MessageData&amp;,&#32;in)
5623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped,&#32;<emphasis role="keyword">const</emphasis>&#32;TestCaseData&amp;,&#32;in)
5624 &#32;&#32;&#32;&#32;};
5625 
5626 &#32;&#32;&#32;&#32;DOCTEST_THREAD_LOCAL&#32;std::ostringstream&#32;DebugOutputWindowReporter::oss;
5627 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5628 
5629 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;implementation&#32;of&#32;parseOption()</emphasis>
5630 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parseOptionImpl(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pattern,&#32;String*&#32;value)&#32;{
5631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;going&#32;from&#32;the&#32;end&#32;to&#32;the&#32;beginning&#32;and&#32;stopping&#32;on&#32;the&#32;first&#32;occurrence&#32;from&#32;the&#32;end</emphasis>
5632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;argc;&#32;i&#32;&gt;&#32;0;&#32;--i)&#32;{
5633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;index&#32;=&#32;i&#32;-&#32;1;
5634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;temp&#32;=&#32;std::strstr(argv[index],&#32;pattern);
5635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(temp&#32;&amp;&amp;&#32;(value&#32;||&#32;strlen(temp)&#32;==&#32;strlen(pattern)))&#32;{&#32;
5636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;eliminate&#32;matches&#32;in&#32;which&#32;the&#32;chars&#32;before&#32;the&#32;option&#32;are&#32;not&#32;&apos;-&apos;</emphasis>
5637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;noBadCharsFound&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;curr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;argv[index];
5639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(curr&#32;!=&#32;temp)&#32;{
5640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(*curr++&#32;!=&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
5641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;noBadCharsFound&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
5643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(noBadCharsFound&#32;&amp;&amp;&#32;argv[index][0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;{
5646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(value)&#32;{
5647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parsing&#32;the&#32;value&#32;of&#32;an&#32;option</emphasis>
5648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;temp&#32;+=&#32;strlen(pattern);
5649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;len&#32;=&#32;strlen(temp);
5650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(len)&#32;{
5651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*value&#32;=&#32;temp;
5652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
5655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;just&#32;a&#32;flag&#32;-&#32;no&#32;value</emphasis>
5656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5662 &#32;&#32;&#32;&#32;}
5663 
5664 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parses&#32;an&#32;option&#32;and&#32;returns&#32;the&#32;string&#32;after&#32;the&#32;&apos;=&apos;&#32;character</emphasis>
5665 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parseOption(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pattern,&#32;String*&#32;value&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>,
5666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;defaultVal&#32;=&#32;String())&#32;{
5667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(value)
5668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*value&#32;=&#32;defaultVal;
5669 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</emphasis>
5670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;offset&#32;(normally&#32;3&#32;for&#32;&quot;dt-&quot;)&#32;to&#32;skip&#32;prefix</emphasis>
5671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseOptionImpl(argc,&#32;argv,&#32;pattern&#32;+&#32;strlen(DOCTEST_CONFIG_OPTIONS_PREFIX),&#32;value))
5672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5673 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS</emphasis>
5674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseOptionImpl(argc,&#32;argv,&#32;pattern,&#32;value);
5675 &#32;&#32;&#32;&#32;}
5676 
5677 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;locates&#32;a&#32;flag&#32;on&#32;the&#32;command&#32;line</emphasis>
5678 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parseFlag(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pattern)&#32;{
5679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseOption(argc,&#32;argv,&#32;pattern);
5680 &#32;&#32;&#32;&#32;}
5681 
5682 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parses&#32;a&#32;comma&#32;separated&#32;list&#32;of&#32;words&#32;after&#32;a&#32;pattern&#32;in&#32;one&#32;of&#32;the&#32;arguments&#32;in&#32;argv</emphasis>
5683 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parseCommaSepArgs(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pattern,
5684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;String&gt;&amp;&#32;res)&#32;{
5685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;filtersString;
5686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseOption(argc,&#32;argv,&#32;pattern,&#32;&amp;filtersString))&#32;{
5687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;tokenize&#32;with&#32;&quot;,&quot;&#32;as&#32;a&#32;separator</emphasis>
5688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;strtokCalled</emphasis>
5689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1aeffeb8afb2053d165c856f4ee520b62b">DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH</link>(<emphasis role="stringliteral">&quot;-Wdeprecated-declarations&quot;</emphasis>)
5690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;pch&#32;=&#32;std::strtok(filtersString.c_str(),&#32;&quot;,&quot;);&#32;<emphasis role="comment">//&#32;modifies&#32;the&#32;string</emphasis>
5691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;while(pch&#32;!=&#32;<emphasis role="keywordtype">nullptr</emphasis>)&#32;{
5692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(strlen(pch))
5693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res.push_back(pch);
5694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;uses&#32;the&#32;strtok()&#32;internal&#32;state&#32;to&#32;go&#32;to&#32;the&#32;next&#32;token</emphasis>
5695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cppcheck-suppress&#32;strtokCalled</emphasis>
5696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pch&#32;=&#32;std::strtok(<emphasis role="keyword">nullptr</emphasis>,&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>);
5697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
5699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5702 &#32;&#32;&#32;&#32;}
5703 
5704 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;optionType
5705 &#32;&#32;&#32;&#32;{
5706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;option_bool,
5707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;option_int
5708 &#32;&#32;&#32;&#32;};
5709 
5710 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;parses&#32;an&#32;int/bool&#32;option&#32;from&#32;the&#32;command&#32;line</emphasis>
5711 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parseIntOption(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pattern,&#32;optionType&#32;type,
5712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;res)&#32;{
5713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;parsedValue;
5714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!parseOption(argc,&#32;argv,&#32;pattern,&#32;&amp;parsedValue))
5715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5716 
5717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(type&#32;==&#32;0)&#32;{
5718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;boolean</emphasis>
5719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;positive[][5]&#32;=&#32;{<emphasis role="stringliteral">&quot;1&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;true&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;on&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;yes&quot;</emphasis>};&#32;&#32;<emphasis role="comment">//&#32;5&#32;-&#32;strlen(&quot;true&quot;)&#32;+&#32;1</emphasis>
5720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;negative[][6]&#32;=&#32;{<emphasis role="stringliteral">&quot;0&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;false&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;off&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;no&quot;</emphasis>};&#32;<emphasis role="comment">//&#32;6&#32;-&#32;strlen(&quot;false&quot;)&#32;+&#32;1</emphasis>
5721 
5722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;value&#32;matches&#32;any&#32;of&#32;the&#32;positive/negative&#32;possibilities</emphasis>
5723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;{
5724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parsedValue.compare(positive[i],&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;1;&#32;
5726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parsedValue.compare(negative[i],&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;0;&#32;
5730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
5734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer</emphasis>
5735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;change&#32;this&#32;to&#32;use&#32;std::stoi&#32;or&#32;something&#32;else!&#32;currently&#32;it&#32;uses&#32;undefined&#32;behavior&#32;-&#32;assumes&#32;&apos;0&apos;&#32;on&#32;failed&#32;parse...</emphasis>
5736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;theInt&#32;=&#32;std::atoi(parsedValue.c_str());&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
5737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(theInt&#32;!=&#32;0)&#32;{
5738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;res&#32;=&#32;theInt;&#32;
5739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
5740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
5743 &#32;&#32;&#32;&#32;}
5744 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
5745 
5746 Context::Context(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv)
5747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;p(new&#32;detail::ContextState)&#32;{
5748 &#32;&#32;&#32;&#32;parseArgs(argc,&#32;argv,&#32;<emphasis role="keyword">true</emphasis>);
5749 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(argc)
5750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;binary_name&#32;=&#32;argv[0];
5751 }
5752 
5753 Context::~Context()&#32;{
5754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(g_cs&#32;==&#32;p)
5755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5756 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;p;
5757 }
5758 
5759 <emphasis role="keywordtype">void</emphasis>&#32;Context::applyCommandLine(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv)&#32;{
5760 &#32;&#32;&#32;&#32;parseArgs(argc,&#32;argv);
5761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(argc)
5762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;binary_name&#32;=&#32;argv[0];
5763 }
5764 
5765 <emphasis role="comment">//&#32;parses&#32;args</emphasis>
5766 <emphasis role="keywordtype">void</emphasis>&#32;Context::parseArgs(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;argv,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;withDefaults)&#32;{
5767 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
5768 
5769 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
5770 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;source-file=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[0]);
5771 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;sf=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[0]);
5772 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;source-file-exclude=&quot;</emphasis>,p-&gt;filters[1]);
5773 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;sfe=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[1]);
5774 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;test-suite=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[2]);
5775 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;ts=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[2]);
5776 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;test-suite-exclude=&quot;</emphasis>,&#32;p-&gt;filters[3]);
5777 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;tse=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[3]);
5778 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;test-case=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[4]);
5779 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;tc=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[4]);
5780 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;test-case-exclude=&quot;</emphasis>,&#32;&#32;p-&gt;filters[5]);
5781 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;tce=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[5]);
5782 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;subcase=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[6]);
5783 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;sc=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[6]);
5784 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;subcase-exclude=&quot;</emphasis>,&#32;&#32;&#32;&#32;p-&gt;filters[7]);
5785 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;sce=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[7]);
5786 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;reporters=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[8]);
5787 &#32;&#32;&#32;&#32;parseCommaSepArgs(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;r=&quot;</emphasis>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[8]);
5788 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
5789 
5790 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;intRes&#32;=&#32;0;
5791 &#32;&#32;&#32;&#32;String&#32;strRes;
5792 
5793 <emphasis role="preprocessor">#define&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(name,&#32;sname,&#32;var,&#32;default)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5794 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(parseIntOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;name&#32;&quot;=&quot;</emphasis>,&#32;option_bool,&#32;intRes)&#32;||&#32;&#32;\
5795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseIntOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;sname&#32;&quot;=&quot;,&#32;option_bool,&#32;intRes))&#32;&#32;&#32;\
5796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;!!intRes;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5797 &#32;&#32;&#32;&#32;else&#32;if(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;name)&#32;||&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;sname))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;true;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5800 &#32;&#32;&#32;&#32;else&#32;if(withDefaults)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5801 &#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;default
5802 
5803 <emphasis role="preprocessor">#define&#32;DOCTEST_PARSE_INT_OPTION(name,&#32;sname,&#32;var,&#32;default)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5804 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(parseIntOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;name&#32;&quot;=&quot;</emphasis>,&#32;option_int,&#32;intRes)&#32;||&#32;&#32;&#32;\
5805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseIntOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;sname&#32;&quot;=&quot;,&#32;option_int,&#32;intRes))&#32;&#32;&#32;&#32;\
5806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;intRes;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5807 &#32;&#32;&#32;&#32;else&#32;if(withDefaults)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5808 &#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;default
5809 
5810 <emphasis role="preprocessor">#define&#32;DOCTEST_PARSE_STR_OPTION(name,&#32;sname,&#32;var,&#32;default)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
5811 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if(parseOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;name&#32;&quot;=&quot;</emphasis>,&#32;&amp;strRes,&#32;default)&#32;||&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseOption(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;sname&#32;&quot;=&quot;,&#32;&amp;strRes,&#32;default)&#32;||&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;withDefaults)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\
5814 &#32;&#32;&#32;&#32;p-&gt;var&#32;=&#32;strRes
5815 
5816 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
5817 &#32;&#32;&#32;&#32;DOCTEST_PARSE_STR_OPTION(<emphasis role="stringliteral">&quot;out&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;o&quot;</emphasis>,&#32;out,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
5818 &#32;&#32;&#32;&#32;DOCTEST_PARSE_STR_OPTION(<emphasis role="stringliteral">&quot;order-by&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ob&quot;</emphasis>,&#32;order_by,&#32;<emphasis role="stringliteral">&quot;file&quot;</emphasis>);
5819 &#32;&#32;&#32;&#32;DOCTEST_PARSE_INT_OPTION(<emphasis role="stringliteral">&quot;rand-seed&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;rs&quot;</emphasis>,&#32;rand_seed,&#32;0);
5820 
5821 &#32;&#32;&#32;&#32;DOCTEST_PARSE_INT_OPTION(<emphasis role="stringliteral">&quot;first&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;f&quot;</emphasis>,&#32;first,&#32;0);
5822 &#32;&#32;&#32;&#32;DOCTEST_PARSE_INT_OPTION(<emphasis role="stringliteral">&quot;last&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;l&quot;</emphasis>,&#32;last,&#32;UINT_MAX);
5823 
5824 &#32;&#32;&#32;&#32;DOCTEST_PARSE_INT_OPTION(<emphasis role="stringliteral">&quot;abort-after&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;aa&quot;</emphasis>,&#32;abort_after,&#32;0);
5825 &#32;&#32;&#32;&#32;DOCTEST_PARSE_INT_OPTION(<emphasis role="stringliteral">&quot;subcase-filter-levels&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;scfl&quot;</emphasis>,&#32;subcase_filter_levels,&#32;INT_MAX);
5826 
5827 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;success&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;s&quot;</emphasis>,&#32;success,&#32;<emphasis role="keyword">false</emphasis>);
5828 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;case-sensitive&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;cs&quot;</emphasis>,&#32;case_sensitive,&#32;<emphasis role="keyword">false</emphasis>);
5829 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;exit&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;e&quot;</emphasis>,&#32;exit,&#32;<emphasis role="keyword">false</emphasis>);
5830 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;duration&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;d&quot;</emphasis>,&#32;duration,&#32;<emphasis role="keyword">false</emphasis>);
5831 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-throw&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nt&quot;</emphasis>,&#32;no_throw,&#32;<emphasis role="keyword">false</emphasis>);
5832 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-exitcode&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ne&quot;</emphasis>,&#32;no_exitcode,&#32;<emphasis role="keyword">false</emphasis>);
5833 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-run&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nr&quot;</emphasis>,&#32;no_run,&#32;<emphasis role="keyword">false</emphasis>);
5834 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-version&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nv&quot;</emphasis>,&#32;no_version,&#32;<emphasis role="keyword">false</emphasis>);
5835 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-colors&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nc&quot;</emphasis>,&#32;no_colors,&#32;<emphasis role="keyword">false</emphasis>);
5836 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;force-colors&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;fc&quot;</emphasis>,&#32;force_colors,&#32;<emphasis role="keyword">false</emphasis>);
5837 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-breaks&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nb&quot;</emphasis>,&#32;no_breaks,&#32;<emphasis role="keyword">false</emphasis>);
5838 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-skip&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ns&quot;</emphasis>,&#32;no_skip,&#32;<emphasis role="keyword">false</emphasis>);
5839 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;gnu-file-line&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;gfl&quot;</emphasis>,&#32;gnu_file_line,&#32;!<emphasis role="keywordtype">bool</emphasis>(<link linkend="_doctest_8h_1ac15060779a07a8f5ffc6af7543283a6a">DOCTEST_MSVC</link>));
5840 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-path-filenames&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;npf&quot;</emphasis>,&#32;no_path_in_filenames,&#32;<emphasis role="keyword">false</emphasis>);
5841 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-line-numbers&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nln&quot;</emphasis>,&#32;no_line_numbers,&#32;<emphasis role="keyword">false</emphasis>);
5842 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-skipped-summary&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;nss&quot;</emphasis>,&#32;no_skipped_summary,&#32;<emphasis role="keyword">false</emphasis>);
5843 &#32;&#32;&#32;&#32;DOCTEST_PARSE_AS_BOOL_OR_FLAG(<emphasis role="stringliteral">&quot;no-time-in-output&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;ntio&quot;</emphasis>,&#32;no_time_in_output,&#32;<emphasis role="keyword">false</emphasis>);
5844 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
5845 
5846 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(withDefaults)&#32;{
5847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;help&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;version&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;count&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_test_cases&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_test_suites&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_reporters&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5853 &#32;&#32;&#32;&#32;}
5854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;help&quot;</emphasis>)&#32;||
5855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;h&quot;</emphasis>)&#32;||
5856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;?&quot;</emphasis>))&#32;{
5857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;help&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5859 &#32;&#32;&#32;&#32;}
5860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;version&quot;</emphasis>)&#32;||
5861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;v&quot;</emphasis>))&#32;{
5862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;version&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5864 &#32;&#32;&#32;&#32;}
5865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;count&quot;</emphasis>)&#32;||
5866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;c&quot;</emphasis>))&#32;{
5867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;count&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5869 &#32;&#32;&#32;&#32;}
5870 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;list-test-cases&quot;</emphasis>)&#32;||
5871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;ltc&quot;</emphasis>))&#32;{
5872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_test_cases&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5874 &#32;&#32;&#32;&#32;}
5875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;list-test-suites&quot;</emphasis>)&#32;||
5876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;lts&quot;</emphasis>))&#32;{
5877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_test_suites&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5879 &#32;&#32;&#32;&#32;}
5880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;list-reporters&quot;</emphasis>)&#32;||
5881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;parseFlag(argc,&#32;argv,&#32;DOCTEST_CONFIG_OPTIONS_PREFIX&#32;<emphasis role="stringliteral">&quot;lr&quot;</emphasis>))&#32;{
5882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;list_reporters&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;exit&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5884 &#32;&#32;&#32;&#32;}
5885 }
5886 
5887 <emphasis role="comment">//&#32;allows&#32;the&#32;user&#32;to&#32;add&#32;procedurally&#32;to&#32;the&#32;filters&#32;from&#32;the&#32;command&#32;line</emphasis>
5888 <emphasis role="keywordtype">void</emphasis>&#32;Context::addFilter(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;filter,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;value)&#32;{&#32;setOption(filter,&#32;value);&#32;}
5889 
5890 <emphasis role="comment">//&#32;allows&#32;the&#32;user&#32;to&#32;clear&#32;all&#32;filters&#32;from&#32;the&#32;command&#32;line</emphasis>
5891 <emphasis role="keywordtype">void</emphasis>&#32;Context::clearFilters()&#32;{
5892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;p-&gt;filters)
5893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curr.clear();
5894 }
5895 
5896 <emphasis role="comment">//&#32;allows&#32;the&#32;user&#32;to&#32;override&#32;procedurally&#32;the&#32;int/bool&#32;options&#32;from&#32;the&#32;command&#32;line</emphasis>
5897 <emphasis role="keywordtype">void</emphasis>&#32;Context::setOption(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;option,&#32;<emphasis role="keywordtype">int</emphasis>&#32;value)&#32;{
5898 &#32;&#32;&#32;&#32;setOption(option,&#32;<link linkend="_namespacedoctest_1a63aa06a8555c5aa34a7a6e76e87a3bca">toString</link>(value).c_str());
5899 }
5900 
5901 <emphasis role="comment">//&#32;allows&#32;the&#32;user&#32;to&#32;override&#32;procedurally&#32;the&#32;string&#32;options&#32;from&#32;the&#32;command&#32;line</emphasis>
5902 <emphasis role="keywordtype">void</emphasis>&#32;Context::setOption(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;option,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;value)&#32;{
5903 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;argv&#32;&#32;&#32;=&#32;String(<emphasis role="stringliteral">&quot;-&quot;</emphasis>)&#32;+&#32;option&#32;+&#32;<emphasis role="stringliteral">&quot;=&quot;</emphasis>&#32;+&#32;value;
5904 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;lvalue&#32;=&#32;argv.c_str();
5905 &#32;&#32;&#32;&#32;parseArgs(1,&#32;&amp;lvalue);
5906 }
5907 
5908 <emphasis role="comment">//&#32;users&#32;should&#32;query&#32;this&#32;in&#32;their&#32;main()&#32;and&#32;exit&#32;the&#32;program&#32;if&#32;true</emphasis>
5909 <emphasis role="keywordtype">bool</emphasis>&#32;Context::shouldExit()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;p-&gt;exit;&#32;}
5910 
5911 <emphasis role="keywordtype">void</emphasis>&#32;Context::setAsDefaultForAssertsOutOfTestCases()&#32;{&#32;g_cs&#32;=&#32;p;&#32;}
5912 
5913 <emphasis role="keywordtype">void</emphasis>&#32;Context::setAssertHandler(<link linkend="_namespacedoctest_1_1detail_1a5b5db6997f20389de5735e3ee3439b95">detail::assert_handler</link>&#32;ah)&#32;{&#32;p-&gt;ah&#32;=&#32;ah;&#32;}
5914 
5915 <emphasis role="comment">//&#32;the&#32;main&#32;function&#32;that&#32;does&#32;all&#32;the&#32;filtering&#32;and&#32;test&#32;running</emphasis>
5916 <emphasis role="keywordtype">int</emphasis>&#32;Context::run()&#32;{
5917 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>detail;
5918 
5919 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;save&#32;the&#32;old&#32;context&#32;state&#32;in&#32;case&#32;such&#32;was&#32;setup&#32;-&#32;for&#32;using&#32;asserts&#32;out&#32;of&#32;a&#32;testing&#32;context</emphasis>
5920 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;old_cs&#32;=&#32;g_cs;
5921 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;is&#32;the&#32;current&#32;contest</emphasis>
5922 &#32;&#32;&#32;&#32;g_cs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;p;
5923 &#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1a0b03060093b3894c976b6ae84e55f3f2">is_running_in_test</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
5924 
5925 &#32;&#32;&#32;&#32;g_no_colors&#32;=&#32;p-&gt;no_colors;
5926 &#32;&#32;&#32;&#32;p-&gt;resetRunData();
5927 
5928 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stdout&#32;by&#32;default</emphasis>
5929 &#32;&#32;&#32;&#32;p-&gt;cout&#32;=&#32;&amp;std::cout;
5930 &#32;&#32;&#32;&#32;p-&gt;cerr&#32;=&#32;&amp;std::cerr;
5931 
5932 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;to&#32;a&#32;file&#32;if&#32;specified</emphasis>
5933 &#32;&#32;&#32;&#32;std::fstream&#32;fstr;
5934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;out.size())&#32;{
5935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fstr.open(p-&gt;out.c_str(),&#32;std::fstream::out);
5936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;cout&#32;=&#32;&amp;fstr;
5937 &#32;&#32;&#32;&#32;}
5938 
5939 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;cleanup_and_return&#32;=&#32;[&amp;]()&#32;{
5940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fstr.is_open())
5941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fstr.close();
5942 
5943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;restore&#32;context</emphasis>
5944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_cs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;old_cs;
5945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacedoctest_1a0b03060093b3894c976b6ae84e55f3f2">is_running_in_test</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
5946 
5947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;have&#32;to&#32;free&#32;the&#32;reporters&#32;which&#32;were&#32;allocated&#32;when&#32;the&#32;run&#32;started</emphasis>
5948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;p-&gt;reporters_currently_used)
5949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;curr;
5950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;reporters_currently_used.clear();
5951 
5952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;numTestCasesFailed&#32;&amp;&amp;&#32;!p-&gt;no_exitcode)
5953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXIT_FAILURE;
5954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXIT_SUCCESS;
5955 &#32;&#32;&#32;&#32;};
5956 
5957 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;setup&#32;default&#32;reporter&#32;if&#32;none&#32;is&#32;given&#32;through&#32;the&#32;command&#32;line</emphasis>
5958 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;filters[8].empty())
5959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;filters[8].push_back(<emphasis role="stringliteral">&quot;console&quot;</emphasis>);
5960 
5961 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;to&#32;see&#32;if&#32;any&#32;of&#32;the&#32;registered&#32;reporters&#32;has&#32;been&#32;selected</emphasis>
5962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;getReporters())&#32;{
5963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(matchesAny(curr.first.second.c_str(),&#32;p-&gt;filters[8],&#32;<emphasis role="keyword">false</emphasis>,&#32;p-&gt;case_sensitive))
5964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;reporters_currently_used.push_back(curr.second(*g_cs));
5965 &#32;&#32;&#32;&#32;}
5966 
5967 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;check&#32;if&#32;there&#32;is&#32;nothing&#32;in&#32;reporters_currently_used</emphasis>
5968 
5969 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;prepend&#32;all&#32;listeners</emphasis>
5970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;getListeners())
5971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;reporters_currently_used.insert(p-&gt;reporters_currently_used.begin(),&#32;curr.second(*g_cs));
5972 
5973 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_namespacedoctest_1_1detail_1a013828c4e677241cc26aeea33f762710">isDebuggerActive</link>())
5975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;reporters_currently_used.push_back(<emphasis role="keyword">new</emphasis>&#32;DebugOutputWindowReporter(*g_cs));
5976 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_PLATFORM_WINDOWS</emphasis>
5977 
5978 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;version,&#32;help&#32;and&#32;no_run</emphasis>
5979 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;no_run&#32;||&#32;p-&gt;version&#32;||&#32;p-&gt;help&#32;||&#32;p-&gt;list_reporters)&#32;{
5980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(report_query,&#32;QueryData());
5981 
5982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cleanup_and_return();
5983 &#32;&#32;&#32;&#32;}
5984 
5985 &#32;&#32;&#32;&#32;std::vector&lt;const&#32;TestCase*&gt;&#32;testArray;
5986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;getRegisteredTests())
5987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testArray.push_back(&amp;curr);
5988 &#32;&#32;&#32;&#32;p-&gt;numTestCases&#32;=&#32;testArray.size();
5989 
5990 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sort&#32;the&#32;collected&#32;records</emphasis>
5991 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!testArray.empty())&#32;{
5992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;order_by.compare(<emphasis role="stringliteral">&quot;file&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(testArray.begin(),&#32;testArray.end(),&#32;fileOrderComparator);
5994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;order_by.compare(<emphasis role="stringliteral">&quot;suite&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(testArray.begin(),&#32;testArray.end(),&#32;suiteOrderComparator);
5996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;order_by.compare(<emphasis role="stringliteral">&quot;name&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(testArray.begin(),&#32;testArray.end(),&#32;nameOrderComparator);
5998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;order_by.compare(<emphasis role="stringliteral">&quot;rand&quot;</emphasis>,&#32;<emphasis role="keyword">true</emphasis>)&#32;==&#32;0)&#32;{
5999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::srand(p-&gt;rand_seed);
6000 
6001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;random_shuffle&#32;implementation</emphasis>
6002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;first&#32;=&#32;&amp;testArray[0];
6003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;testArray.size()&#32;-&#32;1;&#32;i&#32;&gt;&#32;0;&#32;--i)&#32;{
6004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idxToSwap&#32;=&#32;std::rand()&#32;%&#32;(i&#32;+&#32;1);&#32;<emphasis role="comment">//&#32;NOLINT</emphasis>
6005 
6006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;temp&#32;=&#32;first[i];
6007 
6008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first[i]&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;first[idxToSwap];
6009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;first[idxToSwap]&#32;=&#32;temp;
6010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6012 &#32;&#32;&#32;&#32;}
6013 
6014 &#32;&#32;&#32;&#32;std::set&lt;String&gt;&#32;testSuitesPassingFilt;
6015 
6016 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_mode&#32;=&#32;p-&gt;count&#32;||&#32;p-&gt;list_test_cases&#32;||&#32;p-&gt;list_test_suites;
6017 &#32;&#32;&#32;&#32;std::vector&lt;const&#32;TestCaseData*&gt;&#32;queryResults;
6018 
6019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!query_mode)
6020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start,&#32;<link linkend="_doctest_8h_1ab46a6d1a6d00f0bda5fcf8b93966a20a">DOCTEST_EMPTY</link>);
6021 
6022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invoke&#32;the&#32;registered&#32;functions&#32;if&#32;they&#32;match&#32;the&#32;filter&#32;criteria&#32;(or&#32;just&#32;count&#32;them)</emphasis>
6023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keyword">auto</emphasis>&amp;&#32;curr&#32;:&#32;testArray)&#32;{
6024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;tc&#32;=&#32;*curr;
6025 
6026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;skip_me&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(tc.m_skip&#32;&amp;&amp;&#32;!p-&gt;no_skip)
6028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6029 
6030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!matchesAny(tc.m_file.c_str(),&#32;p-&gt;filters[0],&#32;<emphasis role="keyword">true</emphasis>,&#32;p-&gt;case_sensitive))
6031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(matchesAny(tc.m_file.c_str(),&#32;p-&gt;filters[1],&#32;<emphasis role="keyword">false</emphasis>,&#32;p-&gt;case_sensitive))
6033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!matchesAny(tc.m_test_suite,&#32;p-&gt;filters[2],&#32;<emphasis role="keyword">true</emphasis>,&#32;p-&gt;case_sensitive))
6035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(matchesAny(tc.m_test_suite,&#32;p-&gt;filters[3],&#32;<emphasis role="keyword">false</emphasis>,&#32;p-&gt;case_sensitive))
6037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!matchesAny(tc.m_name,&#32;p-&gt;filters[4],&#32;<emphasis role="keyword">true</emphasis>,&#32;p-&gt;case_sensitive))
6039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(matchesAny(tc.m_name,&#32;p-&gt;filters[5],&#32;<emphasis role="keyword">false</emphasis>,&#32;p-&gt;case_sensitive))
6041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6042 
6043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!skip_me)
6044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;numTestCasesPassingFilters++;
6045 
6046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;skip&#32;the&#32;test&#32;if&#32;it&#32;is&#32;not&#32;in&#32;the&#32;execution&#32;range</emphasis>
6047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((p-&gt;last&#32;&lt;&#32;p-&gt;numTestCasesPassingFilters&#32;&amp;&amp;&#32;p-&gt;first&#32;&lt;=&#32;p-&gt;last)&#32;||
6048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(p-&gt;first&#32;&gt;&#32;p-&gt;numTestCasesPassingFilters))
6049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;skip_me&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6050 
6051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(skip_me)&#32;{
6052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!query_mode)
6053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped,&#32;tc);
6054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
6055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6056 
6057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;not&#32;execute&#32;the&#32;test&#32;if&#32;we&#32;are&#32;to&#32;only&#32;count&#32;the&#32;number&#32;of&#32;filter&#32;passing&#32;tests</emphasis>
6058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;count)
6059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
6060 
6061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;print&#32;the&#32;name&#32;of&#32;the&#32;test&#32;and&#32;don&apos;t&#32;execute&#32;it</emphasis>
6062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;list_test_cases)&#32;{
6063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;queryResults.push_back(&amp;tc);
6064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
6065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6066 
6067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;print&#32;the&#32;name&#32;of&#32;the&#32;test&#32;suite&#32;if&#32;not&#32;done&#32;already&#32;and&#32;don&apos;t&#32;execute&#32;it</emphasis>
6068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;list_test_suites)&#32;{
6069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>((testSuitesPassingFilt.count(tc.m_test_suite)&#32;==&#32;0)&#32;&amp;&amp;&#32;tc.m_test_suite[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
6070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;queryResults.push_back(&amp;tc);
6071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;testSuitesPassingFilt.insert(tc.m_test_suite);
6072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;numTestSuitesPassingFilters++;
6073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
6075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6076 
6077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;execute&#32;the&#32;test&#32;if&#32;it&#32;passes&#32;all&#32;the&#32;filtering</emphasis>
6078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
6079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;currentTest&#32;=&#32;&amp;tc;
6080 
6081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;failure_flags&#32;=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca768cf3716f713edcf20c442607c403b2">TestCaseFailureReason::None</link>;
6082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;seconds&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
6083 
6084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;atomic&#32;counters</emphasis>
6085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;numAssertsFailedCurrentTest_atomic&#32;=&#32;0;
6086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;numAssertsCurrentTest_atomic&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
6087 
6088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;subcasesPassed.clear();
6089 
6090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start,&#32;tc);
6091 
6092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;timer.start();
6093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
6094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;run_test&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6095 
6096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
6097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;some&#32;of&#32;the&#32;fields&#32;for&#32;subcases&#32;(except&#32;for&#32;the&#32;set&#32;of&#32;fully&#32;passed&#32;ones)</emphasis>
6098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;should_reenter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;subcasesCurrentMaxLevel&#32;=&#32;0;
6100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;subcasesStack.clear();
6101 
6102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;shouldLogCurrentException&#32;=&#32;<emphasis role="keyword">true</emphasis>;
6103 
6104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset&#32;stuff&#32;for&#32;logging&#32;with&#32;INFO()</emphasis>
6105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;stringifiedContexts.clear();
6106 
6107 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
6108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
6109 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
6110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FatalConditionHandler&#32;fatalConditionHandler;&#32;<emphasis role="comment">//&#32;Handle&#32;signals</emphasis>
6111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;execute&#32;the&#32;test</emphasis>
6112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tc.m_test();
6113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fatalConditionHandler.reset();
6114 <emphasis role="preprocessor">#ifndef&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
6115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(<emphasis role="keyword">const</emphasis>&#32;TestFailureException&amp;)&#32;{
6116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca06ab32ff93cacaa65c6a2667ddde64e9">TestCaseFailureReason::AssertFailure</link>;
6117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>(...)&#32;{
6118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,
6119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{translateActiveException(),&#32;<emphasis role="keyword">false</emphasis>});
6120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3ca0474331a35ec33aefa287574dbe9a142">TestCaseFailureReason::Exception</link>;
6121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6122 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_NO_EXCEPTIONS</emphasis>
6123 
6124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;exit&#32;this&#32;loop&#32;if&#32;enough&#32;assertions&#32;have&#32;failed&#32;-&#32;even&#32;if&#32;there&#32;are&#32;more&#32;subcases</emphasis>
6125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;abort_after&#32;&gt;&#32;0&#32;&amp;&amp;
6126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;numAssertsFailed&#32;+&#32;p-&gt;numAssertsFailedCurrentTest_atomic&#32;&gt;=&#32;p-&gt;abort_after)&#32;{
6127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;run_test&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;failure_flags&#32;|=&#32;<link linkend="_namespacedoctest_1_1_test_case_failure_reason_1aecb2ca1f80416d60f0d6b96f65859d3cab87a56a01139c003c5f90678c37a0cb3">TestCaseFailureReason::TooManyFailedAsserts</link>;
6129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
6131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;should_reenter&#32;&amp;&amp;&#32;run_test)
6132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter,&#32;tc);
6133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!p-&gt;should_reenter)
6134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;run_test&#32;=&#32;<emphasis role="keyword">false</emphasis>;
6135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>(run_test);
6136 
6137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;finalizeTestCaseData();
6138 
6139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end,&#32;*g_cs);
6140 
6141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p-&gt;currentTest&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
6142 
6143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stop&#32;executing&#32;tests&#32;if&#32;enough&#32;assertions&#32;have&#32;failed</emphasis>
6144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(p-&gt;abort_after&#32;&gt;&#32;0&#32;&amp;&amp;&#32;p-&gt;numAssertsFailed&#32;&gt;=&#32;p-&gt;abort_after)
6145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
6146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
6147 &#32;&#32;&#32;&#32;}
6148 
6149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!query_mode)&#32;{
6150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end,&#32;*g_cs);
6151 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
6152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;QueryData&#32;qdata;
6153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qdata.run_stats&#32;=&#32;g_cs;
6154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qdata.data&#32;&#32;&#32;&#32;&#32;&#32;=&#32;queryResults.data();
6155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;qdata.num_data&#32;&#32;=&#32;unsigned(queryResults.size());
6156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DOCTEST_ITERATE_THROUGH_REPORTERS(report_query,&#32;qdata);
6157 &#32;&#32;&#32;&#32;}
6158 
6159 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;see&#32;these&#32;issues&#32;on&#32;the&#32;reasoning&#32;for&#32;this:</emphasis>
6160 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;https://github.com/onqtam/doctest/issues/143#issuecomment-414418903</emphasis>
6161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;-&#32;https://github.com/onqtam/doctest/issues/126</emphasis>
6162 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;DOCTEST_FIX_FOR_MACOS_LIBCPP_IOSFWD_STRING_LINK_ERRORS&#32;=&#32;[]()&#32;<link linkend="_doctest_8h_1a47e9d3609dfcc90b9a630ff33b9524d6">DOCTEST_NOINLINE</link>
6163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::cout&#32;&lt;&lt;&#32;std::string();&#32;};
6164 &#32;&#32;&#32;&#32;DOCTEST_FIX_FOR_MACOS_LIBCPP_IOSFWD_STRING_LINK_ERRORS();
6165 
6166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cleanup_and_return();
6167 }
6168 
6169 IReporter::~IReporter()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
6170 
6171 <emphasis role="keywordtype">int</emphasis>&#32;IReporter::get_num_active_contexts()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::g_infoContexts.size();&#32;}
6172 <emphasis role="keyword">const</emphasis>&#32;IContextScope*&#32;<emphasis role="keyword">const</emphasis>*&#32;IReporter::get_active_contexts()&#32;{
6173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_num_active_contexts()&#32;?&#32;&amp;detail::g_infoContexts[0]&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
6174 }
6175 
6176 <emphasis role="keywordtype">int</emphasis>&#32;IReporter::get_num_stringified_contexts()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::g_cs-&gt;stringifiedContexts.size();&#32;}
6177 <emphasis role="keyword">const</emphasis>&#32;String*&#32;IReporter::get_stringified_contexts()&#32;{
6178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;get_num_stringified_contexts()&#32;?&#32;&amp;detail::g_cs-&gt;stringifiedContexts[0]&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
6179 }
6180 
6181 <emphasis role="keyword">namespace&#32;</emphasis>detail&#32;{
6182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacedoctest_1_1detail_1a828e011bb6028ab94eb14a3c7d8bd2c4">registerReporterImpl</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;name,&#32;<emphasis role="keywordtype">int</emphasis>&#32;priority,&#32;<link linkend="_namespacedoctest_1_1detail_1a431bc1f18ee82461ef2cf98aad891526">reporterCreatorFunc</link>&#32;c,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isReporter)&#32;{
6183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(isReporter)
6184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority,&#32;name),&#32;c));
6185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
6186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority,&#32;name),&#32;c));
6187 &#32;&#32;&#32;&#32;}
6188 }&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
6189 
6190 }&#32;<emphasis role="comment">//&#32;namespace&#32;doctest</emphasis>
6191 
6192 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_DISABLE</emphasis>
6193 
6194 <emphasis role="preprocessor">#ifdef&#32;DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</emphasis>
6195 <link linkend="_doctest_8h_1a2199aafb8016ab6daca23c2cc6170428">DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH</link>(4007)&#32;<emphasis role="comment">//&#32;&apos;function&apos;&#32;:&#32;must&#32;be&#32;&apos;attribute&apos;&#32;-&#32;see&#32;issue&#32;#182</emphasis>
6196 int&#32;<link linkend="__arquivo_2ex2_2ex2_8cpp_1a0ddf1224851353fc92bfbff6f499fa97">main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>**&#32;argv)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classdoctest_1_1_context">doctest::Context</link>(argc,&#32;argv).<link linkend="_classdoctest_1_1_context_1a8059b137ef41cbe6c5d8160806a3cc63">run</link>();&#32;}
6197 <link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
6198 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</emphasis>
6199 
6200 <link linkend="_doctest_8h_1a569dfd3f8dfae352f35e8f62aadbdbc4">DOCTEST_CLANG_SUPPRESS_WARNING_POP</link>
6201 <link linkend="_doctest_8h_1a540e6314c4b71317f3459f0117e14bc8">DOCTEST_MSVC_SUPPRESS_WARNING_POP</link>
6202 <link linkend="_doctest_8h_1a656f7b58766e5e82f1799da962ebc17c">DOCTEST_GCC_SUPPRESS_WARNING_POP</link>
6203 
6204 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_LIBRARY_IMPLEMENTATION</emphasis>
6205 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;DOCTEST_CONFIG_IMPLEMENT</emphasis>
</programlisting></section>
