{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Project #01 }Project #01}
{\comment Generated by doxygen1.9.2.}
{\creatim \yr2021\mo11\dy19\hr19\min51\sec0}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Project #01}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Fri Nov 19 2021 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
AudioFile{\tc \v AudioFile}\par \pard\plain 
{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
  \par
A simple header-only C++ library for reading and writing audio files.\par
Current supported formats:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
WAV\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AIFF\par}
\par
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Author
\par}
{\tc\tcl2 \v Author}
{\b AudioFile} is written and maintained by Adam Stark.\par
{\f2 http://www.adamstark.co.uk}\par}
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Usage
\par}
{\tc\tcl2 \v Usage}
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Create an AudioFile object:
\par}
{\tc\tcl3 \v Create an AudioFile object:}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "AudioFile.h"\par
\par
AudioFile<double> audioFile;\par
}
 \par}
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Load an audio file:
\par}
{\tc\tcl3 \v Load an audio file:}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid audioFile.load ("/path/to/my/audiofile.wav");\par
}
 \par}
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Get some information about the loaded audio:
\par}
{\tc\tcl3 \v Get some information about the loaded audio:}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int sampleRate = audioFile.getSampleRate();\par
int bitDepth = audioFile.getBitDepth();\par
\par
int numSamples = audioFile.getNumSamplesPerChannel();\par
double lengthInSeconds = audioFile.getLengthInSeconds();\par
\par
int numChannels = audioFile.getNumChannels();\par
bool isMono = audioFile.isMono();\par
bool isStereo = audioFile.isStereo();\par
\par
// or, just use this quick shortcut to print a summary to the console\par
audioFile.printSummary();\par
}
 \par}
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Access the samples directly:
\par}
{\tc\tcl3 \v Access the samples directly:}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int channel = 0;\par
int numSamples = audioFile.getNumSamplesPerChannel();\par
\par
for (int i = 0; i < numSamples; i++)\par
\{\par
    double currentSample = audioFile.samples[channel][i];\par
\}\par
}
 \par}
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Replace the AudioFile audio buffer with another
\par}
{\tc\tcl3 \v Replace the AudioFile audio buffer with another}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // 1. Create an AudioBuffer \par
// (BTW, AudioBuffer is just a vector of vectors)\par
\par
AudioFile<double>::AudioBuffer buffer;\par
\par
// 2. Set to (e.g.) two channels\par
buffer.resize (2);\par
\par
// 3. Set number of samples per channel\par
buffer[0].resize (100000);\par
buffer[1].resize (100000);\par
\par
// 4. do something here to fill the buffer with samples, e.g.\par
\par
#include <math.h> // somewhere earler (for M_PI and sinf())\par
\par
// then...\par
\par
int numChannels = 2;\par
int numSamplesPerChannel = 100000;\par
float sampleRate = 44100.f;\par
float frequency = 440.f;\par
\par
for (int i = 0; i < numSamplesPerChannel; i++)\par
\{\par
    float sample = sinf (2. * M_PI * ((float) i / sampleRate) * frequency) ;\par
\par
    for (int channel = 0; channel < numChannels; channel++)\par
         buffer[channel][i] = sample * 0.5;\par
\}\par
\par
// 5. Put into the AudioFile object\par
bool ok = audioFile.setAudioBuffer (buffer);\par
}
\par}
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Resize the audio buffer
\par}
{\tc\tcl3 \v Resize the audio buffer}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Set both the number of channels and number of samples per channel\par
audioFile.setAudioBufferSize (numChannels, numSamples);\par
\par
// Set the number of samples per channel\par
audioFile.setNumSamplesPerChannel (numSamples);\par
\par
// Set the number of channels\par
audioFile.setNumChannels (int numChannels);\par
}
 \par}
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Set bit depth and sample rate
\par}
{\tc\tcl3 \v Set bit depth and sample rate}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid audioFile.setBitDepth (24);\par
audioFile.setSampleRate (44100);\par
}
 \par}
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Save the audio file to disk
\par}
{\tc\tcl3 \v Save the audio file to disk}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Wave file (implicit)\par
audioFile.save ("path/to/desired/audioFile.wav");\par
\par
// Wave file (explicit)\par
audioFile.save ("path/to/desired/audioFile.wav", AudioFileFormat::Wave);\par
\par
// Aiff file\par
audioFile.save ("path/to/desired/audioFile.aif", AudioFileFormat::Aiff);\par
}
\par}
\par}
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Examples
\par}
{\tc\tcl2 \v Examples}
Please see the {\f2 examples}  folder for some examples on library usage.\par}
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
A Note On Types
\par}
{\tc\tcl2 \v A Note On Types}
{\b AudioFile} is a template class and so it can be instantiated using floating point precision: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AudioFile<float> audioFile;\par
}
 ...or double precision: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AudioFile<double> audioFile;\par
}
 This simply reflects the data type you would like to use to store the underlying audio samples. You can still read or write 8, 16 or 24-bit audio files, regardless of the type that you use (unless your system uses a precision for floats less than your desired bit depth).\par
I have heard of people using the library with other types, but I have not designed for those cases. Let me know if you are interested in this supporting a specific type more formally.\par}
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Error Messages
\par}
{\tc\tcl2 \v Error Messages}
By default, the library logs error messages to the console to provide information on what has gone wrong (e.g. a file we tried to load didn't exist).\par
If you prefer not to see these messages, you can disable this error logging behaviour using: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid audioFile.shouldLogErrorsToConsole (false);\par
}
\par}
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Versions
\par}
{\tc\tcl2 \v Versions}
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.9 - 23rd January 2021
\par}
{\tc\tcl4 \v 1.0.9 - 23rd January 2021}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Faster loading of audio files\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bug fixes\par}
\par
\par}
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.8 - 18th October 2020
\par}
{\tc\tcl4 \v 1.0.8 - 18th October 2020}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CMake support\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Construct instances with a file path\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bug fixes\par}
\par
\par}
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.7 - 3rd July 2020
\par}
{\tc\tcl4 \v 1.0.7 - 3rd July 2020}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Support for 32-bit audio files\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Support for multi-channel audio files\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Reading/writing of {\f2 iXML data chunks}\par}
\par
\par}
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.6 - 29th February 2020
\par}
{\tc\tcl4 \v 1.0.6 - 29th February 2020}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Made error logging to the console optional\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Fixed lots of compiler warnings\par}
\par
\par}
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.5 - 14th October 2019
\par}
{\tc\tcl4 \v 1.0.5 - 14th October 2019}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Added include of <algorithm> to better support Visual Studio\par}
\par
\par}
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.4 - 13th October 2019
\par}
{\tc\tcl4 \v 1.0.4 - 13th October 2019}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Changed to a header-only library. Now you can just include {\b AudioFile.h}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bug fixes\par}
\par
\par}
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.3 - 28th October 2018
\par}
{\tc\tcl4 \v 1.0.3 - 28th October 2018}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bug fixes\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Documentation updates\par}
\par
\par}
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
1.0.2 - 6th June 2017
\par}
{\tc\tcl4 \v 1.0.2 - 6th June 2017}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Bug fixes\par}
\par
\par}
\par}
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contributions
\par}
{\tc\tcl2 \v Contributions}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Multichannel (i.e. >2 channels) audio file support ({\f2 Sidelobe})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Read/write of iXML data chunks ({\f2 mynameisjohn})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Remove warnings ({\f2 Abhinav1997})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Better support on Ubuntu ({\f2 BenjaminHinchliff})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Faster loading of audio files ({\f2 helloimmatt})\par}
\par
\par}
{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Want to Contribute?
\par}
{\tc\tcl2 \v Want to Contribute?}
If you would like to submit a pull request for this library, please do! But kindly follow the following simple guidelines...\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Make the changes as concise as is possible for the change you are proposing\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Avoid unnecessarily changing a large number of lines - e.g. commits changing the number of spaces in indentations on all lines (and so on)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Keep to the code style of this library which is the {\f2 JUCE Coding Standards}\par}
\par
\par}
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
License
\par}
{\tc\tcl2 \v License}
Copyright (c) 2017 Adam Stark\par
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\par
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\par
You should have received a copy of the GNU General Public License along with this program. If not, see {\f2 http://www.gnu.org/licenses/}. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
icproject1{\tc \v icproject1}\par \pard\plain 
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Pequeno tutorial do Doxygen tool -> {\f2 https://www.youtube.com/watch?v=TtRn3HsOm1s}\par
16/11 13:48 atualizei o relat\'F3rio (introdu\'E7\'E3o). Novo ficheiro upload proj1_2.docx. Carlos Vidal\par
17/11 12:00 atualizei o ex6, novo ficheiro ex6_3. Falta acabar (calculo da entropia). Carlos Vidal\par
18/11 17:46 acabei o o exercicio 6 e adicionei os respetivos histogr\'E1mas e entopias ao relat\'F3rio. A entropia \'E9 apresentada na linha de comando ap\'F3s execu\'E7\'E3o do programa. Carlos Vidal \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b aiff_stereo_16bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_16bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_24bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_24bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_32bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_32bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_8bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b aiff_stereo_8bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::assertType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Color} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::assertAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::binaryAssertComparison} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator_impl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseFailureReason} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest_detail_test_suite_ns} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b examples} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b makeHeaders} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_8chan_24bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_mono_16bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_mono_16bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_16bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_16bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_24bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_24bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_32bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_32bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_8bit_44100} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b wav_stereo_8bit_48000} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::Approx\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::AssertData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ResultBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
AudioFile< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
basic_ostream< charT, traits >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
char_traits< charT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator_impl::check< class, class >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Context\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::ContextOptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::CurrentTestCaseStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::deferred_false< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ExpressionDecomposer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IContextScope\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScopeBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScope< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
doctest::detail::IExceptionTranslator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ExceptionTranslator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::IReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::MessageData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::MessageBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::QueryData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::RelationalComparator< int, L, R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::remove_const< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::remove_const< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::remove_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::remove_reference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::remove_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Result\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::String\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::StringMaker< R C::* >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::StringMaker< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< detail::has_insertion_operator< T >::value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJB \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::StringMaker< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::StringMakerBase< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringStreamBase< C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringStreamBase< has_insertion_operator< T >::value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJG \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::StringStream< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::StringStreamBase< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Subcase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::SubcaseSignature\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestCaseData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBO \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::TestCaseException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestFailureException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestRunStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestSuite\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
tuple< Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b doctest::Approx} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::AssertData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b AudioFile< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b basic_ostream< charT, traits >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b char_traits< charT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator_impl::check< class, class >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Context} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::ContextOptions} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScope< L >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScopeBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::CurrentTestCaseStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::deferred_false< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExceptionTranslator< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExpressionDecomposer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IContextScope} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::IExceptionTranslator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::MessageBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::MessageData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::QueryData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::RelationalComparator< int, L, R >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::remove_const< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::remove_const< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::remove_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::remove_reference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::remove_reference< T && >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Result} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ResultBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::String} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::StringMaker< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::StringMaker< R C::* >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::StringMaker< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< C >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringStream< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringStreamBase< C >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringStreamBase< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Subcase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::SubcaseSignature} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestFailureException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestRunStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestSuite} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b tuple< Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b ex7.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/{\b AudioFile.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/examples/{\b examples.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b AiffLoadingTests.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b FileWritingTests.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b GeneralTests.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b makeHeaders.py} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/{\b WavLoadingTests.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/doctest/{\b doctest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_16bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_16bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_24bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_24bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_32bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_32bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_8bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b aiff_stereo_8bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_8chan_24bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_mono_16bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_mono_16bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_16bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_16bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_24bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_24bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_32bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_32bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_8bit_44100.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b AudioFile/tests/test-headers/{\b wav_stereo_8bit_48000.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex2/{\b ex2.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex3/{\b ex3.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex4/{\b ex4.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex5/{\b ex5_2.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex6/{\b ex6_3.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex8/{\b ex8.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex8/{\b ex8_2.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b ex9/{\b ex9.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_16bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100}
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.009429931640625, -0.030426025390625, -0.035186767578125, 0.17071533203125, -0.01959228515625, -0.11553955078125, 0.06549072265625, 0.014617919921875, -0.01251220703125, -0.038818359375, -0.051116943359375, 0.055755615234375, 0.052215576171875, 0.010406494140625, -0.0538330078125, -0.038848876953125, 0.059295654296875, -0.002655029296875, -0.004608154296875, 0.062774658203125, 0.03363037109375, 0.040863037109375, -0.00921630859375, -0.055572509765625, -0.015533447265625, -0.070648193359375, -0.0711669921875, 0.0555419921875, 0.142486572265625, 0.044586181640625, -0.14093017578125, -0.04248046875, 0.116851806640625, 0.03070068359375, -0.069549560546875, -0.035400390625, 0.1212158203125, 0.07855224609375, -0.1387939453125, 0.037109375, 0.1822509765625, -0.1285400390625, -0.071685791015625, 0.22222900390625, -0.020782470703125, -0.175018310546875, 0.080718994140625, 0.116790771484375, -0.033233642578125, -0.00732421875, 0.068206787109375, -0.014404296875, -0.016632080078125, 0.1287841796875, 0.06170654296875, -0.033599853515625, 0.129180908203125, 0.152374267578125, -0.0736083984375, -0.08221435546875, 0.12152099609375, 0.10015869140625, -0.069122314453125, 0.015380859375, 0.158447265625, 0.025604248046875, -0.029754638671875, 0.1312255859375, 0.060211181640625, -0.105621337890625, 0.050079345703125, 0.21539306640625, 0.049591064453125, -0.066802978515625, 0.0919189453125, 0.013458251953125, -0.132843017578125, 0.152252197265625, 0.18670654296875, -0.079315185546875, 0.025909423828125, 0.1351318359375, -0.00177001953125, -0.04156494140625, 0.041412353515625, -0.02325439453125, -0.10821533203125, 0.065704345703125, 0.08941650390625, -0.067901611328125, -0.03741455078125, 0.01251220703125, 0.080474853515625, 0.03302001953125, -0.148468017578125, -0.019134521484375, 0.065338134765625, -0.136505126953125, -0.06561279296875, 0.09429931640625, -0.020660400390625, -0.0557861328125, -0.045623779296875, -0.090576171875, -0.060943603515625, -0.0792236328125, -0.01702880859375, -0.002716064453125, -0.141143798828125, -0.10955810546875, -0.034332275390625, -0.023284912109375, -0.035552978515625, -0.10833740234375, -0.103363037109375, -0.03570556640625, -0.0582275390625, -0.14263916015625, -0.167572021484375, -0.079315185546875, -0.044677734375, -0.1461181640625, -0.1444091796875, -0.075531005859375, -0.081146240234375, -0.104156494140625, -0.126373291015625, -0.11944580078125, -0.158905029296875, -0.167388916015625, -0.1009521484375, -0.134307861328125, -0.15655517578125, -0.098114013671875, -0.1104736328125, -0.15087890625, -0.125732421875, -0.140380859375, -0.166748046875, -0.076690673828125, -0.044403076171875, -0.152130126953125, -0.1761474609375, -0.0623779296875, -0.009002685546875, -0.083526611328125, -0.1474609375, -0.13336181640625, -0.087432861328125, -0.09112548828125, -0.1595458984375, -0.11383056640625, 0.0025634765625, -0.108612060546875, -0.176055908203125, -0.017364501953125, -0.05621337890625, -0.171630859375, -0.048736572265625, 0.077789306640625, -0.01885986328125, -0.144775390625, -0.062713623046875, -0.01025390625, -0.075836181640625, -0.057830810546875, -0.00714111328125, 0.016387939453125, -0.017364501953125, -0.015411376953125, 0.061767578125, 0.011260986328125, -0.0439453125, 0.026641845703125, 0.056884765625, 0.02276611328125, 0.0557861328125, 0.09747314453125, 0.022064208984375, -0.023834228515625, 0.037872314453125, 0.1395263671875, 0.0946044921875, -0.033355712890625, 0.10833740234375, 0.190093994140625, 0.0584716796875, 0.059173583984375, 0.08880615234375, 0.0999755859375, 0.104644775390625, 0.066558837890625, 0.089996337890625, 0.126220703125, 0.13580322265625, 0.150634765625, 0.122833251953125, 0.072235107421875, 0.10394287109375, 0.136077880859375, 0.124969482421875, 0.144622802734375, 0.116241455078125, 0.114501953125, 0.1761474609375, 0.139617919921875, 0.098052978515625, 0.158355712890625, 0.14996337890625, 0.053192138671875, 0.090240478515625, 0.182586669921875, 0.175506591796875, 0.16473388671875, 0.122100830078125, 0.103729248046875, 0.1373291015625, 0.112823486328125, 0.12225341796875, 0.138885498046875, 0.150299072265625, 0.15008544921875, 0.096405029296875, 0.090911865234375, 0.01837158203125, -0.038330078125, 0.025909423828125, 0.001434326171875, -0.01409912109375, 0.0623779296875, 0.112518310546875, 0.1634521484375, 0.24664306640625, 0.253265380859375, 0.236114501953125, 0.298248291015625, 0.243194580078125, 0.172027587890625, 0.24615478515625, 0.216766357421875, 0.134552001953125, 0.121490478515625, 0.11419677734375, 0.08935546875, -0.007232666015625, -0.0238037109375, 0.013458251953125, -0.071044921875, -0.09210205078125, -0.051483154296875, -0.08331298828125, -0.127166748046875, -0.137054443359375, -0.077239990234375, -0.053558349609375, -0.08843994140625, -0.098236083984375, -0.14013671875, -0.12054443359375, -0.044769287109375, -0.11083984375, -0.152679443359375, -0.06036376953125, -0.060333251953125, -0.1005859375, -0.07586669921875, -0.02154541015625, 0.022705078125, -0.02044677734375, 0.00494384765625, 0.069183349609375, 0.079742431640625, 0.158416748046875, 0.142669677734375, 0.080841064453125, 0.1121826171875, 0.0828857421875, 0.0223388671875, 0.018951416015625, 0.056610107421875, 0.060394287109375, 0.02294921875, 0.000701904296875, -0.020172119140625, 0.01123046875, 0.031005859375, -0.038848876953125, -0.03265380859375, 0.012420654296875, -0.050567626953125, -0.099517822265625, -0.07818603515625, -0.1011962890625, -0.1331787109375, -0.130584716796875, -0.16241455078125, -0.175506591796875, -0.164947509765625, -0.161773681640625, -0.11907958984375, -0.11871337890625, -0.174957275390625, -0.1658935546875, -0.157562255859375, -0.223480224609375, -0.22882080078125, -0.17333984375, -0.190582275390625, -0.24285888671875, -0.215728759765625, -0.159027099609375, -0.172882080078125, -0.198516845703125, -0.1790771484375, -0.162689208984375, -0.188690185546875, -0.21173095703125, -0.2039794921875, -0.207122802734375, -0.184112548828125, -0.162811279296875, -0.19024658203125, -0.1748046875, -0.14013671875, -0.142974853515625, -0.149322509765625, -0.1236572265625, -0.096710205078125, -0.12646484375, -0.130645751953125, -0.077789306640625, -0.04254150390625, -0.060028076171875, -0.049163818359375, 0.04315185546875, 0.0528564453125, 0.01708984375, 0.069427490234375, 0.1015625, 0.10479736328125, 0.1112060546875, 0.106781005859375, 0.168792724609375, 0.215240478515625, 0.1641845703125, 0.156829833984375, 0.200408935546875, 0.196014404296875, 0.158477783203125, 0.147491455078125, 0.1724853515625, 0.17608642578125, 0.156982421875, 0.14520263671875, 0.14154052734375, 0.143707275390625, 0.128875732421875, 0.083282470703125, 0.0904541015625, 0.121429443359375, 0.060333251953125, 0.068634033203125, 0.142333984375, 0.122314453125, 0.13726806640625, 0.163848876953125, 0.15008544921875, 0.189056396484375, 0.202056884765625, 0.1939697265625, 0.219818115234375, 0.23236083984375, 0.224822998046875, 0.198516845703125, 0.188720703125, 0.17999267578125, 0.14501953125, 0.146270751953125, 0.16339111328125, 0.17364501953125, 0.180633544921875, 0.133514404296875, 0.111175537109375, 0.1343994140625, 0.082366943359375, 0.022735595703125, 0.025115966796875, 0.013641357421875, -0.01580810546875, -0.011444091796875, 0.024688720703125, 0.019287109375, -0.020111083984375, 0.0008544921875, 0.008087158203125, -0.01922607421875, -0.004669189453125, -0.00848388671875, -0.012908935546875, -0.00213623046875, -0.00225830078125, 0.0054931640625, -0.001495361328125, 0.012298583984375, 0.026397705078125, 0.01165771484375, 0.00335693359375, -0.002105712890625, 0.020843505859375, 0.02276611328125, -0.02996826171875, -0.027313232421875, -0.02850341796875, -0.09857177734375, -0.08453369140625, -0.043792724609375, -0.0887451171875, -0.09521484375, -0.076507568359375, -0.087890625, -0.094085693359375, -0.102294921875, -0.08465576171875, -0.071258544921875, -0.1043701171875, -0.097869873046875, -0.063446044921875, -0.063201904296875, -0.03558349609375, 0.001495361328125, 0.003631591796875, -0.000579833984375, -0.004791259765625, 0.000457763671875, -0.00103759765625, -0.043792724609375, -0.079864501953125, -0.08441162109375, -0.106689453125, -0.130645751953125, -0.136871337890625, -0.120819091796875, -0.10394287109375, -0.12506103515625, -0.10198974609375, -0.04742431640625, -0.03851318359375, -0.018798828125, 6.103515625e-05, -0.0032958984375, 0.023895263671875, 0.047271728515625, 0.018463134765625, -0.0032958984375, 0.022735595703125, 0.024200439453125, -0.00927734375, -0.014892578125, -0.024810791015625, -0.04498291015625, -0.0562744140625, -0.072113037109375, -0.073638916015625, -0.06494140625, -0.065460205078125, -0.0618896484375, -0.03472900390625, -0.012542724609375, -0.0146484375, -0.0078125, -0.01214599609375, -0.021453857421875, -0.010986328125, -0.011749267578125, -0.0126953125, -0.0233154296875, -0.040374755859375, -0.025238037109375, -0.002838134765625, -0.007720947265625, -0.022674560546875, -0.01568603515625, -0.012481689453125, -0.013275146484375, -0.0062255859375, -0.022705078125, -0.026885986328125, -0.023712158203125, -0.051971435546875, -0.048828125, -0.0289306640625, -0.0340576171875, -0.02191162109375, 0.003936767578125, 0.027923583984375, 0.021881103515625, -0.00665283203125, 0.016693115234375, 0.052764892578125, 0.034271240234375\}, \{-0.007781982421875, -0.02508544921875, -0.029052734375, 0.140869140625, -0.01611328125, -0.095458984375, 0.05401611328125, 0.011932373046875, -0.010223388671875, -0.031890869140625, -0.0419921875, 0.046112060546875, 0.04302978515625, 0.00836181640625, -0.044525146484375, -0.03228759765625, 0.048736572265625, -0.002410888671875, -0.004119873046875, 0.051666259765625, 0.0269775390625, 0.03399658203125, -0.008331298828125, -0.047271728515625, -0.011627197265625, -0.06134033203125, -0.063690185546875, 0.050567626953125, 0.115875244140625, 0.02581787109375, -0.11456298828125, -0.02630615234375, 0.096099853515625, 0.013671875, -0.071929931640625, -0.02972412109375, 0.117401123046875, 0.074859619140625, -0.143341064453125, -0.00653076171875, 0.169342041015625, -0.070709228515625, -0.08624267578125, 0.13677978515625, -0.010528564453125, -0.12677001953125, 0.04742431640625, 0.08538818359375, -0.015228271484375, 0.002410888671875, 0.0445556640625, -0.052581787109375, -0.034423828125, 0.1241455078125, 0.05096435546875, -0.07647705078125, 0.03424072265625, 0.094482421875, -0.033660888671875, -0.049407958984375, 0.078582763671875, 0.05535888671875, -0.0574951171875, 0.020355224609375, 0.100433349609375, -0.02215576171875, -0.03228759765625, 0.10845947265625, 0.03070068359375, -0.09619140625, 0.029327392578125, 0.1314697265625, 0.0103759765625, -0.052734375, 0.0662841796875, -0.00958251953125, -0.125244140625, 0.113067626953125, 0.150970458984375, -0.065399169921875, 0.011138916015625, 0.093963623046875, -0.018157958984375, -0.045501708984375, 0.036041259765625, -0.0130615234375, -0.096466064453125, 0.043609619140625, 0.073486328125, -0.057037353515625, -0.042388916015625, 0.003509521484375, 0.0645751953125, 0.02593994140625, -0.10821533203125, 0.001708984375, 0.066436767578125, -0.089385986328125, -0.026611328125, 0.091949462890625, -0.017486572265625, -0.05657958984375, -0.030548095703125, -0.031036376953125, -0.0108642578125, -0.0548095703125, -0.008148193359375, 0.019012451171875, -0.07684326171875, -0.05609130859375, -0.020751953125, -0.01458740234375, 0.005767822265625, -0.030181884765625, -0.057037353515625, -0.031707763671875, -0.00396728515625, -0.04803466796875, -0.10845947265625, -0.04644775390625, 0.016204833984375, -0.0521240234375, -0.080047607421875, -0.04339599609375, -0.0306396484375, -0.0360107421875, -0.0577392578125, -0.05877685546875, -0.0797119140625, -0.0787353515625, -0.0491943359375, -0.08892822265625, -0.082855224609375, -0.01922607421875, -0.055511474609375, -0.105194091796875, -0.05084228515625, -0.041015625, -0.0833740234375, -0.031768798828125, -3.0517578125e-05, -0.070098876953125, -0.10113525390625, -0.031951904296875, 0.022705078125, -0.010101318359375, -0.069854736328125, -0.10662841796875, -0.069244384765625, -0.0113525390625, -0.0545654296875, -0.062530517578125, 9.1552734375e-05, -0.06982421875, -0.106781005859375, -0.003692626953125, -0.030242919921875, -0.09442138671875, -0.01922607421875, 0.04986572265625, -0.0126953125, -0.092254638671875, -0.043212890625, -0.018310546875, -0.0484619140625, -0.005340576171875, 0.0389404296875, 0.034820556640625, -0.01239013671875, -0.011444091796875, 0.030059814453125, -0.015228271484375, -0.02685546875, 0.0303955078125, 0.035308837890625, -9.1552734375e-05, 0.02789306640625, 0.07049560546875, 0.003448486328125, -0.044647216796875, 0.00933837890625, 0.09552001953125, 0.065460205078125, -0.0450439453125, 0.057403564453125, 0.13531494140625, 0.024139404296875, 0.014404296875, 0.050933837890625, 0.055084228515625, 0.049957275390625, 0.024383544921875, 0.033477783203125, 0.051483154296875, 0.06805419921875, 0.09503173828125, 0.069183349609375, 0.0150146484375, 0.038299560546875, 0.059478759765625, 0.040802001953125, 0.063751220703125, 0.052001953125, 0.0469970703125, 0.091278076171875, 0.067962646484375, 0.046661376953125, 0.09881591796875, 0.074493408203125, -0.013519287109375, 0.033447265625, 0.101318359375, 0.076904296875, 0.064727783203125, 0.0325927734375, 0.03033447265625, 0.058807373046875, 0.036102294921875, 0.055633544921875, 0.07525634765625, 0.086578369140625, 0.086090087890625, 0.030487060546875, 0.001800537109375, -0.07098388671875, -0.09820556640625, -0.02899169921875, -0.053558349609375, -0.077789306640625, -0.018096923828125, 0.046783447265625, 0.120819091796875, 0.1968994140625, 0.192718505859375, 0.170928955078125, 0.228240966796875, 0.202850341796875, 0.143218994140625, 0.1767578125, 0.150665283203125, 0.103668212890625, 0.10107421875, 0.077880859375, 0.03509521484375, -0.03912353515625, -0.04345703125, -0.021881103515625, -0.09051513671875, -0.1024169921875, -0.07733154296875, -0.10015869140625, -0.126373291015625, -0.14178466796875, -0.10406494140625, -0.07568359375, -0.080963134765625, -0.076080322265625, -0.126373291015625, -0.124786376953125, -0.042022705078125, -0.078765869140625, -0.12628173828125, -0.0654296875, -0.062591552734375, -0.0731201171875, -0.033416748046875, -0.00018310546875, 0.02777099609375, 0.016571044921875, 0.060546875, 0.111297607421875, 0.112274169921875, 0.176422119140625, 0.176513671875, 0.13916015625, 0.160980224609375, 0.129608154296875, 0.0814208984375, 0.0892333984375, 0.114410400390625, 0.1002197265625, 0.07806396484375, 0.06915283203125, 0.03765869140625, 0.05810546875, 0.080780029296875, 0.01995849609375, 0.030548095703125, 0.08331298828125, 0.03369140625, -0.018096923828125, -0.008941650390625, -0.024444580078125, -0.059051513671875, -0.074554443359375, -0.10260009765625, -0.1148681640625, -0.093902587890625, -0.074920654296875, -0.0550537109375, -0.07427978515625, -0.11358642578125, -0.087493896484375, -0.081695556640625, -0.148345947265625, -0.160308837890625, -0.12030029296875, -0.132568359375, -0.172576904296875, -0.15130615234375, -0.100616455078125, -0.11102294921875, -0.128936767578125, -0.117645263671875, -0.117340087890625, -0.144439697265625, -0.17120361328125, -0.152923583984375, -0.14068603515625, -0.141448974609375, -0.12872314453125, -0.139892578125, -0.135467529296875, -0.108489990234375, -0.11370849609375, -0.13201904296875, -0.106842041015625, -0.0736083984375, -0.090179443359375, -0.085784912109375, -0.05206298828125, -0.045013427734375, -0.0595703125, -0.033111572265625, 0.05096435546875, 0.062774658203125, 0.028411865234375, 0.062896728515625, 0.08935546875, 0.096221923828125, 0.111419677734375, 0.10797119140625, 0.145233154296875, 0.184722900390625, 0.146026611328125, 0.132080078125, 0.174285888671875, 0.173431396484375, 0.130035400390625, 0.120269775390625, 0.139892578125, 0.13922119140625, 0.12957763671875, 0.109100341796875, 0.085662841796875, 0.093994140625, 0.083526611328125, 0.0277099609375, 0.028350830078125, 0.05755615234375, 0.015045166015625, 0.02264404296875, 0.071044921875, 0.0557861328125, 0.076507568359375, 0.100250244140625, 0.089202880859375, 0.12200927734375, 0.132537841796875, 0.117462158203125, 0.143524169921875, 0.168243408203125, 0.15576171875, 0.125396728515625, 0.11529541015625, 0.103790283203125, 0.072662353515625, 0.0721435546875, 0.08599853515625, 0.1007080078125, 0.11004638671875, 0.0616455078125, 0.03515625, 0.051177978515625, 0.001678466796875, -0.04595947265625, -0.046478271484375, -0.07000732421875, -0.093109130859375, -0.069305419921875, -0.02935791015625, -0.047698974609375, -0.096771240234375, -0.073028564453125, -0.055206298828125, -0.081085205078125, -0.068878173828125, -0.06353759765625, -0.067138671875, -0.05389404296875, -0.050994873046875, -0.060028076171875, -0.06683349609375, -0.0323486328125, -0.00848388671875, -0.02935791015625, -0.045501708984375, -0.046112060546875, -0.01715087890625, -0.007598876953125, -0.057159423828125, -0.06317138671875, -0.057373046875, -0.1085205078125, -0.0994873046875, -0.0782470703125, -0.119537353515625, -0.111358642578125, -0.083343505859375, -0.09002685546875, -0.0958251953125, -0.100677490234375, -0.080657958984375, -0.0738525390625, -0.103668212890625, -0.087860107421875, -0.05670166015625, -0.052581787109375, -0.01361083984375, 0.02984619140625, 0.026763916015625, 0.01654052734375, 0.02197265625, 0.034820556640625, 0.028961181640625, -0.011688232421875, -0.040740966796875, -0.047515869140625, -0.07000732421875, -0.088226318359375, -0.089599609375, -0.073089599609375, -0.06304931640625, -0.074798583984375, -0.04254150390625, 0.005157470703125, 0.018096923828125, 0.040924072265625, 0.058380126953125, 0.05657958984375, 0.07958984375, 0.106414794921875, 0.0928955078125, 0.072479248046875, 0.0799560546875, 0.076019287109375, 0.055908203125, 0.0606689453125, 0.053497314453125, 0.023712158203125, 0.005218505859375, -0.0037841796875, 0.004302978515625, 0.01153564453125, -0.0072021484375, -0.00933837890625, 0.03509521484375, 0.071197509765625, 0.063995361328125, 0.056610107421875, 0.05157470703125, 0.048248291015625, 0.056488037109375, 0.053680419921875, 0.04522705078125, 0.035552978515625, 0.027679443359375, 0.0384521484375, 0.0545654296875, 0.04962158203125, 0.031768798828125, 0.03521728515625, 0.040618896484375, 0.0380859375, 0.039520263671875, 0.020111083984375, 0.015716552734375, 0.02117919921875, -0.010040283203125, -0.015045166015625, 0.006500244140625, 0.003692626953125, 0.008270263671875, 0.027801513671875, 0.053802490234375, 0.049957275390625, 0.017578125, 0.029022216796875, 0.06060791015625, 0.049957275390625\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_44100::bitDepth = 16}}
\par
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_16bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_16bit_44100}
{\xe \v aiff_stereo_16bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_16bit_44100::testBuffer = \{\{-0.009429931640625, -0.030426025390625, -0.035186767578125, 0.17071533203125, -0.01959228515625, -0.11553955078125, 0.06549072265625, 0.014617919921875, -0.01251220703125, -0.038818359375, -0.051116943359375, 0.055755615234375, 0.052215576171875, 0.010406494140625, -0.0538330078125, -0.038848876953125, 0.059295654296875, -0.002655029296875, -0.004608154296875, 0.062774658203125, 0.03363037109375, 0.040863037109375, -0.00921630859375, -0.055572509765625, -0.015533447265625, -0.070648193359375, -0.0711669921875, 0.0555419921875, 0.142486572265625, 0.044586181640625, -0.14093017578125, -0.04248046875, 0.116851806640625, 0.03070068359375, -0.069549560546875, -0.035400390625, 0.1212158203125, 0.07855224609375, -0.1387939453125, 0.037109375, 0.1822509765625, -0.1285400390625, -0.071685791015625, 0.22222900390625, -0.020782470703125, -0.175018310546875, 0.080718994140625, 0.116790771484375, -0.033233642578125, -0.00732421875, 0.068206787109375, -0.014404296875, -0.016632080078125, 0.1287841796875, 0.06170654296875, -0.033599853515625, 0.129180908203125, 0.152374267578125, -0.0736083984375, -0.08221435546875, 0.12152099609375, 0.10015869140625, -0.069122314453125, 0.015380859375, 0.158447265625, 0.025604248046875, -0.029754638671875, 0.1312255859375, 0.060211181640625, -0.105621337890625, 0.050079345703125, 0.21539306640625, 0.049591064453125, -0.066802978515625, 0.0919189453125, 0.013458251953125, -0.132843017578125, 0.152252197265625, 0.18670654296875, -0.079315185546875, 0.025909423828125, 0.1351318359375, -0.00177001953125, -0.04156494140625, 0.041412353515625, -0.02325439453125, -0.10821533203125, 0.065704345703125, 0.08941650390625, -0.067901611328125, -0.03741455078125, 0.01251220703125, 0.080474853515625, 0.03302001953125, -0.148468017578125, -0.019134521484375, 0.065338134765625, -0.136505126953125, -0.06561279296875, 0.09429931640625, -0.020660400390625, -0.0557861328125, -0.045623779296875, -0.090576171875, -0.060943603515625, -0.0792236328125, -0.01702880859375, -0.002716064453125, -0.141143798828125, -0.10955810546875, -0.034332275390625, -0.023284912109375, -0.035552978515625, -0.10833740234375, -0.103363037109375, -0.03570556640625, -0.0582275390625, -0.14263916015625, -0.167572021484375, -0.079315185546875, -0.044677734375, -0.1461181640625, -0.1444091796875, -0.075531005859375, -0.081146240234375, -0.104156494140625, -0.126373291015625, -0.11944580078125, -0.158905029296875, -0.167388916015625, -0.1009521484375, -0.134307861328125, -0.15655517578125, -0.098114013671875, -0.1104736328125, -0.15087890625, -0.125732421875, -0.140380859375, -0.166748046875, -0.076690673828125, -0.044403076171875, -0.152130126953125, -0.1761474609375, -0.0623779296875, -0.009002685546875, -0.083526611328125, -0.1474609375, -0.13336181640625, -0.087432861328125, -0.09112548828125, -0.1595458984375, -0.11383056640625, 0.0025634765625, -0.108612060546875, -0.176055908203125, -0.017364501953125, -0.05621337890625, -0.171630859375, -0.048736572265625, 0.077789306640625, -0.01885986328125, -0.144775390625, -0.062713623046875, -0.01025390625, -0.075836181640625, -0.057830810546875, -0.00714111328125, 0.016387939453125, -0.017364501953125, -0.015411376953125, 0.061767578125, 0.011260986328125, -0.0439453125, 0.026641845703125, 0.056884765625, 0.02276611328125, 0.0557861328125, 0.09747314453125, 0.022064208984375, -0.023834228515625, 0.037872314453125, 0.1395263671875, 0.0946044921875, -0.033355712890625, 0.10833740234375, 0.190093994140625, 0.0584716796875, 0.059173583984375, 0.08880615234375, 0.0999755859375, 0.104644775390625, 0.066558837890625, 0.089996337890625, 0.126220703125, 0.13580322265625, 0.150634765625, 0.122833251953125, 0.072235107421875, 0.10394287109375, 0.136077880859375, 0.124969482421875, 0.144622802734375, 0.116241455078125, 0.114501953125, 0.1761474609375, 0.139617919921875, 0.098052978515625, 0.158355712890625, 0.14996337890625, 0.053192138671875, 0.090240478515625, 0.182586669921875, 0.175506591796875, 0.16473388671875, 0.122100830078125, 0.103729248046875, 0.1373291015625, 0.112823486328125, 0.12225341796875, 0.138885498046875, 0.150299072265625, 0.15008544921875, 0.096405029296875, 0.090911865234375, 0.01837158203125, -0.038330078125, 0.025909423828125, 0.001434326171875, -0.01409912109375, 0.0623779296875, 0.112518310546875, 0.1634521484375, 0.24664306640625, 0.253265380859375, 0.236114501953125, 0.298248291015625, 0.243194580078125, 0.172027587890625, 0.24615478515625, 0.216766357421875, 0.134552001953125, 0.121490478515625, 0.11419677734375, 0.08935546875, -0.007232666015625, -0.0238037109375, 0.013458251953125, -0.071044921875, -0.09210205078125, -0.051483154296875, -0.08331298828125, -0.127166748046875, -0.137054443359375, -0.077239990234375, -0.053558349609375, -0.08843994140625, -0.098236083984375, -0.14013671875, -0.12054443359375, -0.044769287109375, -0.11083984375, -0.152679443359375, -0.06036376953125, -0.060333251953125, -0.1005859375, -0.07586669921875, -0.02154541015625, 0.022705078125, -0.02044677734375, 0.00494384765625, 0.069183349609375, 0.079742431640625, 0.158416748046875, 0.142669677734375, 0.080841064453125, 0.1121826171875, 0.0828857421875, 0.0223388671875, 0.018951416015625, 0.056610107421875, 0.060394287109375, 0.02294921875, 0.000701904296875, -0.020172119140625, 0.01123046875, 0.031005859375, -0.038848876953125, -0.03265380859375, 0.012420654296875, -0.050567626953125, -0.099517822265625, -0.07818603515625, -0.1011962890625, -0.1331787109375, -0.130584716796875, -0.16241455078125, -0.175506591796875, -0.164947509765625, -0.161773681640625, -0.11907958984375, -0.11871337890625, -0.174957275390625, -0.1658935546875, -0.157562255859375, -0.223480224609375, -0.22882080078125, -0.17333984375, -0.190582275390625, -0.24285888671875, -0.215728759765625, -0.159027099609375, -0.172882080078125, -0.198516845703125, -0.1790771484375, -0.162689208984375, -0.188690185546875, -0.21173095703125, -0.2039794921875, -0.207122802734375, -0.184112548828125, -0.162811279296875, -0.19024658203125, -0.1748046875, -0.14013671875, -0.142974853515625, -0.149322509765625, -0.1236572265625, -0.096710205078125, -0.12646484375, -0.130645751953125, -0.077789306640625, -0.04254150390625, -0.060028076171875, -0.049163818359375, 0.04315185546875, 0.0528564453125, 0.01708984375, 0.069427490234375, 0.1015625, 0.10479736328125, 0.1112060546875, 0.106781005859375, 0.168792724609375, 0.215240478515625, 0.1641845703125, 0.156829833984375, 0.200408935546875, 0.196014404296875, 0.158477783203125, 0.147491455078125, 0.1724853515625, 0.17608642578125, 0.156982421875, 0.14520263671875, 0.14154052734375, 0.143707275390625, 0.128875732421875, 0.083282470703125, 0.0904541015625, 0.121429443359375, 0.060333251953125, 0.068634033203125, 0.142333984375, 0.122314453125, 0.13726806640625, 0.163848876953125, 0.15008544921875, 0.189056396484375, 0.202056884765625, 0.1939697265625, 0.219818115234375, 0.23236083984375, 0.224822998046875, 0.198516845703125, 0.188720703125, 0.17999267578125, 0.14501953125, 0.146270751953125, 0.16339111328125, 0.17364501953125, 0.180633544921875, 0.133514404296875, 0.111175537109375, 0.1343994140625, 0.082366943359375, 0.022735595703125, 0.025115966796875, 0.013641357421875, -0.01580810546875, -0.011444091796875, 0.024688720703125, 0.019287109375, -0.020111083984375, 0.0008544921875, 0.008087158203125, -0.01922607421875, -0.004669189453125, -0.00848388671875, -0.012908935546875, -0.00213623046875, -0.00225830078125, 0.0054931640625, -0.001495361328125, 0.012298583984375, 0.026397705078125, 0.01165771484375, 0.00335693359375, -0.002105712890625, 0.020843505859375, 0.02276611328125, -0.02996826171875, -0.027313232421875, -0.02850341796875, -0.09857177734375, -0.08453369140625, -0.043792724609375, -0.0887451171875, -0.09521484375, -0.076507568359375, -0.087890625, -0.094085693359375, -0.102294921875, -0.08465576171875, -0.071258544921875, -0.1043701171875, -0.097869873046875, -0.063446044921875, -0.063201904296875, -0.03558349609375, 0.001495361328125, 0.003631591796875, -0.000579833984375, -0.004791259765625, 0.000457763671875, -0.00103759765625, -0.043792724609375, -0.079864501953125, -0.08441162109375, -0.106689453125, -0.130645751953125, -0.136871337890625, -0.120819091796875, -0.10394287109375, -0.12506103515625, -0.10198974609375, -0.04742431640625, -0.03851318359375, -0.018798828125, 6.103515625e-05, -0.0032958984375, 0.023895263671875, 0.047271728515625, 0.018463134765625, -0.0032958984375, 0.022735595703125, 0.024200439453125, -0.00927734375, -0.014892578125, -0.024810791015625, -0.04498291015625, -0.0562744140625, -0.072113037109375, -0.073638916015625, -0.06494140625, -0.065460205078125, -0.0618896484375, -0.03472900390625, -0.012542724609375, -0.0146484375, -0.0078125, -0.01214599609375, -0.021453857421875, -0.010986328125, -0.011749267578125, -0.0126953125, -0.0233154296875, -0.040374755859375, -0.025238037109375, -0.002838134765625, -0.007720947265625, -0.022674560546875, -0.01568603515625, -0.012481689453125, -0.013275146484375, -0.0062255859375, -0.022705078125, -0.026885986328125, -0.023712158203125, -0.051971435546875, -0.048828125, -0.0289306640625, -0.0340576171875, -0.02191162109375, 0.003936767578125, 0.027923583984375, 0.021881103515625, -0.00665283203125, 0.016693115234375, 0.052764892578125, 0.034271240234375\}, \{-0.007781982421875, -0.02508544921875, -0.029052734375, 0.140869140625, -0.01611328125, -0.095458984375, 0.05401611328125, 0.011932373046875, -0.010223388671875, -0.031890869140625, -0.0419921875, 0.046112060546875, 0.04302978515625, 0.00836181640625, -0.044525146484375, -0.03228759765625, 0.048736572265625, -0.002410888671875, -0.004119873046875, 0.051666259765625, 0.0269775390625, 0.03399658203125, -0.008331298828125, -0.047271728515625, -0.011627197265625, -0.06134033203125, -0.063690185546875, 0.050567626953125, 0.115875244140625, 0.02581787109375, -0.11456298828125, -0.02630615234375, 0.096099853515625, 0.013671875, -0.071929931640625, -0.02972412109375, 0.117401123046875, 0.074859619140625, -0.143341064453125, -0.00653076171875, 0.169342041015625, -0.070709228515625, -0.08624267578125, 0.13677978515625, -0.010528564453125, -0.12677001953125, 0.04742431640625, 0.08538818359375, -0.015228271484375, 0.002410888671875, 0.0445556640625, -0.052581787109375, -0.034423828125, 0.1241455078125, 0.05096435546875, -0.07647705078125, 0.03424072265625, 0.094482421875, -0.033660888671875, -0.049407958984375, 0.078582763671875, 0.05535888671875, -0.0574951171875, 0.020355224609375, 0.100433349609375, -0.02215576171875, -0.03228759765625, 0.10845947265625, 0.03070068359375, -0.09619140625, 0.029327392578125, 0.1314697265625, 0.0103759765625, -0.052734375, 0.0662841796875, -0.00958251953125, -0.125244140625, 0.113067626953125, 0.150970458984375, -0.065399169921875, 0.011138916015625, 0.093963623046875, -0.018157958984375, -0.045501708984375, 0.036041259765625, -0.0130615234375, -0.096466064453125, 0.043609619140625, 0.073486328125, -0.057037353515625, -0.042388916015625, 0.003509521484375, 0.0645751953125, 0.02593994140625, -0.10821533203125, 0.001708984375, 0.066436767578125, -0.089385986328125, -0.026611328125, 0.091949462890625, -0.017486572265625, -0.05657958984375, -0.030548095703125, -0.031036376953125, -0.0108642578125, -0.0548095703125, -0.008148193359375, 0.019012451171875, -0.07684326171875, -0.05609130859375, -0.020751953125, -0.01458740234375, 0.005767822265625, -0.030181884765625, -0.057037353515625, -0.031707763671875, -0.00396728515625, -0.04803466796875, -0.10845947265625, -0.04644775390625, 0.016204833984375, -0.0521240234375, -0.080047607421875, -0.04339599609375, -0.0306396484375, -0.0360107421875, -0.0577392578125, -0.05877685546875, -0.0797119140625, -0.0787353515625, -0.0491943359375, -0.08892822265625, -0.082855224609375, -0.01922607421875, -0.055511474609375, -0.105194091796875, -0.05084228515625, -0.041015625, -0.0833740234375, -0.031768798828125, -3.0517578125e-05, -0.070098876953125, -0.10113525390625, -0.031951904296875, 0.022705078125, -0.010101318359375, -0.069854736328125, -0.10662841796875, -0.069244384765625, -0.0113525390625, -0.0545654296875, -0.062530517578125, 9.1552734375e-05, -0.06982421875, -0.106781005859375, -0.003692626953125, -0.030242919921875, -0.09442138671875, -0.01922607421875, 0.04986572265625, -0.0126953125, -0.092254638671875, -0.043212890625, -0.018310546875, -0.0484619140625, -0.005340576171875, 0.0389404296875, 0.034820556640625, -0.01239013671875, -0.011444091796875, 0.030059814453125, -0.015228271484375, -0.02685546875, 0.0303955078125, 0.035308837890625, -9.1552734375e-05, 0.02789306640625, 0.07049560546875, 0.003448486328125, -0.044647216796875, 0.00933837890625, 0.09552001953125, 0.065460205078125, -0.0450439453125, 0.057403564453125, 0.13531494140625, 0.024139404296875, 0.014404296875, 0.050933837890625, 0.055084228515625, 0.049957275390625, 0.024383544921875, 0.033477783203125, 0.051483154296875, 0.06805419921875, 0.09503173828125, 0.069183349609375, 0.0150146484375, 0.038299560546875, 0.059478759765625, 0.040802001953125, 0.063751220703125, 0.052001953125, 0.0469970703125, 0.091278076171875, 0.067962646484375, 0.046661376953125, 0.09881591796875, 0.074493408203125, -0.013519287109375, 0.033447265625, 0.101318359375, 0.076904296875, 0.064727783203125, 0.0325927734375, 0.03033447265625, 0.058807373046875, 0.036102294921875, 0.055633544921875, 0.07525634765625, 0.086578369140625, 0.086090087890625, 0.030487060546875, 0.001800537109375, -0.07098388671875, -0.09820556640625, -0.02899169921875, -0.053558349609375, -0.077789306640625, -0.018096923828125, 0.046783447265625, 0.120819091796875, 0.1968994140625, 0.192718505859375, 0.170928955078125, 0.228240966796875, 0.202850341796875, 0.143218994140625, 0.1767578125, 0.150665283203125, 0.103668212890625, 0.10107421875, 0.077880859375, 0.03509521484375, -0.03912353515625, -0.04345703125, -0.021881103515625, -0.09051513671875, -0.1024169921875, -0.07733154296875, -0.10015869140625, -0.126373291015625, -0.14178466796875, -0.10406494140625, -0.07568359375, -0.080963134765625, -0.076080322265625, -0.126373291015625, -0.124786376953125, -0.042022705078125, -0.078765869140625, -0.12628173828125, -0.0654296875, -0.062591552734375, -0.0731201171875, -0.033416748046875, -0.00018310546875, 0.02777099609375, 0.016571044921875, 0.060546875, 0.111297607421875, 0.112274169921875, 0.176422119140625, 0.176513671875, 0.13916015625, 0.160980224609375, 0.129608154296875, 0.0814208984375, 0.0892333984375, 0.114410400390625, 0.1002197265625, 0.07806396484375, 0.06915283203125, 0.03765869140625, 0.05810546875, 0.080780029296875, 0.01995849609375, 0.030548095703125, 0.08331298828125, 0.03369140625, -0.018096923828125, -0.008941650390625, -0.024444580078125, -0.059051513671875, -0.074554443359375, -0.10260009765625, -0.1148681640625, -0.093902587890625, -0.074920654296875, -0.0550537109375, -0.07427978515625, -0.11358642578125, -0.087493896484375, -0.081695556640625, -0.148345947265625, -0.160308837890625, -0.12030029296875, -0.132568359375, -0.172576904296875, -0.15130615234375, -0.100616455078125, -0.11102294921875, -0.128936767578125, -0.117645263671875, -0.117340087890625, -0.144439697265625, -0.17120361328125, -0.152923583984375, -0.14068603515625, -0.141448974609375, -0.12872314453125, -0.139892578125, -0.135467529296875, -0.108489990234375, -0.11370849609375, -0.13201904296875, -0.106842041015625, -0.0736083984375, -0.090179443359375, -0.085784912109375, -0.05206298828125, -0.045013427734375, -0.0595703125, -0.033111572265625, 0.05096435546875, 0.062774658203125, 0.028411865234375, 0.062896728515625, 0.08935546875, 0.096221923828125, 0.111419677734375, 0.10797119140625, 0.145233154296875, 0.184722900390625, 0.146026611328125, 0.132080078125, 0.174285888671875, 0.173431396484375, 0.130035400390625, 0.120269775390625, 0.139892578125, 0.13922119140625, 0.12957763671875, 0.109100341796875, 0.085662841796875, 0.093994140625, 0.083526611328125, 0.0277099609375, 0.028350830078125, 0.05755615234375, 0.015045166015625, 0.02264404296875, 0.071044921875, 0.0557861328125, 0.076507568359375, 0.100250244140625, 0.089202880859375, 0.12200927734375, 0.132537841796875, 0.117462158203125, 0.143524169921875, 0.168243408203125, 0.15576171875, 0.125396728515625, 0.11529541015625, 0.103790283203125, 0.072662353515625, 0.0721435546875, 0.08599853515625, 0.1007080078125, 0.11004638671875, 0.0616455078125, 0.03515625, 0.051177978515625, 0.001678466796875, -0.04595947265625, -0.046478271484375, -0.07000732421875, -0.093109130859375, -0.069305419921875, -0.02935791015625, -0.047698974609375, -0.096771240234375, -0.073028564453125, -0.055206298828125, -0.081085205078125, -0.068878173828125, -0.06353759765625, -0.067138671875, -0.05389404296875, -0.050994873046875, -0.060028076171875, -0.06683349609375, -0.0323486328125, -0.00848388671875, -0.02935791015625, -0.045501708984375, -0.046112060546875, -0.01715087890625, -0.007598876953125, -0.057159423828125, -0.06317138671875, -0.057373046875, -0.1085205078125, -0.0994873046875, -0.0782470703125, -0.119537353515625, -0.111358642578125, -0.083343505859375, -0.09002685546875, -0.0958251953125, -0.100677490234375, -0.080657958984375, -0.0738525390625, -0.103668212890625, -0.087860107421875, -0.05670166015625, -0.052581787109375, -0.01361083984375, 0.02984619140625, 0.026763916015625, 0.01654052734375, 0.02197265625, 0.034820556640625, 0.028961181640625, -0.011688232421875, -0.040740966796875, -0.047515869140625, -0.07000732421875, -0.088226318359375, -0.089599609375, -0.073089599609375, -0.06304931640625, -0.074798583984375, -0.04254150390625, 0.005157470703125, 0.018096923828125, 0.040924072265625, 0.058380126953125, 0.05657958984375, 0.07958984375, 0.106414794921875, 0.0928955078125, 0.072479248046875, 0.0799560546875, 0.076019287109375, 0.055908203125, 0.0606689453125, 0.053497314453125, 0.023712158203125, 0.005218505859375, -0.0037841796875, 0.004302978515625, 0.01153564453125, -0.0072021484375, -0.00933837890625, 0.03509521484375, 0.071197509765625, 0.063995361328125, 0.056610107421875, 0.05157470703125, 0.048248291015625, 0.056488037109375, 0.053680419921875, 0.04522705078125, 0.035552978515625, 0.027679443359375, 0.0384521484375, 0.0545654296875, 0.04962158203125, 0.031768798828125, 0.03521728515625, 0.040618896484375, 0.0380859375, 0.039520263671875, 0.020111083984375, 0.015716552734375, 0.02117919921875, -0.010040283203125, -0.015045166015625, 0.006500244140625, 0.003692626953125, 0.008270263671875, 0.027801513671875, 0.053802490234375, 0.049957275390625, 0.017578125, 0.029022216796875, 0.06060791015625, 0.049957275390625\}\}}}
\par
{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_16bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000}
{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, 0.0, 0.0, -3.0517578125e-05, 3.0517578125e-05, 0.0, 6.103515625e-05, 3.0517578125e-05, 0.0, -0.00152587890625, -0.0037841796875, -0.00445556640625, -0.0029296875, -0.001953125, -0.0010986328125, -0.000885009765625, -0.0015869140625, -0.000946044921875, 0.003814697265625, 0.008880615234375, 0.008544921875, 0.001373291015625, -0.005218505859375, -0.00592041015625, -0.000213623046875, 0.00628662109375, 0.008331298828125, 0.00531005859375, 0.001983642578125, 0.002197265625, 0.003021240234375, 0.00146484375, -0.0003662109375, -0.00030517578125, 0.007354736328125, 0.03131103515625, 0.050201416015625, 0.024261474609375, -0.02618408203125, -0.039398193359375, -0.014251708984375, 0.013519287109375, 0.042083740234375, 0.047760009765625, 0.009521484375, -0.014190673828125, 0.01751708984375, 0.03814697265625, 0.003875732421875, -0.02069091796875, 0.01123046875, 0.033111572265625, 0.007598876953125, 0.017059326171875, 0.066558837890625, 0.0506591796875, -0.01678466796875, -0.029083251953125, 0.003204345703125, 0.021026611328125, 0.035736083984375, 0.031890869140625, -0.0257568359375, -0.0556640625, 0.02166748046875, 0.09393310546875, 0.028472900390625, -0.089630126953125, -0.092742919921875, 0.0054931640625, 0.05126953125, -0.007293701171875, -0.070465087890625, -0.0552978515625, -0.005584716796875, -0.0054931640625, -0.043060302734375, -0.0494384765625, -0.045166015625, -0.066802978515625, -0.064605712890625, -0.03546142578125, -0.05303955078125, -0.096771240234375, -0.084228515625, -0.040008544921875, -0.041046142578125, -0.07281494140625, -0.077484130859375, -0.059234619140625, -0.06219482421875, -0.095245361328125, -0.104644775390625, -0.0552978515625, -0.024322509765625, -0.07855224609375, -0.1416015625, -0.117156982421875, -0.034454345703125, -0.00921630859375, -0.08367919921875, -0.141326904296875, -0.083404541015625, 0.0086669921875, 0.001251220703125, -0.074493408203125, -0.067657470703125, 0.009857177734375, -0.01751708984375, -0.1160888671875, -0.08123779296875, 0.0286865234375, 0.023834228515625, -0.0228271484375, -0.007293701171875, 0.003143310546875, -0.000152587890625, 0.002685546875, -0.0128173828125, 0.0001220703125, 0.02496337890625, -0.021148681640625, -0.039947509765625, 0.075347900390625, 0.154296875, 0.061920166015625, -0.032379150390625, 0.009002685546875, 0.074676513671875, 0.06451416015625, 0.038665771484375, 0.058074951171875, 0.076263427734375, 0.065673828125, 0.084228515625, 0.135162353515625, 0.140472412109375, 0.0894775390625, 0.054443359375, 0.06353759765625, 0.0860595703125, 0.12384033203125, 0.16864013671875, 0.14739990234375, 0.08135986328125, 0.09307861328125, 0.180816650390625, 0.24127197265625, 0.236968994140625, 0.181243896484375, 0.09075927734375, -0.000946044921875, -0.029876708984375, 0.03076171875, 0.122344970703125, 0.17926025390625, 0.18585205078125, 0.160125732421875, 0.121917724609375, 0.0552978515625, -0.01513671875, -0.003875732421875, 0.07733154296875, 0.13287353515625, 0.147705078125, 0.14251708984375, 0.0924072265625, 0.01959228515625, -3.0517578125e-05, 0.03533935546875, 0.06378173828125, 0.046356201171875, 0.021026611328125, 0.031951904296875, 0.01239013671875, -0.05462646484375, -0.02325439453125, 0.11676025390625, 0.1571044921875, 0.03369140625, -0.083526611328125, -0.0931396484375, -0.066680908203125, -0.085052490234375, -0.139190673828125, -0.17095947265625, -0.177215576171875, -0.207550048828125, -0.24237060546875, -0.2021484375, -0.080078125, 0.01983642578125, 0.0133056640625, -0.048614501953125, -0.07525634765625, -0.087005615234375, -0.14178466796875, -0.204345703125, -0.2119140625, -0.197479248046875, -0.2066650390625, -0.204254150390625, -0.18341064453125, -0.188232421875, -0.202850341796875, -0.166717529296875, -0.083953857421875, -0.03448486328125, -0.04473876953125, -0.0679931640625, -0.09625244140625, -0.109344482421875, -0.0667724609375, -0.006591796875, 0.0330810546875, 0.07012939453125, 0.063201904296875, -0.051177978515625, -0.2208251953125, -0.326385498046875, -0.35015869140625, -0.35162353515625, -0.32568359375, -0.262115478515625, -0.17431640625, -0.044769287109375, 0.122344970703125, 0.2481689453125, 0.2684326171875, 0.23095703125, 0.192840576171875, 0.147796630859375, 0.086761474609375, -0.00384521484375, -0.10125732421875, -0.1444091796875, -0.115570068359375, -0.058258056640625, -0.027984619140625, -0.01055908203125, 0.035247802734375, 0.095001220703125, 0.13427734375, 0.1390380859375, 0.152313232421875, 0.21356201171875, 0.277099609375, 0.279327392578125, 0.2332763671875, 0.19677734375, 0.18988037109375, 0.194854736328125, 0.1807861328125, 0.122344970703125, 0.052947998046875, 0.0323486328125, 0.014739990234375, -0.04632568359375, -0.076080322265625, -0.0394287109375, 0.003662109375, 0.019012451171875, 0.02838134765625, 0.04583740234375, 0.03631591796875, 0.011016845703125, 0.036468505859375, 0.07733154296875, 0.0614013671875, 0.0079345703125, -0.026885986328125, -0.0228271484375, -0.001983642578125, 0.019775390625, 0.057769775390625, 0.118896484375, 0.183624267578125, 0.226104736328125, 0.2464599609375, 0.270172119140625, 0.2890625, 0.267822265625, 0.201263427734375, 0.125762939453125, 0.0765380859375, 0.061920166015625, 0.06439208984375, 0.047760009765625, -0.0068359375, -0.046234130859375, 0.006744384765625, 0.115814208984375, 0.1375732421875, 0.04473876953125, -0.046905517578125, -0.0953369140625, -0.133514404296875, -0.180084228515625, -0.230133056640625, -0.254058837890625, -0.22821044921875, -0.173309326171875, -0.12713623046875, -0.082305908203125, -0.025299072265625, 0.018310546875, 0.037567138671875, 0.04608154296875, 0.043060302734375, 0.035003662109375, 0.033203125, 0.031463623046875, 0.00933837890625, -0.0299072265625, -0.05133056640625, -0.073974609375, -0.150604248046875, -0.2430419921875, -0.273681640625, -0.258697509765625, -0.2574462890625, -0.261077880859375, -0.231964111328125, -0.210693359375, -0.235565185546875, -0.242828369140625, -0.20452880859375, -0.19964599609375, -0.26898193359375, -0.34588623046875, -0.3634033203125, -0.351837158203125, -0.35791015625, -0.36181640625, -0.343719482421875, -0.305908203125, -0.25054931640625, -0.17315673828125, -0.072357177734375, 0.0245361328125, 0.09521484375, 0.141510009765625, 0.169586181640625, 0.18475341796875, 0.19952392578125, 0.215972900390625, 0.2159423828125, 0.211090087890625, 0.228668212890625, 0.250823974609375, 0.273345947265625, 0.306732177734375, 0.324981689453125, 0.31182861328125, 0.29632568359375, 0.287841796875, 0.252685546875, 0.18682861328125, 0.127899169921875, 0.11199951171875, 0.1424560546875, 0.1658935546875, 0.153472900390625, 0.162506103515625, 0.196380615234375, 0.20623779296875, 0.2103271484375, 0.224578857421875, 0.21392822265625, 0.180084228515625, 0.1671142578125, 0.166046142578125, 0.116546630859375, 0.030670166015625, -0.012908935546875, -0.014678955078125, -0.022430419921875, -0.039886474609375, -0.054779052734375, -0.06024169921875, -0.048248291015625, -0.01617431640625, 0.010467529296875, 0.003692626953125, -0.023162841796875, -0.05780029296875, -0.098724365234375, -0.10809326171875, -0.082489013671875, -0.06134033203125, -0.059539794921875, -0.0728759765625, -0.07415771484375, -0.03515625, 0.0146484375, 0.01239013671875, -0.038665771484375, -0.060791015625, -0.03131103515625, -0.00250244140625, -0.005523681640625, -0.016998291015625, -0.006134033203125, 0.01934814453125, 0.047393798828125, 0.08221435546875, 0.108245849609375, 0.102020263671875, 0.062713623046875, 0.034210205078125, 0.030517578125, 0.0069580078125, -0.04296875, -0.071807861328125, -0.0491943359375, 0.002716064453125, 0.041107177734375, 0.05810546875, 0.053253173828125, 0.0350341796875, 0.026702880859375, 0.0201416015625, -0.000457763671875, -0.02337646484375, -0.0469970703125, -0.087738037109375, -0.12774658203125, -0.127105712890625, -0.10931396484375, -0.1192626953125, -0.102386474609375, -0.021026611328125, 0.038177490234375, 0.034942626953125, 0.031036376953125, 0.042083740234375, 0.037933349609375, 0.019622802734375, -0.0030517578125, -0.024627685546875, -0.02325439453125, 0.00146484375, 0.0152587890625, 0.02923583984375, 0.067779541015625, 0.090057373046875, 0.07781982421875, 0.068328857421875, 0.08221435546875, 0.10498046875, 0.10943603515625, 0.089996337890625, 0.08026123046875, 0.113372802734375, 0.150146484375, 0.138641357421875, 0.109222412109375, 0.107208251953125, 0.11798095703125, 0.114654541015625, 0.10211181640625, 0.09503173828125, 0.0758056640625, 0.060699462890625, 0.084564208984375, 0.10748291015625, 0.09002685546875, 0.0736083984375, 0.092193603515625, 0.107635498046875, 0.10784912109375, 0.127685546875, 0.14788818359375, 0.1387939453125, 0.136199951171875, 0.151611328125, 0.155364990234375, 0.152496337890625, 0.16754150390625, 0.181427001953125, 0.169586181640625, 0.162322998046875, 0.162109375, 0.136627197265625, 0.121673583984375, 0.149261474609375, 0.15789794921875, 0.12591552734375, 0.11029052734375, 0.125213623046875, 0.136444091796875, 0.143524169921875, 0.16168212890625, 0.158599853515625, 0.11553955078125, 0.07843017578125, 0.07415771484375, 0.076812744140625, 0.06414794921875, 0.03802490234375\}, \{0.0, 0.0, 3.0517578125e-05, -3.0517578125e-05, 9.1552734375e-05, -6.103515625e-05, 0.0001220703125, -9.1552734375e-05, 9.1552734375e-05, -0.00067138671875, -0.00177001953125, -0.001922607421875, -0.000244140625, 0.00042724609375, 0.000335693359375, -0.0008544921875, -0.00311279296875, -0.003173828125, 0.00146484375, 0.007049560546875, 0.006805419921875, 0.00018310546875, -0.005279541015625, -0.00360107421875, 0.00238037109375, 0.007568359375, 0.009368896484375, 0.00885009765625, 0.004302978515625, -0.003753662109375, -0.0096435546875, -0.0091552734375, -0.007537841796875, -0.002838134765625, 0.02001953125, 0.04461669921875, 0.027130126953125, -0.0228271484375, -0.0426025390625, -0.022735595703125, 0.00732421875, 0.03759765625, 0.042327880859375, 0.005645751953125, -0.015106201171875, 0.010162353515625, 0.019561767578125, -0.016204833984375, -0.03082275390625, 0.006805419921875, 0.02252197265625, -0.006744384765625, 0.010040283203125, 0.064483642578125, 0.044342041015625, -0.025238037109375, -0.034759521484375, -0.003662109375, 0.011505126953125, 0.02874755859375, 0.03045654296875, -0.0224609375, -0.046356201171875, 0.035888671875, 0.104156494140625, 0.02947998046875, -0.09515380859375, -0.095367431640625, 0.012847900390625, 0.06707763671875, 0.011199951171875, -0.05670166015625, -0.044921875, 0.008392333984375, 0.01495361328125, -0.01702880859375, -0.02484130859375, -0.025604248046875, -0.04046630859375, -0.023712158203125, 0.010284423828125, -0.01641845703125, -0.06744384765625, -0.050018310546875, -0.00732421875, -0.01861572265625, -0.050872802734375, -0.0430908203125, -0.012786865234375, -0.018585205078125, -0.0650634765625, -0.072021484375, -0.008087158203125, 0.0272216796875, -0.0291748046875, -0.091766357421875, -0.064300537109375, 0.0081787109375, 0.0091552734375, -0.073883056640625, -0.11468505859375, -0.036376953125, 0.053924560546875, 0.022674560546875, -0.069366455078125, -0.052764892578125, 0.0396728515625, 0.013153076171875, -0.08868408203125, -0.050689697265625, 0.050872802734375, 0.03717041015625, -0.002349853515625, 0.012451171875, 0.007598876953125, -0.006317138671875, -0.003814697265625, -0.01226806640625, 0.01177978515625, 0.02972412109375, -0.048614501953125, -0.08477783203125, 0.0445556640625, 0.14459228515625, 0.06085205078125, -0.046783447265625, -0.031463623046875, 0.02081298828125, 0.019439697265625, 0.011688232421875, 0.029022216796875, 0.027679443359375, -0.001007080078125, 0.005645751953125, 0.06414794921875, 0.101287841796875, 0.07928466796875, 0.03118896484375, -0.015411376953125, -0.02813720703125, 0.03118896484375, 0.11285400390625, 0.10699462890625, 0.024261474609375, -0.0008544921875, 0.059326171875, 0.1170654296875, 0.14697265625, 0.155426025390625, 0.108612060546875, 0.001495361328125, -0.083892822265625, -0.067413330078125, 0.01776123046875, 0.080780029296875, 0.1019287109375, 0.11871337890625, 0.129180908203125, 0.06622314453125, -0.0565185546875, -0.1072998046875, -0.05718994140625, 0.006439208984375, 0.0701904296875, 0.132110595703125, 0.135711669921875, 0.082366943359375, 0.02880859375, 0.011444091796875, 0.01629638671875, 0.00823974609375, 0.005523681640625, 0.0299072265625, 0.007049560546875, -0.070068359375, -0.05126953125, 0.082977294921875, 0.142974853515625, 0.072174072265625, 0.006866455078125, 0.0137939453125, 0.02203369140625, -0.02984619140625, -0.108062744140625, -0.136810302734375, -0.118927001953125, -0.14764404296875, -0.22454833984375, -0.220672607421875, -0.099395751953125, 0.029510498046875, 0.065032958984375, 0.04144287109375, 0.05908203125, 0.063323974609375, -0.040008544921875, -0.147735595703125, -0.149566650390625, -0.1265869140625, -0.153472900390625, -0.165008544921875, -0.120819091796875, -0.08428955078125, -0.09326171875, -0.099212646484375, -0.058990478515625, 0.0008544921875, 0.034088134765625, 0.015411376953125, -0.031585693359375, -0.03765869140625, -0.015228271484375, -0.00286865234375, 0.062652587890625, 0.17291259765625, 0.189056396484375, 0.09130859375, -0.0301513671875, -0.146331787109375, -0.25439453125, -0.323944091796875, -0.33447265625, -0.308319091796875, -0.263671875, -0.15850830078125, 0.02984619140625, 0.217437744140625, 0.297698974609375, 0.288055419921875, 0.264404296875, 0.235321044921875, 0.1824951171875, 0.07476806640625, -0.06707763671875, -0.144195556640625, -0.132904052734375, -0.10296630859375, -0.088287353515625, -0.067138671875, -0.02252197265625, 0.037017822265625, 0.08343505859375, 0.084869384765625, 0.080352783203125, 0.138031005859375, 0.215118408203125, 0.22509765625, 0.194854736328125, 0.18841552734375, 0.192596435546875, 0.1832275390625, 0.152130126953125, 0.090301513671875, 0.026702880859375, 0.003448486328125, -0.022857666015625, -0.100189208984375, -0.153717041015625, -0.127227783203125, -0.093902587890625, -0.100860595703125, -0.1019287109375, -0.073089599609375, -0.06304931640625, -0.07562255859375, -0.0333251953125, 0.040313720703125, 0.03509521484375, -0.04083251953125, -0.087646484375, -0.08642578125, -0.0819091796875, -0.078399658203125, -0.0452880859375, 0.020233154296875, 0.0819091796875, 0.13067626953125, 0.180419921875, 0.225067138671875, 0.250091552734375, 0.242218017578125, 0.2037353515625, 0.15057373046875, 0.1014404296875, 0.082183837890625, 0.092864990234375, 0.080718994140625, 0.014739990234375, -0.040496826171875, 0.01348876953125, 0.126708984375, 0.137908935546875, 0.0333251953125, -0.056396484375, -0.09442138671875, -0.132598876953125, -0.178192138671875, -0.216033935546875, -0.231109619140625, -0.199737548828125, -0.14239501953125, -0.092559814453125, -0.037109375, 0.025787353515625, 0.0687255859375, 0.089813232421875, 0.106109619140625, 0.107208251953125, 0.09088134765625, 0.0889892578125, 0.103607177734375, 0.09326171875, 0.05572509765625, 0.03228759765625, 0.02459716796875, -0.031585693359375, -0.1376953125, -0.195892333984375, -0.191925048828125, -0.204864501953125, -0.2216796875, -0.19268798828125, -0.16595458984375, -0.179595947265625, -0.178253173828125, -0.133453369140625, -0.121246337890625, -0.193023681640625, -0.277191162109375, -0.302947998046875, -0.302337646484375, -0.3109130859375, -0.3212890625, -0.3203125, -0.298675537109375, -0.26806640625, -0.223907470703125, -0.1361083984375, -0.03192138671875, 0.059326171875, 0.1324462890625, 0.174652099609375, 0.205780029296875, 0.236663818359375, 0.243499755859375, 0.224945068359375, 0.218841552734375, 0.238616943359375, 0.2457275390625, 0.24761962890625, 0.278106689453125, 0.297271728515625, 0.2808837890625, 0.266754150390625, 0.26373291015625, 0.2393798828125, 0.181396484375, 0.11865234375, 0.0947265625, 0.11846923828125, 0.133819580078125, 0.113128662109375, 0.107025146484375, 0.130096435546875, 0.136260986328125, 0.129180908203125, 0.132232666015625, 0.120269775390625, 0.0999755859375, 0.10845947265625, 0.117919921875, 0.0711669921875, -0.012908935546875, -0.05902099609375, -0.0595703125, -0.07958984375, -0.126373291015625, -0.15728759765625, -0.1663818359375, -0.154449462890625, -0.1175537109375, -0.085662841796875, -0.089019775390625, -0.10626220703125, -0.120391845703125, -0.150604248046875, -0.1820068359375, -0.173614501953125, -0.1453857421875, -0.13580322265625, -0.150634765625, -0.15509033203125, -0.11114501953125, -0.054534912109375, -0.053497314453125, -0.0948486328125, -0.109375, -0.0792236328125, -0.0484619140625, -0.042633056640625, -0.0447998046875, -0.033660888671875, -0.009063720703125, 0.02740478515625, 0.075653076171875, 0.112945556640625, 0.10479736328125, 0.0648193359375, 0.048431396484375, 0.0660400390625, 0.057769775390625, 0.004791259765625, -0.03753662109375, -0.02740478515625, 0.0211181640625, 0.0697021484375, 0.0985107421875, 0.09600830078125, 0.06591796875, 0.0494384765625, 0.0621337890625, 0.059326171875, 0.035064697265625, 0.0185546875, -0.008026123046875, -0.05322265625, -0.07183837890625, -0.057342529296875, -0.054656982421875, -0.04119873046875, 0.02783203125, 0.088104248046875, 0.092437744140625, 0.104949951171875, 0.123748779296875, 0.097991943359375, 0.068817138671875, 0.067230224609375, 0.052337646484375, 0.022918701171875, 0.02813720703125, 0.076690673828125, 0.113677978515625, 0.113067626953125, 0.116241455078125, 0.135589599609375, 0.13128662109375, 0.113922119140625, 0.137237548828125, 0.16937255859375, 0.140228271484375, 0.094146728515625, 0.117706298828125, 0.1761474609375, 0.178375244140625, 0.14324951171875, 0.139068603515625, 0.150177001953125, 0.13043212890625, 0.100128173828125, 0.09393310546875, 0.0870361328125, 0.05010986328125, 0.0272216796875, 0.05023193359375, 0.07421875, 0.06732177734375, 0.06121826171875, 0.073760986328125, 0.083984375, 0.088104248046875, 0.09515380859375, 0.095855712890625, 0.090545654296875, 0.081298828125, 0.0677490234375, 0.0736083984375, 0.103057861328125, 0.115020751953125, 0.101776123046875, 0.100189208984375, 0.11822509765625, 0.10791015625, 0.0548095703125, 0.038787841796875, 0.07855224609375, 0.075225830078125, 0.020111083984375, 0.00909423828125, 0.0477294921875, 0.076263427734375, 0.08416748046875, 0.090301513671875, 0.078094482421875, 0.028839111328125, -0.02044677734375, -0.02392578125, 0.000244140625, 0.0009765625, -0.0380859375\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_48000::bitDepth = 16}}
\par
{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_16bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_16bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_16bit_48000}
{\xe \v aiff_stereo_16bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_16bit_48000::testBuffer = \{\{0.0, 0.0, 0.0, -3.0517578125e-05, 3.0517578125e-05, 0.0, 6.103515625e-05, 3.0517578125e-05, 0.0, -0.00152587890625, -0.0037841796875, -0.00445556640625, -0.0029296875, -0.001953125, -0.0010986328125, -0.000885009765625, -0.0015869140625, -0.000946044921875, 0.003814697265625, 0.008880615234375, 0.008544921875, 0.001373291015625, -0.005218505859375, -0.00592041015625, -0.000213623046875, 0.00628662109375, 0.008331298828125, 0.00531005859375, 0.001983642578125, 0.002197265625, 0.003021240234375, 0.00146484375, -0.0003662109375, -0.00030517578125, 0.007354736328125, 0.03131103515625, 0.050201416015625, 0.024261474609375, -0.02618408203125, -0.039398193359375, -0.014251708984375, 0.013519287109375, 0.042083740234375, 0.047760009765625, 0.009521484375, -0.014190673828125, 0.01751708984375, 0.03814697265625, 0.003875732421875, -0.02069091796875, 0.01123046875, 0.033111572265625, 0.007598876953125, 0.017059326171875, 0.066558837890625, 0.0506591796875, -0.01678466796875, -0.029083251953125, 0.003204345703125, 0.021026611328125, 0.035736083984375, 0.031890869140625, -0.0257568359375, -0.0556640625, 0.02166748046875, 0.09393310546875, 0.028472900390625, -0.089630126953125, -0.092742919921875, 0.0054931640625, 0.05126953125, -0.007293701171875, -0.070465087890625, -0.0552978515625, -0.005584716796875, -0.0054931640625, -0.043060302734375, -0.0494384765625, -0.045166015625, -0.066802978515625, -0.064605712890625, -0.03546142578125, -0.05303955078125, -0.096771240234375, -0.084228515625, -0.040008544921875, -0.041046142578125, -0.07281494140625, -0.077484130859375, -0.059234619140625, -0.06219482421875, -0.095245361328125, -0.104644775390625, -0.0552978515625, -0.024322509765625, -0.07855224609375, -0.1416015625, -0.117156982421875, -0.034454345703125, -0.00921630859375, -0.08367919921875, -0.141326904296875, -0.083404541015625, 0.0086669921875, 0.001251220703125, -0.074493408203125, -0.067657470703125, 0.009857177734375, -0.01751708984375, -0.1160888671875, -0.08123779296875, 0.0286865234375, 0.023834228515625, -0.0228271484375, -0.007293701171875, 0.003143310546875, -0.000152587890625, 0.002685546875, -0.0128173828125, 0.0001220703125, 0.02496337890625, -0.021148681640625, -0.039947509765625, 0.075347900390625, 0.154296875, 0.061920166015625, -0.032379150390625, 0.009002685546875, 0.074676513671875, 0.06451416015625, 0.038665771484375, 0.058074951171875, 0.076263427734375, 0.065673828125, 0.084228515625, 0.135162353515625, 0.140472412109375, 0.0894775390625, 0.054443359375, 0.06353759765625, 0.0860595703125, 0.12384033203125, 0.16864013671875, 0.14739990234375, 0.08135986328125, 0.09307861328125, 0.180816650390625, 0.24127197265625, 0.236968994140625, 0.181243896484375, 0.09075927734375, -0.000946044921875, -0.029876708984375, 0.03076171875, 0.122344970703125, 0.17926025390625, 0.18585205078125, 0.160125732421875, 0.121917724609375, 0.0552978515625, -0.01513671875, -0.003875732421875, 0.07733154296875, 0.13287353515625, 0.147705078125, 0.14251708984375, 0.0924072265625, 0.01959228515625, -3.0517578125e-05, 0.03533935546875, 0.06378173828125, 0.046356201171875, 0.021026611328125, 0.031951904296875, 0.01239013671875, -0.05462646484375, -0.02325439453125, 0.11676025390625, 0.1571044921875, 0.03369140625, -0.083526611328125, -0.0931396484375, -0.066680908203125, -0.085052490234375, -0.139190673828125, -0.17095947265625, -0.177215576171875, -0.207550048828125, -0.24237060546875, -0.2021484375, -0.080078125, 0.01983642578125, 0.0133056640625, -0.048614501953125, -0.07525634765625, -0.087005615234375, -0.14178466796875, -0.204345703125, -0.2119140625, -0.197479248046875, -0.2066650390625, -0.204254150390625, -0.18341064453125, -0.188232421875, -0.202850341796875, -0.166717529296875, -0.083953857421875, -0.03448486328125, -0.04473876953125, -0.0679931640625, -0.09625244140625, -0.109344482421875, -0.0667724609375, -0.006591796875, 0.0330810546875, 0.07012939453125, 0.063201904296875, -0.051177978515625, -0.2208251953125, -0.326385498046875, -0.35015869140625, -0.35162353515625, -0.32568359375, -0.262115478515625, -0.17431640625, -0.044769287109375, 0.122344970703125, 0.2481689453125, 0.2684326171875, 0.23095703125, 0.192840576171875, 0.147796630859375, 0.086761474609375, -0.00384521484375, -0.10125732421875, -0.1444091796875, -0.115570068359375, -0.058258056640625, -0.027984619140625, -0.01055908203125, 0.035247802734375, 0.095001220703125, 0.13427734375, 0.1390380859375, 0.152313232421875, 0.21356201171875, 0.277099609375, 0.279327392578125, 0.2332763671875, 0.19677734375, 0.18988037109375, 0.194854736328125, 0.1807861328125, 0.122344970703125, 0.052947998046875, 0.0323486328125, 0.014739990234375, -0.04632568359375, -0.076080322265625, -0.0394287109375, 0.003662109375, 0.019012451171875, 0.02838134765625, 0.04583740234375, 0.03631591796875, 0.011016845703125, 0.036468505859375, 0.07733154296875, 0.0614013671875, 0.0079345703125, -0.026885986328125, -0.0228271484375, -0.001983642578125, 0.019775390625, 0.057769775390625, 0.118896484375, 0.183624267578125, 0.226104736328125, 0.2464599609375, 0.270172119140625, 0.2890625, 0.267822265625, 0.201263427734375, 0.125762939453125, 0.0765380859375, 0.061920166015625, 0.06439208984375, 0.047760009765625, -0.0068359375, -0.046234130859375, 0.006744384765625, 0.115814208984375, 0.1375732421875, 0.04473876953125, -0.046905517578125, -0.0953369140625, -0.133514404296875, -0.180084228515625, -0.230133056640625, -0.254058837890625, -0.22821044921875, -0.173309326171875, -0.12713623046875, -0.082305908203125, -0.025299072265625, 0.018310546875, 0.037567138671875, 0.04608154296875, 0.043060302734375, 0.035003662109375, 0.033203125, 0.031463623046875, 0.00933837890625, -0.0299072265625, -0.05133056640625, -0.073974609375, -0.150604248046875, -0.2430419921875, -0.273681640625, -0.258697509765625, -0.2574462890625, -0.261077880859375, -0.231964111328125, -0.210693359375, -0.235565185546875, -0.242828369140625, -0.20452880859375, -0.19964599609375, -0.26898193359375, -0.34588623046875, -0.3634033203125, -0.351837158203125, -0.35791015625, -0.36181640625, -0.343719482421875, -0.305908203125, -0.25054931640625, -0.17315673828125, -0.072357177734375, 0.0245361328125, 0.09521484375, 0.141510009765625, 0.169586181640625, 0.18475341796875, 0.19952392578125, 0.215972900390625, 0.2159423828125, 0.211090087890625, 0.228668212890625, 0.250823974609375, 0.273345947265625, 0.306732177734375, 0.324981689453125, 0.31182861328125, 0.29632568359375, 0.287841796875, 0.252685546875, 0.18682861328125, 0.127899169921875, 0.11199951171875, 0.1424560546875, 0.1658935546875, 0.153472900390625, 0.162506103515625, 0.196380615234375, 0.20623779296875, 0.2103271484375, 0.224578857421875, 0.21392822265625, 0.180084228515625, 0.1671142578125, 0.166046142578125, 0.116546630859375, 0.030670166015625, -0.012908935546875, -0.014678955078125, -0.022430419921875, -0.039886474609375, -0.054779052734375, -0.06024169921875, -0.048248291015625, -0.01617431640625, 0.010467529296875, 0.003692626953125, -0.023162841796875, -0.05780029296875, -0.098724365234375, -0.10809326171875, -0.082489013671875, -0.06134033203125, -0.059539794921875, -0.0728759765625, -0.07415771484375, -0.03515625, 0.0146484375, 0.01239013671875, -0.038665771484375, -0.060791015625, -0.03131103515625, -0.00250244140625, -0.005523681640625, -0.016998291015625, -0.006134033203125, 0.01934814453125, 0.047393798828125, 0.08221435546875, 0.108245849609375, 0.102020263671875, 0.062713623046875, 0.034210205078125, 0.030517578125, 0.0069580078125, -0.04296875, -0.071807861328125, -0.0491943359375, 0.002716064453125, 0.041107177734375, 0.05810546875, 0.053253173828125, 0.0350341796875, 0.026702880859375, 0.0201416015625, -0.000457763671875, -0.02337646484375, -0.0469970703125, -0.087738037109375, -0.12774658203125, -0.127105712890625, -0.10931396484375, -0.1192626953125, -0.102386474609375, -0.021026611328125, 0.038177490234375, 0.034942626953125, 0.031036376953125, 0.042083740234375, 0.037933349609375, 0.019622802734375, -0.0030517578125, -0.024627685546875, -0.02325439453125, 0.00146484375, 0.0152587890625, 0.02923583984375, 0.067779541015625, 0.090057373046875, 0.07781982421875, 0.068328857421875, 0.08221435546875, 0.10498046875, 0.10943603515625, 0.089996337890625, 0.08026123046875, 0.113372802734375, 0.150146484375, 0.138641357421875, 0.109222412109375, 0.107208251953125, 0.11798095703125, 0.114654541015625, 0.10211181640625, 0.09503173828125, 0.0758056640625, 0.060699462890625, 0.084564208984375, 0.10748291015625, 0.09002685546875, 0.0736083984375, 0.092193603515625, 0.107635498046875, 0.10784912109375, 0.127685546875, 0.14788818359375, 0.1387939453125, 0.136199951171875, 0.151611328125, 0.155364990234375, 0.152496337890625, 0.16754150390625, 0.181427001953125, 0.169586181640625, 0.162322998046875, 0.162109375, 0.136627197265625, 0.121673583984375, 0.149261474609375, 0.15789794921875, 0.12591552734375, 0.11029052734375, 0.125213623046875, 0.136444091796875, 0.143524169921875, 0.16168212890625, 0.158599853515625, 0.11553955078125, 0.07843017578125, 0.07415771484375, 0.076812744140625, 0.06414794921875, 0.03802490234375\}, \{0.0, 0.0, 3.0517578125e-05, -3.0517578125e-05, 9.1552734375e-05, -6.103515625e-05, 0.0001220703125, -9.1552734375e-05, 9.1552734375e-05, -0.00067138671875, -0.00177001953125, -0.001922607421875, -0.000244140625, 0.00042724609375, 0.000335693359375, -0.0008544921875, -0.00311279296875, -0.003173828125, 0.00146484375, 0.007049560546875, 0.006805419921875, 0.00018310546875, -0.005279541015625, -0.00360107421875, 0.00238037109375, 0.007568359375, 0.009368896484375, 0.00885009765625, 0.004302978515625, -0.003753662109375, -0.0096435546875, -0.0091552734375, -0.007537841796875, -0.002838134765625, 0.02001953125, 0.04461669921875, 0.027130126953125, -0.0228271484375, -0.0426025390625, -0.022735595703125, 0.00732421875, 0.03759765625, 0.042327880859375, 0.005645751953125, -0.015106201171875, 0.010162353515625, 0.019561767578125, -0.016204833984375, -0.03082275390625, 0.006805419921875, 0.02252197265625, -0.006744384765625, 0.010040283203125, 0.064483642578125, 0.044342041015625, -0.025238037109375, -0.034759521484375, -0.003662109375, 0.011505126953125, 0.02874755859375, 0.03045654296875, -0.0224609375, -0.046356201171875, 0.035888671875, 0.104156494140625, 0.02947998046875, -0.09515380859375, -0.095367431640625, 0.012847900390625, 0.06707763671875, 0.011199951171875, -0.05670166015625, -0.044921875, 0.008392333984375, 0.01495361328125, -0.01702880859375, -0.02484130859375, -0.025604248046875, -0.04046630859375, -0.023712158203125, 0.010284423828125, -0.01641845703125, -0.06744384765625, -0.050018310546875, -0.00732421875, -0.01861572265625, -0.050872802734375, -0.0430908203125, -0.012786865234375, -0.018585205078125, -0.0650634765625, -0.072021484375, -0.008087158203125, 0.0272216796875, -0.0291748046875, -0.091766357421875, -0.064300537109375, 0.0081787109375, 0.0091552734375, -0.073883056640625, -0.11468505859375, -0.036376953125, 0.053924560546875, 0.022674560546875, -0.069366455078125, -0.052764892578125, 0.0396728515625, 0.013153076171875, -0.08868408203125, -0.050689697265625, 0.050872802734375, 0.03717041015625, -0.002349853515625, 0.012451171875, 0.007598876953125, -0.006317138671875, -0.003814697265625, -0.01226806640625, 0.01177978515625, 0.02972412109375, -0.048614501953125, -0.08477783203125, 0.0445556640625, 0.14459228515625, 0.06085205078125, -0.046783447265625, -0.031463623046875, 0.02081298828125, 0.019439697265625, 0.011688232421875, 0.029022216796875, 0.027679443359375, -0.001007080078125, 0.005645751953125, 0.06414794921875, 0.101287841796875, 0.07928466796875, 0.03118896484375, -0.015411376953125, -0.02813720703125, 0.03118896484375, 0.11285400390625, 0.10699462890625, 0.024261474609375, -0.0008544921875, 0.059326171875, 0.1170654296875, 0.14697265625, 0.155426025390625, 0.108612060546875, 0.001495361328125, -0.083892822265625, -0.067413330078125, 0.01776123046875, 0.080780029296875, 0.1019287109375, 0.11871337890625, 0.129180908203125, 0.06622314453125, -0.0565185546875, -0.1072998046875, -0.05718994140625, 0.006439208984375, 0.0701904296875, 0.132110595703125, 0.135711669921875, 0.082366943359375, 0.02880859375, 0.011444091796875, 0.01629638671875, 0.00823974609375, 0.005523681640625, 0.0299072265625, 0.007049560546875, -0.070068359375, -0.05126953125, 0.082977294921875, 0.142974853515625, 0.072174072265625, 0.006866455078125, 0.0137939453125, 0.02203369140625, -0.02984619140625, -0.108062744140625, -0.136810302734375, -0.118927001953125, -0.14764404296875, -0.22454833984375, -0.220672607421875, -0.099395751953125, 0.029510498046875, 0.065032958984375, 0.04144287109375, 0.05908203125, 0.063323974609375, -0.040008544921875, -0.147735595703125, -0.149566650390625, -0.1265869140625, -0.153472900390625, -0.165008544921875, -0.120819091796875, -0.08428955078125, -0.09326171875, -0.099212646484375, -0.058990478515625, 0.0008544921875, 0.034088134765625, 0.015411376953125, -0.031585693359375, -0.03765869140625, -0.015228271484375, -0.00286865234375, 0.062652587890625, 0.17291259765625, 0.189056396484375, 0.09130859375, -0.0301513671875, -0.146331787109375, -0.25439453125, -0.323944091796875, -0.33447265625, -0.308319091796875, -0.263671875, -0.15850830078125, 0.02984619140625, 0.217437744140625, 0.297698974609375, 0.288055419921875, 0.264404296875, 0.235321044921875, 0.1824951171875, 0.07476806640625, -0.06707763671875, -0.144195556640625, -0.132904052734375, -0.10296630859375, -0.088287353515625, -0.067138671875, -0.02252197265625, 0.037017822265625, 0.08343505859375, 0.084869384765625, 0.080352783203125, 0.138031005859375, 0.215118408203125, 0.22509765625, 0.194854736328125, 0.18841552734375, 0.192596435546875, 0.1832275390625, 0.152130126953125, 0.090301513671875, 0.026702880859375, 0.003448486328125, -0.022857666015625, -0.100189208984375, -0.153717041015625, -0.127227783203125, -0.093902587890625, -0.100860595703125, -0.1019287109375, -0.073089599609375, -0.06304931640625, -0.07562255859375, -0.0333251953125, 0.040313720703125, 0.03509521484375, -0.04083251953125, -0.087646484375, -0.08642578125, -0.0819091796875, -0.078399658203125, -0.0452880859375, 0.020233154296875, 0.0819091796875, 0.13067626953125, 0.180419921875, 0.225067138671875, 0.250091552734375, 0.242218017578125, 0.2037353515625, 0.15057373046875, 0.1014404296875, 0.082183837890625, 0.092864990234375, 0.080718994140625, 0.014739990234375, -0.040496826171875, 0.01348876953125, 0.126708984375, 0.137908935546875, 0.0333251953125, -0.056396484375, -0.09442138671875, -0.132598876953125, -0.178192138671875, -0.216033935546875, -0.231109619140625, -0.199737548828125, -0.14239501953125, -0.092559814453125, -0.037109375, 0.025787353515625, 0.0687255859375, 0.089813232421875, 0.106109619140625, 0.107208251953125, 0.09088134765625, 0.0889892578125, 0.103607177734375, 0.09326171875, 0.05572509765625, 0.03228759765625, 0.02459716796875, -0.031585693359375, -0.1376953125, -0.195892333984375, -0.191925048828125, -0.204864501953125, -0.2216796875, -0.19268798828125, -0.16595458984375, -0.179595947265625, -0.178253173828125, -0.133453369140625, -0.121246337890625, -0.193023681640625, -0.277191162109375, -0.302947998046875, -0.302337646484375, -0.3109130859375, -0.3212890625, -0.3203125, -0.298675537109375, -0.26806640625, -0.223907470703125, -0.1361083984375, -0.03192138671875, 0.059326171875, 0.1324462890625, 0.174652099609375, 0.205780029296875, 0.236663818359375, 0.243499755859375, 0.224945068359375, 0.218841552734375, 0.238616943359375, 0.2457275390625, 0.24761962890625, 0.278106689453125, 0.297271728515625, 0.2808837890625, 0.266754150390625, 0.26373291015625, 0.2393798828125, 0.181396484375, 0.11865234375, 0.0947265625, 0.11846923828125, 0.133819580078125, 0.113128662109375, 0.107025146484375, 0.130096435546875, 0.136260986328125, 0.129180908203125, 0.132232666015625, 0.120269775390625, 0.0999755859375, 0.10845947265625, 0.117919921875, 0.0711669921875, -0.012908935546875, -0.05902099609375, -0.0595703125, -0.07958984375, -0.126373291015625, -0.15728759765625, -0.1663818359375, -0.154449462890625, -0.1175537109375, -0.085662841796875, -0.089019775390625, -0.10626220703125, -0.120391845703125, -0.150604248046875, -0.1820068359375, -0.173614501953125, -0.1453857421875, -0.13580322265625, -0.150634765625, -0.15509033203125, -0.11114501953125, -0.054534912109375, -0.053497314453125, -0.0948486328125, -0.109375, -0.0792236328125, -0.0484619140625, -0.042633056640625, -0.0447998046875, -0.033660888671875, -0.009063720703125, 0.02740478515625, 0.075653076171875, 0.112945556640625, 0.10479736328125, 0.0648193359375, 0.048431396484375, 0.0660400390625, 0.057769775390625, 0.004791259765625, -0.03753662109375, -0.02740478515625, 0.0211181640625, 0.0697021484375, 0.0985107421875, 0.09600830078125, 0.06591796875, 0.0494384765625, 0.0621337890625, 0.059326171875, 0.035064697265625, 0.0185546875, -0.008026123046875, -0.05322265625, -0.07183837890625, -0.057342529296875, -0.054656982421875, -0.04119873046875, 0.02783203125, 0.088104248046875, 0.092437744140625, 0.104949951171875, 0.123748779296875, 0.097991943359375, 0.068817138671875, 0.067230224609375, 0.052337646484375, 0.022918701171875, 0.02813720703125, 0.076690673828125, 0.113677978515625, 0.113067626953125, 0.116241455078125, 0.135589599609375, 0.13128662109375, 0.113922119140625, 0.137237548828125, 0.16937255859375, 0.140228271484375, 0.094146728515625, 0.117706298828125, 0.1761474609375, 0.178375244140625, 0.14324951171875, 0.139068603515625, 0.150177001953125, 0.13043212890625, 0.100128173828125, 0.09393310546875, 0.0870361328125, 0.05010986328125, 0.0272216796875, 0.05023193359375, 0.07421875, 0.06732177734375, 0.06121826171875, 0.073760986328125, 0.083984375, 0.088104248046875, 0.09515380859375, 0.095855712890625, 0.090545654296875, 0.081298828125, 0.0677490234375, 0.0736083984375, 0.103057861328125, 0.115020751953125, 0.101776123046875, 0.100189208984375, 0.11822509765625, 0.10791015625, 0.0548095703125, 0.038787841796875, 0.07855224609375, 0.075225830078125, 0.020111083984375, 0.00909423828125, 0.0477294921875, 0.076263427734375, 0.08416748046875, 0.090301513671875, 0.078094482421875, 0.028839111328125, -0.02044677734375, -0.02392578125, 0.000244140625, 0.0009765625, -0.0380859375\}\}}}
\par
{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_24bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100}
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, 2.384185791015625e-07, 1.7881393432617188e-06, 5.4836273193359375e-06, 1.3232231140136719e-05, 2.467632293701172e-05, 4.1961669921875e-05, 6.413459777832031e-05, -0.0005469322204589844, -0.0027649402618408203, -0.001909017562866211, 0.0035326480865478516, 0.0028171539306640625, 0.000813603401184082, 0.00023508071899414062, -0.0021113157272338867, 0.0001468658447265625, 0.014778494834899902, 0.04538834095001221, 0.04520773887634277, -0.004081845283508301, -0.06305968761444092, -0.0665360689163208, -0.029284119606018066, -0.024863362312316895, -0.01780259609222412, -0.013840913772583008, 0.019315004348754883, 0.08567023277282715, 0.04245483875274658, -0.04147696495056152, -0.02841663360595703, 0.009694337844848633, 0.01996481418609619, -0.00319063663482666, -0.053113460540771484, -0.027323126792907715, 0.06642353534698486, 0.10269403457641602, 0.10253250598907471, 0.08760249614715576, 0.03816401958465576, 0.05413031578063965, 0.08223843574523926, 0.05015301704406738, 0.02655482292175293, 0.0518268346786499, 0.05460524559020996, -0.000580906867980957, 0.0395054817199707, 0.10501348972320557, 0.057415008544921875, 0.013211846351623535, 0.034859538078308105, 0.05507814884185791, 0.04670369625091553, -0.01683640480041504, -0.09157049655914307, -0.08178138732910156, 0.003289341926574707, 0.04446220397949219, -0.0565570592880249, -0.13708782196044922, -0.08847522735595703, -0.02224898338317871, -0.015274286270141602, -0.028183579444885254, -0.03865182399749756, -0.05581164360046387, -0.043233394622802734, -0.02816152572631836, -0.01761162281036377, -0.033526062965393066, -0.08275163173675537, -0.10685598850250244, -0.1034555435180664, -0.11973357200622559, -0.09033203125, -0.04437124729156494, -0.09464144706726074, -0.1173853874206543, -0.10559892654418945, -0.08117079734802246, -0.0644904375076294, -0.12826251983642578, -0.15485632419586182, -0.0441133975982666, 0.023441195487976074, -0.0313950777053833, -0.010845184326171875, 0.004209995269775391, -0.04794716835021973, -0.09660530090332031, -0.07935786247253418, 0.022089362144470215, 0.06454586982727051, 0.006242275238037109, -0.053893327713012695, 0.009267091751098633, 0.0192720890045166, -0.12457668781280518, -0.16945278644561768, -0.06906521320343018, -0.018019914627075195, -0.00901186466217041, 0.04090762138366699, 0.05578315258026123, 0.04540598392486572, -0.017262578010559082, -0.09481668472290039, -0.09463560581207275, -0.0850372314453125, -0.07044601440429688, 0.044732093811035156, 0.14043903350830078, 0.0615311861038208, -0.0017768144607543945, 0.050705790519714355, 0.051418185234069824, -0.02617955207824707, 0.0013318061828613281, 0.10370314121246338, 0.12050795555114746, 0.1356261968612671, 0.1976931095123291, 0.14523100852966309, -0.010580658912658691, -0.0808025598526001, -0.025513291358947754, 0.07318198680877686, 0.11440527439117432, 0.14054787158966064, 0.19859600067138672, 0.226037859916687, 0.25968968868255615, 0.27517223358154297, 0.21891403198242188, 0.17249858379364014, 0.10510575771331787, 0.021207571029663086, 0.03359854221343994, 0.11546945571899414, 0.16277778148651123, 0.13610899448394775, 0.11561858654022217, 0.15818476676940918, 0.15215349197387695, 0.003849506378173828, -0.030636906623840332, 0.13052606582641602, 0.18443167209625244, 0.17312121391296387, 0.15424621105194092, 0.0742192268371582, 0.051267147064208984, 0.038919806480407715, 0.022106051445007324, 0.012888550758361816, -0.007709026336669922, 0.029566526412963867, 0.030662059783935547, -0.027154207229614258, 0.040636539459228516, 0.16303539276123047, 0.11336028575897217, -0.029920458793640137, -0.07883155345916748, -0.053902268409729004, -0.06685054302215576, -0.11553120613098145, -0.14421296119689941, -0.15514814853668213, -0.23572230339050293, -0.33848822116851807, -0.3083235025405884, -0.2027122974395752, -0.13567590713500977, -0.1538301706314087, -0.16901659965515137, -0.14754056930541992, -0.18767130374908447, -0.2352076768875122, -0.22752869129180908, -0.19818603992462158, -0.1912686824798584, -0.1811293363571167, -0.15598833560943604, -0.15092182159423828, -0.13190996646881104, -0.09050929546356201, -0.05414414405822754, -0.021764397621154785, -0.01615750789642334, -0.016031503677368164, 0.02736032009124756, 0.05744445323944092, 0.10349833965301514, 0.17580628395080566, 0.17315220832824707, 0.08343183994293213, -0.09277796745300293, -0.24751710891723633, -0.3203364610671997, -0.36222290992736816, -0.3456164598464966, -0.29457712173461914, -0.2208174467086792, -0.07722604274749756, 0.07686781883239746, 0.10222053527832031, 0.08138704299926758, 0.07167577743530273, 0.006896376609802246, -0.03144514560699463, -0.06453490257263184, -0.0998678207397461, -0.11557626724243164, -0.08657562732696533, -0.011487841606140137, 0.024655699729919434, 0.07710301876068115, 0.19258737564086914, 0.2757699489593506, 0.24917995929718018, 0.2547190189361572, 0.3233884572982788, 0.3651694059371948, 0.3467220067977905, 0.26609206199645996, 0.21415364742279053, 0.1451643705368042, 0.028246164321899414, -0.05506265163421631, -0.09485781192779541, -0.10834360122680664, -0.09765219688415527, -0.11472666263580322, -0.10827720165252686, -0.05115628242492676, -0.011539101600646973, 0.012971639633178711, 0.03045511245727539, 0.04645514488220215, 0.0342707633972168, 0.0549466609954834, 0.16332507133483887, 0.24224793910980225, 0.18761515617370605, 0.11179554462432861, 0.09352076053619385, 0.09492385387420654, 0.11606824398040771, 0.1413419246673584, 0.17592430114746094, 0.2018730640411377, 0.23069274425506592, 0.25766170024871826, 0.2663611173629761, 0.21774756908416748, 0.057196974754333496, -0.08907783031463623, -0.12986385822296143, -0.10977804660797119, -0.04542100429534912, -0.009626269340515137, -0.03966021537780762, -0.02337789535522461, 0.06328558921813965, 0.1187981367111206, 0.10761165618896484, 0.07837212085723877, 0.05231678485870361, 0.02169060707092285, -0.03322577476501465, -0.11377441883087158, -0.15057945251464844, -0.14534151554107666, -0.18364381790161133, -0.21993911266326904, -0.1961129903793335, -0.1525101661682129, -0.10219216346740723, -0.06866455078125, -0.07127976417541504, -0.08443140983581543, -0.07552826404571533, -0.049929141998291016, -0.023989200592041016, 0.013609647750854492, 0.0475459098815918, 0.02447795867919922, -0.04460704326629639, -0.0887378454208374, -0.11880159378051758, -0.16825449466705322, -0.188887357711792, -0.16724884510040283, -0.18829452991485596, -0.2464510202407837, -0.2575598955154419, -0.25703179836273193, -0.32140886783599854, -0.4187908172607422, -0.46495234966278076, -0.44499170780181885, -0.40246832370758057, -0.36982977390289307, -0.3331559896469116, -0.28196287155151367, -0.21289277076721191, -0.1061016321182251, 0.023185014724731445, 0.1438899040222168, 0.22921299934387207, 0.2681858539581299, 0.2650902271270752, 0.2512338161468506, 0.23415231704711914, 0.185766339302063, 0.1503525972366333, 0.14675557613372803, 0.14294695854187012, 0.16180360317230225, 0.2102292776107788, 0.23564505577087402, 0.23043131828308105, 0.2227400541305542, 0.1978968381881714, 0.16218268871307373, 0.13503003120422363, 0.1386406421661377, 0.1782851219177246, 0.18684566020965576, 0.1817244291305542, 0.2154783010482788, 0.2369520664215088, 0.23360908031463623, 0.22561335563659668, 0.19286930561065674, 0.1471778154373169, 0.12532472610473633, 0.1119149923324585, 0.05721092224121094, -0.02198469638824463, -0.04966306686401367, -0.038004159927368164, -0.04068195819854736, -0.04813385009765625, -0.033611416816711426, 0.0015609264373779297, 0.03492474555969238, 0.062181949615478516, 0.05607593059539795, 0.02305746078491211, -0.015040397644042969, -0.058673977851867676, -0.06413936614990234, -0.033275723457336426, -0.023733139038085938, -0.051869869232177734, -0.062258124351501465, -0.02007758617401123, 0.0335007905960083, 0.018722057342529297, -0.045569419860839844, -0.05470895767211914, -0.013467192649841309, 0.003751397132873535, -0.015442371368408203, -0.015690922737121582, -0.0004124641418457031, 0.014282703399658203, 0.04862391948699951, 0.08602631092071533, 0.08928334712982178, 0.04978299140930176, 0.027298450469970703, 0.02523481845855713, -0.008887529373168945, -0.0626990795135498, -0.07338690757751465, -0.020415782928466797, 0.02891695499420166, 0.028627634048461914, 0.0006459951400756836, -0.02116239070892334, -0.02348458766937256, -0.020406246185302734, -0.025342345237731934, -0.0307157039642334, -0.05211818218231201, -0.09596836566925049, -0.10975241661071777, -0.11185181140899658, -0.13977432250976562, -0.12009251117706299, -0.033278465270996094, 0.02582836151123047, 0.025653958320617676, 0.024453401565551758, 0.027688980102539062, 0.017926692962646484, -0.003493070602416992, -0.03810405731201172, -0.05226755142211914, -0.03413844108581543, -0.013208985328674316, 0.015181303024291992, 0.061293840408325195, 0.07893812656402588, 0.05792880058288574, 0.05221593379974365, 0.07590818405151367, 0.0980989933013916, 0.09836816787719727, 0.08257675170898438, 0.10029327869415283, 0.14767920970916748, 0.15175235271453857, 0.12836933135986328, 0.12066364288330078, 0.11740505695343018, 0.09483444690704346, 0.07702457904815674, 0.06738293170928955, 0.04576694965362549, 0.054335594177246094, 0.07475137710571289, 0.0679701566696167, 0.06158328056335449, 0.0871274471282959, 0.10982775688171387, 0.1124962568283081, 0.14089477062225342, 0.1595534086227417, 0.14389824867248535, 0.1335231065750122, 0.12735068798065186, 0.11833178997039795, 0.12708508968353271, 0.13970792293548584, 0.12860453128814697, 0.12168312072753906, 0.1123509407043457, 0.0898061990737915, 0.10416066646575928, 0.12547802925109863, 0.08377218246459961, 0.029072880744934082, 0.029830574989318848, 0.0531919002532959, 0.06806492805480957, 0.10254108905792236, 0.16148173809051514, 0.16373705863952637, 0.11879289150238037, 0.09678351879119873, 0.09448826313018799, 0.11196637153625488, 0.0865253210067749, 0.08291256427764893, 0.1306225061416626, 0.1262650489807129, 0.06681835651397705, -0.015099048614501953, -0.03066885471343994, -0.020777344703674316, 0.0024286508560180664, 0.060593605041503906, 0.042906880378723145, 0.05804896354675293, 0.151015043258667, 0.14868927001953125, 0.11505436897277832, 0.07175743579864502, -0.034134626388549805, -0.08304548263549805, -0.03961801528930664, -0.02117478847503662, -0.15327191352844238, -0.23960638046264648, -0.17718052864074707, -0.19424962997436523, -0.23183894157409668, -0.16763031482696533, -0.13181567192077637, -0.13127875328063965, -0.13432729244232178, -0.2262347936630249, -0.27295756340026855, -0.18733930587768555, -0.11765587329864502, -0.14694952964782715, -0.20652127265930176, -0.26227104663848877, -0.32015371322631836, -0.2792940139770508, -0.1860034465789795, -0.21686923503875732, -0.260317325592041\}, \{0.0, 1.1920928955078125e-07, 9.5367431640625e-07, 2.2649765014648438e-06, 6.079673767089844e-06, 1.0728836059570312e-05, 1.9073486328125e-05, 2.8252601623535156e-05, -0.00028443336486816406, -0.0018184185028076172, -0.004040360450744629, -0.0009396076202392578, 0.005484461784362793, 0.0015494823455810547, -0.015085816383361816, -0.04052770137786865, -0.017013192176818848, 0.058156728744506836, 0.06110811233520508, 0.029061317443847656, 0.02493727207183838, 0.013658523559570312, 0.016342520713806152, 0.018374919891357422, 0.00035190582275390625, -0.05628693103790283, -0.08475041389465332, -0.06700503826141357, -0.06602168083190918, -0.020487546920776367, 0.02539694309234619, 0.04383206367492676, 0.07882440090179443, 0.060941100120544434, 0.0014215707778930664, -0.04584240913391113, -0.03603529930114746, 0.05073809623718262, 0.05614018440246582, -0.032359957695007324, -0.0762777328491211, -0.04066777229309082, 0.04830479621887207, 0.05345571041107178, 0.011443853378295898, 0.047042131423950195, 0.05494797229766846, 0.02233409881591797, 0.030956745147705078, 0.016776442527770996, -0.048729896545410156, -0.08724474906921387, -0.06734800338745117, -0.03170347213745117, 0.02237570285797119, 0.04881787300109863, -0.03780686855316162, -0.08068060874938965, 0.0026967525482177734, 0.04529011249542236, -0.043489813804626465, -0.13510656356811523, -0.07515919208526611, 0.01721322536468506, 0.0002690553665161133, -0.06276512145996094, -0.04584014415740967, 0.005838990211486816, -0.0016624927520751953, 0.004529833793640137, 0.015653610229492188, -0.034490108489990234, -0.07896971702575684, -0.030033111572265625, 0.0215531587600708, -0.01460111141204834, -0.018313288688659668, 0.03889763355255127, 0.031894803047180176, -0.010246634483337402, -0.03298473358154297, -0.04892385005950928, -0.06786513328552246, -0.10695624351501465, -0.08287906646728516, 0.016762256622314453, 0.056908607482910156, -0.014988064765930176, -0.03499424457550049, 0.0065468549728393555, -0.031754493713378906, -0.10726630687713623, -0.11101329326629639, 0.009048700332641602, 0.0486222505569458, -0.04605662822723389, -0.07960951328277588, -0.02328813076019287, -0.004543185234069824, -0.09627437591552734, -0.05884528160095215, 0.10364174842834473, 0.09685170650482178, 0.045968055725097656, 0.03957819938659668, -0.03821003437042236, -0.05694437026977539, -0.035282135009765625, -0.029552817344665527, 0.0214536190032959, -0.012764334678649902, -0.08995842933654785, -0.001164078712463379, 0.13212764263153076, 0.08456242084503174, 0.00866079330444336, 0.047564148902893066, 0.07651090621948242, 0.06226646900177002, 0.0562746524810791, 0.02554464340209961, -0.03723573684692383, -0.04509866237640381, 0.023096799850463867, 0.09191429615020752, 0.08427095413208008, 0.015224456787109375, -0.030819296836853027, -0.028264760971069336, 0.03852987289428711, 0.09747922420501709, 0.0367586612701416, -0.000820159912109375, 0.0901191234588623, 0.17078077793121338, 0.17741632461547852, 0.13783752918243408, 0.054445743560791016, -0.03565347194671631, -0.047922492027282715, 0.03185164928436279, 0.10580718517303467, 0.12050068378448486, 0.10873579978942871, 0.12096941471099854, 0.11137521266937256, -0.0009993314743041992, -0.09393143653869629, -0.08326005935668945, -0.030612945556640625, 0.04101908206939697, 0.08980667591094971, 0.07309329509735107, 0.020840883255004883, 0.008647799491882324, 0.057555437088012695, 0.08286881446838379, 0.0620877742767334, 0.0716317892074585, 0.03436076641082764, -0.0571746826171875, -0.035356760025024414, 0.06958937644958496, 0.0750497579574585, -0.015622258186340332, -0.024648666381835938, 0.027065277099609375, 0.009716510772705078, -0.04723799228668213, -0.06331014633178711, -0.05821490287780762, -0.10388648509979248, -0.19476401805877686, -0.2072697877883911, -0.09448206424713135, 0.0004132986068725586, 0.01934182643890381, 0.0691826343536377, 0.11633479595184326, 0.01135551929473877, -0.1298971176147461, -0.12967932224273682, -0.07559013366699219, -0.11252033710479736, -0.17155182361602783, -0.151908278465271, -0.10677552223205566, -0.09174108505249023, -0.08288359642028809, -0.051115989685058594, -0.020130157470703125, -0.020738720893859863, -0.037920236587524414, -0.004592418670654297, 0.03259909152984619, 0.05020785331726074, 0.12079429626464844, 0.19067823886871338, 0.14487552642822266, 0.007581591606140137, -0.12455368041992188, -0.23856544494628906, -0.3154296875, -0.32566773891448975, -0.29761195182800293, -0.24967217445373535, -0.12093818187713623, 0.07095670700073242, 0.22127437591552734, 0.2874826192855835, 0.28826332092285156, 0.2610100507736206, 0.2187519073486328, 0.12443351745605469, -0.024654150009155273, -0.12971389293670654, -0.1268397569656372, -0.09034407138824463, -0.09249532222747803, -0.07477307319641113, 0.00041997432708740234, 0.08121109008789062, 0.08543229103088379, 0.053551673889160156, 0.0856635570526123, 0.1519777774810791, 0.19927501678466797, 0.22236084938049316, 0.22502970695495605, 0.1982957124710083, 0.1526890993118286, 0.08495473861694336, 0.016612887382507324, -0.010601282119750977, -0.008789420127868652, -0.06143343448638916, -0.12442648410797119, -0.08210349082946777, -0.04412245750427246, -0.06306672096252441, -0.07549571990966797, -0.05231630802154541, -0.023296833038330078, -0.016872286796569824, 0.03221428394317627, 0.05150938034057617, -0.03199601173400879, -0.09383046627044678, -0.08064031600952148, -0.06209611892700195, -0.0597383975982666, -0.013897180557250977, 0.058489441871643066, 0.08891427516937256, 0.1171952486038208, 0.17978763580322266, 0.2432715892791748, 0.2535783052444458, 0.20599758625030518, 0.14655327796936035, 0.10514390468597412, 0.08141136169433594, 0.05590486526489258, 0.015575289726257324, -0.04405009746551514, -0.0506972074508667, 0.051082611083984375, 0.11393773555755615, 0.04440605640411377, -0.03252267837524414, -0.052556633949279785, -0.08064007759094238, -0.1295013427734375, -0.17340457439422607, -0.19879138469696045, -0.1591203212738037, -0.08914971351623535, -0.02925550937652588, 0.029255151748657227, 0.06997251510620117, 0.09895694255828857, 0.11739122867584229, 0.11855030059814453, 0.09577274322509766, 0.08734703063964844, 0.09667444229125977, 0.06840693950653076, 0.015652775764465332, -0.012304425239562988, -0.045244812965393066, -0.12900793552398682, -0.19318866729736328, -0.19666874408721924, -0.19153225421905518, -0.20771169662475586, -0.2053055763244629, -0.1848057508468628, -0.19264447689056396, -0.170293927192688, -0.12224113941192627, -0.15358853340148926, -0.22705447673797607, -0.23580658435821533, -0.2245558500289917, -0.2493739128112793, -0.2765018939971924, -0.2919579744338989, -0.2671802043914795, -0.22683489322662354, -0.16688382625579834, -0.06448042392730713, 0.022865772247314453, 0.10956120491027832, 0.16978025436401367, 0.18478429317474365, 0.19825875759124756, 0.20321297645568848, 0.19229507446289062, 0.17800354957580566, 0.18436145782470703, 0.18773901462554932, 0.21867060661315918, 0.28181779384613037, 0.291140079498291, 0.26553452014923096, 0.24170148372650146, 0.21254229545593262, 0.17331159114837646, 0.12445366382598877, 0.09697186946868896, 0.11258399486541748, 0.11760210990905762, 0.09881031513214111, 0.11139225959777832, 0.13009357452392578, 0.12616348266601562, 0.11484169960021973, 0.08685052394866943, 0.05947089195251465, 0.06806027889251709, 0.08014893531799316, 0.03275465965270996, -0.0431668758392334, -0.058649659156799316, -0.037531375885009766, -0.054636597633361816, -0.08444452285766602, -0.09223949909210205, -0.09775149822235107, -0.09412777423858643, -0.08281612396240234, -0.08051896095275879, -0.09104251861572266, -0.11477506160736084, -0.139451265335083, -0.1508934497833252, -0.12309527397155762, -0.08667111396789551, -0.09658992290496826, -0.1348973512649536, -0.1273709535598755, -0.0728754997253418, -0.06085610389709473, -0.08289229869842529, -0.06969869136810303, -0.035433053970336914, -0.03116893768310547, -0.04806971549987793, -0.05214071273803711, -0.03450584411621094, -0.0016306638717651367, 0.04028630256652832, 0.08594858646392822, 0.0848761796951294, 0.035337090492248535, 0.028369545936584473, 0.05674099922180176, 0.044611573219299316, -0.0035039186477661133, -0.026986002922058105, 0.011646866798400879, 0.06899452209472656, 0.1039731502532959, 0.10594344139099121, 0.07043087482452393, 0.04450654983520508, 0.051702141761779785, 0.05136919021606445, 0.03271472454071045, 0.014568090438842773, -0.01602017879486084, -0.04900157451629639, -0.04820454120635986, -0.050519347190856934, -0.06636714935302734, -0.024294495582580566, 0.038257718086242676, 0.061052680015563965, 0.09081876277923584, 0.09517109394073486, 0.05078423023223877, 0.039409637451171875, 0.04535531997680664, 0.021636128425598145, 0.014443159103393555, 0.06069135665893555, 0.1006617546081543, 0.09076976776123047, 0.08043479919433594, 0.08438968658447266, 0.0724341869354248, 0.0692756175994873, 0.10480272769927979, 0.111733078956604, 0.07570517063140869, 0.08829951286315918, 0.14347600936889648, 0.15435349941253662, 0.1246786117553711, 0.12301301956176758, 0.1334613561630249, 0.11145973205566406, 0.08833432197570801, 0.08753407001495361, 0.05760550498962402, 0.012098312377929688, 0.027511239051818848, 0.06813168525695801, 0.08020365238189697, 0.07725930213928223, 0.07583916187286377, 0.07558894157409668, 0.07643818855285645, 0.07976043224334717, 0.07859385013580322, 0.07544088363647461, 0.06211960315704346, 0.05318939685821533, 0.07513236999511719, 0.08571946620941162, 0.06249523162841797, 0.05035972595214844, 0.06366097927093506, 0.050999999046325684, 0.001934051513671875, 0.03683662414550781, 0.1383603811264038, 0.11644434928894043, 0.058933258056640625, 0.08979332447052002, 0.11329567432403564, 0.12212085723876953, 0.12594032287597656, 0.0771644115447998, -0.027837157249450684, -0.03001117706298828, 0.054079651832580566, 0.055371999740600586, 0.032338500022888184, -0.050858378410339355, -0.09859788417816162, -0.03464043140411377, -0.0773460865020752, -0.16343629360198975, -0.12706303596496582, -0.07501983642578125, -0.08532512187957764, -0.06788921356201172, 0.030174612998962402, 0.09513235092163086, -0.013241767883300781, -0.10206091403961182, -0.026000261306762695, 0.013743877410888672, -0.049562931060791016, -0.09325122833251953, -0.04290783405303955, -0.008336544036865234, -0.03705954551696777, -0.06940197944641113, -0.11304676532745361, -0.1251208782196045, -0.09949350357055664, -0.10748350620269775, -0.11892664432525635, -0.07435870170593262, -0.06046772003173828, -0.13789892196655273, -0.17106854915618896, -0.09213554859161377, -0.0877237319946289, -0.15187156200408936, -0.21173274517059326, -0.23158633708953857, -0.17964911460876465, -0.21098220348358154, -0.26535117626190186, -0.20347261428833008, -0.08696186542510986, -0.141501784324646\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_44100::bitDepth = 24}}
\par
{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_24bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_24bit_44100}
{\xe \v aiff_stereo_24bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_24bit_44100::testBuffer = \{\{0.0, 2.384185791015625e-07, 1.7881393432617188e-06, 5.4836273193359375e-06, 1.3232231140136719e-05, 2.467632293701172e-05, 4.1961669921875e-05, 6.413459777832031e-05, -0.0005469322204589844, -0.0027649402618408203, -0.001909017562866211, 0.0035326480865478516, 0.0028171539306640625, 0.000813603401184082, 0.00023508071899414062, -0.0021113157272338867, 0.0001468658447265625, 0.014778494834899902, 0.04538834095001221, 0.04520773887634277, -0.004081845283508301, -0.06305968761444092, -0.0665360689163208, -0.029284119606018066, -0.024863362312316895, -0.01780259609222412, -0.013840913772583008, 0.019315004348754883, 0.08567023277282715, 0.04245483875274658, -0.04147696495056152, -0.02841663360595703, 0.009694337844848633, 0.01996481418609619, -0.00319063663482666, -0.053113460540771484, -0.027323126792907715, 0.06642353534698486, 0.10269403457641602, 0.10253250598907471, 0.08760249614715576, 0.03816401958465576, 0.05413031578063965, 0.08223843574523926, 0.05015301704406738, 0.02655482292175293, 0.0518268346786499, 0.05460524559020996, -0.000580906867980957, 0.0395054817199707, 0.10501348972320557, 0.057415008544921875, 0.013211846351623535, 0.034859538078308105, 0.05507814884185791, 0.04670369625091553, -0.01683640480041504, -0.09157049655914307, -0.08178138732910156, 0.003289341926574707, 0.04446220397949219, -0.0565570592880249, -0.13708782196044922, -0.08847522735595703, -0.02224898338317871, -0.015274286270141602, -0.028183579444885254, -0.03865182399749756, -0.05581164360046387, -0.043233394622802734, -0.02816152572631836, -0.01761162281036377, -0.033526062965393066, -0.08275163173675537, -0.10685598850250244, -0.1034555435180664, -0.11973357200622559, -0.09033203125, -0.04437124729156494, -0.09464144706726074, -0.1173853874206543, -0.10559892654418945, -0.08117079734802246, -0.0644904375076294, -0.12826251983642578, -0.15485632419586182, -0.0441133975982666, 0.023441195487976074, -0.0313950777053833, -0.010845184326171875, 0.004209995269775391, -0.04794716835021973, -0.09660530090332031, -0.07935786247253418, 0.022089362144470215, 0.06454586982727051, 0.006242275238037109, -0.053893327713012695, 0.009267091751098633, 0.0192720890045166, -0.12457668781280518, -0.16945278644561768, -0.06906521320343018, -0.018019914627075195, -0.00901186466217041, 0.04090762138366699, 0.05578315258026123, 0.04540598392486572, -0.017262578010559082, -0.09481668472290039, -0.09463560581207275, -0.0850372314453125, -0.07044601440429688, 0.044732093811035156, 0.14043903350830078, 0.0615311861038208, -0.0017768144607543945, 0.050705790519714355, 0.051418185234069824, -0.02617955207824707, 0.0013318061828613281, 0.10370314121246338, 0.12050795555114746, 0.1356261968612671, 0.1976931095123291, 0.14523100852966309, -0.010580658912658691, -0.0808025598526001, -0.025513291358947754, 0.07318198680877686, 0.11440527439117432, 0.14054787158966064, 0.19859600067138672, 0.226037859916687, 0.25968968868255615, 0.27517223358154297, 0.21891403198242188, 0.17249858379364014, 0.10510575771331787, 0.021207571029663086, 0.03359854221343994, 0.11546945571899414, 0.16277778148651123, 0.13610899448394775, 0.11561858654022217, 0.15818476676940918, 0.15215349197387695, 0.003849506378173828, -0.030636906623840332, 0.13052606582641602, 0.18443167209625244, 0.17312121391296387, 0.15424621105194092, 0.0742192268371582, 0.051267147064208984, 0.038919806480407715, 0.022106051445007324, 0.012888550758361816, -0.007709026336669922, 0.029566526412963867, 0.030662059783935547, -0.027154207229614258, 0.040636539459228516, 0.16303539276123047, 0.11336028575897217, -0.029920458793640137, -0.07883155345916748, -0.053902268409729004, -0.06685054302215576, -0.11553120613098145, -0.14421296119689941, -0.15514814853668213, -0.23572230339050293, -0.33848822116851807, -0.3083235025405884, -0.2027122974395752, -0.13567590713500977, -0.1538301706314087, -0.16901659965515137, -0.14754056930541992, -0.18767130374908447, -0.2352076768875122, -0.22752869129180908, -0.19818603992462158, -0.1912686824798584, -0.1811293363571167, -0.15598833560943604, -0.15092182159423828, -0.13190996646881104, -0.09050929546356201, -0.05414414405822754, -0.021764397621154785, -0.01615750789642334, -0.016031503677368164, 0.02736032009124756, 0.05744445323944092, 0.10349833965301514, 0.17580628395080566, 0.17315220832824707, 0.08343183994293213, -0.09277796745300293, -0.24751710891723633, -0.3203364610671997, -0.36222290992736816, -0.3456164598464966, -0.29457712173461914, -0.2208174467086792, -0.07722604274749756, 0.07686781883239746, 0.10222053527832031, 0.08138704299926758, 0.07167577743530273, 0.006896376609802246, -0.03144514560699463, -0.06453490257263184, -0.0998678207397461, -0.11557626724243164, -0.08657562732696533, -0.011487841606140137, 0.024655699729919434, 0.07710301876068115, 0.19258737564086914, 0.2757699489593506, 0.24917995929718018, 0.2547190189361572, 0.3233884572982788, 0.3651694059371948, 0.3467220067977905, 0.26609206199645996, 0.21415364742279053, 0.1451643705368042, 0.028246164321899414, -0.05506265163421631, -0.09485781192779541, -0.10834360122680664, -0.09765219688415527, -0.11472666263580322, -0.10827720165252686, -0.05115628242492676, -0.011539101600646973, 0.012971639633178711, 0.03045511245727539, 0.04645514488220215, 0.0342707633972168, 0.0549466609954834, 0.16332507133483887, 0.24224793910980225, 0.18761515617370605, 0.11179554462432861, 0.09352076053619385, 0.09492385387420654, 0.11606824398040771, 0.1413419246673584, 0.17592430114746094, 0.2018730640411377, 0.23069274425506592, 0.25766170024871826, 0.2663611173629761, 0.21774756908416748, 0.057196974754333496, -0.08907783031463623, -0.12986385822296143, -0.10977804660797119, -0.04542100429534912, -0.009626269340515137, -0.03966021537780762, -0.02337789535522461, 0.06328558921813965, 0.1187981367111206, 0.10761165618896484, 0.07837212085723877, 0.05231678485870361, 0.02169060707092285, -0.03322577476501465, -0.11377441883087158, -0.15057945251464844, -0.14534151554107666, -0.18364381790161133, -0.21993911266326904, -0.1961129903793335, -0.1525101661682129, -0.10219216346740723, -0.06866455078125, -0.07127976417541504, -0.08443140983581543, -0.07552826404571533, -0.049929141998291016, -0.023989200592041016, 0.013609647750854492, 0.0475459098815918, 0.02447795867919922, -0.04460704326629639, -0.0887378454208374, -0.11880159378051758, -0.16825449466705322, -0.188887357711792, -0.16724884510040283, -0.18829452991485596, -0.2464510202407837, -0.2575598955154419, -0.25703179836273193, -0.32140886783599854, -0.4187908172607422, -0.46495234966278076, -0.44499170780181885, -0.40246832370758057, -0.36982977390289307, -0.3331559896469116, -0.28196287155151367, -0.21289277076721191, -0.1061016321182251, 0.023185014724731445, 0.1438899040222168, 0.22921299934387207, 0.2681858539581299, 0.2650902271270752, 0.2512338161468506, 0.23415231704711914, 0.185766339302063, 0.1503525972366333, 0.14675557613372803, 0.14294695854187012, 0.16180360317230225, 0.2102292776107788, 0.23564505577087402, 0.23043131828308105, 0.2227400541305542, 0.1978968381881714, 0.16218268871307373, 0.13503003120422363, 0.1386406421661377, 0.1782851219177246, 0.18684566020965576, 0.1817244291305542, 0.2154783010482788, 0.2369520664215088, 0.23360908031463623, 0.22561335563659668, 0.19286930561065674, 0.1471778154373169, 0.12532472610473633, 0.1119149923324585, 0.05721092224121094, -0.02198469638824463, -0.04966306686401367, -0.038004159927368164, -0.04068195819854736, -0.04813385009765625, -0.033611416816711426, 0.0015609264373779297, 0.03492474555969238, 0.062181949615478516, 0.05607593059539795, 0.02305746078491211, -0.015040397644042969, -0.058673977851867676, -0.06413936614990234, -0.033275723457336426, -0.023733139038085938, -0.051869869232177734, -0.062258124351501465, -0.02007758617401123, 0.0335007905960083, 0.018722057342529297, -0.045569419860839844, -0.05470895767211914, -0.013467192649841309, 0.003751397132873535, -0.015442371368408203, -0.015690922737121582, -0.0004124641418457031, 0.014282703399658203, 0.04862391948699951, 0.08602631092071533, 0.08928334712982178, 0.04978299140930176, 0.027298450469970703, 0.02523481845855713, -0.008887529373168945, -0.0626990795135498, -0.07338690757751465, -0.020415782928466797, 0.02891695499420166, 0.028627634048461914, 0.0006459951400756836, -0.02116239070892334, -0.02348458766937256, -0.020406246185302734, -0.025342345237731934, -0.0307157039642334, -0.05211818218231201, -0.09596836566925049, -0.10975241661071777, -0.11185181140899658, -0.13977432250976562, -0.12009251117706299, -0.033278465270996094, 0.02582836151123047, 0.025653958320617676, 0.024453401565551758, 0.027688980102539062, 0.017926692962646484, -0.003493070602416992, -0.03810405731201172, -0.05226755142211914, -0.03413844108581543, -0.013208985328674316, 0.015181303024291992, 0.061293840408325195, 0.07893812656402588, 0.05792880058288574, 0.05221593379974365, 0.07590818405151367, 0.0980989933013916, 0.09836816787719727, 0.08257675170898438, 0.10029327869415283, 0.14767920970916748, 0.15175235271453857, 0.12836933135986328, 0.12066364288330078, 0.11740505695343018, 0.09483444690704346, 0.07702457904815674, 0.06738293170928955, 0.04576694965362549, 0.054335594177246094, 0.07475137710571289, 0.0679701566696167, 0.06158328056335449, 0.0871274471282959, 0.10982775688171387, 0.1124962568283081, 0.14089477062225342, 0.1595534086227417, 0.14389824867248535, 0.1335231065750122, 0.12735068798065186, 0.11833178997039795, 0.12708508968353271, 0.13970792293548584, 0.12860453128814697, 0.12168312072753906, 0.1123509407043457, 0.0898061990737915, 0.10416066646575928, 0.12547802925109863, 0.08377218246459961, 0.029072880744934082, 0.029830574989318848, 0.0531919002532959, 0.06806492805480957, 0.10254108905792236, 0.16148173809051514, 0.16373705863952637, 0.11879289150238037, 0.09678351879119873, 0.09448826313018799, 0.11196637153625488, 0.0865253210067749, 0.08291256427764893, 0.1306225061416626, 0.1262650489807129, 0.06681835651397705, -0.015099048614501953, -0.03066885471343994, -0.020777344703674316, 0.0024286508560180664, 0.060593605041503906, 0.042906880378723145, 0.05804896354675293, 0.151015043258667, 0.14868927001953125, 0.11505436897277832, 0.07175743579864502, -0.034134626388549805, -0.08304548263549805, -0.03961801528930664, -0.02117478847503662, -0.15327191352844238, -0.23960638046264648, -0.17718052864074707, -0.19424962997436523, -0.23183894157409668, -0.16763031482696533, -0.13181567192077637, -0.13127875328063965, -0.13432729244232178, -0.2262347936630249, -0.27295756340026855, -0.18733930587768555, -0.11765587329864502, -0.14694952964782715, -0.20652127265930176, -0.26227104663848877, -0.32015371322631836, -0.2792940139770508, -0.1860034465789795, -0.21686923503875732, -0.260317325592041\}, \{0.0, 1.1920928955078125e-07, 9.5367431640625e-07, 2.2649765014648438e-06, 6.079673767089844e-06, 1.0728836059570312e-05, 1.9073486328125e-05, 2.8252601623535156e-05, -0.00028443336486816406, -0.0018184185028076172, -0.004040360450744629, -0.0009396076202392578, 0.005484461784362793, 0.0015494823455810547, -0.015085816383361816, -0.04052770137786865, -0.017013192176818848, 0.058156728744506836, 0.06110811233520508, 0.029061317443847656, 0.02493727207183838, 0.013658523559570312, 0.016342520713806152, 0.018374919891357422, 0.00035190582275390625, -0.05628693103790283, -0.08475041389465332, -0.06700503826141357, -0.06602168083190918, -0.020487546920776367, 0.02539694309234619, 0.04383206367492676, 0.07882440090179443, 0.060941100120544434, 0.0014215707778930664, -0.04584240913391113, -0.03603529930114746, 0.05073809623718262, 0.05614018440246582, -0.032359957695007324, -0.0762777328491211, -0.04066777229309082, 0.04830479621887207, 0.05345571041107178, 0.011443853378295898, 0.047042131423950195, 0.05494797229766846, 0.02233409881591797, 0.030956745147705078, 0.016776442527770996, -0.048729896545410156, -0.08724474906921387, -0.06734800338745117, -0.03170347213745117, 0.02237570285797119, 0.04881787300109863, -0.03780686855316162, -0.08068060874938965, 0.0026967525482177734, 0.04529011249542236, -0.043489813804626465, -0.13510656356811523, -0.07515919208526611, 0.01721322536468506, 0.0002690553665161133, -0.06276512145996094, -0.04584014415740967, 0.005838990211486816, -0.0016624927520751953, 0.004529833793640137, 0.015653610229492188, -0.034490108489990234, -0.07896971702575684, -0.030033111572265625, 0.0215531587600708, -0.01460111141204834, -0.018313288688659668, 0.03889763355255127, 0.031894803047180176, -0.010246634483337402, -0.03298473358154297, -0.04892385005950928, -0.06786513328552246, -0.10695624351501465, -0.08287906646728516, 0.016762256622314453, 0.056908607482910156, -0.014988064765930176, -0.03499424457550049, 0.0065468549728393555, -0.031754493713378906, -0.10726630687713623, -0.11101329326629639, 0.009048700332641602, 0.0486222505569458, -0.04605662822723389, -0.07960951328277588, -0.02328813076019287, -0.004543185234069824, -0.09627437591552734, -0.05884528160095215, 0.10364174842834473, 0.09685170650482178, 0.045968055725097656, 0.03957819938659668, -0.03821003437042236, -0.05694437026977539, -0.035282135009765625, -0.029552817344665527, 0.0214536190032959, -0.012764334678649902, -0.08995842933654785, -0.001164078712463379, 0.13212764263153076, 0.08456242084503174, 0.00866079330444336, 0.047564148902893066, 0.07651090621948242, 0.06226646900177002, 0.0562746524810791, 0.02554464340209961, -0.03723573684692383, -0.04509866237640381, 0.023096799850463867, 0.09191429615020752, 0.08427095413208008, 0.015224456787109375, -0.030819296836853027, -0.028264760971069336, 0.03852987289428711, 0.09747922420501709, 0.0367586612701416, -0.000820159912109375, 0.0901191234588623, 0.17078077793121338, 0.17741632461547852, 0.13783752918243408, 0.054445743560791016, -0.03565347194671631, -0.047922492027282715, 0.03185164928436279, 0.10580718517303467, 0.12050068378448486, 0.10873579978942871, 0.12096941471099854, 0.11137521266937256, -0.0009993314743041992, -0.09393143653869629, -0.08326005935668945, -0.030612945556640625, 0.04101908206939697, 0.08980667591094971, 0.07309329509735107, 0.020840883255004883, 0.008647799491882324, 0.057555437088012695, 0.08286881446838379, 0.0620877742767334, 0.0716317892074585, 0.03436076641082764, -0.0571746826171875, -0.035356760025024414, 0.06958937644958496, 0.0750497579574585, -0.015622258186340332, -0.024648666381835938, 0.027065277099609375, 0.009716510772705078, -0.04723799228668213, -0.06331014633178711, -0.05821490287780762, -0.10388648509979248, -0.19476401805877686, -0.2072697877883911, -0.09448206424713135, 0.0004132986068725586, 0.01934182643890381, 0.0691826343536377, 0.11633479595184326, 0.01135551929473877, -0.1298971176147461, -0.12967932224273682, -0.07559013366699219, -0.11252033710479736, -0.17155182361602783, -0.151908278465271, -0.10677552223205566, -0.09174108505249023, -0.08288359642028809, -0.051115989685058594, -0.020130157470703125, -0.020738720893859863, -0.037920236587524414, -0.004592418670654297, 0.03259909152984619, 0.05020785331726074, 0.12079429626464844, 0.19067823886871338, 0.14487552642822266, 0.007581591606140137, -0.12455368041992188, -0.23856544494628906, -0.3154296875, -0.32566773891448975, -0.29761195182800293, -0.24967217445373535, -0.12093818187713623, 0.07095670700073242, 0.22127437591552734, 0.2874826192855835, 0.28826332092285156, 0.2610100507736206, 0.2187519073486328, 0.12443351745605469, -0.024654150009155273, -0.12971389293670654, -0.1268397569656372, -0.09034407138824463, -0.09249532222747803, -0.07477307319641113, 0.00041997432708740234, 0.08121109008789062, 0.08543229103088379, 0.053551673889160156, 0.0856635570526123, 0.1519777774810791, 0.19927501678466797, 0.22236084938049316, 0.22502970695495605, 0.1982957124710083, 0.1526890993118286, 0.08495473861694336, 0.016612887382507324, -0.010601282119750977, -0.008789420127868652, -0.06143343448638916, -0.12442648410797119, -0.08210349082946777, -0.04412245750427246, -0.06306672096252441, -0.07549571990966797, -0.05231630802154541, -0.023296833038330078, -0.016872286796569824, 0.03221428394317627, 0.05150938034057617, -0.03199601173400879, -0.09383046627044678, -0.08064031600952148, -0.06209611892700195, -0.0597383975982666, -0.013897180557250977, 0.058489441871643066, 0.08891427516937256, 0.1171952486038208, 0.17978763580322266, 0.2432715892791748, 0.2535783052444458, 0.20599758625030518, 0.14655327796936035, 0.10514390468597412, 0.08141136169433594, 0.05590486526489258, 0.015575289726257324, -0.04405009746551514, -0.0506972074508667, 0.051082611083984375, 0.11393773555755615, 0.04440605640411377, -0.03252267837524414, -0.052556633949279785, -0.08064007759094238, -0.1295013427734375, -0.17340457439422607, -0.19879138469696045, -0.1591203212738037, -0.08914971351623535, -0.02925550937652588, 0.029255151748657227, 0.06997251510620117, 0.09895694255828857, 0.11739122867584229, 0.11855030059814453, 0.09577274322509766, 0.08734703063964844, 0.09667444229125977, 0.06840693950653076, 0.015652775764465332, -0.012304425239562988, -0.045244812965393066, -0.12900793552398682, -0.19318866729736328, -0.19666874408721924, -0.19153225421905518, -0.20771169662475586, -0.2053055763244629, -0.1848057508468628, -0.19264447689056396, -0.170293927192688, -0.12224113941192627, -0.15358853340148926, -0.22705447673797607, -0.23580658435821533, -0.2245558500289917, -0.2493739128112793, -0.2765018939971924, -0.2919579744338989, -0.2671802043914795, -0.22683489322662354, -0.16688382625579834, -0.06448042392730713, 0.022865772247314453, 0.10956120491027832, 0.16978025436401367, 0.18478429317474365, 0.19825875759124756, 0.20321297645568848, 0.19229507446289062, 0.17800354957580566, 0.18436145782470703, 0.18773901462554932, 0.21867060661315918, 0.28181779384613037, 0.291140079498291, 0.26553452014923096, 0.24170148372650146, 0.21254229545593262, 0.17331159114837646, 0.12445366382598877, 0.09697186946868896, 0.11258399486541748, 0.11760210990905762, 0.09881031513214111, 0.11139225959777832, 0.13009357452392578, 0.12616348266601562, 0.11484169960021973, 0.08685052394866943, 0.05947089195251465, 0.06806027889251709, 0.08014893531799316, 0.03275465965270996, -0.0431668758392334, -0.058649659156799316, -0.037531375885009766, -0.054636597633361816, -0.08444452285766602, -0.09223949909210205, -0.09775149822235107, -0.09412777423858643, -0.08281612396240234, -0.08051896095275879, -0.09104251861572266, -0.11477506160736084, -0.139451265335083, -0.1508934497833252, -0.12309527397155762, -0.08667111396789551, -0.09658992290496826, -0.1348973512649536, -0.1273709535598755, -0.0728754997253418, -0.06085610389709473, -0.08289229869842529, -0.06969869136810303, -0.035433053970336914, -0.03116893768310547, -0.04806971549987793, -0.05214071273803711, -0.03450584411621094, -0.0016306638717651367, 0.04028630256652832, 0.08594858646392822, 0.0848761796951294, 0.035337090492248535, 0.028369545936584473, 0.05674099922180176, 0.044611573219299316, -0.0035039186477661133, -0.026986002922058105, 0.011646866798400879, 0.06899452209472656, 0.1039731502532959, 0.10594344139099121, 0.07043087482452393, 0.04450654983520508, 0.051702141761779785, 0.05136919021606445, 0.03271472454071045, 0.014568090438842773, -0.01602017879486084, -0.04900157451629639, -0.04820454120635986, -0.050519347190856934, -0.06636714935302734, -0.024294495582580566, 0.038257718086242676, 0.061052680015563965, 0.09081876277923584, 0.09517109394073486, 0.05078423023223877, 0.039409637451171875, 0.04535531997680664, 0.021636128425598145, 0.014443159103393555, 0.06069135665893555, 0.1006617546081543, 0.09076976776123047, 0.08043479919433594, 0.08438968658447266, 0.0724341869354248, 0.0692756175994873, 0.10480272769927979, 0.111733078956604, 0.07570517063140869, 0.08829951286315918, 0.14347600936889648, 0.15435349941253662, 0.1246786117553711, 0.12301301956176758, 0.1334613561630249, 0.11145973205566406, 0.08833432197570801, 0.08753407001495361, 0.05760550498962402, 0.012098312377929688, 0.027511239051818848, 0.06813168525695801, 0.08020365238189697, 0.07725930213928223, 0.07583916187286377, 0.07558894157409668, 0.07643818855285645, 0.07976043224334717, 0.07859385013580322, 0.07544088363647461, 0.06211960315704346, 0.05318939685821533, 0.07513236999511719, 0.08571946620941162, 0.06249523162841797, 0.05035972595214844, 0.06366097927093506, 0.050999999046325684, 0.001934051513671875, 0.03683662414550781, 0.1383603811264038, 0.11644434928894043, 0.058933258056640625, 0.08979332447052002, 0.11329567432403564, 0.12212085723876953, 0.12594032287597656, 0.0771644115447998, -0.027837157249450684, -0.03001117706298828, 0.054079651832580566, 0.055371999740600586, 0.032338500022888184, -0.050858378410339355, -0.09859788417816162, -0.03464043140411377, -0.0773460865020752, -0.16343629360198975, -0.12706303596496582, -0.07501983642578125, -0.08532512187957764, -0.06788921356201172, 0.030174612998962402, 0.09513235092163086, -0.013241767883300781, -0.10206091403961182, -0.026000261306762695, 0.013743877410888672, -0.049562931060791016, -0.09325122833251953, -0.04290783405303955, -0.008336544036865234, -0.03705954551696777, -0.06940197944641113, -0.11304676532745361, -0.1251208782196045, -0.09949350357055664, -0.10748350620269775, -0.11892664432525635, -0.07435870170593262, -0.06046772003173828, -0.13789892196655273, -0.17106854915618896, -0.09213554859161377, -0.0877237319946289, -0.15187156200408936, -0.21173274517059326, -0.23158633708953857, -0.17964911460876465, -0.21098220348358154, -0.26535117626190186, -0.20347261428833008, -0.08696186542510986, -0.141501784324646\}\}}}
\par
{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_24bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000}
{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, 0.0, 7.152557373046875e-07, 2.6226043701171875e-06, 6.556510925292969e-06, 1.2040138244628906e-05, 2.0742416381835938e-05, 3.2067298889160156e-05, 4.7087669372558594e-05, 6.473064422607422e-05, 8.678436279296875e-05, 0.00011146068572998047, 0.00014066696166992188, 0.00017261505126953125, 0.00020933151245117188, 0.00024831295013427734, 0.0002923011779785156, 0.0003383159637451172, 0.0003935098648071289, 0.00047397613525390625, 0.0005924701690673828, 0.0007510185241699219, 0.0009467601776123047, 0.0011757612228393555, 0.0014437437057495117, 0.0017348527908325195, 0.002057194709777832, 0.0024052858352661133, 0.00276792049407959, 0.003163456916809082, 0.0035680532455444336, 0.003991246223449707, 0.004441976547241211, 0.004886507987976074, 0.005361437797546387, 0.005846261978149414, 0.006371617317199707, 0.007035374641418457, 0.007773995399475098, 0.008626341819763184, 0.009595155715942383, 0.010571837425231934, 0.011674165725708008, 0.012801051139831543, 0.0139085054397583, 0.015142679214477539, 0.01630091667175293, 0.01747608184814453, 0.018746137619018555, 0.01986110210418701, 0.02108168601989746, 0.022292733192443848, 0.02333521842956543, 0.024582505226135254, 0.025773048400878906, 0.027095913887023926, 0.028706669807434082, 0.030106067657470703, 0.03176474571228027, 0.033440470695495605, 0.03486049175262451, 0.036620497703552246, 0.03804290294647217, 0.03943753242492676, 0.04100167751312256, 0.042027831077575684, 0.04335308074951172, 0.04441177845001221, 0.04517197608947754, 0.04625880718231201, 0.046680331230163574, 0.04720878601074219, 0.047441959381103516, 0.04705607891082764, 0.04693794250488281, 0.04610264301300049, 0.04532325267791748, 0.044411540031433105, 0.043007612228393555, 0.04193687438964844, 0.04024386405944824, 0.03873574733734131, 0.03707301616668701, 0.035071372985839844, 0.03341710567474365, 0.03115224838256836, 0.02919602394104004, 0.026967287063598633, 0.0245436429977417, 0.022371292114257812, 0.019638657569885254, 0.017338991165161133, 0.014601349830627441, 0.011943221092224121, 0.009397029876708984, 0.006356716156005859, 0.0038193464279174805, 0.0006439685821533203, -0.002169370651245117, -0.005274295806884766, -0.008595466613769531, -0.011147618293762207, -0.01512765884399414, -0.017611026763916016, -0.020638704299926758, -0.025217652320861816, -0.026407361030578613, -0.031000494956970215, -0.035413146018981934, -0.035219788551330566, -0.04285740852355957, -0.04419386386871338, -0.07065105438232422, -0.1564619541168213, -0.08552801609039307, 0.24239099025726318, 0.3864394426345825, 0.12467241287231445, -0.08393871784210205, 0.0599592924118042, 0.25836503505706787, 0.19484519958496094, 0.030383586883544922, 0.03242063522338867, 0.1321181058883667, 0.2580540180206299, 0.35796380043029785, 0.24705147743225098, 0.018767356872558594, -0.12914705276489258, -0.15051043033599854, 0.03967642784118652, 0.2507213354110718, 0.1530904769897461, -0.12343156337738037, -0.22272634506225586, -0.06961596012115479, 0.047440409660339355, -0.023664355278015137, -0.06798660755157471, -0.08156132698059082, -0.19806981086730957, -0.3167363405227661, -0.36041784286499023, -0.25601136684417725, -0.03191184997558594, -0.0019611120223999023, -0.1955111026763916, -0.2977677583694458, -0.3072565793991089, -0.35410332679748535, -0.3385869264602661, -0.3335835933685303, -0.4074738025665283, -0.30776309967041016, -0.16734051704406738, -0.2780416011810303, -0.38017547130584717, -0.3817152976989746, -0.47177445888519287, -0.4866825342178345, -0.3023874759674072, -0.17320525646209717, -0.3024212121963501, -0.4500840902328491, -0.4194523096084595, -0.45877671241760254, -0.4649801254272461, -0.2514234781265259, -0.27913451194763184, -0.4962806701660156, -0.36953091621398926, -0.18422472476959229, -0.2835296392440796, -0.3840268850326538, -0.35425662994384766, -0.34723663330078125, -0.38039541244506836, -0.3292655944824219, -0.20911633968353271, -0.2077404260635376, -0.35398340225219727, -0.4257551431655884, -0.2539527416229248, -0.06363248825073242, -0.17776715755462646, -0.33460700511932373, -0.19255638122558594, -0.04315447807312012, -0.09097802639007568, -0.1792086362838745, -0.2713695764541626, -0.22517192363739014, -0.015021204948425293, 0.019883275032043457, -0.08760619163513184, -0.0902794599533081, -0.06332087516784668, -0.05756986141204834, -0.08678078651428223, -0.08119654655456543, 0.12865030765533447, 0.2406013011932373, 0.041402578353881836, -0.015124917030334473, 0.1329936981201172, 0.08767187595367432, -0.01891481876373291, 0.06548357009887695, 0.18902921676635742, 0.2651712894439697, 0.309159517288208, 0.24167048931121826, 0.12716591358184814, 0.1285635232925415, 0.24710190296173096, 0.3353545665740967, 0.3048640489578247, 0.23640525341033936, 0.19801568984985352, 0.24145936965942383, 0.38207805156707764, 0.39572572708129883, 0.242537260055542, 0.22294330596923828, 0.3719959259033203, 0.47042763233184814, 0.43123185634613037, 0.3625662326812744, 0.383408784866333, 0.3847602605819702, 0.2966369390487671, 0.29896271228790283, 0.4360523223876953, 0.4896125793457031, 0.39724302291870117, 0.3815962076187134, 0.4534264802932739, 0.4414411783218384, 0.3999319076538086, 0.35165393352508545, 0.35485661029815674, 0.4814718961715698, 0.44379913806915283, 0.29586541652679443, 0.37749183177948, 0.4630330801010132, 0.42011332511901855, 0.4437040090560913, 0.47643351554870605, 0.435949444770813, 0.3261157274246216, 0.27746081352233887, 0.4226391315460205, 0.4980888366699219, 0.38505077362060547, 0.30010950565338135, 0.2888467311859131, 0.3689159154891968, 0.445814847946167, 0.3725932836532593, 0.2911602258682251, 0.22846055030822754, 0.22605085372924805, 0.40893709659576416, 0.42775416374206543, 0.20836222171783447, 0.2333357334136963, 0.39804911613464355, 0.3212165832519531, 0.195892333984375, 0.22362124919891357, 0.26487624645233154, 0.22749567031860352, 0.1369870901107788, 0.12077617645263672, 0.24939501285552979, 0.26789629459381104, 0.11335766315460205, 0.12515676021575928, 0.2685023546218872, 0.24835801124572754, 0.13637471199035645, 0.06915116310119629, 0.031465768814086914, 0.033051371574401855, 0.07739055156707764, 0.14928090572357178, 0.1548449993133545, 0.03806579113006592, -0.013826131820678711, 0.028536200523376465, 0.011515259742736816, 0.042510986328125, 0.1012643575668335, 0.010776638984680176, -0.06198525428771973, -0.07137572765350342, -0.1317131519317627, -0.05361461639404297, 0.06206834316253662, -0.06432950496673584, -0.12048935890197754, 0.009034037590026855, -0.0639646053314209, -0.19418513774871826, -0.11967575550079346, -0.13497543334960938, -0.24109327793121338, -0.13556921482086182, 0.01042783260345459, -0.0417020320892334, -0.1601254940032959, -0.21524441242218018, -0.21687912940979004, -0.18989944458007812, -0.22562241554260254, -0.3065894842147827, -0.21904540061950684, -0.07379841804504395, -0.15297472476959229, -0.23710381984710693, -0.16524136066436768, -0.18823754787445068, -0.2588622570037842, -0.23817908763885498, -0.2954603433609009, -0.3749955892562866, -0.2390432357788086, -0.04951882362365723, -0.10409390926361084, -0.26441144943237305, -0.2961171865463257, -0.3206024169921875, -0.37296855449676514, -0.283231258392334, -0.14088594913482666, -0.1253669261932373, -0.1848999261856079, -0.21555650234222412, -0.23587965965270996, -0.26917731761932373, -0.23497498035430908, -0.16667389869689941, -0.1993619203567505, -0.24594950675964355, -0.21152019500732422, -0.22987282276153564, -0.2938957214355469, -0.20448064804077148, -0.04813194274902344, -0.10050129890441895, -0.24380457401275635, -0.20102977752685547, -0.09385848045349121, -0.13394904136657715, -0.23743677139282227, -0.22063028812408447, -0.10554337501525879, -0.05075728893280029, -0.04014158248901367, -0.03482246398925781, -0.09469401836395264, -0.1707063913345337, -0.18545877933502197, -0.0828554630279541, 0.03270363807678223, -0.029465794563293457, -0.08564865589141846, -0.008828520774841309, 0.023022890090942383, 0.04940974712371826, 0.07871699333190918, 0.00938403606414795, -0.020748615264892578, 0.015776991844177246, -0.013007640838623047, -0.016423821449279785, 0.07607519626617432, 0.13856661319732666, 0.17144083976745605, 0.19836103916168213, 0.14312708377838135, 0.08844685554504395, 0.09385466575622559, 0.13057422637939453, 0.19418883323669434, 0.1656550168991089, 0.14820384979248047, 0.2732487916946411, 0.26032912731170654, 0.15827274322509766, 0.23128819465637207, 0.2577781677246094, 0.19526267051696777, 0.26577723026275635, 0.3350207805633545, 0.27855539321899414, 0.20366811752319336, 0.2120654582977295, 0.3471252918243408, 0.4206430912017822, 0.33420276641845703, 0.3273230791091919, 0.3509242534637451, 0.2829993963241577, 0.332008957862854, 0.404524564743042, 0.3320397138595581, 0.3025747537612915, 0.3695492744445801, 0.4585667848587036, 0.5032308101654053, 0.43179070949554443, 0.36614155769348145, 0.3820614814758301, 0.39749717712402344, 0.37503886222839355, 0.34576117992401123, 0.42437076568603516, 0.5453416109085083, 0.48537445068359375, 0.35331857204437256, 0.37486279010772705, 0.4858689308166504, 0.5147905349731445, 0.43232786655426025, 0.3892557621002197, 0.4649350643157959, 0.5095640420913696, 0.43350350856781006, 0.3718158006668091, 0.4326080083847046, 0.49584925174713135, 0.45596742630004883, 0.43474292755126953, 0.47605621814727783, 0.47333502769470215, 0.4404726028442383, 0.3915853500366211, 0.33557140827178955, 0.3999840021133423, 0.5150893926620483, 0.4970437288284302, 0.42444562911987305, 0.4048506021499634, 0.39621078968048096, 0.3801177740097046, 0.3829214572906494, 0.4082350730895996, 0.4241880178451538, 0.41378724575042725, 0.3986128568649292, 0.3851116895675659, 0.36377692222595215, 0.35513532161712646, 0.3565793037414551, 0.33568620681762695, 0.35301685333251953, 0.3977299928665161, 0.3435029983520508, 0.296980619430542, 0.3564276695251465, 0.3605707883834839, 0.30052828788757324, 0.2764015197753906, 0.28262293338775635, 0.3255685567855835, 0.3272974491119385, 0.25475525856018066, 0.25814247131347656, 0.3108431100845337, 0.2854355573654175, 0.24884772300720215, 0.2329423427581787, 0.21366536617279053, 0.24191498756408691, 0.2739831209182739, 0.2532503604888916, 0.22822248935699463, 0.1980072259902954, 0.1699124574661255, 0.19997727870941162, 0.22876441478729248, 0.18896055221557617, 0.16018569469451904, 0.19124722480773926, 0.20936596393585205, 0.17635905742645264, 0.12853789329528809, 0.12448525428771973, 0.17805540561676025, 0.1921987533569336, 0.1364384889602661, 0.11728966236114502, 0.12717628479003906, 0.1095055341720581, 0.11255598068237305, 0.11501777172088623, 0.09776890277862549\}, \{-1.1920928955078125e-07, -1.1920928955078125e-07, 4.76837158203125e-07, 9.5367431640625e-07, 2.9802322387695312e-06, 5.125999450683594e-06, 9.5367431640625e-06, 1.3828277587890625e-05, 2.1338462829589844e-05, 2.872943878173828e-05, 3.886222839355469e-05, 4.971027374267578e-05, 6.318092346191406e-05, 7.724761962890625e-05, 9.381771087646484e-05, 0.0001112222671508789, 0.0001310110092163086, 0.00015163421630859375, 0.0001760721206665039, 0.00021255016326904297, 0.0002651214599609375, 0.00033676624298095703, 0.0004240274429321289, 0.0005271434783935547, 0.0006465911865234375, 0.0007777214050292969, 0.0009214878082275391, 0.0010780096054077148, 0.0012400150299072266, 0.0014175176620483398, 0.0015987157821655273, 0.0017883777618408203, 0.0019905567169189453, 0.0021893978118896484, 0.002402782440185547, 0.0026192665100097656, 0.0028554201126098633, 0.003152132034301758, 0.0034835338592529297, 0.003865361213684082, 0.0042994022369384766, 0.004737257957458496, 0.005231022834777832, 0.005736231803894043, 0.006232142448425293, 0.006785392761230469, 0.0073043107986450195, 0.007830977439880371, 0.008400201797485352, 0.008899331092834473, 0.009447097778320312, 0.009988665580749512, 0.01045691967010498, 0.011014819145202637, 0.01154935359954834, 0.012141227722167969, 0.012863636016845703, 0.01349031925201416, 0.014233708381652832, 0.014984607696533203, 0.015620589256286621, 0.016409993171691895, 0.017046451568603516, 0.017672181129455566, 0.018372297286987305, 0.018832921981811523, 0.01942622661590576, 0.019900798797607422, 0.020241737365722656, 0.020727872848510742, 0.02091801166534424, 0.02115333080291748, 0.021259307861328125, 0.021084904670715332, 0.021033287048339844, 0.020658016204833984, 0.02030956745147705, 0.01990044116973877, 0.0192716121673584, 0.018791675567626953, 0.01803290843963623, 0.017357468605041504, 0.016611933708190918, 0.015715599060058594, 0.014973640441894531, 0.013959407806396484, 0.013082146644592285, 0.012084126472473145, 0.010997653007507324, 0.010024309158325195, 0.008800506591796875, 0.007768392562866211, 0.006543517112731934, 0.005352020263671875, 0.004207611083984375, 0.002852201461791992, 0.001705765724182129, 0.00028133392333984375, -0.0009337663650512695, -0.0023986101150512695, -0.0038579702377319336, -0.004896640777587891, -0.006933093070983887, -0.007810473442077637, -0.009076595306396484, -0.011730790138244629, -0.011400580406188965, -0.013871192932128906, -0.01661384105682373, -0.014528751373291016, -0.020139217376708984, -0.020017504692077637, -0.04427051544189453, -0.1284855604171753, -0.055773019790649414, 0.27432501316070557, 0.4197641611099243, 0.16023647785186768, -0.046770572662353516, 0.09858953952789307, 0.29926955699920654, 0.23687148094177246, 0.07439267635345459, 0.07832813262939453, 0.17903292179107666, 0.3071831464767456, 0.4082520008087158, 0.29867780208587646, 0.07255029678344727, -0.07463467121124268, -0.09422111511230469, 0.09741127490997314, 0.30896997451782227, 0.21336793899536133, -0.06238079071044922, -0.16082358360290527, -0.0059626102447509766, 0.11109304428100586, 0.04118692874908447, -0.001970529556274414, -0.01568758487701416, -0.1308119297027588, -0.2494492530822754, -0.29343879222869873, -0.18807709217071533, 0.035208940505981445, 0.06518185138702393, -0.12823379039764404, -0.23186469078063965, -0.241227388381958, -0.28888583183288574, -0.2745392322540283, -0.269575834274292, -0.3450504541397095, -0.24619364738464355, -0.10659360885620117, -0.2191087007522583, -0.3218768835067749, -0.32504284381866455, -0.41658055782318115, -0.43256640434265137, -0.2504643201828003, -0.12248098850250244, -0.25351500511169434, -0.4031703472137451, -0.3739124536514282, -0.41554903984069824, -0.4233818054199219, -0.2119276523590088, -0.241904616355896, -0.4607759714126587, -0.33654630184173584, -0.15313732624053955, -0.25476253032684326, -0.3576667308807373, -0.32992756366729736, -0.32559192180633545, -0.360870361328125, -0.31231582164764404, -0.1946035623550415, -0.1954578161239624, -0.3444420099258423, -0.4183681011199951, -0.24929380416870117, -0.06143510341644287, -0.1780107021331787, -0.33765077590942383, -0.19781625270843506, -0.051230788230895996, -0.10136687755584717, -0.19206678867340088, -0.28691720962524414, -0.24281489849090576, -0.03552901744842529, -0.0028706789016723633, -0.11286568641662598, -0.11816763877868652, -0.09310948848724365, -0.09014451503753662, -0.121329665184021, -0.11799275875091553, 0.08926558494567871, 0.19953036308288574, -0.0023943185806274414, -0.060732245445251465, 0.08560192584991455, 0.03772270679473877, -0.07008719444274902, 0.01198279857635498, 0.1335434913635254, 0.20849096775054932, 0.25003790855407715, 0.18151795864105225, 0.06548619270324707, 0.0647268295288086, 0.18266057968139648, 0.26894938945770264, 0.23718655109405518, 0.16832876205444336, 0.1278526782989502, 0.170754075050354, 0.3106015920639038, 0.32252490520477295, 0.16959261894226074, 0.1489201784133911, 0.2968308925628662, 0.3956648111343384, 0.3551570177078247, 0.2863428592681885, 0.3076368570327759, 0.3077211380004883, 0.22010397911071777, 0.22251105308532715, 0.35890650749206543, 0.4136618375778198, 0.32105469703674316, 0.3053661584854126, 0.37843775749206543, 0.3661247491836548, 0.3255974054336548, 0.2784233093261719, 0.2815166711807251, 0.40967857837677, 0.3726658821105957, 0.22540318965911865, 0.3089485168457031, 0.39496302604675293, 0.35351812839508057, 0.37870705127716064, 0.4121500253677368, 0.3738086223602295, 0.2652316093444824, 0.21804594993591309, 0.3653709888458252, 0.4419715404510498, 0.3310946226119995, 0.2478959560394287, 0.2383410930633545, 0.3208655118942261, 0.39932775497436523, 0.3284567594528198, 0.24911844730377197, 0.18835735321044922, 0.1885216236114502, 0.3732907772064209, 0.3946683406829834, 0.1775580644607544, 0.20476579666137695, 0.37214088439941406, 0.297365665435791, 0.17474329471588135, 0.20479297637939453, 0.24847817420959473, 0.21382462978363037, 0.12556719779968262, 0.11218321323394775, 0.24311590194702148, 0.26419734954833984, 0.11228275299072266, 0.12632155418395996, 0.272489070892334, 0.25454258918762207, 0.14522814750671387, 0.08058357238769531, 0.04517817497253418, 0.04956936836242676, 0.09593117237091064, 0.1704394817352295, 0.17833828926086426, 0.06362438201904297, 0.01445615291595459, 0.05865514278411865, 0.044203758239746094, 0.07741427421569824, 0.1379101276397705, 0.050028204917907715, -0.021233439445495605, -0.028426647186279297, -0.0866243839263916, -0.00715327262878418, 0.11104357242584229, -0.014105677604675293, -0.06869196891784668, 0.06297874450683594, -0.009259462356567383, -0.13739478588104248, -0.0614476203918457, -0.0759890079498291, -0.18007338047027588, -0.07402598857879639, 0.0731356143951416, 0.022660255432128906, -0.09563624858856201, -0.14927184581756592, -0.15022361278533936, -0.12320315837860107, -0.15738558769226074, -0.2383946180343628, -0.1504288911819458, -0.004198789596557617, -0.08409810066223145, -0.167488694190979, -0.09536778926849365, -0.11905217170715332, -0.18887794017791748, -0.16894876956939697, -0.2267364263534546, -0.30585145950317383, -0.17114698886871338, 0.018334507942199707, -0.036666154861450195, -0.19846463203430176, -0.23017489910125732, -0.25592732429504395, -0.3093768358230591, -0.22000503540039062, -0.07946312427520752, -0.06471645832061768, -0.12550139427185059, -0.15791165828704834, -0.17901134490966797, -0.21424496173858643, -0.18137967586517334, -0.11450648307800293, -0.14938223361968994, -0.19720280170440674, -0.16490375995635986, -0.18506693840026855, -0.25076162815093994, -0.16370618343353271, -0.008970379829406738, -0.06370353698730469, -0.20910346508026123, -0.1683253049850464, -0.06367373466491699, -0.10563445091247559, -0.2116776704788208, -0.19709527492523193, -0.084259033203125, -0.03211808204650879, -0.02363431453704834, -0.021051764488220215, -0.0831899642944336, -0.1616666316986084, -0.17903828620910645, -0.07862436771392822, 0.034129977226257324, -0.030289053916931152, -0.08910930156707764, -0.014927148818969727, 0.01462090015411377, 0.03817439079284668, 0.06535124778747559, -0.006643414497375488, -0.039221882820129395, -0.004878997802734375, -0.036478400230407715, -0.0419083833694458, 0.047892212867736816, 0.10803020000457764, 0.1389247179031372, 0.16310596466064453, 0.10615682601928711, 0.049030423164367676, 0.052176713943481445, 0.08721923828125, 0.14809000492095947, 0.1180877685546875, 0.09867644309997559, 0.22142601013183594, 0.20741891860961914, 0.10291719436645508, 0.1743375062942505, 0.1995682716369629, 0.13473773002624512, 0.20452332496643066, 0.272092342376709, 0.21377480030059814, 0.13840901851654053, 0.1448214054107666, 0.27900075912475586, 0.35206472873687744, 0.263651967048645, 0.256550669670105, 0.2792929410934448, 0.20995938777923584, 0.25940072536468506, 0.330751895904541, 0.2575054168701172, 0.22848761081695557, 0.2942301034927368, 0.3834885358810425, 0.42849528789520264, 0.35599660873413086, 0.29115796089172363, 0.30705058574676514, 0.32216978073120117, 0.3010164499282837, 0.27143406867980957, 0.35044872760772705, 0.47260582447052, 0.412439227104187, 0.2817457914352417, 0.3042030334472656, 0.41543304920196533, 0.4460902214050293, 0.364154577255249, 0.3222181797027588, 0.39972615242004395, 0.44491374492645264, 0.37071549892425537, 0.3104130029678345, 0.3722681999206543, 0.4377039670944214, 0.39897966384887695, 0.3796654939651489, 0.4229189157485962, 0.4215703010559082, 0.39108705520629883, 0.3437778949737549, 0.2898319959640503, 0.356526255607605, 0.47335922718048096, 0.45785844326019287, 0.38714730739593506, 0.36984479427337646, 0.36363863945007324, 0.3495290279388428, 0.3550088405609131, 0.3824489116668701, 0.40094733238220215, 0.3930283784866333, 0.3800544738769531, 0.3692972660064697, 0.3501228094100952, 0.34415674209594727, 0.34807658195495605, 0.3295656442642212, 0.3497049808502197, 0.39665985107421875, 0.34521484375, 0.301041841506958, 0.3629206418991089, 0.36975300312042236, 0.31182050704956055, 0.2904839515686035, 0.2989327907562256, 0.3443582057952881, 0.3487238883972168, 0.27816474437713623, 0.2842766046524048, 0.338948130607605, 0.3158252239227295, 0.28169405460357666, 0.26747190952301025, 0.25088953971862793, 0.28097569942474365, 0.31500864028930664, 0.2966419458389282, 0.27289509773254395, 0.24506640434265137, 0.21863305568695068, 0.2501581907272339, 0.2813589572906494, 0.24244964122772217, 0.21546220779418945, 0.24827325344085693, 0.2670714855194092, 0.2362205982208252, 0.18936467170715332, 0.18621742725372314, 0.24160587787628174, 0.25594615936279297, 0.2015317678451538, 0.18361639976501465, 0.19353771209716797, 0.1773679256439209, 0.1806330680847168, 0.18324732780456543, 0.16733908653259277\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_48000::bitDepth = 24}}
\par
{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_24bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_24bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_24bit_48000}
{\xe \v aiff_stereo_24bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_24bit_48000::testBuffer = \{\{0.0, 0.0, 7.152557373046875e-07, 2.6226043701171875e-06, 6.556510925292969e-06, 1.2040138244628906e-05, 2.0742416381835938e-05, 3.2067298889160156e-05, 4.7087669372558594e-05, 6.473064422607422e-05, 8.678436279296875e-05, 0.00011146068572998047, 0.00014066696166992188, 0.00017261505126953125, 0.00020933151245117188, 0.00024831295013427734, 0.0002923011779785156, 0.0003383159637451172, 0.0003935098648071289, 0.00047397613525390625, 0.0005924701690673828, 0.0007510185241699219, 0.0009467601776123047, 0.0011757612228393555, 0.0014437437057495117, 0.0017348527908325195, 0.002057194709777832, 0.0024052858352661133, 0.00276792049407959, 0.003163456916809082, 0.0035680532455444336, 0.003991246223449707, 0.004441976547241211, 0.004886507987976074, 0.005361437797546387, 0.005846261978149414, 0.006371617317199707, 0.007035374641418457, 0.007773995399475098, 0.008626341819763184, 0.009595155715942383, 0.010571837425231934, 0.011674165725708008, 0.012801051139831543, 0.0139085054397583, 0.015142679214477539, 0.01630091667175293, 0.01747608184814453, 0.018746137619018555, 0.01986110210418701, 0.02108168601989746, 0.022292733192443848, 0.02333521842956543, 0.024582505226135254, 0.025773048400878906, 0.027095913887023926, 0.028706669807434082, 0.030106067657470703, 0.03176474571228027, 0.033440470695495605, 0.03486049175262451, 0.036620497703552246, 0.03804290294647217, 0.03943753242492676, 0.04100167751312256, 0.042027831077575684, 0.04335308074951172, 0.04441177845001221, 0.04517197608947754, 0.04625880718231201, 0.046680331230163574, 0.04720878601074219, 0.047441959381103516, 0.04705607891082764, 0.04693794250488281, 0.04610264301300049, 0.04532325267791748, 0.044411540031433105, 0.043007612228393555, 0.04193687438964844, 0.04024386405944824, 0.03873574733734131, 0.03707301616668701, 0.035071372985839844, 0.03341710567474365, 0.03115224838256836, 0.02919602394104004, 0.026967287063598633, 0.0245436429977417, 0.022371292114257812, 0.019638657569885254, 0.017338991165161133, 0.014601349830627441, 0.011943221092224121, 0.009397029876708984, 0.006356716156005859, 0.0038193464279174805, 0.0006439685821533203, -0.002169370651245117, -0.005274295806884766, -0.008595466613769531, -0.011147618293762207, -0.01512765884399414, -0.017611026763916016, -0.020638704299926758, -0.025217652320861816, -0.026407361030578613, -0.031000494956970215, -0.035413146018981934, -0.035219788551330566, -0.04285740852355957, -0.04419386386871338, -0.07065105438232422, -0.1564619541168213, -0.08552801609039307, 0.24239099025726318, 0.3864394426345825, 0.12467241287231445, -0.08393871784210205, 0.0599592924118042, 0.25836503505706787, 0.19484519958496094, 0.030383586883544922, 0.03242063522338867, 0.1321181058883667, 0.2580540180206299, 0.35796380043029785, 0.24705147743225098, 0.018767356872558594, -0.12914705276489258, -0.15051043033599854, 0.03967642784118652, 0.2507213354110718, 0.1530904769897461, -0.12343156337738037, -0.22272634506225586, -0.06961596012115479, 0.047440409660339355, -0.023664355278015137, -0.06798660755157471, -0.08156132698059082, -0.19806981086730957, -0.3167363405227661, -0.36041784286499023, -0.25601136684417725, -0.03191184997558594, -0.0019611120223999023, -0.1955111026763916, -0.2977677583694458, -0.3072565793991089, -0.35410332679748535, -0.3385869264602661, -0.3335835933685303, -0.4074738025665283, -0.30776309967041016, -0.16734051704406738, -0.2780416011810303, -0.38017547130584717, -0.3817152976989746, -0.47177445888519287, -0.4866825342178345, -0.3023874759674072, -0.17320525646209717, -0.3024212121963501, -0.4500840902328491, -0.4194523096084595, -0.45877671241760254, -0.4649801254272461, -0.2514234781265259, -0.27913451194763184, -0.4962806701660156, -0.36953091621398926, -0.18422472476959229, -0.2835296392440796, -0.3840268850326538, -0.35425662994384766, -0.34723663330078125, -0.38039541244506836, -0.3292655944824219, -0.20911633968353271, -0.2077404260635376, -0.35398340225219727, -0.4257551431655884, -0.2539527416229248, -0.06363248825073242, -0.17776715755462646, -0.33460700511932373, -0.19255638122558594, -0.04315447807312012, -0.09097802639007568, -0.1792086362838745, -0.2713695764541626, -0.22517192363739014, -0.015021204948425293, 0.019883275032043457, -0.08760619163513184, -0.0902794599533081, -0.06332087516784668, -0.05756986141204834, -0.08678078651428223, -0.08119654655456543, 0.12865030765533447, 0.2406013011932373, 0.041402578353881836, -0.015124917030334473, 0.1329936981201172, 0.08767187595367432, -0.01891481876373291, 0.06548357009887695, 0.18902921676635742, 0.2651712894439697, 0.309159517288208, 0.24167048931121826, 0.12716591358184814, 0.1285635232925415, 0.24710190296173096, 0.3353545665740967, 0.3048640489578247, 0.23640525341033936, 0.19801568984985352, 0.24145936965942383, 0.38207805156707764, 0.39572572708129883, 0.242537260055542, 0.22294330596923828, 0.3719959259033203, 0.47042763233184814, 0.43123185634613037, 0.3625662326812744, 0.383408784866333, 0.3847602605819702, 0.2966369390487671, 0.29896271228790283, 0.4360523223876953, 0.4896125793457031, 0.39724302291870117, 0.3815962076187134, 0.4534264802932739, 0.4414411783218384, 0.3999319076538086, 0.35165393352508545, 0.35485661029815674, 0.4814718961715698, 0.44379913806915283, 0.29586541652679443, 0.37749183177948, 0.4630330801010132, 0.42011332511901855, 0.4437040090560913, 0.47643351554870605, 0.435949444770813, 0.3261157274246216, 0.27746081352233887, 0.4226391315460205, 0.4980888366699219, 0.38505077362060547, 0.30010950565338135, 0.2888467311859131, 0.3689159154891968, 0.445814847946167, 0.3725932836532593, 0.2911602258682251, 0.22846055030822754, 0.22605085372924805, 0.40893709659576416, 0.42775416374206543, 0.20836222171783447, 0.2333357334136963, 0.39804911613464355, 0.3212165832519531, 0.195892333984375, 0.22362124919891357, 0.26487624645233154, 0.22749567031860352, 0.1369870901107788, 0.12077617645263672, 0.24939501285552979, 0.26789629459381104, 0.11335766315460205, 0.12515676021575928, 0.2685023546218872, 0.24835801124572754, 0.13637471199035645, 0.06915116310119629, 0.031465768814086914, 0.033051371574401855, 0.07739055156707764, 0.14928090572357178, 0.1548449993133545, 0.03806579113006592, -0.013826131820678711, 0.028536200523376465, 0.011515259742736816, 0.042510986328125, 0.1012643575668335, 0.010776638984680176, -0.06198525428771973, -0.07137572765350342, -0.1317131519317627, -0.05361461639404297, 0.06206834316253662, -0.06432950496673584, -0.12048935890197754, 0.009034037590026855, -0.0639646053314209, -0.19418513774871826, -0.11967575550079346, -0.13497543334960938, -0.24109327793121338, -0.13556921482086182, 0.01042783260345459, -0.0417020320892334, -0.1601254940032959, -0.21524441242218018, -0.21687912940979004, -0.18989944458007812, -0.22562241554260254, -0.3065894842147827, -0.21904540061950684, -0.07379841804504395, -0.15297472476959229, -0.23710381984710693, -0.16524136066436768, -0.18823754787445068, -0.2588622570037842, -0.23817908763885498, -0.2954603433609009, -0.3749955892562866, -0.2390432357788086, -0.04951882362365723, -0.10409390926361084, -0.26441144943237305, -0.2961171865463257, -0.3206024169921875, -0.37296855449676514, -0.283231258392334, -0.14088594913482666, -0.1253669261932373, -0.1848999261856079, -0.21555650234222412, -0.23587965965270996, -0.26917731761932373, -0.23497498035430908, -0.16667389869689941, -0.1993619203567505, -0.24594950675964355, -0.21152019500732422, -0.22987282276153564, -0.2938957214355469, -0.20448064804077148, -0.04813194274902344, -0.10050129890441895, -0.24380457401275635, -0.20102977752685547, -0.09385848045349121, -0.13394904136657715, -0.23743677139282227, -0.22063028812408447, -0.10554337501525879, -0.05075728893280029, -0.04014158248901367, -0.03482246398925781, -0.09469401836395264, -0.1707063913345337, -0.18545877933502197, -0.0828554630279541, 0.03270363807678223, -0.029465794563293457, -0.08564865589141846, -0.008828520774841309, 0.023022890090942383, 0.04940974712371826, 0.07871699333190918, 0.00938403606414795, -0.020748615264892578, 0.015776991844177246, -0.013007640838623047, -0.016423821449279785, 0.07607519626617432, 0.13856661319732666, 0.17144083976745605, 0.19836103916168213, 0.14312708377838135, 0.08844685554504395, 0.09385466575622559, 0.13057422637939453, 0.19418883323669434, 0.1656550168991089, 0.14820384979248047, 0.2732487916946411, 0.26032912731170654, 0.15827274322509766, 0.23128819465637207, 0.2577781677246094, 0.19526267051696777, 0.26577723026275635, 0.3350207805633545, 0.27855539321899414, 0.20366811752319336, 0.2120654582977295, 0.3471252918243408, 0.4206430912017822, 0.33420276641845703, 0.3273230791091919, 0.3509242534637451, 0.2829993963241577, 0.332008957862854, 0.404524564743042, 0.3320397138595581, 0.3025747537612915, 0.3695492744445801, 0.4585667848587036, 0.5032308101654053, 0.43179070949554443, 0.36614155769348145, 0.3820614814758301, 0.39749717712402344, 0.37503886222839355, 0.34576117992401123, 0.42437076568603516, 0.5453416109085083, 0.48537445068359375, 0.35331857204437256, 0.37486279010772705, 0.4858689308166504, 0.5147905349731445, 0.43232786655426025, 0.3892557621002197, 0.4649350643157959, 0.5095640420913696, 0.43350350856781006, 0.3718158006668091, 0.4326080083847046, 0.49584925174713135, 0.45596742630004883, 0.43474292755126953, 0.47605621814727783, 0.47333502769470215, 0.4404726028442383, 0.3915853500366211, 0.33557140827178955, 0.3999840021133423, 0.5150893926620483, 0.4970437288284302, 0.42444562911987305, 0.4048506021499634, 0.39621078968048096, 0.3801177740097046, 0.3829214572906494, 0.4082350730895996, 0.4241880178451538, 0.41378724575042725, 0.3986128568649292, 0.3851116895675659, 0.36377692222595215, 0.35513532161712646, 0.3565793037414551, 0.33568620681762695, 0.35301685333251953, 0.3977299928665161, 0.3435029983520508, 0.296980619430542, 0.3564276695251465, 0.3605707883834839, 0.30052828788757324, 0.2764015197753906, 0.28262293338775635, 0.3255685567855835, 0.3272974491119385, 0.25475525856018066, 0.25814247131347656, 0.3108431100845337, 0.2854355573654175, 0.24884772300720215, 0.2329423427581787, 0.21366536617279053, 0.24191498756408691, 0.2739831209182739, 0.2532503604888916, 0.22822248935699463, 0.1980072259902954, 0.1699124574661255, 0.19997727870941162, 0.22876441478729248, 0.18896055221557617, 0.16018569469451904, 0.19124722480773926, 0.20936596393585205, 0.17635905742645264, 0.12853789329528809, 0.12448525428771973, 0.17805540561676025, 0.1921987533569336, 0.1364384889602661, 0.11728966236114502, 0.12717628479003906, 0.1095055341720581, 0.11255598068237305, 0.11501777172088623, 0.09776890277862549\}, \{-1.1920928955078125e-07, -1.1920928955078125e-07, 4.76837158203125e-07, 9.5367431640625e-07, 2.9802322387695312e-06, 5.125999450683594e-06, 9.5367431640625e-06, 1.3828277587890625e-05, 2.1338462829589844e-05, 2.872943878173828e-05, 3.886222839355469e-05, 4.971027374267578e-05, 6.318092346191406e-05, 7.724761962890625e-05, 9.381771087646484e-05, 0.0001112222671508789, 0.0001310110092163086, 0.00015163421630859375, 0.0001760721206665039, 0.00021255016326904297, 0.0002651214599609375, 0.00033676624298095703, 0.0004240274429321289, 0.0005271434783935547, 0.0006465911865234375, 0.0007777214050292969, 0.0009214878082275391, 0.0010780096054077148, 0.0012400150299072266, 0.0014175176620483398, 0.0015987157821655273, 0.0017883777618408203, 0.0019905567169189453, 0.0021893978118896484, 0.002402782440185547, 0.0026192665100097656, 0.0028554201126098633, 0.003152132034301758, 0.0034835338592529297, 0.003865361213684082, 0.0042994022369384766, 0.004737257957458496, 0.005231022834777832, 0.005736231803894043, 0.006232142448425293, 0.006785392761230469, 0.0073043107986450195, 0.007830977439880371, 0.008400201797485352, 0.008899331092834473, 0.009447097778320312, 0.009988665580749512, 0.01045691967010498, 0.011014819145202637, 0.01154935359954834, 0.012141227722167969, 0.012863636016845703, 0.01349031925201416, 0.014233708381652832, 0.014984607696533203, 0.015620589256286621, 0.016409993171691895, 0.017046451568603516, 0.017672181129455566, 0.018372297286987305, 0.018832921981811523, 0.01942622661590576, 0.019900798797607422, 0.020241737365722656, 0.020727872848510742, 0.02091801166534424, 0.02115333080291748, 0.021259307861328125, 0.021084904670715332, 0.021033287048339844, 0.020658016204833984, 0.02030956745147705, 0.01990044116973877, 0.0192716121673584, 0.018791675567626953, 0.01803290843963623, 0.017357468605041504, 0.016611933708190918, 0.015715599060058594, 0.014973640441894531, 0.013959407806396484, 0.013082146644592285, 0.012084126472473145, 0.010997653007507324, 0.010024309158325195, 0.008800506591796875, 0.007768392562866211, 0.006543517112731934, 0.005352020263671875, 0.004207611083984375, 0.002852201461791992, 0.001705765724182129, 0.00028133392333984375, -0.0009337663650512695, -0.0023986101150512695, -0.0038579702377319336, -0.004896640777587891, -0.006933093070983887, -0.007810473442077637, -0.009076595306396484, -0.011730790138244629, -0.011400580406188965, -0.013871192932128906, -0.01661384105682373, -0.014528751373291016, -0.020139217376708984, -0.020017504692077637, -0.04427051544189453, -0.1284855604171753, -0.055773019790649414, 0.27432501316070557, 0.4197641611099243, 0.16023647785186768, -0.046770572662353516, 0.09858953952789307, 0.29926955699920654, 0.23687148094177246, 0.07439267635345459, 0.07832813262939453, 0.17903292179107666, 0.3071831464767456, 0.4082520008087158, 0.29867780208587646, 0.07255029678344727, -0.07463467121124268, -0.09422111511230469, 0.09741127490997314, 0.30896997451782227, 0.21336793899536133, -0.06238079071044922, -0.16082358360290527, -0.0059626102447509766, 0.11109304428100586, 0.04118692874908447, -0.001970529556274414, -0.01568758487701416, -0.1308119297027588, -0.2494492530822754, -0.29343879222869873, -0.18807709217071533, 0.035208940505981445, 0.06518185138702393, -0.12823379039764404, -0.23186469078063965, -0.241227388381958, -0.28888583183288574, -0.2745392322540283, -0.269575834274292, -0.3450504541397095, -0.24619364738464355, -0.10659360885620117, -0.2191087007522583, -0.3218768835067749, -0.32504284381866455, -0.41658055782318115, -0.43256640434265137, -0.2504643201828003, -0.12248098850250244, -0.25351500511169434, -0.4031703472137451, -0.3739124536514282, -0.41554903984069824, -0.4233818054199219, -0.2119276523590088, -0.241904616355896, -0.4607759714126587, -0.33654630184173584, -0.15313732624053955, -0.25476253032684326, -0.3576667308807373, -0.32992756366729736, -0.32559192180633545, -0.360870361328125, -0.31231582164764404, -0.1946035623550415, -0.1954578161239624, -0.3444420099258423, -0.4183681011199951, -0.24929380416870117, -0.06143510341644287, -0.1780107021331787, -0.33765077590942383, -0.19781625270843506, -0.051230788230895996, -0.10136687755584717, -0.19206678867340088, -0.28691720962524414, -0.24281489849090576, -0.03552901744842529, -0.0028706789016723633, -0.11286568641662598, -0.11816763877868652, -0.09310948848724365, -0.09014451503753662, -0.121329665184021, -0.11799275875091553, 0.08926558494567871, 0.19953036308288574, -0.0023943185806274414, -0.060732245445251465, 0.08560192584991455, 0.03772270679473877, -0.07008719444274902, 0.01198279857635498, 0.1335434913635254, 0.20849096775054932, 0.25003790855407715, 0.18151795864105225, 0.06548619270324707, 0.0647268295288086, 0.18266057968139648, 0.26894938945770264, 0.23718655109405518, 0.16832876205444336, 0.1278526782989502, 0.170754075050354, 0.3106015920639038, 0.32252490520477295, 0.16959261894226074, 0.1489201784133911, 0.2968308925628662, 0.3956648111343384, 0.3551570177078247, 0.2863428592681885, 0.3076368570327759, 0.3077211380004883, 0.22010397911071777, 0.22251105308532715, 0.35890650749206543, 0.4136618375778198, 0.32105469703674316, 0.3053661584854126, 0.37843775749206543, 0.3661247491836548, 0.3255974054336548, 0.2784233093261719, 0.2815166711807251, 0.40967857837677, 0.3726658821105957, 0.22540318965911865, 0.3089485168457031, 0.39496302604675293, 0.35351812839508057, 0.37870705127716064, 0.4121500253677368, 0.3738086223602295, 0.2652316093444824, 0.21804594993591309, 0.3653709888458252, 0.4419715404510498, 0.3310946226119995, 0.2478959560394287, 0.2383410930633545, 0.3208655118942261, 0.39932775497436523, 0.3284567594528198, 0.24911844730377197, 0.18835735321044922, 0.1885216236114502, 0.3732907772064209, 0.3946683406829834, 0.1775580644607544, 0.20476579666137695, 0.37214088439941406, 0.297365665435791, 0.17474329471588135, 0.20479297637939453, 0.24847817420959473, 0.21382462978363037, 0.12556719779968262, 0.11218321323394775, 0.24311590194702148, 0.26419734954833984, 0.11228275299072266, 0.12632155418395996, 0.272489070892334, 0.25454258918762207, 0.14522814750671387, 0.08058357238769531, 0.04517817497253418, 0.04956936836242676, 0.09593117237091064, 0.1704394817352295, 0.17833828926086426, 0.06362438201904297, 0.01445615291595459, 0.05865514278411865, 0.044203758239746094, 0.07741427421569824, 0.1379101276397705, 0.050028204917907715, -0.021233439445495605, -0.028426647186279297, -0.0866243839263916, -0.00715327262878418, 0.11104357242584229, -0.014105677604675293, -0.06869196891784668, 0.06297874450683594, -0.009259462356567383, -0.13739478588104248, -0.0614476203918457, -0.0759890079498291, -0.18007338047027588, -0.07402598857879639, 0.0731356143951416, 0.022660255432128906, -0.09563624858856201, -0.14927184581756592, -0.15022361278533936, -0.12320315837860107, -0.15738558769226074, -0.2383946180343628, -0.1504288911819458, -0.004198789596557617, -0.08409810066223145, -0.167488694190979, -0.09536778926849365, -0.11905217170715332, -0.18887794017791748, -0.16894876956939697, -0.2267364263534546, -0.30585145950317383, -0.17114698886871338, 0.018334507942199707, -0.036666154861450195, -0.19846463203430176, -0.23017489910125732, -0.25592732429504395, -0.3093768358230591, -0.22000503540039062, -0.07946312427520752, -0.06471645832061768, -0.12550139427185059, -0.15791165828704834, -0.17901134490966797, -0.21424496173858643, -0.18137967586517334, -0.11450648307800293, -0.14938223361968994, -0.19720280170440674, -0.16490375995635986, -0.18506693840026855, -0.25076162815093994, -0.16370618343353271, -0.008970379829406738, -0.06370353698730469, -0.20910346508026123, -0.1683253049850464, -0.06367373466491699, -0.10563445091247559, -0.2116776704788208, -0.19709527492523193, -0.084259033203125, -0.03211808204650879, -0.02363431453704834, -0.021051764488220215, -0.0831899642944336, -0.1616666316986084, -0.17903828620910645, -0.07862436771392822, 0.034129977226257324, -0.030289053916931152, -0.08910930156707764, -0.014927148818969727, 0.01462090015411377, 0.03817439079284668, 0.06535124778747559, -0.006643414497375488, -0.039221882820129395, -0.004878997802734375, -0.036478400230407715, -0.0419083833694458, 0.047892212867736816, 0.10803020000457764, 0.1389247179031372, 0.16310596466064453, 0.10615682601928711, 0.049030423164367676, 0.052176713943481445, 0.08721923828125, 0.14809000492095947, 0.1180877685546875, 0.09867644309997559, 0.22142601013183594, 0.20741891860961914, 0.10291719436645508, 0.1743375062942505, 0.1995682716369629, 0.13473773002624512, 0.20452332496643066, 0.272092342376709, 0.21377480030059814, 0.13840901851654053, 0.1448214054107666, 0.27900075912475586, 0.35206472873687744, 0.263651967048645, 0.256550669670105, 0.2792929410934448, 0.20995938777923584, 0.25940072536468506, 0.330751895904541, 0.2575054168701172, 0.22848761081695557, 0.2942301034927368, 0.3834885358810425, 0.42849528789520264, 0.35599660873413086, 0.29115796089172363, 0.30705058574676514, 0.32216978073120117, 0.3010164499282837, 0.27143406867980957, 0.35044872760772705, 0.47260582447052, 0.412439227104187, 0.2817457914352417, 0.3042030334472656, 0.41543304920196533, 0.4460902214050293, 0.364154577255249, 0.3222181797027588, 0.39972615242004395, 0.44491374492645264, 0.37071549892425537, 0.3104130029678345, 0.3722681999206543, 0.4377039670944214, 0.39897966384887695, 0.3796654939651489, 0.4229189157485962, 0.4215703010559082, 0.39108705520629883, 0.3437778949737549, 0.2898319959640503, 0.356526255607605, 0.47335922718048096, 0.45785844326019287, 0.38714730739593506, 0.36984479427337646, 0.36363863945007324, 0.3495290279388428, 0.3550088405609131, 0.3824489116668701, 0.40094733238220215, 0.3930283784866333, 0.3800544738769531, 0.3692972660064697, 0.3501228094100952, 0.34415674209594727, 0.34807658195495605, 0.3295656442642212, 0.3497049808502197, 0.39665985107421875, 0.34521484375, 0.301041841506958, 0.3629206418991089, 0.36975300312042236, 0.31182050704956055, 0.2904839515686035, 0.2989327907562256, 0.3443582057952881, 0.3487238883972168, 0.27816474437713623, 0.2842766046524048, 0.338948130607605, 0.3158252239227295, 0.28169405460357666, 0.26747190952301025, 0.25088953971862793, 0.28097569942474365, 0.31500864028930664, 0.2966419458389282, 0.27289509773254395, 0.24506640434265137, 0.21863305568695068, 0.2501581907272339, 0.2813589572906494, 0.24244964122772217, 0.21546220779418945, 0.24827325344085693, 0.2670714855194092, 0.2362205982208252, 0.18936467170715332, 0.18621742725372314, 0.24160587787628174, 0.25594615936279297, 0.2015317678451538, 0.18361639976501465, 0.19353771209716797, 0.1773679256439209, 0.1806330680847168, 0.18324732780456543, 0.16733908653259277\}\}}}
\par
{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_32bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100}
{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384873\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.10654573142528534, -0.11086378246545792, -0.11495868861675262, -0.13741405308246613, -0.14436161518096924, -0.07571711391210556, -0.07994011044502258, -0.10436136275529861, -0.12068937718868256, -0.163199782371521, -0.1605616807937622, -0.14431676268577576, -0.11785893142223358, -0.11374861747026443, -0.13877761363983154, -0.19541782140731812, -0.2437116801738739, -0.2504839599132538, -0.16460417211055756, -0.15231187641620636, -0.11007446050643921, -0.07427804917097092, -0.12210794538259506, -0.15676698088645935, -0.2024340182542801, -0.2378908395767212, -0.22202207148075104, -0.17159946262836456, -0.14988259971141815, -0.15377970039844513, -0.14517268538475037, -0.09163959324359894, -0.035986557602882385, -0.02559933252632618, -0.0773739144206047, -0.13961444795131683, -0.16486811637878418, -0.1642903834581375, -0.13523982465267181, -0.06943988054990768, -0.027117568999528885, -0.022984718903899193, -0.0627516359090805, -0.10830045491456985, -0.1435433179140091, -0.1474071592092514, -0.14713439345359802, -0.10550635308027267, -0.035432010889053345, 0.0027533872053027153, 0.017753789201378822, -0.06665127724409103, -0.11327283829450607, -0.14618153870105743, -0.20166568458080292, -0.1979595422744751, -0.13317497074604034, -0.07182467728853226, -0.0892641469836235, -0.05383358523249626, -0.0514177531003952, -0.046356163918972015, -0.037941765040159225, 0.009598610922694206, 0.029046352952718735, 0.059682391583919525, 0.053137049078941345, 0.014526255428791046, -0.07053980976343155, -0.10104520618915558, -0.0805070698261261, -0.02633623592555523, -0.006700810976326466, -0.005301951430737972, -0.0362333320081234, -0.04376407340168953, 0.05467132106423378, 0.025432296097278595, 0.012060509994626045, -0.022590387612581253, -0.02610771730542183, -0.021223485469818115, -0.02007393352687359, -0.015282858163118362, 0.008273095823824406, 0.015339110046625137, 0.052239056676626205, 0.0406816191971302, 0.0620943047106266, 0.026452526450157166, -0.0003376388340257108, -0.013151046819984913, -0.019276905804872513, -0.000476406974485144, 0.033063288778066635, 0.03876132890582085, 0.03317723050713539, 0.10930770635604858, 0.12609106302261353, 0.13342824578285217, 0.12120353430509567, 0.058676980435848236, 0.07592218369245529, 0.08193482458591461, 0.06398347020149231, 0.07712594419717789, 0.06805115938186646, 0.098694808781147, 0.14866608381271362, 0.20477294921875, 0.20494911074638367, 0.16524285078048706, 0.1688390076160431, 0.16633254289627075, 0.1062576025724411, 0.12215996533632278, 0.20390713214874268, 0.2651367485523224, 0.25690796971321106, 0.24583959579467773, 0.256146103143692, 0.16832926869392395, 0.13466861844062805, 0.1346236914396286, 0.12321566790342331, 0.16049039363861084, 0.19890908896923065, 0.242774099111557, 0.23645171523094177, 0.27003395557403564, 0.276238352060318, 0.25729161500930786, 0.26536837220191956, 0.22318758070468903, 0.163107231259346, 0.16733112931251526, 0.18780580163002014, 0.21744175255298615, 0.23527967929840088, 0.24036073684692383, 0.2565491497516632, 0.30208536982536316, 0.35403892397880554, 0.3526226282119751, 0.3460942208766937, 0.30663153529167175, 0.33553406596183777, 0.3057543635368347, 0.2687184810638428, 0.2383570373058319, 0.2280171662569046, 0.2809559404850006, 0.30829092860221863, 0.3041536211967468, 0.3074176609516144, 0.3143196403980255, 0.2581368684768677, 0.29476305842399597, 0.3203071057796478, 0.3113045394420624, 0.30545344948768616, 0.35099008679389954, 0.3641475737094879, 0.3391929566860199, 0.342308908700943, 0.3248733878135681, 0.32878077030181885, 0.348391056060791, 0.32364922761917114, 0.3666457533836365, 0.31888890266418457, 0.3485170304775238, 0.35097619891166687, 0.29793909192085266, 0.30303287506103516, 0.32259273529052734, 0.3318563997745514, 0.3026358187198639, 0.3554430305957794, 0.37340453267097473, 0.3471658229827881, 0.3235280513763428, 0.3301352560520172, 0.3078373372554779, 0.3523867428302765, 0.3408990800380707, 0.31364673376083374, 0.347843736410141, 0.3690349757671356, 0.3545178771018982, 0.35175198316574097, 0.36120036244392395, 0.3539530336856842, 0.35774993896484375, 0.3542696237564087, 0.3310922384262085, 0.3206315040588379, 0.35456445813179016, 0.3461000323295593, 0.3260113596916199, 0.3236057460308075, 0.2945432960987091, 0.337971031665802, 0.37424618005752563, 0.3846989572048187, 0.3572649359703064, 0.37454867362976074, 0.347695529460907, 0.3549690544605255, 0.3355972468852997, 0.3330603539943695, 0.3093926012516022, 0.3089359700679779, 0.2923196256160736, 0.2620227336883545, 0.3297586441040039, 0.32742032408714294, 0.3419759273529053, 0.3073009252548218, 0.297075092792511, 0.30074185132980347, 0.325280100107193, 0.33291471004486084, 0.3332453966140747, 0.3018326759338379, 0.31633010506629944, 0.3168993890285492, 0.3271448016166687, 0.31844666600227356, 0.295942485332489, 0.2917718291282654, 0.27710267901420593, 0.26118332147598267, 0.23221439123153687, 0.3317529261112213, 0.3540629744529724, 0.2922021746635437, 0.2951115667819977, 0.2493109554052353, 0.2867589592933655, 0.2960498631000519, 0.2836502492427826, 0.31431350111961365, 0.26537907123565674, 0.2590537369251251, 0.25247299671173096, 0.214023157954216, 0.2071918398141861, 0.22232457995414734, 0.26061317324638367, 0.30542057752609253, 0.28974950313568115, 0.24859151244163513, 0.2228160947561264, 0.25007280707359314, 0.26055601239204407, 0.2254960834980011, 0.27290746569633484, 0.2760733962059021, 0.2615794539451599, 0.27167510986328125, 0.2546367347240448, 0.21572034060955048, 0.21540221571922302, 0.192155659198761, 0.16099269688129425, 0.17680823802947998, 0.2131834626197815, 0.23785944283008575, 0.18247728049755096, 0.18726205825805664, 0.12993094325065613, 0.1181115210056305, 0.18653647601604462, 0.18050558865070343, 0.16915030777454376, 0.16404005885124207, 0.12621153891086578, 0.09435564279556274, 0.10899075120687485, 0.148171529173851, 0.11626031249761581, 0.10354291647672653, 0.13250792026519775, 0.09787636995315552, 0.1030190959572792, 0.1423940807580948, 0.10291619598865509, 0.08009081333875656, 0.11242035776376724, 0.09399483352899551, 0.1172405406832695, 0.15611103177070618, 0.06934958696365356, 0.06423342972993851, 0.08321265131235123, 0.09821876883506775, 0.13949915766716003, 0.12564539909362793, 0.07938070595264435, 0.045767609030008316, 0.05813327059149742, 0.047100234776735306, 0.06823265552520752, 0.0754186138510704, 0.05630476027727127, 0.017302609980106354, 0.0008599076536484063, 0.04353911802172661, 0.05204787477850914, 0.0824984684586525, 0.08795347064733505, 0.023234887048602104, 0.0009291400201618671, -0.0076574888080358505, 0.03232860192656517, 0.07685714960098267, 0.08119689673185349, 0.022120295092463493, -0.030937619507312775, -0.01876123994588852, -0.005620893556624651, 0.016592886298894882, 0.020832696929574013, 0.02656138315796852, -0.006862107198685408, -0.04585770145058632, -0.019484128803014755, -0.04244006425142288, -0.07499007135629654, -0.07102051377296448, -0.0662568062543869, -0.07428179681301117, -0.08879119902849197, -0.1008056253194809, -0.09425801783800125, -0.06951656192541122, -0.0381024032831192, -0.05902015417814255, -0.05611433461308479, -0.0790177583694458, -0.09637999534606934, -0.09812989085912704, -0.11073868721723557, -0.04480006918311119, -0.07395800203084946, -0.09014502167701721, -0.08693195879459381, -0.11231470853090286, -0.13826541602611542, -0.1370057761669159, -0.07036778330802917, -0.0552164763212204, -0.13812334835529327, -0.12577186524868011, -0.11669572442770004, -0.14448396861553192, -0.13990573585033417, -0.13741348683834076, -0.15565867722034454, -0.20557968318462372, -0.2103797346353531, -0.17862746119499207, -0.17775960266590118, -0.20560288429260254, -0.2237730473279953, -0.2743721902370453, -0.24996384978294373, -0.23076921701431274, -0.259387344121933, -0.24719151854515076, -0.268353134393692, -0.31968554854393005, -0.31176629662513733, -0.29554569721221924, -0.2924174666404724, -0.3033452332019806, -0.30051130056381226, -0.3123569190502167, -0.3448212444782257, -0.3220278024673462, -0.33063265681266785, -0.35563501715660095, -0.34307965636253357, -0.3080213963985443, -0.3056949973106384, -0.3366694152355194, -0.34156039357185364, -0.3316612243652344, -0.3065110445022583, -0.3081991970539093, -0.31517091393470764, -0.3162621259689331, -0.3385170102119446, -0.3392433226108551, -0.3133665919303894, -0.2800193428993225, -0.25216805934906006, -0.2883094251155853, -0.2657769024372101, -0.2518283724784851, -0.291072815656662, -0.2559393048286438, -0.24693608283996582, -0.2636662721633911, -0.2624438405036926, -0.2494381219148636, -0.2416200190782547, -0.22538360953330994, -0.2591025233268738, -0.2606838047504425, -0.26585760712623596, -0.25937068462371826, -0.23794609308242798, -0.24189132452011108, -0.240736722946167, -0.25603818893432617, -0.2745775580406189, -0.25089573860168457, -0.2764233648777008, -0.29448723793029785, -0.27957355976104736, -0.28125864267349243, -0.2727208435535431, -0.28344786167144775, -0.2571921944618225, -0.2760695815086365, -0.2874547243118286, -0.30504369735717773, -0.29986709356307983, -0.29826271533966064, -0.28532710671424866, -0.2496851533651352, -0.2607952654361725, -0.29777657985687256, -0.30393722653388977, -0.290038526058197, -0.264538437128067, -0.28155800700187683, -0.28155699372291565, -0.31245583295822144, -0.33506739139556885, -0.326878160238266, -0.32665902376174927, -0.29288503527641296, -0.3238815367221832, -0.32362183928489685, -0.28742843866348267, -0.3196392357349396, -0.32520994544029236, -0.33188876509666443, -0.3426867127418518, -0.3408244550228119, -0.33985793590545654, -0.3346248269081116, -0.32897987961769104, -0.289229154586792, -0.3050055503845215, -0.35268786549568176, -0.3525750935077667, -0.3248194754123688, -0.3169674277305603, -0.2992347478866577, -0.29648488759994507, -0.3069400489330292, -0.33537572622299194, -0.34434187412261963, -0.32709017395973206, -0.28708675503730774, -0.2828000485897064, -0.2635459005832672, -0.24564994871616364, -0.25203609466552734, -0.2388342022895813, -0.27065297961235046, -0.3090958297252655, -0.2922089099884033, -0.28137531876564026, -0.2720507085323334, -0.23547059297561646, -0.2411729395389557, -0.2583547830581665, -0.2711826264858246, -0.2532021403312683, -0.22009418904781342, -0.2116345316171646, -0.19967801868915558, -0.19406458735466003, -0.2078171819448471, -0.2124902307987213, -0.20337460935115814, -0.18594178557395935, -0.1790795922279358, -0.2099793255329132, -0.2033313512802124, -0.20906804502010345, -0.19370678067207336, -0.15078547596931458, -0.13426032662391663, -0.12475015968084335\}, \{-0.11599669605493546, -0.12672565877437592, -0.12244690209627151, -0.10400579124689102, -0.10054263472557068, -0.09792455285787582, -0.11399802565574646, -0.13109661638736725, -0.1454259157180786, -0.16973887383937836, -0.16307631134986877, -0.13756509125232697, -0.11309415847063065, -0.11173500120639801, -0.15657883882522583, -0.22070199251174927, -0.25723835825920105, -0.25677669048309326, -0.18688082695007324, -0.1293829381465912, -0.07931152731180191, -0.06811366230249405, -0.1331479847431183, -0.2092551589012146, -0.2333250343799591, -0.21923862397670746, -0.18591023981571198, -0.16142664849758148, -0.1670183539390564, -0.16855256259441376, -0.15506979823112488, -0.10953260213136673, -0.061346881091594696, -0.046533118933439255, -0.06950776278972626, -0.11180009692907333, -0.14044716954231262, -0.1505882889032364, -0.13731259107589722, -0.08639223873615265, -0.04593536630272865, -0.041714977473020554, -0.06255748122930527, -0.09127826988697052, -0.11618304997682571, -0.1337864249944687, -0.13376173377037048, -0.09759178012609482, -0.0437045656144619, -0.008813206106424332, -0.005579110700637102, -0.0517657995223999, -0.1034180298447609, -0.15580838918685913, -0.19931702315807343, -0.19810673594474792, -0.15496182441711426, -0.09203467518091202, -0.07570936530828476, -0.05799258500337601, -0.0533590205013752, -0.04272526875138283, -0.014789707958698273, 0.023693863302469254, 0.03842945769429207, 0.03768279775977135, 0.004951058886945248, -0.011700049974024296, -0.0381028838455677, -0.0346871018409729, -0.03866104781627655, -0.014867539517581463, -0.010183105245232582, -0.02323286607861519, -0.03279714658856392, -0.020923582836985588, 0.039653364568948746, 0.04521671682596207, 0.046729717403650284, 0.013431270606815815, -0.022297460585832596, -0.025272676721215248, -0.04681222140789032, -0.009317823685705662, 0.02244636043906212, 0.05973266810178757, 0.0768781378865242, 0.05284608155488968, 0.07143129408359528, 0.02711583860218525, 0.03839786723256111, 0.012436555698513985, 0.004006610251963139, 0.010198242962360382, 0.02177899144589901, 0.049605343490839005, 0.06822726875543594, 0.11034061759710312, 0.12692196667194366, 0.12588554620742798, 0.12312634289264679, 0.06580373644828796, 0.06688748300075531, 0.07834338396787643, 0.079814113676548, 0.0675809308886528, 0.09340251982212067, 0.1418682485818863, 0.16081903874874115, 0.1938496083021164, 0.18371270596981049, 0.16606703400611877, 0.1453780084848404, 0.14264588057994843, 0.14140000939369202, 0.16183701157569885, 0.20625357329845428, 0.2554421126842499, 0.25908300280570984, 0.24513374269008636, 0.21646222472190857, 0.16789764165878296, 0.14027543365955353, 0.14227530360221863, 0.1517212688922882, 0.15308530628681183, 0.18558776378631592, 0.21915170550346375, 0.24104736745357513, 0.2772127389907837, 0.2755987048149109, 0.2602156102657318, 0.23977312445640564, 0.20724307000637054, 0.20667679607868195, 0.1975099742412567, 0.21368660032749176, 0.21087419986724854, 0.21999076008796692, 0.2391047328710556, 0.2487514168024063, 0.2982803285121918, 0.32930511236190796, 0.34828928112983704, 0.34602072834968567, 0.3246139585971832, 0.32108768820762634, 0.302799791097641, 0.2783316671848297, 0.25961416959762573, 0.24959249794483185, 0.26101112365722656, 0.28227928280830383, 0.2920779287815094, 0.297308087348938, 0.30792203545570374, 0.29904991388320923, 0.3141164779663086, 0.31833046674728394, 0.3227021396160126, 0.332852303981781, 0.36176905035972595, 0.36297690868377686, 0.3202771842479706, 0.32608136534690857, 0.3103209435939789, 0.321264386177063, 0.328573077917099, 0.3340657949447632, 0.3736089766025543, 0.3562493920326233, 0.3634374439716339, 0.3280748128890991, 0.3176416754722595, 0.30878958106040955, 0.3174160122871399, 0.35036471486091614, 0.32714560627937317, 0.34801530838012695, 0.3503943383693695, 0.3647993505001068, 0.3681405186653137, 0.32807648181915283, 0.32953664660453796, 0.3405321538448334, 0.34943100810050964, 0.3560551702976227, 0.3620150685310364, 0.36614885926246643, 0.3584156334400177, 0.3555119037628174, 0.36789146065711975, 0.36287903785705566, 0.35888826847076416, 0.3576664328575134, 0.36205926537513733, 0.3508644998073578, 0.3460966646671295, 0.3467444181442261, 0.32808437943458557, 0.3299960494041443, 0.3383871912956238, 0.3562009334564209, 0.3494430482387543, 0.36458173394203186, 0.36849337816238403, 0.37402328848838806, 0.3391067385673523, 0.33225658535957336, 0.31954362988471985, 0.30253204703330994, 0.302290678024292, 0.3250865936279297, 0.3264887034893036, 0.3052440583705902, 0.3117298483848572, 0.32245171070098877, 0.35018929839134216, 0.3483627140522003, 0.3254387080669403, 0.3126079738140106, 0.30825087428092957, 0.3111360967159271, 0.337426096200943, 0.3281615972518921, 0.32460328936576843, 0.3167496919631958, 0.31922122836112976, 0.2969887852668762, 0.2928389012813568, 0.2914779782295227, 0.29788267612457275, 0.27603235840797424, 0.2548941969871521, 0.28029775619506836, 0.2780568301677704, 0.29458409547805786, 0.31376251578330994, 0.3126690685749054, 0.29889237880706787, 0.27958399057388306, 0.2617403566837311, 0.2564350366592407, 0.24390245974063873, 0.23144355416297913, 0.23795807361602783, 0.2392495721578598, 0.22884014248847961, 0.21977579593658447, 0.2312030792236328, 0.25205641984939575, 0.2623029947280884, 0.24803289771080017, 0.22561702132225037, 0.2425171285867691, 0.24483416974544525, 0.23759183287620544, 0.2494782954454422, 0.2526664137840271, 0.25105059146881104, 0.27185386419296265, 0.25577855110168457, 0.22133265435695648, 0.22442537546157837, 0.216847762465477, 0.2060990184545517, 0.19253723323345184, 0.18038463592529297, 0.18606528639793396, 0.203987255692482, 0.2072320282459259, 0.18231293559074402, 0.15119066834449768, 0.15387484431266785, 0.16129066050052643, 0.17887790501117706, 0.18513309955596924, 0.16292887926101685, 0.15068158507347107, 0.11482462286949158, 0.13241270184516907, 0.1380040943622589, 0.1611821949481964, 0.16993962228298187, 0.12258587777614594, 0.11076952517032623, 0.12219234555959702, 0.10447893291711807, 0.08861193805932999, 0.10225933790206909, 0.101822130382061, 0.11767645180225372, 0.13437233865261078, 0.1269274204969406, 0.10480000078678131, 0.09080363065004349, 0.04251999035477638, 0.04932666942477226, 0.07653720676898956, 0.08902866393327713, 0.07984988391399384, 0.04786965250968933, 0.032217901200056076, 0.059549301862716675, 0.06708430498838425, 0.04271629452705383, 0.025471054017543793, 0.0028339307755231857, 0.022612009197473526, 0.030384518206119537, 0.06637311726808548, 0.06817334145307541, 0.01309833861887455, -0.023433402180671692, -0.028508609160780907, -0.0064447177574038506, 0.02477163076400757, 0.036757953464984894, 0.05077197775244713, 0.01736379601061344, -0.01713472232222557, -0.03921069577336311, -0.03334583714604378, -0.002330835210159421, -0.004604189191013575, 0.015124421566724777, -0.025950325652956963, -0.05427074059844017, -0.07467610388994217, -0.05807540938258171, -0.04211416468024254, -0.050497788935899734, -0.070103220641613, -0.08373105525970459, -0.09563173353672028, -0.11078188568353653, -0.09294647723436356, -0.06793883442878723, -0.06202074512839317, -0.08585185557603836, -0.10128496587276459, -0.1160750538110733, -0.11176074296236038, -0.11151131987571716, -0.09551885724067688, -0.11131274700164795, -0.1288195699453354, -0.12427171319723129, -0.13388344645500183, -0.13484609127044678, -0.17450851202011108, -0.15434810519218445, -0.14610441029071808, -0.1378413885831833, -0.12303981184959412, -0.15689928829669952, -0.17307148873806, -0.18288256227970123, -0.161564901471138, -0.17955632507801056, -0.19222110509872437, -0.19828343391418457, -0.17353124916553497, -0.1704094558954239, -0.16460971534252167, -0.1634485125541687, -0.18914154171943665, -0.205159530043602, -0.2215428352355957, -0.21552522480487823, -0.21112169325351715, -0.21467767655849457, -0.23298951983451843, -0.23778094351291656, -0.2613266110420227, -0.26277321577072144, -0.2719411253929138, -0.25897377729415894, -0.24848750233650208, -0.27738744020462036, -0.2742609679698944, -0.29037532210350037, -0.2810390889644623, -0.2887313961982727, -0.28644612431526184, -0.27390414476394653, -0.2792174220085144, -0.26289841532707214, -0.27343371510505676, -0.28471338748931885, -0.30152449011802673, -0.30088040232658386, -0.2987018823623657, -0.3160925805568695, -0.30822208523750305, -0.30821436643600464, -0.3087691366672516, -0.3143851161003113, -0.3263503611087799, -0.30615243315696716, -0.3010587990283966, -0.3097633421421051, -0.2977924048900604, -0.29453033208847046, -0.29459741711616516, -0.32165971398353577, -0.3067639470100403, -0.3042844831943512, -0.2966454029083252, -0.29712945222854614, -0.31660208106040955, -0.3175387382507324, -0.3415686786174774, -0.32809412479400635, -0.3161765933036804, -0.3115851581096649, -0.30468976497650146, -0.30834493041038513, -0.28966856002807617, -0.30700811743736267, -0.3051874339580536, -0.30176717042922974, -0.31210535764694214, -0.3063400387763977, -0.3143419325351715, -0.2978472113609314, -0.29519933462142944, -0.2959807813167572, -0.3171444535255432, -0.3220752477645874, -0.32276326417922974, -0.3014363646507263, -0.29133206605911255, -0.30329686403274536, -0.3293691575527191, -0.3239937722682953, -0.2958269417285919, -0.2798727750778198, -0.2874899208545685, -0.2941288352012634, -0.2959405183792114, -0.3163144886493683, -0.30902916193008423, -0.3054257333278656, -0.2976999282836914, -0.3038743734359741, -0.30711156129837036, -0.2988722622394562, -0.30524390935897827, -0.29503414034843445, -0.28208407759666443, -0.2852691411972046, -0.2906931936740875, -0.2908329963684082, -0.3099006414413452, -0.3074454069137573, -0.2910221517086029, -0.30184462666511536, -0.3030585050582886, -0.3097419738769531, -0.3090875446796417, -0.29309025406837463, -0.2863524258136749, -0.2844317555427551, -0.2845662534236908, -0.2736321687698364, -0.2625400125980377, -0.2742711901664734, -0.25656312704086304, -0.2461545616388321, -0.24723801016807556, -0.2458602637052536, -0.26603105664253235, -0.25029364228248596, -0.25270113348960876, -0.2603098452091217, -0.25414562225341797, -0.2651461064815521, -0.26387685537338257, -0.2520322799682617, -0.2558180093765259, -0.2630579471588135, -0.260568231344223, -0.24691085517406464, -0.23404790461063385, -0.24226556718349457, -0.24143891036510468, -0.2449503391981125, -0.23793034255504608, -0.23901928961277008, -0.24645687639713287, -0.2454894334077835, -0.2424713522195816, -0.22918815910816193, -0.21920651197433472, -0.22075948119163513, -0.20886623859405518, -0.2039290964603424, -0.20882266759872437, -0.19430454075336456\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_44100::bitDepth = 32}}
\par
{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_44100::numSamplesPerChannel = 384873}}
\par
{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_32bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_32bit_44100}
{\xe \v aiff_stereo_32bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_32bit_44100::testBuffer = \{\{-0.10654573142528534, -0.11086378246545792, -0.11495868861675262, -0.13741405308246613, -0.14436161518096924, -0.07571711391210556, -0.07994011044502258, -0.10436136275529861, -0.12068937718868256, -0.163199782371521, -0.1605616807937622, -0.14431676268577576, -0.11785893142223358, -0.11374861747026443, -0.13877761363983154, -0.19541782140731812, -0.2437116801738739, -0.2504839599132538, -0.16460417211055756, -0.15231187641620636, -0.11007446050643921, -0.07427804917097092, -0.12210794538259506, -0.15676698088645935, -0.2024340182542801, -0.2378908395767212, -0.22202207148075104, -0.17159946262836456, -0.14988259971141815, -0.15377970039844513, -0.14517268538475037, -0.09163959324359894, -0.035986557602882385, -0.02559933252632618, -0.0773739144206047, -0.13961444795131683, -0.16486811637878418, -0.1642903834581375, -0.13523982465267181, -0.06943988054990768, -0.027117568999528885, -0.022984718903899193, -0.0627516359090805, -0.10830045491456985, -0.1435433179140091, -0.1474071592092514, -0.14713439345359802, -0.10550635308027267, -0.035432010889053345, 0.0027533872053027153, 0.017753789201378822, -0.06665127724409103, -0.11327283829450607, -0.14618153870105743, -0.20166568458080292, -0.1979595422744751, -0.13317497074604034, -0.07182467728853226, -0.0892641469836235, -0.05383358523249626, -0.0514177531003952, -0.046356163918972015, -0.037941765040159225, 0.009598610922694206, 0.029046352952718735, 0.059682391583919525, 0.053137049078941345, 0.014526255428791046, -0.07053980976343155, -0.10104520618915558, -0.0805070698261261, -0.02633623592555523, -0.006700810976326466, -0.005301951430737972, -0.0362333320081234, -0.04376407340168953, 0.05467132106423378, 0.025432296097278595, 0.012060509994626045, -0.022590387612581253, -0.02610771730542183, -0.021223485469818115, -0.02007393352687359, -0.015282858163118362, 0.008273095823824406, 0.015339110046625137, 0.052239056676626205, 0.0406816191971302, 0.0620943047106266, 0.026452526450157166, -0.0003376388340257108, -0.013151046819984913, -0.019276905804872513, -0.000476406974485144, 0.033063288778066635, 0.03876132890582085, 0.03317723050713539, 0.10930770635604858, 0.12609106302261353, 0.13342824578285217, 0.12120353430509567, 0.058676980435848236, 0.07592218369245529, 0.08193482458591461, 0.06398347020149231, 0.07712594419717789, 0.06805115938186646, 0.098694808781147, 0.14866608381271362, 0.20477294921875, 0.20494911074638367, 0.16524285078048706, 0.1688390076160431, 0.16633254289627075, 0.1062576025724411, 0.12215996533632278, 0.20390713214874268, 0.2651367485523224, 0.25690796971321106, 0.24583959579467773, 0.256146103143692, 0.16832926869392395, 0.13466861844062805, 0.1346236914396286, 0.12321566790342331, 0.16049039363861084, 0.19890908896923065, 0.242774099111557, 0.23645171523094177, 0.27003395557403564, 0.276238352060318, 0.25729161500930786, 0.26536837220191956, 0.22318758070468903, 0.163107231259346, 0.16733112931251526, 0.18780580163002014, 0.21744175255298615, 0.23527967929840088, 0.24036073684692383, 0.2565491497516632, 0.30208536982536316, 0.35403892397880554, 0.3526226282119751, 0.3460942208766937, 0.30663153529167175, 0.33553406596183777, 0.3057543635368347, 0.2687184810638428, 0.2383570373058319, 0.2280171662569046, 0.2809559404850006, 0.30829092860221863, 0.3041536211967468, 0.3074176609516144, 0.3143196403980255, 0.2581368684768677, 0.29476305842399597, 0.3203071057796478, 0.3113045394420624, 0.30545344948768616, 0.35099008679389954, 0.3641475737094879, 0.3391929566860199, 0.342308908700943, 0.3248733878135681, 0.32878077030181885, 0.348391056060791, 0.32364922761917114, 0.3666457533836365, 0.31888890266418457, 0.3485170304775238, 0.35097619891166687, 0.29793909192085266, 0.30303287506103516, 0.32259273529052734, 0.3318563997745514, 0.3026358187198639, 0.3554430305957794, 0.37340453267097473, 0.3471658229827881, 0.3235280513763428, 0.3301352560520172, 0.3078373372554779, 0.3523867428302765, 0.3408990800380707, 0.31364673376083374, 0.347843736410141, 0.3690349757671356, 0.3545178771018982, 0.35175198316574097, 0.36120036244392395, 0.3539530336856842, 0.35774993896484375, 0.3542696237564087, 0.3310922384262085, 0.3206315040588379, 0.35456445813179016, 0.3461000323295593, 0.3260113596916199, 0.3236057460308075, 0.2945432960987091, 0.337971031665802, 0.37424618005752563, 0.3846989572048187, 0.3572649359703064, 0.37454867362976074, 0.347695529460907, 0.3549690544605255, 0.3355972468852997, 0.3330603539943695, 0.3093926012516022, 0.3089359700679779, 0.2923196256160736, 0.2620227336883545, 0.3297586441040039, 0.32742032408714294, 0.3419759273529053, 0.3073009252548218, 0.297075092792511, 0.30074185132980347, 0.325280100107193, 0.33291471004486084, 0.3332453966140747, 0.3018326759338379, 0.31633010506629944, 0.3168993890285492, 0.3271448016166687, 0.31844666600227356, 0.295942485332489, 0.2917718291282654, 0.27710267901420593, 0.26118332147598267, 0.23221439123153687, 0.3317529261112213, 0.3540629744529724, 0.2922021746635437, 0.2951115667819977, 0.2493109554052353, 0.2867589592933655, 0.2960498631000519, 0.2836502492427826, 0.31431350111961365, 0.26537907123565674, 0.2590537369251251, 0.25247299671173096, 0.214023157954216, 0.2071918398141861, 0.22232457995414734, 0.26061317324638367, 0.30542057752609253, 0.28974950313568115, 0.24859151244163513, 0.2228160947561264, 0.25007280707359314, 0.26055601239204407, 0.2254960834980011, 0.27290746569633484, 0.2760733962059021, 0.2615794539451599, 0.27167510986328125, 0.2546367347240448, 0.21572034060955048, 0.21540221571922302, 0.192155659198761, 0.16099269688129425, 0.17680823802947998, 0.2131834626197815, 0.23785944283008575, 0.18247728049755096, 0.18726205825805664, 0.12993094325065613, 0.1181115210056305, 0.18653647601604462, 0.18050558865070343, 0.16915030777454376, 0.16404005885124207, 0.12621153891086578, 0.09435564279556274, 0.10899075120687485, 0.148171529173851, 0.11626031249761581, 0.10354291647672653, 0.13250792026519775, 0.09787636995315552, 0.1030190959572792, 0.1423940807580948, 0.10291619598865509, 0.08009081333875656, 0.11242035776376724, 0.09399483352899551, 0.1172405406832695, 0.15611103177070618, 0.06934958696365356, 0.06423342972993851, 0.08321265131235123, 0.09821876883506775, 0.13949915766716003, 0.12564539909362793, 0.07938070595264435, 0.045767609030008316, 0.05813327059149742, 0.047100234776735306, 0.06823265552520752, 0.0754186138510704, 0.05630476027727127, 0.017302609980106354, 0.0008599076536484063, 0.04353911802172661, 0.05204787477850914, 0.0824984684586525, 0.08795347064733505, 0.023234887048602104, 0.0009291400201618671, -0.0076574888080358505, 0.03232860192656517, 0.07685714960098267, 0.08119689673185349, 0.022120295092463493, -0.030937619507312775, -0.01876123994588852, -0.005620893556624651, 0.016592886298894882, 0.020832696929574013, 0.02656138315796852, -0.006862107198685408, -0.04585770145058632, -0.019484128803014755, -0.04244006425142288, -0.07499007135629654, -0.07102051377296448, -0.0662568062543869, -0.07428179681301117, -0.08879119902849197, -0.1008056253194809, -0.09425801783800125, -0.06951656192541122, -0.0381024032831192, -0.05902015417814255, -0.05611433461308479, -0.0790177583694458, -0.09637999534606934, -0.09812989085912704, -0.11073868721723557, -0.04480006918311119, -0.07395800203084946, -0.09014502167701721, -0.08693195879459381, -0.11231470853090286, -0.13826541602611542, -0.1370057761669159, -0.07036778330802917, -0.0552164763212204, -0.13812334835529327, -0.12577186524868011, -0.11669572442770004, -0.14448396861553192, -0.13990573585033417, -0.13741348683834076, -0.15565867722034454, -0.20557968318462372, -0.2103797346353531, -0.17862746119499207, -0.17775960266590118, -0.20560288429260254, -0.2237730473279953, -0.2743721902370453, -0.24996384978294373, -0.23076921701431274, -0.259387344121933, -0.24719151854515076, -0.268353134393692, -0.31968554854393005, -0.31176629662513733, -0.29554569721221924, -0.2924174666404724, -0.3033452332019806, -0.30051130056381226, -0.3123569190502167, -0.3448212444782257, -0.3220278024673462, -0.33063265681266785, -0.35563501715660095, -0.34307965636253357, -0.3080213963985443, -0.3056949973106384, -0.3366694152355194, -0.34156039357185364, -0.3316612243652344, -0.3065110445022583, -0.3081991970539093, -0.31517091393470764, -0.3162621259689331, -0.3385170102119446, -0.3392433226108551, -0.3133665919303894, -0.2800193428993225, -0.25216805934906006, -0.2883094251155853, -0.2657769024372101, -0.2518283724784851, -0.291072815656662, -0.2559393048286438, -0.24693608283996582, -0.2636662721633911, -0.2624438405036926, -0.2494381219148636, -0.2416200190782547, -0.22538360953330994, -0.2591025233268738, -0.2606838047504425, -0.26585760712623596, -0.25937068462371826, -0.23794609308242798, -0.24189132452011108, -0.240736722946167, -0.25603818893432617, -0.2745775580406189, -0.25089573860168457, -0.2764233648777008, -0.29448723793029785, -0.27957355976104736, -0.28125864267349243, -0.2727208435535431, -0.28344786167144775, -0.2571921944618225, -0.2760695815086365, -0.2874547243118286, -0.30504369735717773, -0.29986709356307983, -0.29826271533966064, -0.28532710671424866, -0.2496851533651352, -0.2607952654361725, -0.29777657985687256, -0.30393722653388977, -0.290038526058197, -0.264538437128067, -0.28155800700187683, -0.28155699372291565, -0.31245583295822144, -0.33506739139556885, -0.326878160238266, -0.32665902376174927, -0.29288503527641296, -0.3238815367221832, -0.32362183928489685, -0.28742843866348267, -0.3196392357349396, -0.32520994544029236, -0.33188876509666443, -0.3426867127418518, -0.3408244550228119, -0.33985793590545654, -0.3346248269081116, -0.32897987961769104, -0.289229154586792, -0.3050055503845215, -0.35268786549568176, -0.3525750935077667, -0.3248194754123688, -0.3169674277305603, -0.2992347478866577, -0.29648488759994507, -0.3069400489330292, -0.33537572622299194, -0.34434187412261963, -0.32709017395973206, -0.28708675503730774, -0.2828000485897064, -0.2635459005832672, -0.24564994871616364, -0.25203609466552734, -0.2388342022895813, -0.27065297961235046, -0.3090958297252655, -0.2922089099884033, -0.28137531876564026, -0.2720507085323334, -0.23547059297561646, -0.2411729395389557, -0.2583547830581665, -0.2711826264858246, -0.2532021403312683, -0.22009418904781342, -0.2116345316171646, -0.19967801868915558, -0.19406458735466003, -0.2078171819448471, -0.2124902307987213, -0.20337460935115814, -0.18594178557395935, -0.1790795922279358, -0.2099793255329132, -0.2033313512802124, -0.20906804502010345, -0.19370678067207336, -0.15078547596931458, -0.13426032662391663, -0.12475015968084335\}, \{-0.11599669605493546, -0.12672565877437592, -0.12244690209627151, -0.10400579124689102, -0.10054263472557068, -0.09792455285787582, -0.11399802565574646, -0.13109661638736725, -0.1454259157180786, -0.16973887383937836, -0.16307631134986877, -0.13756509125232697, -0.11309415847063065, -0.11173500120639801, -0.15657883882522583, -0.22070199251174927, -0.25723835825920105, -0.25677669048309326, -0.18688082695007324, -0.1293829381465912, -0.07931152731180191, -0.06811366230249405, -0.1331479847431183, -0.2092551589012146, -0.2333250343799591, -0.21923862397670746, -0.18591023981571198, -0.16142664849758148, -0.1670183539390564, -0.16855256259441376, -0.15506979823112488, -0.10953260213136673, -0.061346881091594696, -0.046533118933439255, -0.06950776278972626, -0.11180009692907333, -0.14044716954231262, -0.1505882889032364, -0.13731259107589722, -0.08639223873615265, -0.04593536630272865, -0.041714977473020554, -0.06255748122930527, -0.09127826988697052, -0.11618304997682571, -0.1337864249944687, -0.13376173377037048, -0.09759178012609482, -0.0437045656144619, -0.008813206106424332, -0.005579110700637102, -0.0517657995223999, -0.1034180298447609, -0.15580838918685913, -0.19931702315807343, -0.19810673594474792, -0.15496182441711426, -0.09203467518091202, -0.07570936530828476, -0.05799258500337601, -0.0533590205013752, -0.04272526875138283, -0.014789707958698273, 0.023693863302469254, 0.03842945769429207, 0.03768279775977135, 0.004951058886945248, -0.011700049974024296, -0.0381028838455677, -0.0346871018409729, -0.03866104781627655, -0.014867539517581463, -0.010183105245232582, -0.02323286607861519, -0.03279714658856392, -0.020923582836985588, 0.039653364568948746, 0.04521671682596207, 0.046729717403650284, 0.013431270606815815, -0.022297460585832596, -0.025272676721215248, -0.04681222140789032, -0.009317823685705662, 0.02244636043906212, 0.05973266810178757, 0.0768781378865242, 0.05284608155488968, 0.07143129408359528, 0.02711583860218525, 0.03839786723256111, 0.012436555698513985, 0.004006610251963139, 0.010198242962360382, 0.02177899144589901, 0.049605343490839005, 0.06822726875543594, 0.11034061759710312, 0.12692196667194366, 0.12588554620742798, 0.12312634289264679, 0.06580373644828796, 0.06688748300075531, 0.07834338396787643, 0.079814113676548, 0.0675809308886528, 0.09340251982212067, 0.1418682485818863, 0.16081903874874115, 0.1938496083021164, 0.18371270596981049, 0.16606703400611877, 0.1453780084848404, 0.14264588057994843, 0.14140000939369202, 0.16183701157569885, 0.20625357329845428, 0.2554421126842499, 0.25908300280570984, 0.24513374269008636, 0.21646222472190857, 0.16789764165878296, 0.14027543365955353, 0.14227530360221863, 0.1517212688922882, 0.15308530628681183, 0.18558776378631592, 0.21915170550346375, 0.24104736745357513, 0.2772127389907837, 0.2755987048149109, 0.2602156102657318, 0.23977312445640564, 0.20724307000637054, 0.20667679607868195, 0.1975099742412567, 0.21368660032749176, 0.21087419986724854, 0.21999076008796692, 0.2391047328710556, 0.2487514168024063, 0.2982803285121918, 0.32930511236190796, 0.34828928112983704, 0.34602072834968567, 0.3246139585971832, 0.32108768820762634, 0.302799791097641, 0.2783316671848297, 0.25961416959762573, 0.24959249794483185, 0.26101112365722656, 0.28227928280830383, 0.2920779287815094, 0.297308087348938, 0.30792203545570374, 0.29904991388320923, 0.3141164779663086, 0.31833046674728394, 0.3227021396160126, 0.332852303981781, 0.36176905035972595, 0.36297690868377686, 0.3202771842479706, 0.32608136534690857, 0.3103209435939789, 0.321264386177063, 0.328573077917099, 0.3340657949447632, 0.3736089766025543, 0.3562493920326233, 0.3634374439716339, 0.3280748128890991, 0.3176416754722595, 0.30878958106040955, 0.3174160122871399, 0.35036471486091614, 0.32714560627937317, 0.34801530838012695, 0.3503943383693695, 0.3647993505001068, 0.3681405186653137, 0.32807648181915283, 0.32953664660453796, 0.3405321538448334, 0.34943100810050964, 0.3560551702976227, 0.3620150685310364, 0.36614885926246643, 0.3584156334400177, 0.3555119037628174, 0.36789146065711975, 0.36287903785705566, 0.35888826847076416, 0.3576664328575134, 0.36205926537513733, 0.3508644998073578, 0.3460966646671295, 0.3467444181442261, 0.32808437943458557, 0.3299960494041443, 0.3383871912956238, 0.3562009334564209, 0.3494430482387543, 0.36458173394203186, 0.36849337816238403, 0.37402328848838806, 0.3391067385673523, 0.33225658535957336, 0.31954362988471985, 0.30253204703330994, 0.302290678024292, 0.3250865936279297, 0.3264887034893036, 0.3052440583705902, 0.3117298483848572, 0.32245171070098877, 0.35018929839134216, 0.3483627140522003, 0.3254387080669403, 0.3126079738140106, 0.30825087428092957, 0.3111360967159271, 0.337426096200943, 0.3281615972518921, 0.32460328936576843, 0.3167496919631958, 0.31922122836112976, 0.2969887852668762, 0.2928389012813568, 0.2914779782295227, 0.29788267612457275, 0.27603235840797424, 0.2548941969871521, 0.28029775619506836, 0.2780568301677704, 0.29458409547805786, 0.31376251578330994, 0.3126690685749054, 0.29889237880706787, 0.27958399057388306, 0.2617403566837311, 0.2564350366592407, 0.24390245974063873, 0.23144355416297913, 0.23795807361602783, 0.2392495721578598, 0.22884014248847961, 0.21977579593658447, 0.2312030792236328, 0.25205641984939575, 0.2623029947280884, 0.24803289771080017, 0.22561702132225037, 0.2425171285867691, 0.24483416974544525, 0.23759183287620544, 0.2494782954454422, 0.2526664137840271, 0.25105059146881104, 0.27185386419296265, 0.25577855110168457, 0.22133265435695648, 0.22442537546157837, 0.216847762465477, 0.2060990184545517, 0.19253723323345184, 0.18038463592529297, 0.18606528639793396, 0.203987255692482, 0.2072320282459259, 0.18231293559074402, 0.15119066834449768, 0.15387484431266785, 0.16129066050052643, 0.17887790501117706, 0.18513309955596924, 0.16292887926101685, 0.15068158507347107, 0.11482462286949158, 0.13241270184516907, 0.1380040943622589, 0.1611821949481964, 0.16993962228298187, 0.12258587777614594, 0.11076952517032623, 0.12219234555959702, 0.10447893291711807, 0.08861193805932999, 0.10225933790206909, 0.101822130382061, 0.11767645180225372, 0.13437233865261078, 0.1269274204969406, 0.10480000078678131, 0.09080363065004349, 0.04251999035477638, 0.04932666942477226, 0.07653720676898956, 0.08902866393327713, 0.07984988391399384, 0.04786965250968933, 0.032217901200056076, 0.059549301862716675, 0.06708430498838425, 0.04271629452705383, 0.025471054017543793, 0.0028339307755231857, 0.022612009197473526, 0.030384518206119537, 0.06637311726808548, 0.06817334145307541, 0.01309833861887455, -0.023433402180671692, -0.028508609160780907, -0.0064447177574038506, 0.02477163076400757, 0.036757953464984894, 0.05077197775244713, 0.01736379601061344, -0.01713472232222557, -0.03921069577336311, -0.03334583714604378, -0.002330835210159421, -0.004604189191013575, 0.015124421566724777, -0.025950325652956963, -0.05427074059844017, -0.07467610388994217, -0.05807540938258171, -0.04211416468024254, -0.050497788935899734, -0.070103220641613, -0.08373105525970459, -0.09563173353672028, -0.11078188568353653, -0.09294647723436356, -0.06793883442878723, -0.06202074512839317, -0.08585185557603836, -0.10128496587276459, -0.1160750538110733, -0.11176074296236038, -0.11151131987571716, -0.09551885724067688, -0.11131274700164795, -0.1288195699453354, -0.12427171319723129, -0.13388344645500183, -0.13484609127044678, -0.17450851202011108, -0.15434810519218445, -0.14610441029071808, -0.1378413885831833, -0.12303981184959412, -0.15689928829669952, -0.17307148873806, -0.18288256227970123, -0.161564901471138, -0.17955632507801056, -0.19222110509872437, -0.19828343391418457, -0.17353124916553497, -0.1704094558954239, -0.16460971534252167, -0.1634485125541687, -0.18914154171943665, -0.205159530043602, -0.2215428352355957, -0.21552522480487823, -0.21112169325351715, -0.21467767655849457, -0.23298951983451843, -0.23778094351291656, -0.2613266110420227, -0.26277321577072144, -0.2719411253929138, -0.25897377729415894, -0.24848750233650208, -0.27738744020462036, -0.2742609679698944, -0.29037532210350037, -0.2810390889644623, -0.2887313961982727, -0.28644612431526184, -0.27390414476394653, -0.2792174220085144, -0.26289841532707214, -0.27343371510505676, -0.28471338748931885, -0.30152449011802673, -0.30088040232658386, -0.2987018823623657, -0.3160925805568695, -0.30822208523750305, -0.30821436643600464, -0.3087691366672516, -0.3143851161003113, -0.3263503611087799, -0.30615243315696716, -0.3010587990283966, -0.3097633421421051, -0.2977924048900604, -0.29453033208847046, -0.29459741711616516, -0.32165971398353577, -0.3067639470100403, -0.3042844831943512, -0.2966454029083252, -0.29712945222854614, -0.31660208106040955, -0.3175387382507324, -0.3415686786174774, -0.32809412479400635, -0.3161765933036804, -0.3115851581096649, -0.30468976497650146, -0.30834493041038513, -0.28966856002807617, -0.30700811743736267, -0.3051874339580536, -0.30176717042922974, -0.31210535764694214, -0.3063400387763977, -0.3143419325351715, -0.2978472113609314, -0.29519933462142944, -0.2959807813167572, -0.3171444535255432, -0.3220752477645874, -0.32276326417922974, -0.3014363646507263, -0.29133206605911255, -0.30329686403274536, -0.3293691575527191, -0.3239937722682953, -0.2958269417285919, -0.2798727750778198, -0.2874899208545685, -0.2941288352012634, -0.2959405183792114, -0.3163144886493683, -0.30902916193008423, -0.3054257333278656, -0.2976999282836914, -0.3038743734359741, -0.30711156129837036, -0.2988722622394562, -0.30524390935897827, -0.29503414034843445, -0.28208407759666443, -0.2852691411972046, -0.2906931936740875, -0.2908329963684082, -0.3099006414413452, -0.3074454069137573, -0.2910221517086029, -0.30184462666511536, -0.3030585050582886, -0.3097419738769531, -0.3090875446796417, -0.29309025406837463, -0.2863524258136749, -0.2844317555427551, -0.2845662534236908, -0.2736321687698364, -0.2625400125980377, -0.2742711901664734, -0.25656312704086304, -0.2461545616388321, -0.24723801016807556, -0.2458602637052536, -0.26603105664253235, -0.25029364228248596, -0.25270113348960876, -0.2603098452091217, -0.25414562225341797, -0.2651461064815521, -0.26387685537338257, -0.2520322799682617, -0.2558180093765259, -0.2630579471588135, -0.260568231344223, -0.24691085517406464, -0.23404790461063385, -0.24226556718349457, -0.24143891036510468, -0.2449503391981125, -0.23793034255504608, -0.23901928961277008, -0.24645687639713287, -0.2454894334077835, -0.2424713522195816, -0.22918815910816193, -0.21920651197433472, -0.22075948119163513, -0.20886623859405518, -0.2039290964603424, -0.20882266759872437, -0.19430454075336456\}\}}}
\par
{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_32bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000}
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 418909\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.12224096804857254, -0.11750572919845581, -0.10568306595087051, -0.13950054347515106, -0.1767929494380951, -0.16854417324066162, -0.14937524497509003, -0.19859987497329712, -0.18106049299240112, -0.1705458164215088, -0.158586785197258, -0.13957403600215912, -0.15010197460651398, -0.17057763040065765, -0.1989690661430359, -0.2006751298904419, -0.19865016639232635, -0.18088047206401825, -0.1808841973543167, -0.13311649858951569, -0.11018519103527069, -0.17165954411029816, -0.1653222143650055, -0.1623266488313675, -0.17777632176876068, -0.15620478987693787, -0.1446300446987152, -0.15390099585056305, -0.147407665848732, -0.11260373145341873, -0.09065605700016022, -0.0993541032075882, -0.12435109168291092, -0.13127011060714722, -0.11339204758405685, -0.09639949351549149, -0.09794000536203384, -0.118886299431324, -0.14325787127017975, -0.15544630587100983, -0.17205581068992615, -0.18651363253593445, -0.1589917093515396, -0.11641548573970795, -0.09031657129526138, -0.10161475092172623, -0.15558701753616333, -0.2206290066242218, -0.2651331126689911, -0.25911515951156616, -0.2293650358915329, -0.16655930876731873, -0.08568081259727478, -0.06969723105430603, -0.08802063763141632, -0.16804634034633636, -0.24874094128608704, -0.21678587794303894, -0.19159023463726044, -0.17705512046813965, -0.1667148768901825, -0.1511954814195633, -0.15234029293060303, -0.19241401553153992, -0.14389729499816895, -0.09133698791265488, -0.06737270951271057, -0.07686055451631546, -0.1043776273727417, -0.12858182191848755, -0.15148888528347015, -0.11613457649946213, -0.08194688707590103, -0.04282720386981964, -0.051619481295347214, -0.05822686851024628, -0.06640405207872391, -0.08420905470848083, -0.1027848944067955, -0.1465090960264206, -0.14561817049980164, -0.1762324869632721, -0.08583363890647888, 0.007658501621335745, -0.011026734486222267, -0.021674031391739845, -0.07804986089468002, -0.11646044254302979, -0.1457371860742569, -0.1734718233346939, -0.19507013261318207, -0.17732016742229462, -0.15375635027885437, -0.1089492216706276, -0.07380896806716919, -0.07088757306337357, -0.038192976266145706, -0.06499908864498138, -0.06024225801229477, -0.042679619044065475, -0.027441389858722687, 0.0041082981042563915, 0.027060341089963913, 0.03698853775858879, -0.015535242855548859, -0.014174421317875385, 0.0033486864995211363, -0.009114397689700127, 0.019884033128619194, 0.01550981868058443, -0.037357546389102936, -0.02751404419541359, -0.022459618747234344, -0.039224039763212204, -0.012722630985081196, -0.01057526282966137, -0.008604312315583229, -0.0025005422066897154, 0.0032259311992675066, 0.007971002720296383, -0.014616752974689007, -0.019033854827284813, 0.03811630606651306, 0.0795116052031517, 0.04447280615568161, 0.0326358899474144, 0.05836005508899689, 0.07428614795207977, 0.05685563385486603, 0.021324539557099342, 0.053209684789180756, 0.06457655876874924, 0.017640281468629837, 0.03641613945364952, 0.0371590256690979, 0.02347523346543312, 0.0534922331571579, 0.09033214300870895, 0.14600975811481476, 0.1459035873413086, 0.13997846841812134, 0.1391625851392746, 0.09172435104846954, 0.08337311446666718, 0.0991726964712143, 0.07403057813644409, 0.043880339711904526, 0.059704579412937164, 0.08842291682958603, 0.13797225058078766, 0.18698176741600037, 0.20380723476409912, 0.20281563699245453, 0.18895266950130463, 0.2018708437681198, 0.1857737898826599, 0.17444564402103424, 0.18080522119998932, 0.20557913184165955, 0.2852883040904999, 0.2686017155647278, 0.22429560124874115, 0.18533986806869507, 0.14078998565673828, 0.1659850925207138, 0.19331330060958862, 0.2132040113210678, 0.20900602638721466, 0.23155458271503448, 0.21515335142612457, 0.18960048258304596, 0.2552071809768677, 0.28179067373275757, 0.2602389454841614, 0.2297178953886032, 0.23503455519676208, 0.23632201552391052, 0.20582474768161774, 0.20839151740074158, 0.2220737338066101, 0.21372979879379272, 0.24515412747859955, 0.251130610704422, 0.24134761095046997, 0.29103997349739075, 0.2575518786907196, 0.2912968099117279, 0.3386499285697937, 0.3110390603542328, 0.33430060744285583, 0.3444327116012573, 0.3543379306793213, 0.29801470041275024, 0.2688961923122406, 0.29495948553085327, 0.2926243543624878, 0.27863457798957825, 0.28476187586784363, 0.3210006058216095, 0.3082529902458191, 0.31962329149246216, 0.2942540943622589, 0.22272787988185883, 0.2429756373167038, 0.3119921088218689, 0.3556602895259857, 0.36511701345443726, 0.3722485601902008, 0.3644947409629822, 0.34194156527519226, 0.33835262060165405, 0.3356825113296509, 0.313857764005661, 0.2924339771270752, 0.3130567967891693, 0.34633496403694153, 0.3435116410255432, 0.3676229417324066, 0.35475513339042664, 0.3312518894672394, 0.35621294379234314, 0.3662162721157074, 0.3661949336528778, 0.34053680300712585, 0.36795416474342346, 0.38009434938430786, 0.3904728293418884, 0.3909663259983063, 0.3562968969345093, 0.36190885305404663, 0.3317756652832031, 0.35892489552497864, 0.33578428626060486, 0.32347404956817627, 0.38036999106407166, 0.3689430356025696, 0.38148778676986694, 0.365984171628952, 0.3566977381706238, 0.35760003328323364, 0.35259005427360535, 0.34553033113479614, 0.33848538994789124, 0.343122273683548, 0.34196919202804565, 0.3724546432495117, 0.36268332600593567, 0.3571181893348694, 0.3456774055957794, 0.32174304127693176, 0.33917397260665894, 0.35040560364723206, 0.36867985129356384, 0.34089750051498413, 0.3510991930961609, 0.4377979636192322, 0.4027383029460907, 0.34163492918014526, 0.33044081926345825, 0.27512919902801514, 0.3000381588935852, 0.3319402039051056, 0.3188630938529968, 0.3714633285999298, 0.37567785382270813, 0.3605020344257355, 0.3805369734764099, 0.35583651065826416, 0.32445028424263, 0.3273753225803375, 0.34350693225860596, 0.37266772985458374, 0.4051303267478943, 0.38749104738235474, 0.33489713072776794, 0.2926176190376282, 0.2997909188270569, 0.35792627930641174, 0.3495406210422516, 0.32898175716400146, 0.34207838773727417, 0.30513614416122437, 0.2971348166465759, 0.323106050491333, 0.32884302735328674, 0.3072342872619629, 0.3113476037979126, 0.32329732179641724, 0.30062735080718994, 0.3049944341182709, 0.2959534227848053, 0.3006644546985626, 0.27240437269210815, 0.24213634431362152, 0.27605050802230835, 0.22400249540805817, 0.1937772035598755, 0.24250462651252747, 0.24638913571834564, 0.24197907745838165, 0.24907651543617249, 0.22003580629825592, 0.17622274160385132, 0.16129399836063385, 0.19908778369426727, 0.2391531616449356, 0.21145354211330414, 0.20967057347297668, 0.23966427147388458, 0.21367546916007996, 0.2110227644443512, 0.26634150743484497, 0.2754223644733429, 0.24296922981739044, 0.2476264238357544, 0.23611263930797577, 0.18878644704818726, 0.20936761796474457, 0.200220987200737, 0.12659871578216553, 0.16990607976913452, 0.22594323754310608, 0.23622563481330872, 0.2579008638858795, 0.23935936391353607, 0.20377521216869354, 0.1770242303609848, 0.19050700962543488, 0.17883515357971191, 0.1445503532886505, 0.16307665407657623, 0.18120287358760834, 0.19124464690685272, 0.1822609156370163, 0.1725730150938034, 0.19347649812698364, 0.16731098294258118, 0.1431523710489273, 0.17723296582698822, 0.16800399124622345, 0.15858152508735657, 0.16715222597122192, 0.15132932364940643, 0.15779832005500793, 0.1636512130498886, 0.16144566237926483, 0.13408072292804718, 0.10357234627008438, 0.11535077542066574, 0.12146414816379547, 0.1260329633951187, 0.13228699564933777, 0.14134319126605988, 0.15444394946098328, 0.1138167753815651, 0.09479106217622757, 0.11657468229532242, 0.0768308937549591, 0.03843776509165764, 0.04751915857195854, 0.06857322156429291, 0.08591072261333466, 0.08842732757329941, 0.061318933963775635, 0.02593398652970791, 0.01728190667927265, 0.05172222852706909, 0.08984250575304031, 0.0773039236664772, 0.08697127550840378, 0.06321786344051361, 0.02655307576060295, 0.023250669240951538, -0.007586643565446138, 0.041380126029253006, 0.06117812171578407, 0.023553259670734406, 0.041256777942180634, 0.0491880401968956, 0.03875471651554108, 0.012586113065481186, -0.0021925601176917553, 0.03759865090250969, 0.04980526491999626, -0.02785763330757618, -0.04435095936059952, -0.02374078519642353, -0.061266154050827026, -0.06957022845745087, -0.053918372839689255, -0.030251622200012207, -0.0423254556953907, -0.08535436540842056, -0.09698139876127243, -0.08655910938978195, -0.1095670685172081, -0.15701161324977875, -0.16672946512699127, -0.18120694160461426, -0.157960444688797, -0.11035372316837311, -0.13494805991649628, -0.1468876451253891, -0.11911755055189133, -0.14180822670459747, -0.1837518960237503, -0.18428651988506317, -0.18684957921504974, -0.19712373614311218, -0.21363863348960876, -0.22607079148292542, -0.220926895737648, -0.23230569064617157, -0.20582062005996704, -0.1689976453781128, -0.19862088561058044, -0.22671961784362793, -0.21809007227420807, -0.1945611536502838, -0.2026081383228302, -0.24522821605205536, -0.26636841893196106, -0.2630700170993805, -0.22752085328102112, -0.19531291723251343, -0.19472180306911469, -0.19370894134044647, -0.20744088292121887, -0.23367057740688324, -0.23379568755626678, -0.21265174448490143, -0.18054811656475067, -0.15807342529296875, -0.2104102522134781, -0.23518647253513336, -0.21284565329551697, -0.2455269992351532, -0.225520059466362, -0.17518840730190277, -0.1689310520887375, -0.17387276887893677, -0.1667395532131195, -0.16734392940998077, -0.18754293024539948, -0.19966770708560944, -0.2391132265329361, -0.2407148778438568, -0.22207456827163696, -0.21636144816875458, -0.18523602187633514, -0.18086351454257965, -0.19031384587287903, -0.2032298445701599, -0.2355280965566635, -0.25809159874916077, -0.24057817459106445, -0.26307928562164307, -0.2787078022956848, -0.2530474364757538, -0.2552593946456909, -0.24616271257400513, -0.2615078389644623, -0.25530901551246643, -0.25154218077659607, -0.27712327241897583, -0.2809199392795563, -0.28890177607536316, -0.27933064103126526, -0.2856236696243286, -0.2849232852458954, -0.25188595056533813, -0.24557361006736755, -0.27384838461875916, -0.289350301027298, -0.29016152024269104, -0.27573761343955994, -0.2779495418071747, -0.3076897859573364, -0.3089178502559662, -0.3372926115989685, -0.3446064889431, -0.32759666442871094, -0.3277808725833893, -0.2960720956325531, -0.3113674819469452, -0.3466232419013977, -0.3239333927631378, -0.33543965220451355, -0.3672158420085907, -0.3573152422904968, -0.37235456705093384, -0.3797309696674347, -0.37353891134262085, -0.3716341257095337, -0.36808523535728455, -0.37087276577949524, -0.33149397373199463, -0.3127138912677765, -0.34366124868392944, -0.3634365499019623\}, \{-0.13098230957984924, -0.13301971554756165, -0.11656489223241806, -0.11829821765422821, -0.12535403668880463, -0.16248205304145813, -0.18745166063308716, -0.22520697116851807, -0.21080034971237183, -0.1904013305902481, -0.16496029496192932, -0.14162300527095795, -0.14347313344478607, -0.16602294147014618, -0.19634389877319336, -0.2149200439453125, -0.22522978484630585, -0.20178663730621338, -0.18612037599086761, -0.14985358715057373, -0.12262580543756485, -0.13781802356243134, -0.14350241422653198, -0.1589389443397522, -0.19272969663143158, -0.2097785919904709, -0.1824365258216858, -0.145534947514534, -0.11350366473197937, -0.09282288700342178, -0.1014917716383934, -0.12031487375497818, -0.13632328808307648, -0.14385820925235748, -0.13423022627830505, -0.12407434731721878, -0.1193736270070076, -0.1127484068274498, -0.11710993945598602, -0.1288047581911087, -0.15479081869125366, -0.18161211907863617, -0.17203018069267273, -0.1354159414768219, -0.11068115383386612, -0.1151931881904602, -0.1491471529006958, -0.20003053545951843, -0.23764470219612122, -0.2461288869380951, -0.21695780754089355, -0.15572752058506012, -0.09187649190425873, -0.07665468752384186, -0.1101890280842781, -0.17380939424037933, -0.22679995000362396, -0.21984511613845825, -0.19822350144386292, -0.1734401434659958, -0.1684066355228424, -0.1743251085281372, -0.17481721937656403, -0.1811244636774063, -0.14501699805259705, -0.09695302695035934, -0.06656937301158905, -0.06322145462036133, -0.08241093903779984, -0.12110648304224014, -0.14909732341766357, -0.1519862860441208, -0.13120222091674805, -0.06823401898145676, -0.02195756509900093, 0.005626976024359465, -0.023387039080262184, -0.07004567980766296, -0.11024026572704315, -0.15960432589054108, -0.16376608610153198, -0.15641160309314728, -0.08497655391693115, -0.008670007809996605, 0.009331360459327698, 0.01016170997172594, -0.04541979730129242, -0.11395926773548126, -0.15092238783836365, -0.20130449533462524, -0.20624154806137085, -0.1671808809041977, -0.13221855461597443, -0.0661710575222969, -0.06806620210409164, -0.05716852471232414, -0.04093584418296814, -0.0650990754365921, -0.025084052234888077, -0.019840111956000328, -0.008776037022471428, 0.014058645814657211, 0.017108915373682976, 0.02887691929936409, 0.013604167848825455, 0.0004400121106300503, -0.0008256957517005503, -0.009266170673072338, 0.007763943634927273, 0.014831318520009518, -0.030834661796689034, -0.034233853220939636, -0.029101157560944557, -0.026344917714595795, -0.01923276111483574, -0.0030079034622758627, 0.04014914110302925, 0.021990902721881866, 0.0011702945921570063, -0.012742288410663605, -0.026323873549699783, -0.012787616811692715, 0.012888557277619839, 0.052450962364673615, 0.07475677132606506, 0.08385134488344193, 0.07785890996456146, 0.06855015456676483, 0.046159904450178146, 0.024771152064204216, 0.03396138921380043, 0.03649052605032921, 0.03350280970335007, 0.03868703544139862, 0.04720373451709747, 0.047265440225601196, 0.04833248630166054, 0.08512450754642487, 0.12757368385791779, 0.1379624307155609, 0.14640067517757416, 0.13506022095680237, 0.09595006704330444, 0.08101014792919159, 0.06884046643972397, 0.07044558227062225, 0.08666981011629105, 0.08834072947502136, 0.11427663266658783, 0.13171352446079254, 0.1615714579820633, 0.20717056095600128, 0.20177707076072693, 0.18966683745384216, 0.17323966324329376, 0.15665693581104279, 0.17353065311908722, 0.1984722912311554, 0.23194125294685364, 0.26697951555252075, 0.2586726248264313, 0.22821970283985138, 0.20102165639400482, 0.17558340728282928, 0.1663520485162735, 0.17179147899150848, 0.18700683116912842, 0.1951422244310379, 0.2182496041059494, 0.23418676853179932, 0.23946397006511688, 0.26715296506881714, 0.273065984249115, 0.2674766480922699, 0.2560798227787018, 0.2533726096153259, 0.24914351105690002, 0.20119798183441162, 0.19149690866470337, 0.204098641872406, 0.2033185213804245, 0.23972539603710175, 0.24206045269966125, 0.25790032744407654, 0.2954062223434448, 0.2876637279987335, 0.3143113851547241, 0.3211040198802948, 0.3320118188858032, 0.3494296967983246, 0.3302988111972809, 0.34971290826797485, 0.3252882659435272, 0.2892061471939087, 0.2950528562068939, 0.2824278771877289, 0.3033698499202728, 0.32549065351486206, 0.30894389748573303, 0.3132327198982239, 0.3186533451080322, 0.3059418201446533, 0.286128968000412, 0.27375689148902893, 0.29324260354042053, 0.3319074809551239, 0.36915186047554016, 0.39437711238861084, 0.39165836572647095, 0.347377210855484, 0.31485727429389954, 0.30959588289260864, 0.3261728286743164, 0.3423120677471161, 0.3420419991016388, 0.35451993346214294, 0.34238627552986145, 0.33935263752937317, 0.34691545367240906, 0.3630000650882721, 0.37347179651260376, 0.3574090301990509, 0.3550010919570923, 0.3445420265197754, 0.3546827733516693, 0.3539896607398987, 0.3684117794036865, 0.39077886939048767, 0.36408862471580505, 0.3360978364944458, 0.3197782337665558, 0.3435496687889099, 0.35054486989974976, 0.3557061553001404, 0.37993210554122925, 0.39068374037742615, 0.40063023567199707, 0.38693132996559143, 0.3668704032897949, 0.35698202252388, 0.3608799874782562, 0.35217344760894775, 0.35569247603416443, 0.35453006625175476, 0.3387382924556732, 0.34590432047843933, 0.35231277346611023, 0.3653433918952942, 0.3511964976787567, 0.3419061005115509, 0.34664759039878845, 0.35771405696868896, 0.3725084960460663, 0.3510756194591522, 0.3647887408733368, 0.37821412086486816, 0.35716962814331055, 0.3511192500591278, 0.34456926584243774, 0.3314865231513977, 0.3208308219909668, 0.3156222999095917, 0.31540369987487793, 0.32744455337524414, 0.3372170925140381, 0.3380419611930847, 0.3529544472694397, 0.3704774081707001, 0.36462560296058655, 0.34822919964790344, 0.3377537727355957, 0.3367040455341339, 0.3352885842323303, 0.33520692586898804, 0.33603182435035706, 0.3249315321445465, 0.3334832787513733, 0.3402125835418701, 0.32134097814559937, 0.3175240457057953, 0.3239133358001709, 0.3080558180809021, 0.2940305769443512, 0.31710487604141235, 0.32018688321113586, 0.3021196722984314, 0.31539735198020935, 0.3222084939479828, 0.31612542271614075, 0.31298354268074036, 0.300657719373703, 0.28344833850860596, 0.2668655216693878, 0.25927987694740295, 0.2593653202056885, 0.25572603940963745, 0.24297574162483215, 0.23936042189598083, 0.2306809276342392, 0.2263612002134323, 0.2444968968629837, 0.23702287673950195, 0.23908279836177826, 0.23235733807086945, 0.22549593448638916, 0.24629828333854675, 0.23005014657974243, 0.24215242266654968, 0.25283926725387573, 0.2293381541967392, 0.23586948215961456, 0.25638747215270996, 0.2559342384338379, 0.2412996143102646, 0.25360795855522156, 0.25039905309677124, 0.23234722018241882, 0.22161784768104553, 0.20286725461483002, 0.1728346347808838, 0.16851651668548584, 0.2065815031528473, 0.213515505194664, 0.21770180761814117, 0.2098827213048935, 0.17774656414985657, 0.17121168971061707, 0.17504063248634338, 0.1757458746433258, 0.16709795594215393, 0.17267844080924988, 0.16643109917640686, 0.1688535511493683, 0.1758764684200287, 0.1518385112285614, 0.15622374415397644, 0.15530139207839966, 0.1624431163072586, 0.17321977019309998, 0.13510893285274506, 0.11024846136569977, 0.12457874417304993, 0.14784744381904602, 0.15759935975074768, 0.14089402556419373, 0.10344935953617096, 0.09838313609361649, 0.10374749451875687, 0.12493053823709488, 0.15402451157569885, 0.13285315036773682, 0.11931116133928299, 0.08833281695842743, 0.08918523043394089, 0.11602802574634552, 0.1011933907866478, 0.09568271785974503, 0.0639972984790802, 0.04696385934948921, 0.04943601042032242, 0.05571720004081726, 0.0727148950099945, 0.07865297049283981, 0.07631032913923264, 0.037004195153713226, 0.009603231213986874, 0.01828043721616268, 0.051060449331998825, 0.07627253234386444, 0.0738271176815033, 0.05658450722694397, 0.013986565172672272, -0.015534968115389347, -0.02274533361196518, 0.003938691224902868, 0.03155204653739929, 0.02330840937793255, 0.03788147121667862, 0.0311247818171978, 0.006079403683543205, -0.014304974116384983, -0.0473160557448864, -0.015843408182263374, -0.0017000987427309155, -0.013982987962663174, -0.008386271074414253, -0.04862101003527641, -0.0791562870144844, -0.0964505523443222, -0.07188238948583603, -0.03198642656207085, -0.034543123096227646, -0.05560626462101936, -0.09328742325305939, -0.0980432853102684, -0.11230849474668503, -0.12309566885232925, -0.11265511065721512, -0.11771883815526962, -0.10521982610225677, -0.10165797173976898, -0.1029997169971466, -0.10343661904335022, -0.09955000877380371, -0.10381722450256348, -0.12423542141914368, -0.13453924655914307, -0.15502531826496124, -0.15178704261779785, -0.1531396061182022, -0.15834370255470276, -0.14455945789813995, -0.1743067353963852, -0.17451700568199158, -0.15113615989685059, -0.14568006992340088, -0.13900914788246155, -0.17267492413520813, -0.19402097165584564, -0.20098720490932465, -0.2049938291311264, -0.17329798638820648, -0.16492614150047302, -0.17401424050331116, -0.1855435073375702, -0.20132692158222198, -0.19034720957279205, -0.18963919579982758, -0.19387602806091309, -0.18623121082782745, -0.19368135929107666, -0.2003438025712967, -0.20840629935264587, -0.22988379001617432, -0.23340362310409546, -0.2340153157711029, -0.25260746479034424, -0.24356180429458618, -0.23030529916286469, -0.22164814174175262, -0.22994613647460938, -0.2506025433540344, -0.2347460687160492, -0.24826651811599731, -0.2629214823246002, -0.2695138156414032, -0.28741344809532166, -0.27443358302116394, -0.2764207422733307, -0.2671276330947876, -0.24025899171829224, -0.24300161004066467, -0.24890510737895966, -0.26734983921051025, -0.2829558253288269, -0.2693065106868744, -0.2842794358730316, -0.2838103175163269, -0.27301153540611267, -0.2909810245037079, -0.29036033153533936, -0.30320534110069275, -0.3014327883720398, -0.2898329198360443, -0.2862693965435028, -0.287814736366272, -0.29961204528808594, -0.297253280878067, -0.3084547817707062, -0.3071892261505127, -0.29667341709136963, -0.2903779149055481, -0.29658836126327515, -0.3059506416320801, -0.292972207069397, -0.2861323952674866, -0.2874835431575775, -0.3051760196685791, -0.31047531962394714, -0.3169917166233063, -0.3349168300628662, -0.32608872652053833, -0.3180573582649231, -0.31016436219215393, -0.31271636486053467, -0.3231419026851654, -0.3134830594062805, -0.3148261606693268, -0.32320359349250793, -0.3186570703983307, -0.3166942894458771, -0.32194268703460693, -0.3222540020942688, -0.3167117238044739, -0.3292582333087921, -0.32684820890426636, -0.3000186085700989, -0.3036000430583954, -0.31384775042533875, -0.3126133382320404\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_48000::bitDepth = 32}}
\par
{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_32bit_48000::numSamplesPerChannel = 418909}}
\par
{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_32bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_32bit_48000}
{\xe \v aiff_stereo_32bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_32bit_48000::testBuffer = \{\{-0.12224096804857254, -0.11750572919845581, -0.10568306595087051, -0.13950054347515106, -0.1767929494380951, -0.16854417324066162, -0.14937524497509003, -0.19859987497329712, -0.18106049299240112, -0.1705458164215088, -0.158586785197258, -0.13957403600215912, -0.15010197460651398, -0.17057763040065765, -0.1989690661430359, -0.2006751298904419, -0.19865016639232635, -0.18088047206401825, -0.1808841973543167, -0.13311649858951569, -0.11018519103527069, -0.17165954411029816, -0.1653222143650055, -0.1623266488313675, -0.17777632176876068, -0.15620478987693787, -0.1446300446987152, -0.15390099585056305, -0.147407665848732, -0.11260373145341873, -0.09065605700016022, -0.0993541032075882, -0.12435109168291092, -0.13127011060714722, -0.11339204758405685, -0.09639949351549149, -0.09794000536203384, -0.118886299431324, -0.14325787127017975, -0.15544630587100983, -0.17205581068992615, -0.18651363253593445, -0.1589917093515396, -0.11641548573970795, -0.09031657129526138, -0.10161475092172623, -0.15558701753616333, -0.2206290066242218, -0.2651331126689911, -0.25911515951156616, -0.2293650358915329, -0.16655930876731873, -0.08568081259727478, -0.06969723105430603, -0.08802063763141632, -0.16804634034633636, -0.24874094128608704, -0.21678587794303894, -0.19159023463726044, -0.17705512046813965, -0.1667148768901825, -0.1511954814195633, -0.15234029293060303, -0.19241401553153992, -0.14389729499816895, -0.09133698791265488, -0.06737270951271057, -0.07686055451631546, -0.1043776273727417, -0.12858182191848755, -0.15148888528347015, -0.11613457649946213, -0.08194688707590103, -0.04282720386981964, -0.051619481295347214, -0.05822686851024628, -0.06640405207872391, -0.08420905470848083, -0.1027848944067955, -0.1465090960264206, -0.14561817049980164, -0.1762324869632721, -0.08583363890647888, 0.007658501621335745, -0.011026734486222267, -0.021674031391739845, -0.07804986089468002, -0.11646044254302979, -0.1457371860742569, -0.1734718233346939, -0.19507013261318207, -0.17732016742229462, -0.15375635027885437, -0.1089492216706276, -0.07380896806716919, -0.07088757306337357, -0.038192976266145706, -0.06499908864498138, -0.06024225801229477, -0.042679619044065475, -0.027441389858722687, 0.0041082981042563915, 0.027060341089963913, 0.03698853775858879, -0.015535242855548859, -0.014174421317875385, 0.0033486864995211363, -0.009114397689700127, 0.019884033128619194, 0.01550981868058443, -0.037357546389102936, -0.02751404419541359, -0.022459618747234344, -0.039224039763212204, -0.012722630985081196, -0.01057526282966137, -0.008604312315583229, -0.0025005422066897154, 0.0032259311992675066, 0.007971002720296383, -0.014616752974689007, -0.019033854827284813, 0.03811630606651306, 0.0795116052031517, 0.04447280615568161, 0.0326358899474144, 0.05836005508899689, 0.07428614795207977, 0.05685563385486603, 0.021324539557099342, 0.053209684789180756, 0.06457655876874924, 0.017640281468629837, 0.03641613945364952, 0.0371590256690979, 0.02347523346543312, 0.0534922331571579, 0.09033214300870895, 0.14600975811481476, 0.1459035873413086, 0.13997846841812134, 0.1391625851392746, 0.09172435104846954, 0.08337311446666718, 0.0991726964712143, 0.07403057813644409, 0.043880339711904526, 0.059704579412937164, 0.08842291682958603, 0.13797225058078766, 0.18698176741600037, 0.20380723476409912, 0.20281563699245453, 0.18895266950130463, 0.2018708437681198, 0.1857737898826599, 0.17444564402103424, 0.18080522119998932, 0.20557913184165955, 0.2852883040904999, 0.2686017155647278, 0.22429560124874115, 0.18533986806869507, 0.14078998565673828, 0.1659850925207138, 0.19331330060958862, 0.2132040113210678, 0.20900602638721466, 0.23155458271503448, 0.21515335142612457, 0.18960048258304596, 0.2552071809768677, 0.28179067373275757, 0.2602389454841614, 0.2297178953886032, 0.23503455519676208, 0.23632201552391052, 0.20582474768161774, 0.20839151740074158, 0.2220737338066101, 0.21372979879379272, 0.24515412747859955, 0.251130610704422, 0.24134761095046997, 0.29103997349739075, 0.2575518786907196, 0.2912968099117279, 0.3386499285697937, 0.3110390603542328, 0.33430060744285583, 0.3444327116012573, 0.3543379306793213, 0.29801470041275024, 0.2688961923122406, 0.29495948553085327, 0.2926243543624878, 0.27863457798957825, 0.28476187586784363, 0.3210006058216095, 0.3082529902458191, 0.31962329149246216, 0.2942540943622589, 0.22272787988185883, 0.2429756373167038, 0.3119921088218689, 0.3556602895259857, 0.36511701345443726, 0.3722485601902008, 0.3644947409629822, 0.34194156527519226, 0.33835262060165405, 0.3356825113296509, 0.313857764005661, 0.2924339771270752, 0.3130567967891693, 0.34633496403694153, 0.3435116410255432, 0.3676229417324066, 0.35475513339042664, 0.3312518894672394, 0.35621294379234314, 0.3662162721157074, 0.3661949336528778, 0.34053680300712585, 0.36795416474342346, 0.38009434938430786, 0.3904728293418884, 0.3909663259983063, 0.3562968969345093, 0.36190885305404663, 0.3317756652832031, 0.35892489552497864, 0.33578428626060486, 0.32347404956817627, 0.38036999106407166, 0.3689430356025696, 0.38148778676986694, 0.365984171628952, 0.3566977381706238, 0.35760003328323364, 0.35259005427360535, 0.34553033113479614, 0.33848538994789124, 0.343122273683548, 0.34196919202804565, 0.3724546432495117, 0.36268332600593567, 0.3571181893348694, 0.3456774055957794, 0.32174304127693176, 0.33917397260665894, 0.35040560364723206, 0.36867985129356384, 0.34089750051498413, 0.3510991930961609, 0.4377979636192322, 0.4027383029460907, 0.34163492918014526, 0.33044081926345825, 0.27512919902801514, 0.3000381588935852, 0.3319402039051056, 0.3188630938529968, 0.3714633285999298, 0.37567785382270813, 0.3605020344257355, 0.3805369734764099, 0.35583651065826416, 0.32445028424263, 0.3273753225803375, 0.34350693225860596, 0.37266772985458374, 0.4051303267478943, 0.38749104738235474, 0.33489713072776794, 0.2926176190376282, 0.2997909188270569, 0.35792627930641174, 0.3495406210422516, 0.32898175716400146, 0.34207838773727417, 0.30513614416122437, 0.2971348166465759, 0.323106050491333, 0.32884302735328674, 0.3072342872619629, 0.3113476037979126, 0.32329732179641724, 0.30062735080718994, 0.3049944341182709, 0.2959534227848053, 0.3006644546985626, 0.27240437269210815, 0.24213634431362152, 0.27605050802230835, 0.22400249540805817, 0.1937772035598755, 0.24250462651252747, 0.24638913571834564, 0.24197907745838165, 0.24907651543617249, 0.22003580629825592, 0.17622274160385132, 0.16129399836063385, 0.19908778369426727, 0.2391531616449356, 0.21145354211330414, 0.20967057347297668, 0.23966427147388458, 0.21367546916007996, 0.2110227644443512, 0.26634150743484497, 0.2754223644733429, 0.24296922981739044, 0.2476264238357544, 0.23611263930797577, 0.18878644704818726, 0.20936761796474457, 0.200220987200737, 0.12659871578216553, 0.16990607976913452, 0.22594323754310608, 0.23622563481330872, 0.2579008638858795, 0.23935936391353607, 0.20377521216869354, 0.1770242303609848, 0.19050700962543488, 0.17883515357971191, 0.1445503532886505, 0.16307665407657623, 0.18120287358760834, 0.19124464690685272, 0.1822609156370163, 0.1725730150938034, 0.19347649812698364, 0.16731098294258118, 0.1431523710489273, 0.17723296582698822, 0.16800399124622345, 0.15858152508735657, 0.16715222597122192, 0.15132932364940643, 0.15779832005500793, 0.1636512130498886, 0.16144566237926483, 0.13408072292804718, 0.10357234627008438, 0.11535077542066574, 0.12146414816379547, 0.1260329633951187, 0.13228699564933777, 0.14134319126605988, 0.15444394946098328, 0.1138167753815651, 0.09479106217622757, 0.11657468229532242, 0.0768308937549591, 0.03843776509165764, 0.04751915857195854, 0.06857322156429291, 0.08591072261333466, 0.08842732757329941, 0.061318933963775635, 0.02593398652970791, 0.01728190667927265, 0.05172222852706909, 0.08984250575304031, 0.0773039236664772, 0.08697127550840378, 0.06321786344051361, 0.02655307576060295, 0.023250669240951538, -0.007586643565446138, 0.041380126029253006, 0.06117812171578407, 0.023553259670734406, 0.041256777942180634, 0.0491880401968956, 0.03875471651554108, 0.012586113065481186, -0.0021925601176917553, 0.03759865090250969, 0.04980526491999626, -0.02785763330757618, -0.04435095936059952, -0.02374078519642353, -0.061266154050827026, -0.06957022845745087, -0.053918372839689255, -0.030251622200012207, -0.0423254556953907, -0.08535436540842056, -0.09698139876127243, -0.08655910938978195, -0.1095670685172081, -0.15701161324977875, -0.16672946512699127, -0.18120694160461426, -0.157960444688797, -0.11035372316837311, -0.13494805991649628, -0.1468876451253891, -0.11911755055189133, -0.14180822670459747, -0.1837518960237503, -0.18428651988506317, -0.18684957921504974, -0.19712373614311218, -0.21363863348960876, -0.22607079148292542, -0.220926895737648, -0.23230569064617157, -0.20582062005996704, -0.1689976453781128, -0.19862088561058044, -0.22671961784362793, -0.21809007227420807, -0.1945611536502838, -0.2026081383228302, -0.24522821605205536, -0.26636841893196106, -0.2630700170993805, -0.22752085328102112, -0.19531291723251343, -0.19472180306911469, -0.19370894134044647, -0.20744088292121887, -0.23367057740688324, -0.23379568755626678, -0.21265174448490143, -0.18054811656475067, -0.15807342529296875, -0.2104102522134781, -0.23518647253513336, -0.21284565329551697, -0.2455269992351532, -0.225520059466362, -0.17518840730190277, -0.1689310520887375, -0.17387276887893677, -0.1667395532131195, -0.16734392940998077, -0.18754293024539948, -0.19966770708560944, -0.2391132265329361, -0.2407148778438568, -0.22207456827163696, -0.21636144816875458, -0.18523602187633514, -0.18086351454257965, -0.19031384587287903, -0.2032298445701599, -0.2355280965566635, -0.25809159874916077, -0.24057817459106445, -0.26307928562164307, -0.2787078022956848, -0.2530474364757538, -0.2552593946456909, -0.24616271257400513, -0.2615078389644623, -0.25530901551246643, -0.25154218077659607, -0.27712327241897583, -0.2809199392795563, -0.28890177607536316, -0.27933064103126526, -0.2856236696243286, -0.2849232852458954, -0.25188595056533813, -0.24557361006736755, -0.27384838461875916, -0.289350301027298, -0.29016152024269104, -0.27573761343955994, -0.2779495418071747, -0.3076897859573364, -0.3089178502559662, -0.3372926115989685, -0.3446064889431, -0.32759666442871094, -0.3277808725833893, -0.2960720956325531, -0.3113674819469452, -0.3466232419013977, -0.3239333927631378, -0.33543965220451355, -0.3672158420085907, -0.3573152422904968, -0.37235456705093384, -0.3797309696674347, -0.37353891134262085, -0.3716341257095337, -0.36808523535728455, -0.37087276577949524, -0.33149397373199463, -0.3127138912677765, -0.34366124868392944, -0.3634365499019623\}, \{-0.13098230957984924, -0.13301971554756165, -0.11656489223241806, -0.11829821765422821, -0.12535403668880463, -0.16248205304145813, -0.18745166063308716, -0.22520697116851807, -0.21080034971237183, -0.1904013305902481, -0.16496029496192932, -0.14162300527095795, -0.14347313344478607, -0.16602294147014618, -0.19634389877319336, -0.2149200439453125, -0.22522978484630585, -0.20178663730621338, -0.18612037599086761, -0.14985358715057373, -0.12262580543756485, -0.13781802356243134, -0.14350241422653198, -0.1589389443397522, -0.19272969663143158, -0.2097785919904709, -0.1824365258216858, -0.145534947514534, -0.11350366473197937, -0.09282288700342178, -0.1014917716383934, -0.12031487375497818, -0.13632328808307648, -0.14385820925235748, -0.13423022627830505, -0.12407434731721878, -0.1193736270070076, -0.1127484068274498, -0.11710993945598602, -0.1288047581911087, -0.15479081869125366, -0.18161211907863617, -0.17203018069267273, -0.1354159414768219, -0.11068115383386612, -0.1151931881904602, -0.1491471529006958, -0.20003053545951843, -0.23764470219612122, -0.2461288869380951, -0.21695780754089355, -0.15572752058506012, -0.09187649190425873, -0.07665468752384186, -0.1101890280842781, -0.17380939424037933, -0.22679995000362396, -0.21984511613845825, -0.19822350144386292, -0.1734401434659958, -0.1684066355228424, -0.1743251085281372, -0.17481721937656403, -0.1811244636774063, -0.14501699805259705, -0.09695302695035934, -0.06656937301158905, -0.06322145462036133, -0.08241093903779984, -0.12110648304224014, -0.14909732341766357, -0.1519862860441208, -0.13120222091674805, -0.06823401898145676, -0.02195756509900093, 0.005626976024359465, -0.023387039080262184, -0.07004567980766296, -0.11024026572704315, -0.15960432589054108, -0.16376608610153198, -0.15641160309314728, -0.08497655391693115, -0.008670007809996605, 0.009331360459327698, 0.01016170997172594, -0.04541979730129242, -0.11395926773548126, -0.15092238783836365, -0.20130449533462524, -0.20624154806137085, -0.1671808809041977, -0.13221855461597443, -0.0661710575222969, -0.06806620210409164, -0.05716852471232414, -0.04093584418296814, -0.0650990754365921, -0.025084052234888077, -0.019840111956000328, -0.008776037022471428, 0.014058645814657211, 0.017108915373682976, 0.02887691929936409, 0.013604167848825455, 0.0004400121106300503, -0.0008256957517005503, -0.009266170673072338, 0.007763943634927273, 0.014831318520009518, -0.030834661796689034, -0.034233853220939636, -0.029101157560944557, -0.026344917714595795, -0.01923276111483574, -0.0030079034622758627, 0.04014914110302925, 0.021990902721881866, 0.0011702945921570063, -0.012742288410663605, -0.026323873549699783, -0.012787616811692715, 0.012888557277619839, 0.052450962364673615, 0.07475677132606506, 0.08385134488344193, 0.07785890996456146, 0.06855015456676483, 0.046159904450178146, 0.024771152064204216, 0.03396138921380043, 0.03649052605032921, 0.03350280970335007, 0.03868703544139862, 0.04720373451709747, 0.047265440225601196, 0.04833248630166054, 0.08512450754642487, 0.12757368385791779, 0.1379624307155609, 0.14640067517757416, 0.13506022095680237, 0.09595006704330444, 0.08101014792919159, 0.06884046643972397, 0.07044558227062225, 0.08666981011629105, 0.08834072947502136, 0.11427663266658783, 0.13171352446079254, 0.1615714579820633, 0.20717056095600128, 0.20177707076072693, 0.18966683745384216, 0.17323966324329376, 0.15665693581104279, 0.17353065311908722, 0.1984722912311554, 0.23194125294685364, 0.26697951555252075, 0.2586726248264313, 0.22821970283985138, 0.20102165639400482, 0.17558340728282928, 0.1663520485162735, 0.17179147899150848, 0.18700683116912842, 0.1951422244310379, 0.2182496041059494, 0.23418676853179932, 0.23946397006511688, 0.26715296506881714, 0.273065984249115, 0.2674766480922699, 0.2560798227787018, 0.2533726096153259, 0.24914351105690002, 0.20119798183441162, 0.19149690866470337, 0.204098641872406, 0.2033185213804245, 0.23972539603710175, 0.24206045269966125, 0.25790032744407654, 0.2954062223434448, 0.2876637279987335, 0.3143113851547241, 0.3211040198802948, 0.3320118188858032, 0.3494296967983246, 0.3302988111972809, 0.34971290826797485, 0.3252882659435272, 0.2892061471939087, 0.2950528562068939, 0.2824278771877289, 0.3033698499202728, 0.32549065351486206, 0.30894389748573303, 0.3132327198982239, 0.3186533451080322, 0.3059418201446533, 0.286128968000412, 0.27375689148902893, 0.29324260354042053, 0.3319074809551239, 0.36915186047554016, 0.39437711238861084, 0.39165836572647095, 0.347377210855484, 0.31485727429389954, 0.30959588289260864, 0.3261728286743164, 0.3423120677471161, 0.3420419991016388, 0.35451993346214294, 0.34238627552986145, 0.33935263752937317, 0.34691545367240906, 0.3630000650882721, 0.37347179651260376, 0.3574090301990509, 0.3550010919570923, 0.3445420265197754, 0.3546827733516693, 0.3539896607398987, 0.3684117794036865, 0.39077886939048767, 0.36408862471580505, 0.3360978364944458, 0.3197782337665558, 0.3435496687889099, 0.35054486989974976, 0.3557061553001404, 0.37993210554122925, 0.39068374037742615, 0.40063023567199707, 0.38693132996559143, 0.3668704032897949, 0.35698202252388, 0.3608799874782562, 0.35217344760894775, 0.35569247603416443, 0.35453006625175476, 0.3387382924556732, 0.34590432047843933, 0.35231277346611023, 0.3653433918952942, 0.3511964976787567, 0.3419061005115509, 0.34664759039878845, 0.35771405696868896, 0.3725084960460663, 0.3510756194591522, 0.3647887408733368, 0.37821412086486816, 0.35716962814331055, 0.3511192500591278, 0.34456926584243774, 0.3314865231513977, 0.3208308219909668, 0.3156222999095917, 0.31540369987487793, 0.32744455337524414, 0.3372170925140381, 0.3380419611930847, 0.3529544472694397, 0.3704774081707001, 0.36462560296058655, 0.34822919964790344, 0.3377537727355957, 0.3367040455341339, 0.3352885842323303, 0.33520692586898804, 0.33603182435035706, 0.3249315321445465, 0.3334832787513733, 0.3402125835418701, 0.32134097814559937, 0.3175240457057953, 0.3239133358001709, 0.3080558180809021, 0.2940305769443512, 0.31710487604141235, 0.32018688321113586, 0.3021196722984314, 0.31539735198020935, 0.3222084939479828, 0.31612542271614075, 0.31298354268074036, 0.300657719373703, 0.28344833850860596, 0.2668655216693878, 0.25927987694740295, 0.2593653202056885, 0.25572603940963745, 0.24297574162483215, 0.23936042189598083, 0.2306809276342392, 0.2263612002134323, 0.2444968968629837, 0.23702287673950195, 0.23908279836177826, 0.23235733807086945, 0.22549593448638916, 0.24629828333854675, 0.23005014657974243, 0.24215242266654968, 0.25283926725387573, 0.2293381541967392, 0.23586948215961456, 0.25638747215270996, 0.2559342384338379, 0.2412996143102646, 0.25360795855522156, 0.25039905309677124, 0.23234722018241882, 0.22161784768104553, 0.20286725461483002, 0.1728346347808838, 0.16851651668548584, 0.2065815031528473, 0.213515505194664, 0.21770180761814117, 0.2098827213048935, 0.17774656414985657, 0.17121168971061707, 0.17504063248634338, 0.1757458746433258, 0.16709795594215393, 0.17267844080924988, 0.16643109917640686, 0.1688535511493683, 0.1758764684200287, 0.1518385112285614, 0.15622374415397644, 0.15530139207839966, 0.1624431163072586, 0.17321977019309998, 0.13510893285274506, 0.11024846136569977, 0.12457874417304993, 0.14784744381904602, 0.15759935975074768, 0.14089402556419373, 0.10344935953617096, 0.09838313609361649, 0.10374749451875687, 0.12493053823709488, 0.15402451157569885, 0.13285315036773682, 0.11931116133928299, 0.08833281695842743, 0.08918523043394089, 0.11602802574634552, 0.1011933907866478, 0.09568271785974503, 0.0639972984790802, 0.04696385934948921, 0.04943601042032242, 0.05571720004081726, 0.0727148950099945, 0.07865297049283981, 0.07631032913923264, 0.037004195153713226, 0.009603231213986874, 0.01828043721616268, 0.051060449331998825, 0.07627253234386444, 0.0738271176815033, 0.05658450722694397, 0.013986565172672272, -0.015534968115389347, -0.02274533361196518, 0.003938691224902868, 0.03155204653739929, 0.02330840937793255, 0.03788147121667862, 0.0311247818171978, 0.006079403683543205, -0.014304974116384983, -0.0473160557448864, -0.015843408182263374, -0.0017000987427309155, -0.013982987962663174, -0.008386271074414253, -0.04862101003527641, -0.0791562870144844, -0.0964505523443222, -0.07188238948583603, -0.03198642656207085, -0.034543123096227646, -0.05560626462101936, -0.09328742325305939, -0.0980432853102684, -0.11230849474668503, -0.12309566885232925, -0.11265511065721512, -0.11771883815526962, -0.10521982610225677, -0.10165797173976898, -0.1029997169971466, -0.10343661904335022, -0.09955000877380371, -0.10381722450256348, -0.12423542141914368, -0.13453924655914307, -0.15502531826496124, -0.15178704261779785, -0.1531396061182022, -0.15834370255470276, -0.14455945789813995, -0.1743067353963852, -0.17451700568199158, -0.15113615989685059, -0.14568006992340088, -0.13900914788246155, -0.17267492413520813, -0.19402097165584564, -0.20098720490932465, -0.2049938291311264, -0.17329798638820648, -0.16492614150047302, -0.17401424050331116, -0.1855435073375702, -0.20132692158222198, -0.19034720957279205, -0.18963919579982758, -0.19387602806091309, -0.18623121082782745, -0.19368135929107666, -0.2003438025712967, -0.20840629935264587, -0.22988379001617432, -0.23340362310409546, -0.2340153157711029, -0.25260746479034424, -0.24356180429458618, -0.23030529916286469, -0.22164814174175262, -0.22994613647460938, -0.2506025433540344, -0.2347460687160492, -0.24826651811599731, -0.2629214823246002, -0.2695138156414032, -0.28741344809532166, -0.27443358302116394, -0.2764207422733307, -0.2671276330947876, -0.24025899171829224, -0.24300161004066467, -0.24890510737895966, -0.26734983921051025, -0.2829558253288269, -0.2693065106868744, -0.2842794358730316, -0.2838103175163269, -0.27301153540611267, -0.2909810245037079, -0.29036033153533936, -0.30320534110069275, -0.3014327883720398, -0.2898329198360443, -0.2862693965435028, -0.287814736366272, -0.29961204528808594, -0.297253280878067, -0.3084547817707062, -0.3071892261505127, -0.29667341709136963, -0.2903779149055481, -0.29658836126327515, -0.3059506416320801, -0.292972207069397, -0.2861323952674866, -0.2874835431575775, -0.3051760196685791, -0.31047531962394714, -0.3169917166233063, -0.3349168300628662, -0.32608872652053833, -0.3180573582649231, -0.31016436219215393, -0.31271636486053467, -0.3231419026851654, -0.3134830594062805, -0.3148261606693268, -0.32320359349250793, -0.3186570703983307, -0.3166942894458771, -0.32194268703460693, -0.3222540020942688, -0.3167117238044739, -0.3292582333087921, -0.32684820890426636, -0.3000186085700989, -0.3036000430583954, -0.31384775042533875, -0.3126133382320404\}\}}}
\par
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_8bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100}
{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.03125, 0.0078125, 0.0078125, 0.0, -0.03125, 0.03125, 0.015625, -0.0078125, -0.0078125, 0.0390625, -0.078125, 0.0078125, 0.0390625, 0.0234375, -0.0390625, 0.046875, 0.0, -0.0234375, 0.0, 0.0078125, 0.03125, -0.0234375, -0.0234375, 0.046875, 0.0390625, 0.0234375, 0.0, -0.0546875, -0.03125, 0.0625, 0.03125, 0.0703125, -0.0234375, 0.0390625, 0.015625, 0.0234375, -0.0546875, 0.0390625, 0.0390625, 0.0, 0.0859375, 0.0546875, 0.03125, 0.0234375, 0.03125, -0.0390625, 0.09375, 0.0625, -0.03125, -0.0078125, 0.109375, 0.140625, -0.03125, -0.0625, 0.0390625, 0.1015625, 0.0625, -0.0078125, -0.0390625, 0.046875, 0.109375, 0.0, 0.015625, 0.0, 0.015625, 0.0078125, 0.0078125, -0.078125, 0.03125, 0.0390625, -0.015625, -0.0234375, 0.0078125, -0.0078125, -0.03125, -0.03125, -0.0390625, -0.0234375, 0.015625, -0.125, -0.1484375, 0.0078125, 0.0546875, -0.1328125, -0.15625, 0.0, 0.0390625, -0.0625, -0.078125, -0.078125, -0.0078125, -0.1328125, -0.140625, -0.03125, 0.015625, -0.09375, -0.078125, -0.1171875, -0.1015625, -0.09375, -0.1328125, -0.0703125, -0.0546875, -0.1796875, -0.09375, -0.0078125, -0.078125, -0.203125, -0.0859375, -0.046875, -0.140625, -0.1796875, -0.0546875, -0.109375, -0.125, -0.109375, 0.03125, -0.1640625, -0.1796875, -0.09375, -0.09375, -0.046875, 0.0234375, -0.078125, -0.15625, -0.03125, 0.0625, 0.03125, 0.0390625, -0.0625, -0.1953125, -0.171875, -0.1015625, 0.0078125, 0.0703125, 0.0546875, 0.03125, 0.0, -0.15625, -0.0625, 0.0234375, 0.078125, 0.1171875, 0.1484375, 0.0, -0.015625, 0.0546875, 0.0859375, 0.0703125, 0.0625, 0.0703125, 0.0546875, 0.0078125, 0.1484375, 0.3046875, 0.28125, 0.015625, 0.015625, 0.09375, 0.078125, -0.0234375, 0.015625, 0.0234375, -0.0078125, -0.0234375, 0.0546875, 0.203125, 0.265625, 0.1796875, 0.140625, 0.2109375, 0.109375, -0.0078125, 0.0703125, 0.09375, 0.0234375, 0.03125, 0.109375, 0.015625, 0.0, 0.15625, 0.28125, 0.203125, 0.234375, 0.1171875, 0.1015625, 0.171875, 0.1796875, 0.265625, 0.359375, 0.1875, 0.0, -0.1328125, -0.2265625, -0.25, -0.203125, -0.1328125, -0.09375, 0.140625, 0.3125, 0.390625, 0.3046875, 0.3046875, 0.1484375, 0.140625, 0.0078125, -0.1328125, -0.125, -0.125, -0.09375, -0.1640625, -0.0625, 0.0078125, 0.03125, -0.015625, 0.03125, 0.0625, 0.25, 0.125, 0.0, 0.0625, 0.0078125, -0.0390625, -0.0546875, -0.0859375, -0.1953125, -0.2421875, -0.265625, -0.328125, -0.265625, -0.2265625, -0.1953125, -0.34375, -0.203125, -0.203125, -0.25, -0.203125, -0.125, -0.2109375, -0.3671875, -0.2734375, -0.2890625, -0.1484375, -0.15625, -0.03125, 0.0546875, 0.0390625, -0.0390625, 0.0703125, 0.1640625, 0.046875, -0.1015625, -0.1015625, 0.0078125, -0.0625, -0.078125, -0.1796875, -0.1015625, -0.046875, 0.015625, -0.015625, -0.046875, -0.0625, -0.1875, -0.1640625, -0.25, -0.3359375, -0.2578125, -0.1015625, -0.0546875, 0.03125, 0.09375, 0.15625, 0.1484375, 0.1796875, 0.09375, 0.140625, 0.1171875, 0.1953125, 0.1328125, 0.0625, 0.046875, -0.015625, -0.0625, -0.21875, -0.0390625, -0.0859375, -0.0703125, 0.0, 0.0, -0.0390625, 0.0, -0.015625, -0.2734375, -0.15625, -0.1171875, -0.1484375, -0.21875, -0.1484375, -0.1328125, -0.0625, 0.09375, 0.203125, 0.2421875, 0.2421875, 0.4296875, 0.375, 0.28125, 0.390625, 0.3984375, 0.34375, 0.375, 0.3671875, 0.4453125, 0.40625, 0.4375, 0.4296875, 0.359375, 0.3828125, 0.2109375, 0.1875, 0.1484375, 0.1484375, 0.21875, 0.1953125, 0.1875, 0.21875, 0.1796875, 0.203125, 0.21875, 0.171875, 0.1875, 0.046875, -0.0390625, 0.0234375, -0.0078125, -0.25, -0.09375, -0.09375, -0.2265625, -0.1640625, -0.03125, -0.078125, -0.09375, -0.1953125, -0.2109375, -0.2265625, -0.28125, -0.171875, -0.125, -0.125, -0.3046875, -0.1171875, -0.1015625, -0.125, -0.109375, -0.25, -0.1796875, -0.0078125, -0.0625, -0.1796875, -0.09375, -0.0078125, 0.0546875, -0.0546875, 0.0390625, 0.0078125, -0.0703125, 0.015625, -0.0390625, -0.140625, -0.15625, -0.0625, -0.0703125, 0.09375, 0.03125, 0.0234375, -0.015625, -0.015625, 0.0078125, 0.0, -0.09375, -0.2265625, -0.171875, -0.046875, -0.0390625, -0.1171875, -0.0390625, 0.1328125, -0.0390625, -0.0078125, 0.09375, 0.0625, 0.0546875, 0.0703125, -0.0859375, 0.03125, 0.03125, 0.0546875, 0.1328125, 0.1484375, 0.046875, 0.09375, 0.0703125, 0.2109375, 0.2109375, 0.1015625, 0.0, 0.15625, 0.15625, 0.1171875, 0.140625, 0.1171875, 0.1796875, 0.1328125, 0.0859375, 0.0625, 0.09375, 0.0546875, 0.015625, 0.046875, 0.125, 0.109375, 0.1171875, 0.1328125, 0.140625, 0.1328125, 0.125, 0.0546875, 0.09375, 0.234375, 0.1640625, 0.1328125, 0.2109375, 0.1328125, 0.0390625, 0.046875, 0.21875, 0.15625, 0.078125, 0.125, 0.109375, 0.15625, 0.125, 0.1875, 0.0703125, 0.109375, 0.09375, 0.0546875, 0.0546875, 0.0859375, -0.0234375, 0.15625, 0.1015625, 0.0, -0.0703125, 0.0078125, 0.125, 0.0625, 0.0859375, 0.0546875, 0.1640625, 0.140625, 0.171875, 0.015625, 0.0078125, 0.0546875, -0.0625, 0.03125, 0.1015625, -0.0234375, -0.1796875, 0.0078125, 0.0390625, -0.078125, -0.1796875, -0.0859375, -0.078125, 0.0859375, -0.015625, -0.265625, -0.0546875, 0.0, -0.1015625, -0.0625, -0.1171875, -0.28125, -0.2578125, -0.1484375, -0.1328125, -0.2265625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.015625, 0.015625, -0.0078125, 0.0, 0.0, 0.0078125, 0.0, -0.015625, 0.015625, -0.0078125, 0.015625, 0.0, 0.0234375, -0.015625, 0.0078125, -0.0234375, 0.0078125, -0.015625, 0.0078125, 0.0546875, 0.0078125, -0.0078125, -0.0625, 0.0078125, -0.0078125, 0.0703125, 0.015625, 0.0, -0.0078125, 0.03125, -0.0078125, -0.03125, 0.0078125, 0.03125, -0.0078125, 0.0390625, 0.0703125, 0.0390625, -0.0625, 0.0234375, -0.0078125, 0.0546875, 0.03125, 0.0078125, -0.046875, 0.0703125, 0.140625, -0.015625, -0.09375, -0.0546875, 0.1171875, 0.0390625, -0.0078125, -0.0390625, 0.0234375, 0.0625, -0.015625, 0.0390625, -0.0390625, 0.0234375, -0.015625, 0.0703125, -0.0546875, -0.03125, 0.015625, 0.0234375, -0.03125, -0.0234375, 0.0390625, -0.03125, -0.03125, -0.046875, 0.0625, -0.0078125, -0.046875, -0.078125, 0.0078125, 0.03125, -0.0859375, -0.09375, -0.0390625, 0.109375, -0.046875, -0.0546875, -0.015625, 0.046875, -0.09375, -0.0859375, 0.046875, -0.0078125, 0.0078125, -0.0390625, -0.0078125, -0.078125, -0.015625, -0.0625, 0.0, -0.078125, -0.140625, -0.015625, 0.0625, 0.015625, -0.140625, -0.0625, -0.0546875, -0.03125, -0.0859375, -0.0390625, -0.0625, -0.0859375, -0.03125, 0.0078125, 0.0234375, -0.09375, -0.1015625, -0.125, 0.0, 0.0234375, 0.0, -0.1015625, -0.0546875, 0.0390625, 0.0546875, 0.0859375, 0.015625, -0.0703125, -0.1953125, -0.09375, -0.015625, 0.046875, 0.0546875, 0.0703125, 0.0546875, -0.109375, -0.1484375, -0.109375, 0.0234375, 0.03125, 0.1640625, 0.1015625, 0.0546875, -0.015625, 0.046875, 0.0, 0.0234375, 0.046875, 0.0390625, -0.0625, 0.0078125, 0.1796875, 0.1875, 0.0859375, 0.046875, 0.09375, 0.0390625, -0.015625, -0.09375, -0.0234375, -0.109375, -0.1171875, -0.125, 0.0703125, 0.140625, 0.171875, 0.1328125, 0.203125, 0.1015625, -0.0234375, -0.0625, -0.015625, -0.0546875, -0.0390625, 0.0078125, 0.03125, 0.015625, 0.0078125, 0.1015625, 0.140625, 0.15625, 0.0859375, 0.09375, 0.0625, 0.125, 0.171875, 0.3125, 0.2578125, 0.109375, -0.0390625, -0.1640625, -0.265625, -0.3203125, -0.234375, -0.2265625, -0.0859375, 0.1328125, 0.3671875, 0.3359375, 0.34375, 0.28125, 0.2265625, 0.09375, -0.046875, -0.171875, -0.1328125, -0.1171875, -0.1171875, -0.1015625, -0.03125, 0.0390625, 0.046875, 0.0234375, 0.0625, 0.1640625, 0.203125, 0.1484375, 0.078125, 0.140625, 0.09375, 0.0546875, -0.046875, -0.0625, -0.125, -0.203125, -0.28125, -0.2265625, -0.2265625, -0.1875, -0.2265625, -0.2109375, -0.1953125, -0.171875, -0.1015625, -0.078125, -0.109375, -0.21875, -0.203125, -0.21875, -0.1875, -0.15625, -0.0234375, -0.015625, 0.109375, 0.1015625, 0.15625, 0.1484375, 0.1796875, 0.09375, -0.015625, 0.046875, 0.0234375, 0.0546875, -0.1015625, -0.0625, 0.03125, 0.1171875, 0.0234375, -0.09375, -0.1171875, -0.1640625, -0.1640625, -0.2421875, -0.21875, -0.2265625, -0.1328125, -0.0546875, 0.0234375, 0.1015625, 0.09375, 0.1953125, 0.140625, 0.171875, 0.1171875, 0.171875, 0.109375, 0.1484375, 0.1015625, 0.0703125, -0.0546875, -0.078125, -0.1171875, -0.1640625, -0.171875, -0.109375, -0.1171875, -0.0859375, -0.03125, -0.0546875, -0.0703125, -0.1796875, -0.2421875, -0.2421875, -0.203125, -0.2734375, -0.234375, -0.25, -0.1875, -0.15625, 0.0390625, 0.1171875, 0.1953125, 0.21875, 0.328125, 0.328125, 0.2890625, 0.3046875, 0.3125, 0.3203125, 0.3125, 0.34375, 0.359375, 0.328125, 0.3359375, 0.34375, 0.2734375, 0.28125, 0.1171875, 0.1328125, 0.125, 0.1328125, 0.109375, 0.1796875, 0.1328125, 0.140625, 0.1015625, 0.1484375, 0.0859375, 0.140625, 0.125, -0.0234375, -0.09375, -0.0703125, -0.0625, -0.1953125, -0.15625, -0.1953125, -0.2734375, -0.1953125, -0.0859375, -0.1171875, -0.1796875, -0.203125, -0.234375, -0.2421875, -0.234375, -0.1953125, -0.203125, -0.15625, -0.2421875, -0.1328125, -0.0859375, -0.1640625, -0.1484375, -0.171875, -0.1015625, -0.0703125, -0.0625, -0.078125, -0.015625, 0.0234375, 0.078125, 0.0625, 0.0390625, 0.015625, 0.0234375, 0.0546875, -0.0234375, -0.078125, -0.0703125, 0.0546875, 0.0546875, 0.1484375, 0.0078125, 0.0625, 0.0390625, 0.0859375, 0.0234375, 0.046875, -0.0703125, -0.1171875, -0.09375, -0.046875, -0.0078125, 0.0703125, 0.1015625, 0.109375, 0.046875, 0.1484375, 0.109375, 0.0625, 0.078125, 0.1171875, -0.0078125, 0.109375, 0.0859375, 0.140625, 0.15625, 0.1796875, 0.09375, 0.09375, 0.1875, 0.21875, 0.203125, 0.078125, 0.1484375, 0.171875, 0.171875, 0.140625, 0.1796875, 0.1171875, 0.1328125, 0.109375, 0.0703125, 0.078125, 0.03125, 0.046875, -0.015625, 0.0703125, 0.0859375, 0.1171875, 0.109375, 0.078125, 0.09375, 0.1171875, 0.0546875, 0.0, 0.046875, 0.203125, 0.09375, 0.046875, 0.1484375, 0.125, 0.0078125, -0.0078125, 0.109375, 0.0390625, -0.0234375, 0.03125, 0.0703125, 0.09375, 0.0703125, 0.140625, 0.0078125, -0.046875, -0.03125, 0.03125, -0.0703125, -0.0703125, -0.03125, 0.0859375, -0.0078125, -0.109375, -0.1484375, -0.0234375, 0.0078125, -0.0390625, -0.03125, 0.0859375, 0.046875, 0.0625, 0.1015625, 0.046875, -0.09375, -0.0625, -0.109375, -0.0234375, 0.0078125, -0.0703125, -0.1484375, -0.1328125, -0.0546875, -0.1328125, -0.171875, -0.1328125, -0.0078125, -0.0234375, -0.046875, -0.1953125, -0.078125, -0.1328125, -0.1484375, -0.1171875, -0.140625, -0.234375, -0.2265625, -0.1640625, -0.0859375, -0.15625\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_44100::bitDepth = 8}}
\par
{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_8bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_8bit_44100}
{\xe \v aiff_stereo_8bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_8bit_44100::testBuffer = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.03125, 0.0078125, 0.0078125, 0.0, -0.03125, 0.03125, 0.015625, -0.0078125, -0.0078125, 0.0390625, -0.078125, 0.0078125, 0.0390625, 0.0234375, -0.0390625, 0.046875, 0.0, -0.0234375, 0.0, 0.0078125, 0.03125, -0.0234375, -0.0234375, 0.046875, 0.0390625, 0.0234375, 0.0, -0.0546875, -0.03125, 0.0625, 0.03125, 0.0703125, -0.0234375, 0.0390625, 0.015625, 0.0234375, -0.0546875, 0.0390625, 0.0390625, 0.0, 0.0859375, 0.0546875, 0.03125, 0.0234375, 0.03125, -0.0390625, 0.09375, 0.0625, -0.03125, -0.0078125, 0.109375, 0.140625, -0.03125, -0.0625, 0.0390625, 0.1015625, 0.0625, -0.0078125, -0.0390625, 0.046875, 0.109375, 0.0, 0.015625, 0.0, 0.015625, 0.0078125, 0.0078125, -0.078125, 0.03125, 0.0390625, -0.015625, -0.0234375, 0.0078125, -0.0078125, -0.03125, -0.03125, -0.0390625, -0.0234375, 0.015625, -0.125, -0.1484375, 0.0078125, 0.0546875, -0.1328125, -0.15625, 0.0, 0.0390625, -0.0625, -0.078125, -0.078125, -0.0078125, -0.1328125, -0.140625, -0.03125, 0.015625, -0.09375, -0.078125, -0.1171875, -0.1015625, -0.09375, -0.1328125, -0.0703125, -0.0546875, -0.1796875, -0.09375, -0.0078125, -0.078125, -0.203125, -0.0859375, -0.046875, -0.140625, -0.1796875, -0.0546875, -0.109375, -0.125, -0.109375, 0.03125, -0.1640625, -0.1796875, -0.09375, -0.09375, -0.046875, 0.0234375, -0.078125, -0.15625, -0.03125, 0.0625, 0.03125, 0.0390625, -0.0625, -0.1953125, -0.171875, -0.1015625, 0.0078125, 0.0703125, 0.0546875, 0.03125, 0.0, -0.15625, -0.0625, 0.0234375, 0.078125, 0.1171875, 0.1484375, 0.0, -0.015625, 0.0546875, 0.0859375, 0.0703125, 0.0625, 0.0703125, 0.0546875, 0.0078125, 0.1484375, 0.3046875, 0.28125, 0.015625, 0.015625, 0.09375, 0.078125, -0.0234375, 0.015625, 0.0234375, -0.0078125, -0.0234375, 0.0546875, 0.203125, 0.265625, 0.1796875, 0.140625, 0.2109375, 0.109375, -0.0078125, 0.0703125, 0.09375, 0.0234375, 0.03125, 0.109375, 0.015625, 0.0, 0.15625, 0.28125, 0.203125, 0.234375, 0.1171875, 0.1015625, 0.171875, 0.1796875, 0.265625, 0.359375, 0.1875, 0.0, -0.1328125, -0.2265625, -0.25, -0.203125, -0.1328125, -0.09375, 0.140625, 0.3125, 0.390625, 0.3046875, 0.3046875, 0.1484375, 0.140625, 0.0078125, -0.1328125, -0.125, -0.125, -0.09375, -0.1640625, -0.0625, 0.0078125, 0.03125, -0.015625, 0.03125, 0.0625, 0.25, 0.125, 0.0, 0.0625, 0.0078125, -0.0390625, -0.0546875, -0.0859375, -0.1953125, -0.2421875, -0.265625, -0.328125, -0.265625, -0.2265625, -0.1953125, -0.34375, -0.203125, -0.203125, -0.25, -0.203125, -0.125, -0.2109375, -0.3671875, -0.2734375, -0.2890625, -0.1484375, -0.15625, -0.03125, 0.0546875, 0.0390625, -0.0390625, 0.0703125, 0.1640625, 0.046875, -0.1015625, -0.1015625, 0.0078125, -0.0625, -0.078125, -0.1796875, -0.1015625, -0.046875, 0.015625, -0.015625, -0.046875, -0.0625, -0.1875, -0.1640625, -0.25, -0.3359375, -0.2578125, -0.1015625, -0.0546875, 0.03125, 0.09375, 0.15625, 0.1484375, 0.1796875, 0.09375, 0.140625, 0.1171875, 0.1953125, 0.1328125, 0.0625, 0.046875, -0.015625, -0.0625, -0.21875, -0.0390625, -0.0859375, -0.0703125, 0.0, 0.0, -0.0390625, 0.0, -0.015625, -0.2734375, -0.15625, -0.1171875, -0.1484375, -0.21875, -0.1484375, -0.1328125, -0.0625, 0.09375, 0.203125, 0.2421875, 0.2421875, 0.4296875, 0.375, 0.28125, 0.390625, 0.3984375, 0.34375, 0.375, 0.3671875, 0.4453125, 0.40625, 0.4375, 0.4296875, 0.359375, 0.3828125, 0.2109375, 0.1875, 0.1484375, 0.1484375, 0.21875, 0.1953125, 0.1875, 0.21875, 0.1796875, 0.203125, 0.21875, 0.171875, 0.1875, 0.046875, -0.0390625, 0.0234375, -0.0078125, -0.25, -0.09375, -0.09375, -0.2265625, -0.1640625, -0.03125, -0.078125, -0.09375, -0.1953125, -0.2109375, -0.2265625, -0.28125, -0.171875, -0.125, -0.125, -0.3046875, -0.1171875, -0.1015625, -0.125, -0.109375, -0.25, -0.1796875, -0.0078125, -0.0625, -0.1796875, -0.09375, -0.0078125, 0.0546875, -0.0546875, 0.0390625, 0.0078125, -0.0703125, 0.015625, -0.0390625, -0.140625, -0.15625, -0.0625, -0.0703125, 0.09375, 0.03125, 0.0234375, -0.015625, -0.015625, 0.0078125, 0.0, -0.09375, -0.2265625, -0.171875, -0.046875, -0.0390625, -0.1171875, -0.0390625, 0.1328125, -0.0390625, -0.0078125, 0.09375, 0.0625, 0.0546875, 0.0703125, -0.0859375, 0.03125, 0.03125, 0.0546875, 0.1328125, 0.1484375, 0.046875, 0.09375, 0.0703125, 0.2109375, 0.2109375, 0.1015625, 0.0, 0.15625, 0.15625, 0.1171875, 0.140625, 0.1171875, 0.1796875, 0.1328125, 0.0859375, 0.0625, 0.09375, 0.0546875, 0.015625, 0.046875, 0.125, 0.109375, 0.1171875, 0.1328125, 0.140625, 0.1328125, 0.125, 0.0546875, 0.09375, 0.234375, 0.1640625, 0.1328125, 0.2109375, 0.1328125, 0.0390625, 0.046875, 0.21875, 0.15625, 0.078125, 0.125, 0.109375, 0.15625, 0.125, 0.1875, 0.0703125, 0.109375, 0.09375, 0.0546875, 0.0546875, 0.0859375, -0.0234375, 0.15625, 0.1015625, 0.0, -0.0703125, 0.0078125, 0.125, 0.0625, 0.0859375, 0.0546875, 0.1640625, 0.140625, 0.171875, 0.015625, 0.0078125, 0.0546875, -0.0625, 0.03125, 0.1015625, -0.0234375, -0.1796875, 0.0078125, 0.0390625, -0.078125, -0.1796875, -0.0859375, -0.078125, 0.0859375, -0.015625, -0.265625, -0.0546875, 0.0, -0.1015625, -0.0625, -0.1171875, -0.28125, -0.2578125, -0.1484375, -0.1328125, -0.2265625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.015625, 0.015625, -0.0078125, 0.0, 0.0, 0.0078125, 0.0, -0.015625, 0.015625, -0.0078125, 0.015625, 0.0, 0.0234375, -0.015625, 0.0078125, -0.0234375, 0.0078125, -0.015625, 0.0078125, 0.0546875, 0.0078125, -0.0078125, -0.0625, 0.0078125, -0.0078125, 0.0703125, 0.015625, 0.0, -0.0078125, 0.03125, -0.0078125, -0.03125, 0.0078125, 0.03125, -0.0078125, 0.0390625, 0.0703125, 0.0390625, -0.0625, 0.0234375, -0.0078125, 0.0546875, 0.03125, 0.0078125, -0.046875, 0.0703125, 0.140625, -0.015625, -0.09375, -0.0546875, 0.1171875, 0.0390625, -0.0078125, -0.0390625, 0.0234375, 0.0625, -0.015625, 0.0390625, -0.0390625, 0.0234375, -0.015625, 0.0703125, -0.0546875, -0.03125, 0.015625, 0.0234375, -0.03125, -0.0234375, 0.0390625, -0.03125, -0.03125, -0.046875, 0.0625, -0.0078125, -0.046875, -0.078125, 0.0078125, 0.03125, -0.0859375, -0.09375, -0.0390625, 0.109375, -0.046875, -0.0546875, -0.015625, 0.046875, -0.09375, -0.0859375, 0.046875, -0.0078125, 0.0078125, -0.0390625, -0.0078125, -0.078125, -0.015625, -0.0625, 0.0, -0.078125, -0.140625, -0.015625, 0.0625, 0.015625, -0.140625, -0.0625, -0.0546875, -0.03125, -0.0859375, -0.0390625, -0.0625, -0.0859375, -0.03125, 0.0078125, 0.0234375, -0.09375, -0.1015625, -0.125, 0.0, 0.0234375, 0.0, -0.1015625, -0.0546875, 0.0390625, 0.0546875, 0.0859375, 0.015625, -0.0703125, -0.1953125, -0.09375, -0.015625, 0.046875, 0.0546875, 0.0703125, 0.0546875, -0.109375, -0.1484375, -0.109375, 0.0234375, 0.03125, 0.1640625, 0.1015625, 0.0546875, -0.015625, 0.046875, 0.0, 0.0234375, 0.046875, 0.0390625, -0.0625, 0.0078125, 0.1796875, 0.1875, 0.0859375, 0.046875, 0.09375, 0.0390625, -0.015625, -0.09375, -0.0234375, -0.109375, -0.1171875, -0.125, 0.0703125, 0.140625, 0.171875, 0.1328125, 0.203125, 0.1015625, -0.0234375, -0.0625, -0.015625, -0.0546875, -0.0390625, 0.0078125, 0.03125, 0.015625, 0.0078125, 0.1015625, 0.140625, 0.15625, 0.0859375, 0.09375, 0.0625, 0.125, 0.171875, 0.3125, 0.2578125, 0.109375, -0.0390625, -0.1640625, -0.265625, -0.3203125, -0.234375, -0.2265625, -0.0859375, 0.1328125, 0.3671875, 0.3359375, 0.34375, 0.28125, 0.2265625, 0.09375, -0.046875, -0.171875, -0.1328125, -0.1171875, -0.1171875, -0.1015625, -0.03125, 0.0390625, 0.046875, 0.0234375, 0.0625, 0.1640625, 0.203125, 0.1484375, 0.078125, 0.140625, 0.09375, 0.0546875, -0.046875, -0.0625, -0.125, -0.203125, -0.28125, -0.2265625, -0.2265625, -0.1875, -0.2265625, -0.2109375, -0.1953125, -0.171875, -0.1015625, -0.078125, -0.109375, -0.21875, -0.203125, -0.21875, -0.1875, -0.15625, -0.0234375, -0.015625, 0.109375, 0.1015625, 0.15625, 0.1484375, 0.1796875, 0.09375, -0.015625, 0.046875, 0.0234375, 0.0546875, -0.1015625, -0.0625, 0.03125, 0.1171875, 0.0234375, -0.09375, -0.1171875, -0.1640625, -0.1640625, -0.2421875, -0.21875, -0.2265625, -0.1328125, -0.0546875, 0.0234375, 0.1015625, 0.09375, 0.1953125, 0.140625, 0.171875, 0.1171875, 0.171875, 0.109375, 0.1484375, 0.1015625, 0.0703125, -0.0546875, -0.078125, -0.1171875, -0.1640625, -0.171875, -0.109375, -0.1171875, -0.0859375, -0.03125, -0.0546875, -0.0703125, -0.1796875, -0.2421875, -0.2421875, -0.203125, -0.2734375, -0.234375, -0.25, -0.1875, -0.15625, 0.0390625, 0.1171875, 0.1953125, 0.21875, 0.328125, 0.328125, 0.2890625, 0.3046875, 0.3125, 0.3203125, 0.3125, 0.34375, 0.359375, 0.328125, 0.3359375, 0.34375, 0.2734375, 0.28125, 0.1171875, 0.1328125, 0.125, 0.1328125, 0.109375, 0.1796875, 0.1328125, 0.140625, 0.1015625, 0.1484375, 0.0859375, 0.140625, 0.125, -0.0234375, -0.09375, -0.0703125, -0.0625, -0.1953125, -0.15625, -0.1953125, -0.2734375, -0.1953125, -0.0859375, -0.1171875, -0.1796875, -0.203125, -0.234375, -0.2421875, -0.234375, -0.1953125, -0.203125, -0.15625, -0.2421875, -0.1328125, -0.0859375, -0.1640625, -0.1484375, -0.171875, -0.1015625, -0.0703125, -0.0625, -0.078125, -0.015625, 0.0234375, 0.078125, 0.0625, 0.0390625, 0.015625, 0.0234375, 0.0546875, -0.0234375, -0.078125, -0.0703125, 0.0546875, 0.0546875, 0.1484375, 0.0078125, 0.0625, 0.0390625, 0.0859375, 0.0234375, 0.046875, -0.0703125, -0.1171875, -0.09375, -0.046875, -0.0078125, 0.0703125, 0.1015625, 0.109375, 0.046875, 0.1484375, 0.109375, 0.0625, 0.078125, 0.1171875, -0.0078125, 0.109375, 0.0859375, 0.140625, 0.15625, 0.1796875, 0.09375, 0.09375, 0.1875, 0.21875, 0.203125, 0.078125, 0.1484375, 0.171875, 0.171875, 0.140625, 0.1796875, 0.1171875, 0.1328125, 0.109375, 0.0703125, 0.078125, 0.03125, 0.046875, -0.015625, 0.0703125, 0.0859375, 0.1171875, 0.109375, 0.078125, 0.09375, 0.1171875, 0.0546875, 0.0, 0.046875, 0.203125, 0.09375, 0.046875, 0.1484375, 0.125, 0.0078125, -0.0078125, 0.109375, 0.0390625, -0.0234375, 0.03125, 0.0703125, 0.09375, 0.0703125, 0.140625, 0.0078125, -0.046875, -0.03125, 0.03125, -0.0703125, -0.0703125, -0.03125, 0.0859375, -0.0078125, -0.109375, -0.1484375, -0.0234375, 0.0078125, -0.0390625, -0.03125, 0.0859375, 0.046875, 0.0625, 0.1015625, 0.046875, -0.09375, -0.0625, -0.109375, -0.0234375, 0.0078125, -0.0703125, -0.1484375, -0.1328125, -0.0546875, -0.1328125, -0.171875, -0.1328125, -0.0078125, -0.0234375, -0.046875, -0.1953125, -0.078125, -0.1328125, -0.1484375, -0.1171875, -0.140625, -0.234375, -0.2265625, -0.1640625, -0.0859375, -0.15625\}\}}}
\par
{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_8bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000}
{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.0078125, 0.0234375, -0.1015625, -0.0703125, -0.0234375, -0.0703125, 0.0625, 0.109375, 0.1015625, -0.0546875, -0.0078125, 0.046875, 0.015625, 0.0234375, 0.0625, -0.109375, -0.0625, 0.046875, -0.0390625, -0.1796875, -0.1015625, -0.046875, 0.2265625, 0.2421875, 0.1171875, -0.1484375, -0.1953125, -0.1015625, 0.015625, 0.1484375, 0.09375, 0.0859375, 0.0625, -0.0390625, -0.140625, -0.0859375, 0.0234375, -0.1328125, -0.0390625, 0.1171875, 0.1171875, 0.0546875, 0.09375, -0.03125, 0.0390625, 0.046875, 0.1015625, 0.0703125, -0.0078125, 0.015625, 0.015625, -0.0390625, -0.109375, -0.125, -0.1484375, 0.078125, 0.078125, 0.0859375, 0.046875, 0.03125, 0.0859375, -0.015625, -0.015625, -0.1171875, -0.0703125, 0.0546875, 0.0703125, 0.234375, 0.234375, 0.1015625, 0.0546875, 0.1171875, 0.109375, 0.03125, -0.0546875, -0.015625, -0.09375, -0.015625, -0.0234375, -0.0078125, -0.1015625, -0.1796875, -0.109375, -0.1171875, -0.1328125, -0.140625, -0.1484375, -0.0703125, -0.0234375, 0.0234375, -0.046875, -0.078125, 0.0078125, 0.03125, -0.1171875, -0.15625, 0.046875, 0.1328125, 0.03125, 0.109375, 0.03125, 0.09375, 0.0234375, -0.0546875, 0.109375, 0.125, -0.0703125, -0.0234375, -0.09375, -0.1484375, -0.03125, 0.0078125, 0.03125, -0.0625, -0.3671875, -0.34375, -0.3125, -0.3203125, -0.2890625, -0.2421875, -0.15625, -0.1328125, -0.203125, -0.1015625, -0.3046875, -0.328125, -0.21875, -0.03125, -0.109375, -0.265625, -0.265625, -0.0625, 0.0546875, 0.0234375, 0.1328125, 0.0390625, -0.09375, 0.1015625, 0.0078125, -0.0078125, 0.1015625, 0.046875, 0.2265625, 0.2109375, 0.1015625, 0.1484375, 0.09375, 0.046875, 0.2421875, 0.15625, 0.0234375, 0.0625, 0.171875, 0.15625, 0.2265625, 0.1328125, 0.0234375, -0.03125, -0.0390625, -0.0390625, -0.046875, -0.09375, -0.046875, 0.046875, 0.0390625, -0.1015625, 0.015625, 0.0390625, 0.0234375, 0.0234375, 0.1015625, 0.0390625, -0.1015625, -0.171875, -0.203125, -0.0703125, 0.1015625, 0.0234375, -0.0078125, 0.015625, 0.0625, 0.1796875, 0.1015625, 0.140625, 0.046875, 0.046875, 0.2734375, 0.0390625, 0.0625, 0.1875, 0.203125, 0.0546875, 0.09375, 0.2890625, 0.203125, 0.0859375, 0.21875, 0.2734375, 0.3125, 0.1875, 0.203125, 0.265625, 0.2109375, 0.296875, 0.2265625, 0.140625, 0.2734375, 0.2421875, 0.1640625, 0.3203125, 0.0703125, 0.125, 0.1328125, 0.171875, 0.265625, 0.171875, 0.2109375, 0.078125, 0.0078125, 0.0703125, -0.0546875, 0.0, 0.1796875, -0.03125, -0.09375, -0.1796875, 0.0, 0.0, -0.1640625, -0.1640625, -0.1640625, -0.03125, -0.09375, -0.171875, -0.1875, -0.3359375, -0.2109375, -0.1640625, -0.1953125, -0.265625, -0.265625, -0.234375, -0.1796875, -0.2109375, -0.1640625, -0.2109375, -0.1640625, -0.2421875, -0.3125, -0.1875, -0.3203125, -0.234375, -0.1796875, -0.1640625, -0.3203125, -0.1796875, 0.0, -0.078125, -0.078125, -0.046875, -0.21875, -0.28125, -0.140625, -0.0546875, 0.0390625, -0.1171875, -0.078125, -0.0859375, 0.0234375, 0.0234375, -0.109375, 0.0078125, -0.0078125, -0.078125, 0.03125, 0.109375, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.03125, 0.0078125, 0.0703125, 0.125, -0.109375, 0.0, 0.09375, 0.0546875, 0.03125, 0.0078125, 0.1015625, 0.046875, 0.0546875, 0.0390625, 0.1328125, 0.1328125, 0.1328125, 0.0, -0.015625, -0.1015625, -0.0546875, 0.0625, -0.0859375, 0.0234375, -0.0546875, 0.015625, 0.1640625, 0.1484375, 0.046875, 0.1015625, 0.03125, -0.125, -0.0859375, -0.046875, 0.015625, 0.0234375, 0.1171875, 0.171875, 0.09375, -0.078125, -0.0703125, 0.0625, 0.09375, -0.046875, -0.0859375, 0.078125, 0.1796875, 0.1015625, 0.0234375, 0.015625, 0.1015625, 0.2578125, 0.1171875, 0.0234375, -0.015625, 0.0078125, 0.1015625, 0.0703125, 0.1640625, 0.203125, 0.1484375, 0.1328125, 0.109375, 0.15625, 0.25, 0.0234375, 0.125, 0.2109375, 0.1171875, 0.1171875, 0.234375, 0.1796875, 0.09375, 0.0, 0.15625, 0.15625, 0.0703125, 0.25, 0.125, 0.1328125, 0.046875, 0.09375, 0.2109375, 0.1796875, 0.0546875, 0.03125, 0.1171875, 0.2421875, 0.1484375, -0.0390625, -0.015625, 0.0234375, 0.09375, -0.0234375, 0.09375, 0.0703125, 0.015625, 0.0, -0.1171875, -0.078125, -0.0390625, 0.0390625, -0.125, -0.0546875, 0.0390625, 0.0078125, -0.140625, -0.203125, -0.1796875, -0.109375, -0.078125, -0.1484375, -0.2109375, -0.09375, -0.125, -0.1953125, -0.25, -0.2421875, -0.140625, -0.1640625, -0.1953125, -0.1796875, -0.3125, -0.203125, -0.2578125, -0.203125, -0.109375, -0.1484375, -0.2890625, -0.2265625, -0.2109375, -0.171875, -0.28125, -0.21875, -0.2421875, -0.28125, -0.1796875, -0.140625, -0.2265625, -0.1015625, -0.140625, -0.25, -0.34375, -0.234375, 0.0, -0.1328125, -0.0234375, 0.0, -0.0859375, -0.1171875, -0.171875, -0.0546875, -0.0546875, -0.109375, -0.03125, -0.1015625, -0.09375, -0.0703125, 0.046875, 0.1640625, 0.03125, 0.0625, -0.0078125, -0.015625, 0.171875, 0.046875, 0.03125, -0.046875, -0.0078125, 0.171875, 0.1875, 0.1953125, 0.046875, 0.21875, 0.234375, 0.15625, 0.125, 0.15625, 0.0859375, 0.2265625, 0.1875, 0.1796875, 0.1484375, 0.234375, 0.1796875, 0.1953125, 0.390625, 0.3203125, 0.234375, 0.1015625, 0.203125, 0.234375, 0.25, 0.1796875, 0.2265625, 0.265625, 0.2421875, 0.171875, 0.15625, 0.2109375, 0.1015625, 0.2578125, 0.2734375, 0.3203125, 0.2578125, 0.109375, 0.0625, 0.2109375, 0.203125, 0.1875, 0.1796875, 0.03125, 0.0859375, 0.125, 0.171875, 0.078125, 0.0234375, 0.1015625, 0.0703125, 0.0546875\}, \{-0.0078125, 0.0234375, -0.09375, -0.0703125, -0.0078125, -0.078125, 0.078125, 0.0859375, 0.109375, -0.0625, 0.0, 0.0390625, 0.0234375, 0.0390625, 0.0390625, -0.125, -0.03125, 0.0859375, -0.0859375, -0.171875, -0.125, 0.0, 0.1953125, 0.2734375, 0.0859375, -0.1484375, -0.21875, -0.0546875, 0.03125, 0.1484375, 0.0703125, 0.0390625, 0.0625, -0.0234375, -0.1015625, -0.109375, 0.0546875, -0.1328125, -0.046875, 0.078125, 0.0859375, 0.09375, 0.0078125, -0.0078125, 0.0703125, 0.03125, 0.0859375, 0.046875, 0.0, 0.0078125, 0.03125, -0.078125, -0.1171875, -0.1953125, -0.1015625, 0.0078125, 0.1171875, 0.0546875, 0.0546875, 0.0703125, 0.0390625, 0.0, -0.109375, -0.09375, -0.1015625, 0.0625, 0.09375, 0.1796875, 0.2421875, 0.1171875, 0.078125, 0.0625, 0.1640625, -0.0546875, 0.0546875, -0.03125, -0.078125, -0.0625, -0.0390625, -0.0078125, -0.1328125, -0.1640625, -0.140625, -0.1015625, -0.171875, -0.1796875, -0.1328125, -0.0703125, -0.078125, 0.046875, -0.0546875, -0.0546875, 0.0625, 0.0234375, 0.03125, -0.1484375, 0.1484375, 0.1796875, 0.0703125, 0.1328125, 0.109375, 0.1484375, 0.046875, 0.0234375, 0.171875, 0.203125, -0.0546875, 0.0078125, -0.0625, -0.0546875, -0.015625, 0.046875, 0.078125, -0.046875, -0.265625, -0.3359375, -0.2109375, -0.3046875, -0.203125, -0.1796875, -0.109375, -0.109375, -0.125, -0.09375, -0.2578125, -0.2890625, -0.1640625, 0.0, -0.0703125, -0.1640625, -0.2421875, 0.0, 0.078125, 0.0546875, 0.171875, 0.03125, -0.015625, 0.125, 0.0625, 0.0234375, 0.125, 0.0625, 0.21875, 0.2265625, 0.109375, 0.1640625, 0.109375, 0.09375, 0.2109375, 0.1953125, -0.046875, 0.1328125, 0.109375, 0.1640625, 0.1875, 0.1171875, 0.0078125, -0.0546875, -0.0859375, -0.0625, -0.1171875, -0.1015625, -0.1171875, 0.0078125, 0.0, -0.15625, -0.03125, -0.03125, -0.0234375, -0.03125, 0.0390625, -0.0390625, -0.15625, -0.2578125, -0.25, -0.1640625, 0.0625, -0.0859375, -0.0546875, -0.078125, -0.015625, 0.0859375, 0.015625, 0.0546875, -0.03125, -0.0234375, 0.1796875, -0.015625, -0.03125, 0.140625, 0.09375, 0.015625, -0.015625, 0.2421875, 0.1015625, 0.03125, 0.1328125, 0.2265625, 0.2265625, 0.140625, 0.140625, 0.21875, 0.1640625, 0.234375, 0.203125, 0.0625, 0.2734375, 0.1640625, 0.1796875, 0.25, 0.0859375, 0.0703125, 0.140625, 0.1328125, 0.265625, 0.1484375, 0.203125, 0.078125, -0.0078125, 0.09375, -0.078125, 0.0234375, 0.15625, 0.0, -0.1015625, -0.1484375, 0.0078125, 0.03125, -0.15625, -0.125, -0.1484375, 0.0078125, -0.0703125, -0.1328125, -0.1640625, -0.28125, -0.1953125, -0.1015625, -0.1875, -0.1796875, -0.2578125, -0.15625, -0.15625, -0.1484375, -0.109375, -0.1640625, -0.0859375, -0.2109375, -0.2265625, -0.171875, -0.2109375, -0.2265625, -0.0703125, -0.1484375, -0.21875, -0.1484375, 0.09375, -0.0390625, -0.015625, 0.03125, -0.1796875, -0.171875, -0.1328125, 0.0703125, 0.0390625, -0.015625, -0.0546875, -0.0078125, 0.0703125, 0.0703125, -0.0390625, 0.0390625, 0.078125, -0.0546875, 0.1171875, 0.125, 0.0859375, 0.0546875, 0.1328125, 0.1953125, 0.0546875, 0.0625, 0.0859375, 0.1640625, -0.0859375, 0.0234375, 0.1171875, 0.078125, 0.0390625, 0.0390625, 0.078125, 0.09375, 0.0078125, 0.09375, 0.0859375, 0.15625, 0.1015625, -0.0078125, -0.0234375, -0.1328125, -0.0390625, 0.0, -0.0703125, -0.0546875, -0.046875, -0.0625, 0.15625, 0.078125, 0.0234375, 0.03125, 0.0, -0.1875, -0.125, -0.1015625, -0.046875, -0.03125, 0.046875, 0.1171875, 0.015625, -0.1328125, -0.1484375, 0.0, 0.015625, -0.109375, -0.1640625, 0.0078125, 0.09375, 0.0390625, -0.0625, -0.0546875, 0.015625, 0.1953125, 0.03125, -0.03125, -0.109375, -0.0390625, 0.0, 0.0234375, 0.0703125, 0.140625, 0.078125, 0.0625, 0.046875, 0.09375, 0.1796875, -0.03125, 0.0625, 0.171875, 0.046875, 0.078125, 0.171875, 0.140625, 0.046875, -0.0390625, 0.1171875, 0.125, 0.0390625, 0.21875, 0.109375, 0.1015625, 0.0390625, 0.0546875, 0.21875, 0.1484375, 0.0625, 0.0078125, 0.125, 0.25, 0.1484375, -0.0234375, -0.015625, 0.0625, 0.09375, 0.015625, 0.109375, 0.109375, 0.0390625, 0.03125, -0.0703125, -0.046875, 0.0078125, 0.078125, -0.0859375, 0.0078125, 0.0703125, 0.0859375, -0.109375, -0.125, -0.1328125, -0.03125, -0.0234375, -0.078125, -0.1484375, -0.0234375, -0.0546875, -0.125, -0.1796875, -0.1640625, -0.078125, -0.0859375, -0.1328125, -0.109375, -0.2421875, -0.125, -0.1953125, -0.1328125, -0.046875, -0.078125, -0.2265625, -0.1640625, -0.140625, -0.125, -0.1875, -0.1953125, -0.140625, -0.265625, -0.09375, -0.109375, -0.15625, -0.0703125, -0.0859375, -0.2109375, -0.3046875, -0.1796875, 0.015625, -0.0703125, -0.0234375, 0.0546875, -0.0859375, -0.078125, -0.1640625, -0.0234375, -0.0546875, -0.09375, -0.03125, -0.09375, -0.09375, -0.0703125, 0.03125, 0.1640625, 0.0078125, 0.0625, -0.03125, -0.03125, 0.1484375, 0.0234375, 0.0, -0.0703125, -0.0390625, 0.1328125, 0.1640625, 0.1484375, 0.015625, 0.1640625, 0.1875, 0.1015625, 0.0703125, 0.09375, 0.03125, 0.1640625, 0.1328125, 0.1171875, 0.0859375, 0.171875, 0.1015625, 0.1484375, 0.296875, 0.28125, 0.125, 0.0859375, 0.0859375, 0.203125, 0.1484375, 0.140625, 0.140625, 0.203125, 0.171875, 0.09375, 0.1015625, 0.125, 0.0625, 0.15625, 0.2421875, 0.21875, 0.2265625, 0.015625, 0.03125, 0.1328125, 0.171875, 0.125, 0.140625, -0.0234375, 0.046875, 0.0703125, 0.1328125, 0.03125, -0.015625, 0.0703125, 0.0390625, 0.0234375\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_48000::bitDepth = 8}}
\par
{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int aiff_stereo_8bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t aiff_stereo_8bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:aiff_stereo_8bit_48000}
{\xe \v aiff_stereo_8bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > aiff_stereo_8bit_48000::testBuffer = \{\{-0.0078125, 0.0234375, -0.1015625, -0.0703125, -0.0234375, -0.0703125, 0.0625, 0.109375, 0.1015625, -0.0546875, -0.0078125, 0.046875, 0.015625, 0.0234375, 0.0625, -0.109375, -0.0625, 0.046875, -0.0390625, -0.1796875, -0.1015625, -0.046875, 0.2265625, 0.2421875, 0.1171875, -0.1484375, -0.1953125, -0.1015625, 0.015625, 0.1484375, 0.09375, 0.0859375, 0.0625, -0.0390625, -0.140625, -0.0859375, 0.0234375, -0.1328125, -0.0390625, 0.1171875, 0.1171875, 0.0546875, 0.09375, -0.03125, 0.0390625, 0.046875, 0.1015625, 0.0703125, -0.0078125, 0.015625, 0.015625, -0.0390625, -0.109375, -0.125, -0.1484375, 0.078125, 0.078125, 0.0859375, 0.046875, 0.03125, 0.0859375, -0.015625, -0.015625, -0.1171875, -0.0703125, 0.0546875, 0.0703125, 0.234375, 0.234375, 0.1015625, 0.0546875, 0.1171875, 0.109375, 0.03125, -0.0546875, -0.015625, -0.09375, -0.015625, -0.0234375, -0.0078125, -0.1015625, -0.1796875, -0.109375, -0.1171875, -0.1328125, -0.140625, -0.1484375, -0.0703125, -0.0234375, 0.0234375, -0.046875, -0.078125, 0.0078125, 0.03125, -0.1171875, -0.15625, 0.046875, 0.1328125, 0.03125, 0.109375, 0.03125, 0.09375, 0.0234375, -0.0546875, 0.109375, 0.125, -0.0703125, -0.0234375, -0.09375, -0.1484375, -0.03125, 0.0078125, 0.03125, -0.0625, -0.3671875, -0.34375, -0.3125, -0.3203125, -0.2890625, -0.2421875, -0.15625, -0.1328125, -0.203125, -0.1015625, -0.3046875, -0.328125, -0.21875, -0.03125, -0.109375, -0.265625, -0.265625, -0.0625, 0.0546875, 0.0234375, 0.1328125, 0.0390625, -0.09375, 0.1015625, 0.0078125, -0.0078125, 0.1015625, 0.046875, 0.2265625, 0.2109375, 0.1015625, 0.1484375, 0.09375, 0.046875, 0.2421875, 0.15625, 0.0234375, 0.0625, 0.171875, 0.15625, 0.2265625, 0.1328125, 0.0234375, -0.03125, -0.0390625, -0.0390625, -0.046875, -0.09375, -0.046875, 0.046875, 0.0390625, -0.1015625, 0.015625, 0.0390625, 0.0234375, 0.0234375, 0.1015625, 0.0390625, -0.1015625, -0.171875, -0.203125, -0.0703125, 0.1015625, 0.0234375, -0.0078125, 0.015625, 0.0625, 0.1796875, 0.1015625, 0.140625, 0.046875, 0.046875, 0.2734375, 0.0390625, 0.0625, 0.1875, 0.203125, 0.0546875, 0.09375, 0.2890625, 0.203125, 0.0859375, 0.21875, 0.2734375, 0.3125, 0.1875, 0.203125, 0.265625, 0.2109375, 0.296875, 0.2265625, 0.140625, 0.2734375, 0.2421875, 0.1640625, 0.3203125, 0.0703125, 0.125, 0.1328125, 0.171875, 0.265625, 0.171875, 0.2109375, 0.078125, 0.0078125, 0.0703125, -0.0546875, 0.0, 0.1796875, -0.03125, -0.09375, -0.1796875, 0.0, 0.0, -0.1640625, -0.1640625, -0.1640625, -0.03125, -0.09375, -0.171875, -0.1875, -0.3359375, -0.2109375, -0.1640625, -0.1953125, -0.265625, -0.265625, -0.234375, -0.1796875, -0.2109375, -0.1640625, -0.2109375, -0.1640625, -0.2421875, -0.3125, -0.1875, -0.3203125, -0.234375, -0.1796875, -0.1640625, -0.3203125, -0.1796875, 0.0, -0.078125, -0.078125, -0.046875, -0.21875, -0.28125, -0.140625, -0.0546875, 0.0390625, -0.1171875, -0.078125, -0.0859375, 0.0234375, 0.0234375, -0.109375, 0.0078125, -0.0078125, -0.078125, 0.03125, 0.109375, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.03125, 0.0078125, 0.0703125, 0.125, -0.109375, 0.0, 0.09375, 0.0546875, 0.03125, 0.0078125, 0.1015625, 0.046875, 0.0546875, 0.0390625, 0.1328125, 0.1328125, 0.1328125, 0.0, -0.015625, -0.1015625, -0.0546875, 0.0625, -0.0859375, 0.0234375, -0.0546875, 0.015625, 0.1640625, 0.1484375, 0.046875, 0.1015625, 0.03125, -0.125, -0.0859375, -0.046875, 0.015625, 0.0234375, 0.1171875, 0.171875, 0.09375, -0.078125, -0.0703125, 0.0625, 0.09375, -0.046875, -0.0859375, 0.078125, 0.1796875, 0.1015625, 0.0234375, 0.015625, 0.1015625, 0.2578125, 0.1171875, 0.0234375, -0.015625, 0.0078125, 0.1015625, 0.0703125, 0.1640625, 0.203125, 0.1484375, 0.1328125, 0.109375, 0.15625, 0.25, 0.0234375, 0.125, 0.2109375, 0.1171875, 0.1171875, 0.234375, 0.1796875, 0.09375, 0.0, 0.15625, 0.15625, 0.0703125, 0.25, 0.125, 0.1328125, 0.046875, 0.09375, 0.2109375, 0.1796875, 0.0546875, 0.03125, 0.1171875, 0.2421875, 0.1484375, -0.0390625, -0.015625, 0.0234375, 0.09375, -0.0234375, 0.09375, 0.0703125, 0.015625, 0.0, -0.1171875, -0.078125, -0.0390625, 0.0390625, -0.125, -0.0546875, 0.0390625, 0.0078125, -0.140625, -0.203125, -0.1796875, -0.109375, -0.078125, -0.1484375, -0.2109375, -0.09375, -0.125, -0.1953125, -0.25, -0.2421875, -0.140625, -0.1640625, -0.1953125, -0.1796875, -0.3125, -0.203125, -0.2578125, -0.203125, -0.109375, -0.1484375, -0.2890625, -0.2265625, -0.2109375, -0.171875, -0.28125, -0.21875, -0.2421875, -0.28125, -0.1796875, -0.140625, -0.2265625, -0.1015625, -0.140625, -0.25, -0.34375, -0.234375, 0.0, -0.1328125, -0.0234375, 0.0, -0.0859375, -0.1171875, -0.171875, -0.0546875, -0.0546875, -0.109375, -0.03125, -0.1015625, -0.09375, -0.0703125, 0.046875, 0.1640625, 0.03125, 0.0625, -0.0078125, -0.015625, 0.171875, 0.046875, 0.03125, -0.046875, -0.0078125, 0.171875, 0.1875, 0.1953125, 0.046875, 0.21875, 0.234375, 0.15625, 0.125, 0.15625, 0.0859375, 0.2265625, 0.1875, 0.1796875, 0.1484375, 0.234375, 0.1796875, 0.1953125, 0.390625, 0.3203125, 0.234375, 0.1015625, 0.203125, 0.234375, 0.25, 0.1796875, 0.2265625, 0.265625, 0.2421875, 0.171875, 0.15625, 0.2109375, 0.1015625, 0.2578125, 0.2734375, 0.3203125, 0.2578125, 0.109375, 0.0625, 0.2109375, 0.203125, 0.1875, 0.1796875, 0.03125, 0.0859375, 0.125, 0.171875, 0.078125, 0.0234375, 0.1015625, 0.0703125, 0.0546875\}, \{-0.0078125, 0.0234375, -0.09375, -0.0703125, -0.0078125, -0.078125, 0.078125, 0.0859375, 0.109375, -0.0625, 0.0, 0.0390625, 0.0234375, 0.0390625, 0.0390625, -0.125, -0.03125, 0.0859375, -0.0859375, -0.171875, -0.125, 0.0, 0.1953125, 0.2734375, 0.0859375, -0.1484375, -0.21875, -0.0546875, 0.03125, 0.1484375, 0.0703125, 0.0390625, 0.0625, -0.0234375, -0.1015625, -0.109375, 0.0546875, -0.1328125, -0.046875, 0.078125, 0.0859375, 0.09375, 0.0078125, -0.0078125, 0.0703125, 0.03125, 0.0859375, 0.046875, 0.0, 0.0078125, 0.03125, -0.078125, -0.1171875, -0.1953125, -0.1015625, 0.0078125, 0.1171875, 0.0546875, 0.0546875, 0.0703125, 0.0390625, 0.0, -0.109375, -0.09375, -0.1015625, 0.0625, 0.09375, 0.1796875, 0.2421875, 0.1171875, 0.078125, 0.0625, 0.1640625, -0.0546875, 0.0546875, -0.03125, -0.078125, -0.0625, -0.0390625, -0.0078125, -0.1328125, -0.1640625, -0.140625, -0.1015625, -0.171875, -0.1796875, -0.1328125, -0.0703125, -0.078125, 0.046875, -0.0546875, -0.0546875, 0.0625, 0.0234375, 0.03125, -0.1484375, 0.1484375, 0.1796875, 0.0703125, 0.1328125, 0.109375, 0.1484375, 0.046875, 0.0234375, 0.171875, 0.203125, -0.0546875, 0.0078125, -0.0625, -0.0546875, -0.015625, 0.046875, 0.078125, -0.046875, -0.265625, -0.3359375, -0.2109375, -0.3046875, -0.203125, -0.1796875, -0.109375, -0.109375, -0.125, -0.09375, -0.2578125, -0.2890625, -0.1640625, 0.0, -0.0703125, -0.1640625, -0.2421875, 0.0, 0.078125, 0.0546875, 0.171875, 0.03125, -0.015625, 0.125, 0.0625, 0.0234375, 0.125, 0.0625, 0.21875, 0.2265625, 0.109375, 0.1640625, 0.109375, 0.09375, 0.2109375, 0.1953125, -0.046875, 0.1328125, 0.109375, 0.1640625, 0.1875, 0.1171875, 0.0078125, -0.0546875, -0.0859375, -0.0625, -0.1171875, -0.1015625, -0.1171875, 0.0078125, 0.0, -0.15625, -0.03125, -0.03125, -0.0234375, -0.03125, 0.0390625, -0.0390625, -0.15625, -0.2578125, -0.25, -0.1640625, 0.0625, -0.0859375, -0.0546875, -0.078125, -0.015625, 0.0859375, 0.015625, 0.0546875, -0.03125, -0.0234375, 0.1796875, -0.015625, -0.03125, 0.140625, 0.09375, 0.015625, -0.015625, 0.2421875, 0.1015625, 0.03125, 0.1328125, 0.2265625, 0.2265625, 0.140625, 0.140625, 0.21875, 0.1640625, 0.234375, 0.203125, 0.0625, 0.2734375, 0.1640625, 0.1796875, 0.25, 0.0859375, 0.0703125, 0.140625, 0.1328125, 0.265625, 0.1484375, 0.203125, 0.078125, -0.0078125, 0.09375, -0.078125, 0.0234375, 0.15625, 0.0, -0.1015625, -0.1484375, 0.0078125, 0.03125, -0.15625, -0.125, -0.1484375, 0.0078125, -0.0703125, -0.1328125, -0.1640625, -0.28125, -0.1953125, -0.1015625, -0.1875, -0.1796875, -0.2578125, -0.15625, -0.15625, -0.1484375, -0.109375, -0.1640625, -0.0859375, -0.2109375, -0.2265625, -0.171875, -0.2109375, -0.2265625, -0.0703125, -0.1484375, -0.21875, -0.1484375, 0.09375, -0.0390625, -0.015625, 0.03125, -0.1796875, -0.171875, -0.1328125, 0.0703125, 0.0390625, -0.015625, -0.0546875, -0.0078125, 0.0703125, 0.0703125, -0.0390625, 0.0390625, 0.078125, -0.0546875, 0.1171875, 0.125, 0.0859375, 0.0546875, 0.1328125, 0.1953125, 0.0546875, 0.0625, 0.0859375, 0.1640625, -0.0859375, 0.0234375, 0.1171875, 0.078125, 0.0390625, 0.0390625, 0.078125, 0.09375, 0.0078125, 0.09375, 0.0859375, 0.15625, 0.1015625, -0.0078125, -0.0234375, -0.1328125, -0.0390625, 0.0, -0.0703125, -0.0546875, -0.046875, -0.0625, 0.15625, 0.078125, 0.0234375, 0.03125, 0.0, -0.1875, -0.125, -0.1015625, -0.046875, -0.03125, 0.046875, 0.1171875, 0.015625, -0.1328125, -0.1484375, 0.0, 0.015625, -0.109375, -0.1640625, 0.0078125, 0.09375, 0.0390625, -0.0625, -0.0546875, 0.015625, 0.1953125, 0.03125, -0.03125, -0.109375, -0.0390625, 0.0, 0.0234375, 0.0703125, 0.140625, 0.078125, 0.0625, 0.046875, 0.09375, 0.1796875, -0.03125, 0.0625, 0.171875, 0.046875, 0.078125, 0.171875, 0.140625, 0.046875, -0.0390625, 0.1171875, 0.125, 0.0390625, 0.21875, 0.109375, 0.1015625, 0.0390625, 0.0546875, 0.21875, 0.1484375, 0.0625, 0.0078125, 0.125, 0.25, 0.1484375, -0.0234375, -0.015625, 0.0625, 0.09375, 0.015625, 0.109375, 0.109375, 0.0390625, 0.03125, -0.0703125, -0.046875, 0.0078125, 0.078125, -0.0859375, 0.0078125, 0.0703125, 0.0859375, -0.109375, -0.125, -0.1328125, -0.03125, -0.0234375, -0.078125, -0.1484375, -0.0234375, -0.0546875, -0.125, -0.1796875, -0.1640625, -0.078125, -0.0859375, -0.1328125, -0.109375, -0.2421875, -0.125, -0.1953125, -0.1328125, -0.046875, -0.078125, -0.2265625, -0.1640625, -0.140625, -0.125, -0.1875, -0.1953125, -0.140625, -0.265625, -0.09375, -0.109375, -0.15625, -0.0703125, -0.0859375, -0.2109375, -0.3046875, -0.1796875, 0.015625, -0.0703125, -0.0234375, 0.0546875, -0.0859375, -0.078125, -0.1640625, -0.0234375, -0.0546875, -0.09375, -0.03125, -0.09375, -0.09375, -0.0703125, 0.03125, 0.1640625, 0.0078125, 0.0625, -0.03125, -0.03125, 0.1484375, 0.0234375, 0.0, -0.0703125, -0.0390625, 0.1328125, 0.1640625, 0.1484375, 0.015625, 0.1640625, 0.1875, 0.1015625, 0.0703125, 0.09375, 0.03125, 0.1640625, 0.1328125, 0.1171875, 0.0859375, 0.171875, 0.1015625, 0.1484375, 0.296875, 0.28125, 0.125, 0.0859375, 0.0859375, 0.203125, 0.1484375, 0.140625, 0.140625, 0.203125, 0.171875, 0.09375, 0.1015625, 0.125, 0.0625, 0.15625, 0.2421875, 0.21875, 0.2265625, 0.015625, 0.03125, 0.1328125, 0.171875, 0.125, 0.140625, -0.0234375, 0.046875, 0.0703125, 0.1328125, 0.03125, -0.015625, 0.0703125, 0.0390625, 0.0234375\}\}}}
\par
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest}
{\xe \v doctest}
{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CurrentTestCaseStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IReporter}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b String}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMaker}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMaker< R C::* >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMaker< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestRunStats}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, const {\b String} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (int long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (std::nullptr_t in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b is_running_in_test}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v assertString\:doctest}
{\xe \v doctest\:assertString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::assertString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (description , const char * , "" )}}
\par
{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (expected_failures , int , 0 )}}
\par
{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (may_fail , bool , true )}}
\par
{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (should_fail , bool , true )}}
\par
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (skip , bool , true )}}
\par
{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (test_suite , const char * , "" )}}
\par
{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (timeout , double , 0 )}}
\par
{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v failureString\:doctest}
{\xe \v doctest\:failureString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::failureString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getContextOptions\:doctest}
{\xe \v doctest\:getContextOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * doctest::getContextOptions ()}}
\par
{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest}
{\xe \v doctest\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator< (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<<\:doctest}
{\xe \v doctest\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & doctest::operator<< ({\b std::ostream} &  {\i s}, const {\b String} &  {\i in})}}
\par
{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest}
{\xe \v doctest\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator<= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest}
{\xe \v doctest\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator> (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest}
{\xe \v doctest\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator>= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerExceptionTranslator\:doctest}
{\xe \v doctest\:registerExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::registerExceptionTranslator ({\b String}(*)(T)  {\i translateFunction})}}
\par
{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerReporter\:doctest}
{\xe \v doctest\:registerReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > int doctest::registerReporter (const char *  {\i name}, int  {\i priority}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v skipPathFromFilename\:doctest}
{\xe \v doctest\:skipPathFromFilename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::skipPathFromFilename (const char *  {\i file})}}
\par
{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (bool  {\i in})}}
\par
{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char  {\i in})}}
\par
{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char signed  {\i in})}}
\par
{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (const {\b Approx} &  {\i in})}}
\par
{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::toString (const {\b DOCTEST_REF_WRAP}(T)  {\i value})}}
\par
{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double  {\i in})}}
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double long  {\i in})}}
\par
{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (float  {\i in})}}
\par
{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int  {\i in})}}
\par
{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int long  {\i in})}}
\par
{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int long long  {\i in})}}
\par
{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int long long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int short  {\i in})}}
\par
{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int short unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (int unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (std::nullptr_t  {\i in})}}
\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v is_running_in_test\:doctest}
{\xe \v doctest\:is_running_in_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::is_running_in_test{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::assertType Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::assertType}
{\xe \v doctest::assertType}
{\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::assertType}
{\xe \v doctest::assertType\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::assertType::Enum}}}
\par
{\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABDM}
{\bkmkend AAAAAAABDM}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABDN}
{\bkmkend AAAAAAABDN}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABDO}
{\bkmkend AAAAAAABDO}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABDP}
{\bkmkend AAAAAAABDP}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABDQ}
{\bkmkend AAAAAAABDQ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABDR}
{\bkmkend AAAAAAABDR}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABDS}
{\bkmkend AAAAAAABDS}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABDT}
{\bkmkend AAAAAAABDT}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABDU}
{\bkmkend AAAAAAABDU}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABDV}
{\bkmkend AAAAAAABDV}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABDW}
{\bkmkend AAAAAAABDW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABDX}
{\bkmkend AAAAAAABDX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABDY}
{\bkmkend AAAAAAABDY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABDZ}
{\bkmkend AAAAAAABDZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABEA}
{\bkmkend AAAAAAABEA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABEB}
{\bkmkend AAAAAAABEB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABEC}
{\bkmkend AAAAAAABEC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABED}
{\bkmkend AAAAAAABED}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABEE}
{\bkmkend AAAAAAABEE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABEF}
{\bkmkend AAAAAAABEF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABEG}
{\bkmkend AAAAAAABEG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABEH}
{\bkmkend AAAAAAABEH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABEI}
{\bkmkend AAAAAAABEI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABEJ}
{\bkmkend AAAAAAABEJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABEK}
{\bkmkend AAAAAAABEK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABEL}
{\bkmkend AAAAAAABEL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABEM}
{\bkmkend AAAAAAABEM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABEN}
{\bkmkend AAAAAAABEN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABEO}
{\bkmkend AAAAAAABEO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABEP}
{\bkmkend AAAAAAABEP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABEQ}
{\bkmkend AAAAAAABEQ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABER}
{\bkmkend AAAAAAABER}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABES}
{\bkmkend AAAAAAABES}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABET}
{\bkmkend AAAAAAABET}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Color Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Color}
{\xe \v doctest::Color}
{\bkmkstart AAAAAAABEU}
{\bkmkend AAAAAAABEU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::Color}
{\xe \v doctest::Color\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::Color::Enum}}}
\par
{\bkmkstart AAAAAAABEV}
{\bkmkend AAAAAAABEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABEW}
{\bkmkend AAAAAAABEW}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABEX}
{\bkmkend AAAAAAABEX}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABEY}
{\bkmkend AAAAAAABEY}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABEZ}
{\bkmkend AAAAAAABEZ}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABFA}
{\bkmkend AAAAAAABFA}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABFB}
{\bkmkend AAAAAAABFB}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABFC}
{\bkmkend AAAAAAABFC}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABFD}
{\bkmkend AAAAAAABFD}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABFE}
{\bkmkend AAAAAAABFE}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABFG}
{\bkmkend AAAAAAABFG}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABFH}
{\bkmkend AAAAAAABFH}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABFI}
{\bkmkend AAAAAAABFI}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v operator<<\:doctest::Color}
{\xe \v doctest::Color\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & doctest::Color::operator<< ({\b std::ostream} &  {\i s}, {\b Color::Enum}  {\i code})}}
\par
{\bkmkstart AAAAAAABFJ}
{\bkmkend AAAAAAABFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail}
{\xe \v doctest::detail}
{\bkmkstart AAAAAAABFK}
{\bkmkend AAAAAAABFK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b has_insertion_operator_impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ContextScopeBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b deferred_false}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ExceptionTranslator}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b RelationalComparator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringStream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringStreamBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringStreamBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestSuite}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > using {\b has_insertion_operator} = {\b has_insertion_operator_impl::check}< T >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b funcType}) ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b assert_handler}) (const {\b AssertData} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b IReporter} *(* {\b reporterCreatorFunc}) (const {\b ContextOptions} &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b my_memcpy} (void *dest, const void *src, unsigned num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b getTlsOss} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b getTlsOssResult} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b rawMemoryToString} (const void *object, unsigned size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b rawMemoryToString} (const {\b DOCTEST_REF_WRAP}(T) object)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > const char * {\b type_to_string} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH} {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING} (4388) DOCTEST_MSVC_SUPPRESS_WARNING(4389) DOCTEST_MSVC_SUPPRESS_WARNING(4018) template< typename L > struct Expression_lhs\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, {\b Result} result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} void {\b binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} void {\b unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b toStream} ({\b std::ostream} *s, const T &value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b toStream} ({\b std::ostream} *s, int long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b reporterCreator} (const {\b ContextOptions} &o)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v assert_handler\:doctest::detail}
{\xe \v doctest::detail\:assert_handler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* doctest::detail::assert_handler) (const {\b AssertData} &)}}
\par
{\bkmkstart AAAAAAABFL}
{\bkmkend AAAAAAABFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v funcType\:doctest::detail}
{\xe \v doctest::detail\:funcType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* doctest::detail::funcType) ()}}
\par
{\bkmkstart AAAAAAABFM}
{\bkmkend AAAAAAABFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v has_insertion_operator\:doctest::detail}
{\xe \v doctest::detail\:has_insertion_operator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > using {\b doctest::detail::has_insertion_operator} = typedef {\b has_insertion_operator_impl::check}<T>}}
\par
{\bkmkstart AAAAAAABFN}
{\bkmkend AAAAAAABFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreatorFunc\:doctest::detail}
{\xe \v doctest::detail\:reporterCreatorFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b IReporter} *(* doctest::detail::reporterCreatorFunc) (const {\b ContextOptions} &)}}
\par
{\bkmkstart AAAAAAABFO}
{\bkmkend AAAAAAABFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail}
{\xe \v doctest::detail\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} void doctest::detail::binary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABFP}
{\bkmkend AAAAAAABFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v checkIfShouldThrow\:doctest::detail}
{\xe \v doctest::detail\:checkIfShouldThrow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::checkIfShouldThrow ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABFQ}
{\bkmkend AAAAAAABFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v decomp_assert\:doctest::detail}
{\xe \v doctest::detail\:decomp_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::decomp_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, {\b Result}  {\i result})}}
\par
{\bkmkstart AAAAAAABFR}
{\bkmkend AAAAAAABFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest::detail}
{\xe \v doctest::detail\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH} {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH} doctest::detail::DOCTEST_MSVC_SUPPRESS_WARNING (4388 )}}
\par
{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
}}
{\xe \v failed_out_of_a_testing_context\:doctest::detail}
{\xe \v doctest::detail\:failed_out_of_a_testing_context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::failed_out_of_a_testing_context (const {\b AssertData} &  {\i ad})}}
\par
{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getTlsOss\:doctest::detail}
{\xe \v doctest::detail\:getTlsOss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} * doctest::detail::getTlsOss ()}}
\par
{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getTlsOssResult\:doctest::detail}
{\xe \v doctest::detail\:getTlsOssResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::detail::getTlsOssResult ()}}
\par
{\bkmkstart AAAAAAABFV}
{\bkmkend AAAAAAABFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v instantiationHelper\:doctest::detail}
{\xe \v doctest::detail\:instantiationHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::detail::instantiationHelper (const T & )}}
\par
{\bkmkstart AAAAAAABFW}
{\bkmkend AAAAAAABFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isDebuggerActive\:doctest::detail}
{\xe \v doctest::detail\:isDebuggerActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::isDebuggerActive ()}}
\par
{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MakeContextScope\:doctest::detail}
{\xe \v doctest::detail\:MakeContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope}< L > doctest::detail::MakeContextScope (const L &  {\i lambda})}}
\par
{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v my_memcpy\:doctest::detail}
{\xe \v doctest::detail\:my_memcpy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::my_memcpy (void *  {\i dest}, const void *  {\i src}, unsigned  {\i num})}}
\par
{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rawMemoryToString\:doctest::detail}
{\xe \v doctest::detail\:rawMemoryToString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::detail::rawMemoryToString (const {\b DOCTEST_REF_WRAP}(T)  {\i object})}}
\par
{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rawMemoryToString\:doctest::detail}
{\xe \v doctest::detail\:rawMemoryToString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::detail::rawMemoryToString (const void *  {\i object}, unsigned  {\i size})}}
\par
{\bkmkstart AAAAAAABGB}
{\bkmkend AAAAAAABGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerExceptionTranslatorImpl\:doctest::detail}
{\xe \v doctest::detail\:registerExceptionTranslatorImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerExceptionTranslatorImpl (const {\b IExceptionTranslator} *  {\i et})}}
\par
{\bkmkstart AAAAAAABGC}
{\bkmkend AAAAAAABGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerReporterImpl\:doctest::detail}
{\xe \v doctest::detail\:registerReporterImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerReporterImpl (const char *  {\i name}, int  {\i prio}, {\b reporterCreatorFunc}  {\i c}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v regTest\:doctest::detail}
{\xe \v doctest::detail\:regTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::regTest (const {\b TestCase} &  {\i tc})}}
\par
{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreator\:doctest::detail}
{\xe \v doctest::detail\:reporterCreator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > {\b IReporter} * doctest::detail::reporterCreator (const {\b ContextOptions} &  {\i o})}}
\par
{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setTestSuite\:doctest::detail}
{\xe \v doctest::detail\:setTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::setTestSuite (const {\b TestSuite} &  {\i ts})}}
\par
{\bkmkstart AAAAAAABGG}
{\bkmkend AAAAAAABGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stringifyBinaryExpr\:doctest::detail}
{\xe \v doctest::detail\:stringifyBinaryExpr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename R > {\b String} doctest::detail::stringifyBinaryExpr (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const char *  {\i op}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABGH}
{\bkmkend AAAAAAABGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v throwException\:doctest::detail}
{\xe \v doctest::detail\:throwException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::throwException ()}}
\par
{\bkmkstart AAAAAAABGI}
{\bkmkend AAAAAAABGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, bool  {\i in})}}
\par
{\bkmkstart AAAAAAABGJ}
{\bkmkend AAAAAAABGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, char  {\i in})}}
\par
{\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, char signed  {\i in})}}
\par
{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, char unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABGM}
{\bkmkend AAAAAAABGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void doctest::detail::toStream ({\b std::ostream} *  {\i s}, const T &  {\i value})}}
\par
{\bkmkstart AAAAAAABGN}
{\bkmkend AAAAAAABGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, double  {\i in})}}
\par
{\bkmkstart AAAAAAABGO}
{\bkmkend AAAAAAABGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, double long  {\i in})}}
\par
{\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, float  {\i in})}}
\par
{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int  {\i in})}}
\par
{\bkmkstart AAAAAAABGR}
{\bkmkend AAAAAAABGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int long  {\i in})}}
\par
{\bkmkstart AAAAAAABGS}
{\bkmkend AAAAAAABGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int long long  {\i in})}}
\par
{\bkmkstart AAAAAAABGT}
{\bkmkend AAAAAAABGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int long long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABGU}
{\bkmkend AAAAAAABGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABGV}
{\bkmkend AAAAAAABGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int short  {\i in})}}
\par
{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int short unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::toStream ({\b std::ostream} *  {\i s}, int unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type_to_string\:doctest::detail}
{\xe \v doctest::detail\:type_to_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > const char * doctest::detail::type_to_string ()}}
\par
{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unary_assert\:doctest::detail}
{\xe \v doctest::detail\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} void doctest::detail::unary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i val})}}
\par
{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::assertAction Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction}
{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::assertAction::Enum}}}
\par
{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::binaryAssertComparison Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison}
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::binaryAssertComparison::Enum}}}
\par
{\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::has_insertion_operator_impl Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator_impl}
{\xe \v doctest::detail::has_insertion_operator_impl}
{\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b check}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b check< T, decltype(os()<< val< T >(), void())>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\b os} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_REF_WRAP} (T) val()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v DOCTEST_REF_WRAP\:doctest::detail::has_insertion_operator_impl}
{\xe \v doctest::detail::has_insertion_operator_impl\:DOCTEST_REF_WRAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > doctest::detail::has_insertion_operator_impl::DOCTEST_REF_WRAP (T )}}
\par
{\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v os\:doctest::detail::has_insertion_operator_impl}
{\xe \v doctest::detail::has_insertion_operator_impl\:os}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream} & doctest::detail::has_insertion_operator_impl::os ()}}
\par
{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseFailureReason Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason}
{\bkmkstart AAAAAAABLH}
{\bkmkend AAAAAAABLH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v Enum\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::TestCaseFailureReason::Enum}}}
\par
{\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest_detail_test_suite_ns Namespace Reference\par \pard\plain 
{\tc\tcl2 \v doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns}
{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b getCurrentTestSuite} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v getCurrentTestSuite\:doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns\:getCurrentTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & doctest_detail_test_suite_ns::getCurrentTestSuite ()}}
\par
{\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
examples Namespace Reference\par \pard\plain 
{\tc\tcl2 \v examples}
{\xe \v examples}
{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b writeSineWaveToAudioFile} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b loadAudioFileAndPrintSummary} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b loadAudioFileAndProcessSamples} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v loadAudioFileAndPrintSummary\:examples}
{\xe \v examples\:loadAudioFileAndPrintSummary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void examples::loadAudioFileAndPrintSummary ()}}
\par
{\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you hit this assert then the file path above probably doesn't refer to a valid audio file\par
If you hit this assert then the file path above probably doesn't refer to a valid audio file\par
}}
{\xe \v loadAudioFileAndProcessSamples\:examples}
{\xe \v examples\:loadAudioFileAndProcessSamples}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void examples::loadAudioFileAndProcessSamples ()}}
\par
{\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you hit this assert then the file path above probably doesn't refer to a valid audio file\par
If you hit this assert then the file path above probably doesn't refer to a valid audio file\par
}}
{\xe \v writeSineWaveToAudioFile\:examples}
{\xe \v examples\:writeSineWaveToAudioFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void examples::writeSineWaveToAudioFile ()}}
\par
{\bkmkstart AAAAAAABLZ}
{\bkmkend AAAAAAABLZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
makeHeaders Namespace Reference\par \pard\plain 
{\tc\tcl2 \v makeHeaders}
{\xe \v makeHeaders}
{\bkmkstart AAAAAAABMA}
{\bkmkend AAAAAAABMA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b makeHeader} (fileName, {\b audioSignal}, {\b numChannels}, bitRate, sampleRate, {\b fileFormat})\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b wavFiles} = []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b audioSignal}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b fs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b enc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b fileFormat} = "wav"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 1\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v makeHeader\:makeHeaders}
{\xe \v makeHeaders\:makeHeader}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def makeHeaders.makeHeader (  {\i fileName},   {\i audioSignal},   {\i numChannels},   {\i bitRate},   {\i sampleRate},   {\i fileFormat})}}
\par
{\bkmkstart AAAAAAABMB}
{\bkmkend AAAAAAABMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v audioSignal\:makeHeaders}
{\xe \v makeHeaders\:audioSignal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
makeHeaders.audioSignal}}
\par
{\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v enc\:makeHeaders}
{\xe \v makeHeaders\:enc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
makeHeaders.enc}}
\par
{\bkmkstart AAAAAAABMD}
{\bkmkend AAAAAAABMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v fileFormat\:makeHeaders}
{\xe \v makeHeaders\:fileFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string makeHeaders.fileFormat = "wav"}}
\par
{\bkmkstart AAAAAAABME}
{\bkmkend AAAAAAABME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v fs\:makeHeaders}
{\xe \v makeHeaders\:fs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
makeHeaders.fs}}
\par
{\bkmkstart AAAAAAABMF}
{\bkmkend AAAAAAABMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:makeHeaders}
{\xe \v makeHeaders\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
makeHeaders.numChannels = 1}}
\par
{\bkmkstart AAAAAAABMG}
{\bkmkend AAAAAAABMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v wavFiles\:makeHeaders}
{\xe \v makeHeaders\:wavFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
list makeHeaders.wavFiles = []}}
\par
{\bkmkstart AAAAAAABMH}
{\bkmkend AAAAAAABMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_8chan_24bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000}
{\bkmkstart AAAAAAABMI}
{\bkmkend AAAAAAABMI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 191524\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.00112915039062, 0.00247192382812, 0.00570678710938, 0.007080078125, 0.00711059570312, 0.00714111328125, 0.00674438476562, 0.00582885742188, 0.00418090820312, 0.0023193359375, 0.00079345703125, 0.000701904296875, 0.00323486328125, 0.00433349609375, 0.00201416015625, 9.1552734375e-05, 0.000274658203125, 0.00192260742188, 0.0028076171875, 0.00228881835938, 0.00302124023438, 0.00491333007812, 0.00616455078125, 0.0048828125, 0.00164794921875, 0.00018310546875, 0.000579833984375, 0.0025634765625, 0.00582885742188, 0.00631713867188, 0.0050048828125, 0.0062255859375, 0.0103454589844, 0.0140686035156, 0.0157165527344, 0.0171813964844, 0.0186462402344, 0.0191955566406, 0.0193786621094, 0.0194396972656, 0.0196838378906, 0.0190124511719, 0.0177612304688, 0.0190124511719, 0.0223999023438, 0.0241088867188, 0.0224304199219, 0.0197143554688, 0.0186157226562, 0.02001953125, 0.02197265625, 0.0217590332031, 0.0204467773438, 0.0202941894531, 0.0215454101562, 0.0221557617188, 0.0212707519531, 0.018798828125, 0.0136108398438, 0.00970458984375, 0.0101318359375, 0.0115356445312, 0.0110473632812, 0.00894165039062, 0.00927734375, 0.0102844238281, 0.0062255859375, 0.0029296875, 0.00509643554688, 0.00823974609375, 0.00875854492188, 0.00759887695312, 0.0079345703125, 0.00827026367188, 0.0084228515625, 0.00970458984375, 0.00802612304688, 0.00479125976562, 0.00399780273438, 0.0042724609375, 0.00341796875, 0.0028076171875, 0.00582885742188, 0.00802612304688, 0.00521850585938, 0.00277709960938, 0.00299072265625, 0.00387573242188, 0.00442504882812, 0.00369262695312, 0.0028076171875, 0.00238037109375, 0.00204467773438, 0.001708984375, 0.00241088867188, 0.00473022460938, 0.00457763671875, -6.103515625e-05, -0.00344848632812, -0.00189208984375, 0.000701904296875, 0.00079345703125, -0.00079345703125, -0.00103759765625, 0.000335693359375, -0.0006103515625, -0.00347900390625, -0.00360107421875, -0.00222778320312, -0.00299072265625, -0.004638671875, -0.0052490234375, -0.00640869140625, -0.00900268554688, -0.0112609863281, -0.0128784179688, -0.0135498046875, -0.0115661621094, -0.0103759765625, -0.0130920410156, -0.0149536132812, -0.0120239257812, -0.00973510742188, -0.0126647949219, -0.0153503417969, -0.0133666992188, -0.0106506347656, -0.0104370117188, -0.0114135742188, -0.0111694335938, -0.00970458984375, -0.00814819335938, -0.00543212890625, -0.00311279296875, -0.00442504882812, -0.0074462890625, -0.0089111328125, -0.00778198242188, -0.0047607421875, -0.00341796875, -0.00540161132812, -0.0068359375, -0.00421142578125, -0.0020751953125, -0.00445556640625, -0.00564575195312, -0.00473022460938, -0.0064697265625, -0.008544921875, -0.00900268554688, -0.00888061523438, -0.00906372070312, -0.0102233886719, -0.00942993164062, -0.0068359375, -0.00576782226562, -0.00497436523438, -0.0042724609375, -0.00543212890625, -0.00802612304688, -0.0106811523438, -0.01318359375, -0.0177612304688, -0.02197265625, -0.0209045410156, -0.0183715820312, -0.0194091796875, -0.0216369628906, -0.0208435058594, -0.0160522460938, -0.0114440917969, -0.0118103027344, -0.0149230957031, -0.0141906738281, -0.00906372070312, -0.00601196289062, -0.00839233398438, -0.0123291015625, -0.0127563476562, -0.00830078125, -0.00283813476562, -0.00079345703125, -0.00167846679688, -0.00299072265625, -0.00234985351562, -0.000396728515625, -0.00180053710938, -0.00503540039062, -0.00390625, 0.0001220703125, 0.0018310546875, 0.00143432617188, 0.000762939453125, 9.1552734375e-05, 0.00137329101562, 0.00515747070312, 0.007568359375, 0.00653076171875, 0.005126953125, 0.00564575195312, 0.00650024414062, 0.00729370117188, 0.0076904296875, 0.005615234375, 0.003662109375, 0.00552368164062, 0.00942993164062, 0.0111999511719, 0.00897216796875, 0.008056640625, 0.0116271972656, 0.0142517089844, 0.014404296875, 0.0147094726562, 0.0154418945312, 0.0144958496094, 0.0111083984375, 0.010498046875, 0.0132751464844, 0.0144653320312, 0.0154724121094, 0.0166931152344, 0.0150451660156, 0.0126342773438, 0.0126342773438, 0.013916015625, 0.0123291015625, 0.00888061523438, 0.00906372070312, 0.0110168457031, 0.0104370117188, 0.0098876953125, 0.0116882324219, 0.0148010253906, 0.0161743164062, 0.0147705078125, 0.0145568847656, 0.015625, 0.0148315429688, 0.0132751464844, 0.0116577148438, 0.00967407226562, 0.00851440429688, 0.00927734375, 0.0108032226562, 0.0107421875, 0.011962890625, 0.0158081054688, 0.0163879394531, 0.0133666992188, 0.0118713378906, 0.0133056640625, 0.013916015625, 0.0107116699219, 0.00802612304688, 0.00860595703125, 0.0103454589844, 0.0117797851562, 0.0123291015625, 0.0125122070312, 0.0119018554688, 0.0103454589844, 0.00885009765625, 0.0064697265625, 0.0045166015625, 0.00595092773438, 0.00888061523438, 0.00942993164062, 0.0086669921875, 0.0096435546875, 0.00997924804688, 0.0089111328125, 0.0104370117188, 0.0133666992188, 0.0143127441406, 0.0142211914062, 0.0152893066406, 0.0159606933594, 0.0126037597656, 0.00778198242188, 0.006103515625, 0.00582885742188, 0.004638671875, 0.0045166015625, 0.00643920898438, 0.0067138671875, 0.004150390625, 0.00274658203125, 0.00369262695312, 0.00390625, 0.00387573242188, 0.00537109375, 0.00491333007812, 0.00253295898438, 0.0030517578125, 0.00433349609375, 0.00274658203125, 0.00167846679688, 0.00408935546875, 0.00613403320312, 0.00335693359375, -0.00091552734375, -0.00152587890625, 0.0001220703125, 0.0003662109375, -0.00054931640625, 0.0006103515625, 0.00198364257812, 0.000274658203125, 0.000640869140625, 0.00445556640625, 0.00454711914062, 0.00091552734375, 0.000335693359375, 0.00390625, 0.0059814453125, 0.00534057617188, 0.00552368164062, 0.00595092773438, 0.0057373046875, 0.00634765625, 0.0076904296875, 0.00912475585938, 0.00955200195312, 0.00830078125, 0.00625610351562, 0.00482177734375, 0.00527954101562, 0.00396728515625, 0.0003662109375, 0.00149536132812, 0.0064697265625, 0.00802612304688, 0.00534057617188, 0.00396728515625, 0.00753784179688, 0.0110778808594, 0.00985717773438, 0.0062255859375, 0.0045166015625, 0.00653076171875, 0.008056640625, 0.0054931640625, 0.00177001953125, 0.000946044921875, 0.00381469726562, 0.0062255859375, 0.00521850585938, 0.00408935546875, 0.0072021484375, 0.0123596191406, 0.0127563476562, 0.00732421875, 0.0015869140625, -0.000152587890625, 0.001708984375, 0.0042724609375, 0.00653076171875, 0.00750732421875, 0.0067138671875, 0.00714111328125, 0.00949096679688, 0.00973510742188, 0.00729370117188, 0.00704956054688, 0.00808715820312, 0.00588989257812, 0.00408935546875, 0.00521850585938, 0.00628662109375, 0.00677490234375, 0.00772094726562, 0.00811767578125, 0.0062255859375, 0.00405883789062, 0.00418090820312, 0.005126953125, 0.0054931640625, 0.00335693359375, 0.00186157226562, 0.005126953125, 0.00732421875, 0.00582885742188, 0.00515747070312, 0.00543212890625, 0.005126953125, 0.00469970703125, 0.00457763671875, 0.00424194335938, 0.00445556640625, 0.00552368164062, 0.00430297851562, 0.00161743164062, 0.00143432617188, 0.00335693359375, 0.005126953125, 0.00582885742188, 0.00628662109375, 0.00668334960938, 0.00479125976562, 0.00106811523438, -0.00054931640625, 0.00216674804688, 0.00509643554688, 0.00314331054688, 0.000701904296875, 0.00274658203125, 0.00656127929688, 0.00885009765625, 0.00714111328125, 0.00347900390625, 0.00286865234375, 0.0037841796875, 0.00384521484375, 0.00384521484375, 0.00485229492188, 0.00674438476562, 0.00674438476562, 0.004638671875, 0.00161743164062, -0.00186157226562, -0.00308227539062, -0.002685546875, -0.00384521484375, -0.006103515625, -0.00787353515625, -0.00912475585938, -0.0101013183594, -0.0104675292969, -0.0116882324219, -0.0133972167969, -0.0140075683594, -0.0157775878906, -0.0169372558594, -0.0152893066406, -0.0151672363281, -0.0177917480469, -0.0206909179688, -0.0221862792969, -0.0228576660156, -0.0233154296875, -0.021728515625, -0.020751953125, -0.0218811035156, -0.0210266113281, -0.0186767578125, -0.0163269042969, -0.0150146484375, -0.0170593261719, -0.0192565917969, -0.0184326171875, -0.0161743164062, -0.013916015625, -0.01220703125, -0.010498046875, -0.00741577148438, -0.00335693359375, -0.00192260742188, -0.00567626953125, -0.00946044921875, -0.00881958007812, -0.00820922851562, -0.0101013183594, -0.0112915039062, -0.00991821289062, -0.006591796875, -0.00457763671875, -0.00588989257812, -0.00848388671875, -0.00955200195312, -0.00875854492188, -0.00985717773438, -0.01318359375, -0.015625, -0.0177917480469, -0.0191040039062, -0.019287109375, -0.0198974609375, -0.0197448730469, -0.0194396972656, -0.0189208984375, -0.0178527832031, -0.0184020996094, -0.0185241699219, -0.0164489746094, -0.0153198242188, -0.016845703125, -0.0198669433594, -0.0223999023438, -0.0236206054688, -0.0225524902344, -0.0199279785156, -0.0190124511719, -0.0186767578125, -0.0170288085938, -0.0152587890625, -0.0137634277344, -0.0141906738281, -0.0158081054688, -0.0149841308594\}, \{0.00750732421875, 0.00558471679688, 0.00167846679688, 0.000885009765625, 0.0068359375, 0.0120849609375, 0.00875854492188, 0.00350952148438, 0.00457763671875, 0.00701904296875, 0.00250244140625, -0.00241088867188, 0.00393676757812, 0.0133361816406, 0.0116882324219, 0.00286865234375, -0.00189208984375, -0.000244140625, -0.00100708007812, -0.007568359375, -0.00872802734375, 0.000152587890625, 0.00509643554688, -0.00570678710938, -0.0169982910156, -0.00836181640625, 0.00616455078125, 0.00393676757812, -0.00833129882812, -0.0124816894531, -0.00677490234375, -0.00430297851562, -0.0103454589844, -0.0155029296875, -0.0123596191406, -0.00506591796875, -0.00326538085938, -0.008056640625, -0.0110168457031, -0.00631713867188, 0.002685546875, 0.0047607421875, -0.00360107421875, -0.00955200195312, -0.00335693359375, 0.00592041015625, 0.00576782226562, 0.000640869140625, 0.00228881835938, 0.00994873046875, 0.0137023925781, 0.0124206542969, 0.012451171875, 0.0125427246094, 0.0102233886719, 0.0100402832031, 0.01318359375, 0.0123291015625, 0.00531005859375, 0.00234985351562, 0.00662231445312, 0.0118713378906, 0.0152282714844, 0.0128173828125, 0.0064697265625, 0.00439453125, 0.00881958007812, 0.0155334472656, 0.0157470703125, 0.0104675292969, 0.0104675292969, 0.0164184570312, 0.0190734863281, 0.0113220214844, 0.00234985351562, 0.00448608398438, 0.0105285644531, 0.0104675292969, 0.00732421875, 0.00848388671875, 0.0119323730469, 0.00985717773438, 0.00579833984375, 0.00537109375, 0.00714111328125, 0.00909423828125, 0.00802612304688, 0.00445556640625, 0.00125122070312, -0.00112915039062, -0.00067138671875, 0.00241088867188, 0.003662109375, 0.000701904296875, -0.00247192382812, -0.00173950195312, -0.00128173828125, -0.00436401367188, -0.00518798828125, -0.000274658203125, 0.00640869140625, 0.00936889648438, 0.00439453125, -0.004150390625, -0.00454711914062, 0.0035400390625, 0.00845336914062, 0.00485229492188, -0.0001220703125, 0.00372314453125, 0.013427734375, 0.0133666992188, 0.000457763671875, -0.00637817382812, 0.004638671875, 0.0160522460938, 0.010986328125, 0.000823974609375, 0.0003662109375, 0.00372314453125, 0.00155639648438, -0.0006103515625, 0.00411987304688, 0.00839233398438, 0.00466918945312, -0.00054931640625, 0.00180053710938, 0.00714111328125, 0.00595092773438, 0.00347900390625, 0.00772094726562, 0.0111694335938, 0.00784301757812, 0.00372314453125, 0.00363159179688, 0.00588989257812, 0.00634765625, 0.00503540039062, 0.00640869140625, 0.00906372070312, 0.00665283203125, 0.001220703125, 0.00320434570312, 0.0108032226562, 0.0109252929688, 0.00265502929688, -0.00399780273438, -0.0015869140625, 0.00558471679688, 0.0037841796875, -0.00457763671875, -0.00552368164062, -0.00198364257812, -0.00164794921875, -0.00274658203125, -0.00247192382812, -0.00271606445312, -0.00674438476562, -0.00997924804688, -0.00692749023438, -0.00161743164062, 3.0517578125e-05, -0.00296020507812, -0.00576782226562, -0.00506591796875, -0.00424194335938, -0.00299072265625, -9.1552734375e-05, -0.00250244140625, -0.0112915039062, -0.0143737792969, -0.005859375, 0.0029296875, 0.00054931640625, -0.00619506835938, -0.00457763671875, 0.002197265625, 0.00091552734375, -0.00735473632812, -0.0084228515625, -0.00054931640625, 0.00674438476562, 0.00897216796875, 0.005615234375, 0.00152587890625, 0.00360107421875, 0.00576782226562, 0.00128173828125, -0.00054931640625, 0.00692749023438, 0.0127563476562, 0.00738525390625, -0.00119018554688, -0.00125122070312, 0.00405883789062, 0.00399780273438, 0.00048828125, 0.0020751953125, 0.00433349609375, -0.00106811523438, -0.00503540039062, 0.0052490234375, 0.0169982910156, 0.0104370117188, -0.0020751953125, 0.00177001953125, 0.0140686035156, 0.0133972167969, -0.000335693359375, -0.0068359375, 0.000244140625, 0.00631713867188, 0.00665283203125, 0.00933837890625, 0.0158996582031, 0.0172119140625, 0.00851440429688, 0.00244140625, 0.00717163085938, 0.0127868652344, 0.0118713378906, 0.00689697265625, 0.0037841796875, 0.006591796875, 0.0125732421875, 0.0169677734375, 0.0178833007812, 0.0177612304688, 0.0182189941406, 0.0140991210938, 0.00747680664062, 0.00909423828125, 0.0168151855469, 0.0187072753906, 0.0125732421875, 0.00820922851562, 0.0135498046875, 0.0196838378906, 0.01611328125, 0.00982666015625, 0.0107727050781, 0.015380859375, 0.0125122070312, 0.00335693359375, 0.00326538085938, 0.0141296386719, 0.0191955566406, 0.0100708007812, 0.001953125, 0.009521484375, 0.0187377929688, 0.01416015625, 0.00836181640625, 0.014404296875, 0.0222778320312, 0.0165405273438, 0.00234985351562, -0.00430297851562, -0.00131225585938, 0.00332641601562, 0.00393676757812, 0.00259399414062, 0.00381469726562, 0.00534057617188, 0.00503540039062, 0.00491333007812, 0.00433349609375, 0.00250244140625, 0.0040283203125, 0.0102844238281, 0.0119323730469, 0.00677490234375, 0.00344848632812, 0.00241088867188, 0.00125122070312, 0.00509643554688, 0.0158081054688, 0.0224304199219, 0.0148620605469, 0.00262451171875, 0.000732421875, 0.0050048828125, 0.0032958984375, -0.0009765625, 0.00360107421875, 0.0130004882812, 0.0134887695312, 0.00619506835938, 0.00311279296875, 0.00613403320312, 0.00909423828125, 0.0102844238281, 0.0102233886719, 0.00912475585938, 0.0067138671875, 0.00137329101562, -0.00274658203125, -0.00131225585938, 0.000457763671875, -0.00192260742188, -0.0045166015625, -0.00387573242188, -0.00296020507812, -0.00408935546875, -0.0057373046875, -0.00750732421875, -0.0076904296875, -0.00704956054688, -0.00869750976562, -0.00912475585938, -0.00689697265625, -0.00701904296875, -0.00936889648438, -0.0086669921875, -0.00216674804688, 0.0050048828125, 0.00494384765625, -0.001220703125, -0.00433349609375, 0.00112915039062, 0.00894165039062, 0.0112609863281, 0.00967407226562, 0.006103515625, 0.00210571289062, 0.00332641601562, 0.01025390625, 0.0146179199219, 0.00851440429688, -0.000732421875, 0.001220703125, 0.0101928710938, 0.0113525390625, 0.0015869140625, -0.005615234375, 0.0037841796875, 0.0188293457031, 0.0177307128906, 0.0032958984375, -0.001953125, 0.0086669921875, 0.0172424316406, 0.0134582519531, 0.00567626953125, 0.00213623046875, 0.00601196289062, 0.0143737792969, 0.017333984375, 0.0103759765625, 0.00314331054688, 0.00747680664062, 0.0191040039062, 0.0230712890625, 0.0137329101562, 0.00347900390625, 0.00497436523438, 0.0113830566406, 0.0113525390625, 0.00778198242188, 0.0074462890625, 0.00759887695312, 0.00296020507812, -0.00186157226562, 0.00167846679688, 0.0122375488281, 0.0168762207031, 0.0103149414062, 0.00509643554688, 0.00759887695312, 0.0107116699219, 0.0101623535156, 0.00765991210938, 0.00714111328125, 0.00994873046875, 0.0137023925781, 0.0140686035156, 0.0116882324219, 0.0120239257812, 0.0128784179688, 0.0137939453125, 0.0187377929688, 0.0203247070312, 0.0146179199219, 0.0115966796875, 0.0186157226562, 0.0300903320312, 0.0322265625, 0.0238037109375, 0.021484375, 0.0321960449219, 0.0382385253906, 0.0276489257812, 0.018310546875, 0.0237426757812, 0.0303039550781, 0.0279846191406, 0.0234069824219, 0.020751953125, 0.0169982910156, 0.0133972167969, 0.0159301757812, 0.0235595703125, 0.0287170410156, 0.0272827148438, 0.0226440429688, 0.0214233398438, 0.0218505859375, 0.0212097167969, 0.0240173339844, 0.0262756347656, 0.0225524902344, 0.0203552246094, 0.0232849121094, 0.0256958007812, 0.0248718261719, 0.0245666503906, 0.0257568359375, 0.0239562988281, 0.0201721191406, 0.0156555175781, 0.00830078125, 0.0032958984375, 0.00442504882812, 0.0069580078125, 0.00668334960938, 0.0037841796875, 0.000213623046875, -0.00180053710938, -0.0018310546875, -0.00360107421875, -0.00564575195312, -0.00436401367188, -0.00579833984375, -0.0102233886719, -0.00973510742188, -0.0068359375, -0.009033203125, -0.0160217285156, -0.0189514160156, -0.0152282714844, -0.0129089355469, -0.0158081054688, -0.0207824707031, -0.0213012695312, -0.0169067382812, -0.0180358886719, -0.0237121582031, -0.0230407714844, -0.0184936523438, -0.0201110839844, -0.0289306640625, -0.0331115722656, -0.0247497558594, -0.015869140625, -0.0184631347656, -0.0227355957031, -0.017822265625, -0.0147399902344, -0.0236206054688, -0.0282897949219, -0.0181274414062, -0.0143737792969, -0.0291137695312, -0.0411987304688, -0.0341491699219, -0.0229797363281, -0.0277404785156, -0.0383911132812, -0.0347595214844, -0.0256958007812, -0.0315551757812, -0.0447692871094, -0.0404052734375, -0.0244140625, -0.0266723632812, -0.0425109863281, -0.0425109863281, -0.0261840820312, -0.0191345214844, -0.0310668945312, -0.0402221679688, -0.0331115722656, -0.0264587402344, -0.0289916992188, -0.0293273925781, -0.0242919921875, -0.0224304199219, -0.0247192382812, -0.0232543945312, -0.018798828125, -0.0184020996094, -0.0215759277344, -0.0232238769531, -0.0223999023438, -0.0237121582031, -0.0249328613281, -0.0191040039062, -0.0142822265625, -0.0196533203125, -0.0273742675781\}, \{-0.006591796875, -0.00961303710938, -0.0096435546875, -0.00491333007812, 0.00225830078125, 0.00442504882812, 0.000762939453125, -0.0010986328125, -0.0006103515625, -0.00344848632812, -0.0104370117188, -0.0138244628906, -0.00689697265625, 0.001708984375, 0.00067138671875, -0.00650024414062, -0.00967407226562, -0.00689697265625, -0.00814819335938, -0.0147705078125, -0.0120239257812, 0.0008544921875, 0.00460815429688, -0.009521484375, -0.0225219726562, -0.0155944824219, -0.00262451171875, -0.00225830078125, -0.00933837890625, -0.0120544433594, -0.00897216796875, -0.00747680664062, -0.00997924804688, -0.0101318359375, -0.00466918945312, 0.0013427734375, 0.00042724609375, -0.00506591796875, -0.00540161132812, 0.00210571289062, 0.0100402832031, 0.00814819335938, -0.0013427734375, -0.00323486328125, 0.00765991210938, 0.0177307128906, 0.0155944824219, 0.00863647460938, 0.00933837890625, 0.0164489746094, 0.0198669433594, 0.01806640625, 0.0172424316406, 0.0171508789062, 0.0160217285156, 0.0173950195312, 0.0209655761719, 0.0180969238281, 0.00656127929688, 0.00054931640625, 0.00665283203125, 0.0142822265625, 0.0155944824219, 0.0105590820312, 0.00662231445312, 0.00814819335938, 0.0108642578125, 0.0133056640625, 0.0131530761719, 0.0110778808594, 0.0131530761719, 0.0189208984375, 0.0214538574219, 0.0142211914062, 0.0054931640625, 0.00799560546875, 0.0147705078125, 0.0146789550781, 0.00881958007812, 0.00555419921875, 0.007568359375, 0.00982666015625, 0.0126342773438, 0.0156555175781, 0.0157165527344, 0.0142822265625, 0.0116882324219, 0.00949096679688, 0.00888061523438, 0.00717163085938, 0.00482177734375, 0.00408935546875, 0.00473022460938, 0.00506591796875, 0.00537109375, 0.0069580078125, 0.00570678710938, 0.000335693359375, -0.0008544921875, 0.00555419921875, 0.01220703125, 0.0129089355469, 0.0081787109375, 0.00326538085938, 0.00350952148438, 0.00674438476562, 0.00811767578125, 0.00747680664062, 0.00762939453125, 0.0115051269531, 0.0162658691406, 0.0137329101562, 0.00405883789062, -0.0010986328125, 0.00457763671875, 0.0107727050781, 0.00775146484375, 0.00167846679688, 0.00079345703125, 0.00323486328125, 0.00384521484375, 0.00341796875, 0.00613403320312, 0.00924682617188, 0.00668334960938, 0.00067138671875, -6.103515625e-05, 0.00466918945312, 0.00607299804688, 0.0050048828125, 0.00762939453125, 0.00961303710938, 0.00830078125, 0.00851440429688, 0.00985717773438, 0.00759887695312, 0.00213623046875, 0.000244140625, 0.00521850585938, 0.00982666015625, 0.00668334960938, -0.0001220703125, 0.00106811523438, 0.00933837890625, 0.0107116699219, 0.00262451171875, -0.00503540039062, -0.00442504882812, 0.00167846679688, 0.000640869140625, -0.0072021484375, -0.00997924804688, -0.00762939453125, -0.00540161132812, -0.00546264648438, -0.0064697265625, -0.00558471679688, -0.00576782226562, -0.00796508789062, -0.00830078125, -0.00717163085938, -0.00820922851562, -0.0126647949219, -0.0162658691406, -0.0151977539062, -0.0123596191406, -0.00961303710938, -0.00900268554688, -0.0144653320312, -0.0201110839844, -0.0162353515625, -0.00640869140625, -0.0020751953125, -0.00579833984375, -0.00936889648438, -0.0064697265625, -0.00164794921875, -0.00372314453125, -0.0106201171875, -0.0104370117188, -0.00210571289062, 0.00418090820312, 0.00485229492188, 0.00241088867188, 0.000457763671875, 0.00100708007812, -0.000244140625, -0.00387573242188, -0.00189208984375, 0.00637817382812, 0.0100402832031, 0.00357055664062, -0.00473022460938, -0.00540161132812, -0.000244140625, 0.00262451171875, 0.00180053710938, 0.00204467773438, 0.00314331054688, 0.00152587890625, 0.00048828125, 0.00613403320312, 0.010986328125, 0.00326538085938, -0.00637817382812, -0.00164794921875, 0.00958251953125, 0.00933837890625, -0.00167846679688, -0.00469970703125, 0.00485229492188, 0.0110168457031, 0.0093994140625, 0.00958251953125, 0.0151062011719, 0.0172729492188, 0.00869750976562, 0.000823974609375, 0.00473022460938, 0.0121765136719, 0.0142517089844, 0.0112915039062, 0.00827026367188, 0.008544921875, 0.010986328125, 0.0145263671875, 0.0161743164062, 0.0143737792969, 0.0129089355469, 0.0111999511719, 0.00912475585938, 0.0119934082031, 0.0172729492188, 0.0176086425781, 0.0136413574219, 0.0130310058594, 0.0191650390625, 0.023193359375, 0.0187683105469, 0.0132141113281, 0.0124816894531, 0.0141906738281, 0.0116271972656, 0.00485229492188, 0.00515747070312, 0.0151977539062, 0.0221252441406, 0.0174255371094, 0.0119323730469, 0.0180053710938, 0.0238952636719, 0.0179138183594, 0.0130615234375, 0.0198059082031, 0.0267944335938, 0.0199584960938, 0.00625610351562, 0.00167846679688, 0.00601196289062, 0.0103759765625, 0.0111389160156, 0.0106506347656, 0.0103759765625, 0.00759887695312, 0.00482177734375, 0.00656127929688, 0.009521484375, 0.00924682617188, 0.00909423828125, 0.0133666992188, 0.0165710449219, 0.0145568847656, 0.0113830566406, 0.00924682617188, 0.0098876953125, 0.0152282714844, 0.0231323242188, 0.0274047851562, 0.0216674804688, 0.00991821289062, 0.00396728515625, 0.00637817382812, 0.0086669921875, 0.00686645507812, 0.00772094726562, 0.0130920410156, 0.014892578125, 0.0104675292969, 0.00631713867188, 0.005859375, 0.00772094726562, 0.0106811523438, 0.0120544433594, 0.0106506347656, 0.0072021484375, 0.0010986328125, -0.00228881835938, 0.0020751953125, 0.00674438476562, 0.00396728515625, -0.00213623046875, -0.00384521484375, -0.00265502929688, -0.00384521484375, -0.00732421875, -0.010986328125, -0.0114135742188, -0.00906372070312, -0.00881958007812, -0.00885009765625, -0.006591796875, -0.00613403320312, -0.00875854492188, -0.00909423828125, -0.00341796875, 0.00192260742188, -0.000457763671875, -0.00595092773438, -0.0062255859375, -3.0517578125e-05, 0.00619506835938, 0.0069580078125, 0.00411987304688, 0.00042724609375, -0.0010986328125, 0.00228881835938, 0.00729370117188, 0.0084228515625, 0.00213623046875, -0.005615234375, -0.0040283203125, 0.00308227539062, 0.00405883789062, -0.0020751953125, -0.00460815429688, 0.00497436523438, 0.0161437988281, 0.0137329101562, 0.00146484375, -0.00396728515625, 0.0042724609375, 0.0132141113281, 0.0103759765625, 0.00054931640625, -0.00387573242188, 0.00277709960938, 0.0117492675781, 0.0115356445312, 0.00509643554688, 0.00469970703125, 0.0134887695312, 0.020751953125, 0.01708984375, 0.005859375, -0.00100708007812, 0.002685546875, 0.00845336914062, 0.009033203125, 0.00860595703125, 0.0112915039062, 0.0127563476562, 0.00778198242188, 0.000732421875, 0.00103759765625, 0.0108032226562, 0.0182800292969, 0.0135803222656, 0.00564575195312, 0.00445556640625, 0.00775146484375, 0.0102233886719, 0.0106811523438, 0.011962890625, 0.0141906738281, 0.0153198242188, 0.0142517089844, 0.0125122070312, 0.013916015625, 0.0149841308594, 0.0145263671875, 0.0176696777344, 0.0204467773438, 0.0187683105469, 0.0164184570312, 0.0179748535156, 0.0240783691406, 0.0271911621094, 0.0238647460938, 0.0234069824219, 0.030517578125, 0.033203125, 0.0232543945312, 0.015380859375, 0.0206604003906, 0.0275268554688, 0.0270385742188, 0.0241088867188, 0.0223693847656, 0.0186157226562, 0.0125427246094, 0.0113525390625, 0.0179748535156, 0.02587890625, 0.0267944335938, 0.0205383300781, 0.0166625976562, 0.0180358886719, 0.02001953125, 0.0234375, 0.02587890625, 0.0236511230469, 0.0201721191406, 0.0186767578125, 0.0215759277344, 0.0268859863281, 0.0275573730469, 0.0226440429688, 0.0189819335938, 0.0215454101562, 0.0215759277344, 0.0110168457031, 0.00131225585938, 0.0023193359375, 0.00762939453125, 0.00946044921875, 0.00674438476562, 0.00140380859375, -0.0025634765625, -0.00164794921875, -0.00100708007812, -0.0042724609375, -0.00680541992188, -0.00830078125, -0.00894165039062, -0.00726318359375, -0.00582885742188, -0.00711059570312, -0.0123901367188, -0.0177307128906, -0.0182800292969, -0.0165405273438, -0.0165100097656, -0.0203247070312, -0.02294921875, -0.01904296875, -0.0156555175781, -0.0158386230469, -0.0149536132812, -0.0152282714844, -0.02001953125, -0.0263671875, -0.0263366699219, -0.0172424316406, -0.0103149414062, -0.0129089355469, -0.0144653320312, -0.00711059570312, -0.00326538085938, -0.0138549804688, -0.0226745605469, -0.015625, -0.0101928710938, -0.0206298828125, -0.0310974121094, -0.0259704589844, -0.0157470703125, -0.0177001953125, -0.0259094238281, -0.0259094238281, -0.0220947265625, -0.0259094238281, -0.0347595214844, -0.0354919433594, -0.0282897949219, -0.0291137695312, -0.0380859375, -0.0399475097656, -0.0311889648438, -0.0246276855469, -0.0308227539062, -0.0380249023438, -0.0344543457031, -0.0314331054688, -0.03466796875, -0.0333251953125, -0.0258483886719, -0.0242309570312, -0.0314025878906, -0.0352172851562, -0.0311279296875, -0.0271606445312, -0.0282592773438, -0.0314331054688, -0.0310668945312, -0.0285339355469, -0.0273742675781, -0.0254516601562, -0.0250244140625, -0.0286560058594, -0.0312805175781\}, \{0.00906372070312, 0.00912475585938, 0.00918579101562, 0.00921630859375, 0.00927734375, 0.00933837890625, 0.00936889648438, 0.00942993164062, 0.00946044921875, 0.009521484375, 0.00955200195312, 0.00961303710938, 0.0096435546875, 0.00970458984375, 0.00973510742188, 0.009765625, 0.00982666015625, 0.00985717773438, 0.0098876953125, 0.00994873046875, 0.00997924804688, 0.010009765625, 0.0100402832031, 0.0100708007812, 0.0101318359375, 0.0101623535156, 0.0101928710938, 0.0102233886719, 0.01025390625, 0.0102844238281, 0.0103149414062, 0.0103149414062, 0.0103454589844, 0.0103759765625, 0.0104064941406, 0.0104370117188, 0.0104370117188, 0.0104675292969, 0.010498046875, 0.010498046875, 0.0105285644531, 0.0105590820312, 0.0105590820312, 0.0105895996094, 0.0105895996094, 0.0106201171875, 0.0106201171875, 0.0106201171875, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106201171875, 0.0106201171875, 0.0105895996094, 0.0105895996094, 0.0105590820312, 0.0105590820312, 0.0105285644531, 0.0105285644531, 0.010498046875, 0.0104675292969, 0.0104675292969, 0.0104370117188, 0.0104064941406, 0.0103759765625, 0.0103454589844, 0.0103454589844, 0.0103149414062, 0.0102844238281, 0.01025390625, 0.0102233886719, 0.0101928710938, 0.0101623535156, 0.0101013183594, 0.0100708007812, 0.0100402832031, 0.010009765625, 0.00997924804688, 0.00991821289062, 0.0098876953125, 0.00985717773438, 0.00979614257812, 0.009765625, 0.00970458984375, 0.00967407226562, 0.00961303710938, 0.00958251953125, 0.009521484375, 0.00946044921875, 0.00942993164062, 0.00936889648438, 0.00930786132812, 0.00927734375, 0.00921630859375, 0.0091552734375, 0.00909423828125, 0.009033203125, 0.00897216796875, 0.0089111328125, 0.00885009765625, 0.0087890625, 0.00872802734375, 0.0086669921875, 0.00860595703125, 0.008544921875, 0.00848388671875, 0.0084228515625, 0.00836181640625, 0.00827026367188, 0.00820922851562, 0.00814819335938, 0.00808715820312, 0.00799560546875, 0.0079345703125, 0.00787353515625, 0.00778198242188, 0.00772094726562, 0.00762939453125, 0.007568359375, 0.00747680664062, 0.00741577148438, 0.00732421875, 0.00726318359375, 0.00717163085938, 0.007080078125, 0.00701904296875, 0.00692749023438, 0.0068359375, 0.00677490234375, 0.00668334960938, 0.006591796875, 0.00650024414062, 0.00643920898438, 0.00634765625, 0.00625610351562, 0.00616455078125, 0.00607299804688, 0.0059814453125, 0.00592041015625, 0.00582885742188, 0.0057373046875, 0.00564575195312, 0.00555419921875, 0.00546264648438, 0.00537109375, 0.00527954101562, 0.00518798828125, 0.00509643554688, 0.0050048828125, 0.00491333007812, 0.00479125976562, 0.00469970703125, 0.00460815429688, 0.0045166015625, 0.00442504882812, 0.00433349609375, 0.00424194335938, 0.00411987304688, 0.0040283203125, 0.00393676757812, 0.00384521484375, 0.00375366210938, 0.00363159179688, 0.0035400390625, 0.00344848632812, 0.00335693359375, 0.00323486328125, 0.00314331054688, 0.0030517578125, 0.0029296875, 0.00283813476562, 0.00274658203125, 0.00262451171875, 0.00253295898438, 0.00244140625, 0.0023193359375, 0.00222778320312, 0.00210571289062, 0.00201416015625, 0.00192260742188, 0.00180053710938, 0.001708984375, 0.0015869140625, 0.00149536132812, 0.00137329101562, 0.00128173828125, 0.00115966796875, 0.00106811523438, 0.0009765625, 0.0008544921875, 0.000762939453125, 0.000640869140625, 0.00054931640625, 0.00042724609375, 0.000335693359375, 0.000213623046875, 0.0001220703125, 0.0, -9.1552734375e-05, -0.000213623046875, -0.00030517578125, -0.00042724609375, -0.000518798828125, -0.000640869140625, -0.000732421875, -0.0008544921875, -0.000946044921875, -0.00106811523438, -0.00115966796875, -0.00128173828125, -0.00137329101562, -0.00149536132812, -0.0015869140625, -0.001708984375, -0.00180053710938, -0.00192260742188, -0.00201416015625, -0.00210571289062, -0.00222778320312, -0.0023193359375, -0.00244140625, -0.00253295898438, -0.00265502929688, -0.00274658203125, -0.00283813476562, -0.00296020507812, -0.0030517578125, -0.003173828125, -0.00326538085938, -0.00335693359375, -0.00347900390625, -0.00357055664062, -0.003662109375, -0.00375366210938, -0.00387573242188, -0.00396728515625, -0.00405883789062, -0.004150390625, -0.00424194335938, -0.00436401367188, -0.00445556640625, -0.00454711914062, -0.004638671875, -0.00473022460938, -0.00482177734375, -0.00491333007812, -0.0050048828125, -0.00509643554688, -0.00518798828125, -0.00527954101562, -0.00537109375, -0.00546264648438, -0.00555419921875, -0.00564575195312, -0.0057373046875, -0.00582885742188, -0.00592041015625, -0.00601196289062, -0.00607299804688, -0.00616455078125, -0.00625610351562, -0.00631713867188, -0.00640869140625, -0.00650024414062, -0.00656127929688, -0.00665283203125, -0.00674438476562, -0.00680541992188, -0.00689697265625, -0.0069580078125, -0.00704956054688, -0.00711059570312, -0.00717163085938, -0.00726318359375, -0.00732421875, -0.00741577148438, -0.00747680664062, -0.00753784179688, -0.00759887695312, -0.0076904296875, -0.00775146484375, -0.0078125, -0.00787353515625, -0.0079345703125, -0.00799560546875, -0.008056640625, -0.00811767578125, -0.0081787109375, -0.00823974609375, -0.00830078125, -0.00836181640625, -0.0084228515625, -0.00845336914062, -0.00851440429688, -0.00857543945312, -0.00863647460938, -0.0086669921875, -0.00872802734375, -0.0087890625, -0.00881958007812, -0.00888061523438, -0.0089111328125, -0.00897216796875, -0.00900268554688, -0.00906372070312, -0.00909423828125, -0.0091552734375, -0.00918579101562, -0.00921630859375, -0.00927734375, -0.00930786132812, -0.00933837890625, -0.0093994140625, -0.00942993164062, -0.00946044921875, -0.00949096679688, -0.009521484375, -0.00955200195312, -0.00958251953125, -0.00961303710938, -0.0096435546875, -0.00967407226562, -0.00970458984375, -0.00973510742188, -0.009765625, -0.00979614257812, -0.00982666015625, -0.00985717773438, -0.00985717773438, -0.0098876953125, -0.00991821289062, -0.00994873046875, -0.00994873046875, -0.00997924804688, -0.010009765625, -0.010009765625, -0.0100402832031, -0.0100402832031, -0.0100708007812, -0.0101013183594, -0.0101013183594, -0.0101318359375, -0.0101318359375, -0.0101623535156, -0.0101623535156, -0.0101623535156, -0.0101928710938, -0.0101928710938, -0.0101928710938, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.0101928710938, -0.0101928710938, -0.0101623535156, -0.0101623535156, -0.0101318359375, -0.0101318359375, -0.0101013183594, -0.0101013183594, -0.0100708007812, -0.0100402832031, -0.0100402832031, -0.010009765625, -0.00997924804688, -0.00997924804688, -0.00994873046875, -0.00991821289062, -0.0098876953125, -0.00985717773438, -0.00982666015625, -0.00979614257812, -0.00979614257812, -0.009765625, -0.00973510742188, -0.00970458984375, -0.0096435546875, -0.00961303710938, -0.00958251953125, -0.00955200195312, -0.009521484375, -0.00949096679688, -0.00946044921875, -0.0093994140625, -0.00936889648438, -0.00933837890625, -0.00927734375, -0.00924682617188, -0.00921630859375, -0.0091552734375, -0.00912475585938, -0.00909423828125, -0.009033203125, -0.00900268554688, -0.00894165039062, -0.0089111328125, -0.00885009765625, -0.0087890625, -0.00875854492188, -0.00869750976562, -0.0086669921875, -0.00860595703125, -0.008544921875, -0.00848388671875, -0.00845336914062, -0.00839233398438, -0.00833129882812, -0.00827026367188, -0.00823974609375, -0.0081787109375, -0.00811767578125, -0.008056640625, -0.00799560546875, -0.0079345703125, -0.00790405273438, -0.00784301757812, -0.00778198242188, -0.00772094726562, -0.00765991210938, -0.00759887695312, -0.00753784179688, -0.00747680664062, -0.00741577148438, -0.00735473632812, -0.00729370117188, -0.0072021484375, -0.00714111328125, -0.007080078125, -0.00701904296875, -0.0069580078125, -0.00689697265625, -0.0068359375, -0.00674438476562, -0.00668334960938, -0.00662231445312, -0.00656127929688, -0.00650024414062, -0.00640869140625, -0.00634765625, -0.00628662109375, -0.00619506835938, -0.00613403320312, -0.00607299804688, -0.0059814453125, -0.00592041015625, -0.005859375, -0.00576782226562, -0.00570678710938, -0.005615234375, -0.00555419921875, -0.0054931640625, -0.00540161132812, -0.00534057617188, -0.0052490234375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_8chan_24bit_48000::bitDepth = 24}}
\par
{\bkmkstart AAAAAAABMJ}
{\bkmkend AAAAAAABMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_8chan_24bit_48000::numChannels = 8}}
\par
{\bkmkstart AAAAAAABMK}
{\bkmkend AAAAAAABMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_8chan_24bit_48000::numSamplesPerChannel = 191524}}
\par
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_8chan_24bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABMM}
{\bkmkend AAAAAAABMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_8chan_24bit_48000}
{\xe \v wav_8chan_24bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_8chan_24bit_48000::testBuffer = \{\{0.00112915039062, 0.00247192382812, 0.00570678710938, 0.007080078125, 0.00711059570312, 0.00714111328125, 0.00674438476562, 0.00582885742188, 0.00418090820312, 0.0023193359375, 0.00079345703125, 0.000701904296875, 0.00323486328125, 0.00433349609375, 0.00201416015625, 9.1552734375e-05, 0.000274658203125, 0.00192260742188, 0.0028076171875, 0.00228881835938, 0.00302124023438, 0.00491333007812, 0.00616455078125, 0.0048828125, 0.00164794921875, 0.00018310546875, 0.000579833984375, 0.0025634765625, 0.00582885742188, 0.00631713867188, 0.0050048828125, 0.0062255859375, 0.0103454589844, 0.0140686035156, 0.0157165527344, 0.0171813964844, 0.0186462402344, 0.0191955566406, 0.0193786621094, 0.0194396972656, 0.0196838378906, 0.0190124511719, 0.0177612304688, 0.0190124511719, 0.0223999023438, 0.0241088867188, 0.0224304199219, 0.0197143554688, 0.0186157226562, 0.02001953125, 0.02197265625, 0.0217590332031, 0.0204467773438, 0.0202941894531, 0.0215454101562, 0.0221557617188, 0.0212707519531, 0.018798828125, 0.0136108398438, 0.00970458984375, 0.0101318359375, 0.0115356445312, 0.0110473632812, 0.00894165039062, 0.00927734375, 0.0102844238281, 0.0062255859375, 0.0029296875, 0.00509643554688, 0.00823974609375, 0.00875854492188, 0.00759887695312, 0.0079345703125, 0.00827026367188, 0.0084228515625, 0.00970458984375, 0.00802612304688, 0.00479125976562, 0.00399780273438, 0.0042724609375, 0.00341796875, 0.0028076171875, 0.00582885742188, 0.00802612304688, 0.00521850585938, 0.00277709960938, 0.00299072265625, 0.00387573242188, 0.00442504882812, 0.00369262695312, 0.0028076171875, 0.00238037109375, 0.00204467773438, 0.001708984375, 0.00241088867188, 0.00473022460938, 0.00457763671875, -6.103515625e-05, -0.00344848632812, -0.00189208984375, 0.000701904296875, 0.00079345703125, -0.00079345703125, -0.00103759765625, 0.000335693359375, -0.0006103515625, -0.00347900390625, -0.00360107421875, -0.00222778320312, -0.00299072265625, -0.004638671875, -0.0052490234375, -0.00640869140625, -0.00900268554688, -0.0112609863281, -0.0128784179688, -0.0135498046875, -0.0115661621094, -0.0103759765625, -0.0130920410156, -0.0149536132812, -0.0120239257812, -0.00973510742188, -0.0126647949219, -0.0153503417969, -0.0133666992188, -0.0106506347656, -0.0104370117188, -0.0114135742188, -0.0111694335938, -0.00970458984375, -0.00814819335938, -0.00543212890625, -0.00311279296875, -0.00442504882812, -0.0074462890625, -0.0089111328125, -0.00778198242188, -0.0047607421875, -0.00341796875, -0.00540161132812, -0.0068359375, -0.00421142578125, -0.0020751953125, -0.00445556640625, -0.00564575195312, -0.00473022460938, -0.0064697265625, -0.008544921875, -0.00900268554688, -0.00888061523438, -0.00906372070312, -0.0102233886719, -0.00942993164062, -0.0068359375, -0.00576782226562, -0.00497436523438, -0.0042724609375, -0.00543212890625, -0.00802612304688, -0.0106811523438, -0.01318359375, -0.0177612304688, -0.02197265625, -0.0209045410156, -0.0183715820312, -0.0194091796875, -0.0216369628906, -0.0208435058594, -0.0160522460938, -0.0114440917969, -0.0118103027344, -0.0149230957031, -0.0141906738281, -0.00906372070312, -0.00601196289062, -0.00839233398438, -0.0123291015625, -0.0127563476562, -0.00830078125, -0.00283813476562, -0.00079345703125, -0.00167846679688, -0.00299072265625, -0.00234985351562, -0.000396728515625, -0.00180053710938, -0.00503540039062, -0.00390625, 0.0001220703125, 0.0018310546875, 0.00143432617188, 0.000762939453125, 9.1552734375e-05, 0.00137329101562, 0.00515747070312, 0.007568359375, 0.00653076171875, 0.005126953125, 0.00564575195312, 0.00650024414062, 0.00729370117188, 0.0076904296875, 0.005615234375, 0.003662109375, 0.00552368164062, 0.00942993164062, 0.0111999511719, 0.00897216796875, 0.008056640625, 0.0116271972656, 0.0142517089844, 0.014404296875, 0.0147094726562, 0.0154418945312, 0.0144958496094, 0.0111083984375, 0.010498046875, 0.0132751464844, 0.0144653320312, 0.0154724121094, 0.0166931152344, 0.0150451660156, 0.0126342773438, 0.0126342773438, 0.013916015625, 0.0123291015625, 0.00888061523438, 0.00906372070312, 0.0110168457031, 0.0104370117188, 0.0098876953125, 0.0116882324219, 0.0148010253906, 0.0161743164062, 0.0147705078125, 0.0145568847656, 0.015625, 0.0148315429688, 0.0132751464844, 0.0116577148438, 0.00967407226562, 0.00851440429688, 0.00927734375, 0.0108032226562, 0.0107421875, 0.011962890625, 0.0158081054688, 0.0163879394531, 0.0133666992188, 0.0118713378906, 0.0133056640625, 0.013916015625, 0.0107116699219, 0.00802612304688, 0.00860595703125, 0.0103454589844, 0.0117797851562, 0.0123291015625, 0.0125122070312, 0.0119018554688, 0.0103454589844, 0.00885009765625, 0.0064697265625, 0.0045166015625, 0.00595092773438, 0.00888061523438, 0.00942993164062, 0.0086669921875, 0.0096435546875, 0.00997924804688, 0.0089111328125, 0.0104370117188, 0.0133666992188, 0.0143127441406, 0.0142211914062, 0.0152893066406, 0.0159606933594, 0.0126037597656, 0.00778198242188, 0.006103515625, 0.00582885742188, 0.004638671875, 0.0045166015625, 0.00643920898438, 0.0067138671875, 0.004150390625, 0.00274658203125, 0.00369262695312, 0.00390625, 0.00387573242188, 0.00537109375, 0.00491333007812, 0.00253295898438, 0.0030517578125, 0.00433349609375, 0.00274658203125, 0.00167846679688, 0.00408935546875, 0.00613403320312, 0.00335693359375, -0.00091552734375, -0.00152587890625, 0.0001220703125, 0.0003662109375, -0.00054931640625, 0.0006103515625, 0.00198364257812, 0.000274658203125, 0.000640869140625, 0.00445556640625, 0.00454711914062, 0.00091552734375, 0.000335693359375, 0.00390625, 0.0059814453125, 0.00534057617188, 0.00552368164062, 0.00595092773438, 0.0057373046875, 0.00634765625, 0.0076904296875, 0.00912475585938, 0.00955200195312, 0.00830078125, 0.00625610351562, 0.00482177734375, 0.00527954101562, 0.00396728515625, 0.0003662109375, 0.00149536132812, 0.0064697265625, 0.00802612304688, 0.00534057617188, 0.00396728515625, 0.00753784179688, 0.0110778808594, 0.00985717773438, 0.0062255859375, 0.0045166015625, 0.00653076171875, 0.008056640625, 0.0054931640625, 0.00177001953125, 0.000946044921875, 0.00381469726562, 0.0062255859375, 0.00521850585938, 0.00408935546875, 0.0072021484375, 0.0123596191406, 0.0127563476562, 0.00732421875, 0.0015869140625, -0.000152587890625, 0.001708984375, 0.0042724609375, 0.00653076171875, 0.00750732421875, 0.0067138671875, 0.00714111328125, 0.00949096679688, 0.00973510742188, 0.00729370117188, 0.00704956054688, 0.00808715820312, 0.00588989257812, 0.00408935546875, 0.00521850585938, 0.00628662109375, 0.00677490234375, 0.00772094726562, 0.00811767578125, 0.0062255859375, 0.00405883789062, 0.00418090820312, 0.005126953125, 0.0054931640625, 0.00335693359375, 0.00186157226562, 0.005126953125, 0.00732421875, 0.00582885742188, 0.00515747070312, 0.00543212890625, 0.005126953125, 0.00469970703125, 0.00457763671875, 0.00424194335938, 0.00445556640625, 0.00552368164062, 0.00430297851562, 0.00161743164062, 0.00143432617188, 0.00335693359375, 0.005126953125, 0.00582885742188, 0.00628662109375, 0.00668334960938, 0.00479125976562, 0.00106811523438, -0.00054931640625, 0.00216674804688, 0.00509643554688, 0.00314331054688, 0.000701904296875, 0.00274658203125, 0.00656127929688, 0.00885009765625, 0.00714111328125, 0.00347900390625, 0.00286865234375, 0.0037841796875, 0.00384521484375, 0.00384521484375, 0.00485229492188, 0.00674438476562, 0.00674438476562, 0.004638671875, 0.00161743164062, -0.00186157226562, -0.00308227539062, -0.002685546875, -0.00384521484375, -0.006103515625, -0.00787353515625, -0.00912475585938, -0.0101013183594, -0.0104675292969, -0.0116882324219, -0.0133972167969, -0.0140075683594, -0.0157775878906, -0.0169372558594, -0.0152893066406, -0.0151672363281, -0.0177917480469, -0.0206909179688, -0.0221862792969, -0.0228576660156, -0.0233154296875, -0.021728515625, -0.020751953125, -0.0218811035156, -0.0210266113281, -0.0186767578125, -0.0163269042969, -0.0150146484375, -0.0170593261719, -0.0192565917969, -0.0184326171875, -0.0161743164062, -0.013916015625, -0.01220703125, -0.010498046875, -0.00741577148438, -0.00335693359375, -0.00192260742188, -0.00567626953125, -0.00946044921875, -0.00881958007812, -0.00820922851562, -0.0101013183594, -0.0112915039062, -0.00991821289062, -0.006591796875, -0.00457763671875, -0.00588989257812, -0.00848388671875, -0.00955200195312, -0.00875854492188, -0.00985717773438, -0.01318359375, -0.015625, -0.0177917480469, -0.0191040039062, -0.019287109375, -0.0198974609375, -0.0197448730469, -0.0194396972656, -0.0189208984375, -0.0178527832031, -0.0184020996094, -0.0185241699219, -0.0164489746094, -0.0153198242188, -0.016845703125, -0.0198669433594, -0.0223999023438, -0.0236206054688, -0.0225524902344, -0.0199279785156, -0.0190124511719, -0.0186767578125, -0.0170288085938, -0.0152587890625, -0.0137634277344, -0.0141906738281, -0.0158081054688, -0.0149841308594\}, \{0.00750732421875, 0.00558471679688, 0.00167846679688, 0.000885009765625, 0.0068359375, 0.0120849609375, 0.00875854492188, 0.00350952148438, 0.00457763671875, 0.00701904296875, 0.00250244140625, -0.00241088867188, 0.00393676757812, 0.0133361816406, 0.0116882324219, 0.00286865234375, -0.00189208984375, -0.000244140625, -0.00100708007812, -0.007568359375, -0.00872802734375, 0.000152587890625, 0.00509643554688, -0.00570678710938, -0.0169982910156, -0.00836181640625, 0.00616455078125, 0.00393676757812, -0.00833129882812, -0.0124816894531, -0.00677490234375, -0.00430297851562, -0.0103454589844, -0.0155029296875, -0.0123596191406, -0.00506591796875, -0.00326538085938, -0.008056640625, -0.0110168457031, -0.00631713867188, 0.002685546875, 0.0047607421875, -0.00360107421875, -0.00955200195312, -0.00335693359375, 0.00592041015625, 0.00576782226562, 0.000640869140625, 0.00228881835938, 0.00994873046875, 0.0137023925781, 0.0124206542969, 0.012451171875, 0.0125427246094, 0.0102233886719, 0.0100402832031, 0.01318359375, 0.0123291015625, 0.00531005859375, 0.00234985351562, 0.00662231445312, 0.0118713378906, 0.0152282714844, 0.0128173828125, 0.0064697265625, 0.00439453125, 0.00881958007812, 0.0155334472656, 0.0157470703125, 0.0104675292969, 0.0104675292969, 0.0164184570312, 0.0190734863281, 0.0113220214844, 0.00234985351562, 0.00448608398438, 0.0105285644531, 0.0104675292969, 0.00732421875, 0.00848388671875, 0.0119323730469, 0.00985717773438, 0.00579833984375, 0.00537109375, 0.00714111328125, 0.00909423828125, 0.00802612304688, 0.00445556640625, 0.00125122070312, -0.00112915039062, -0.00067138671875, 0.00241088867188, 0.003662109375, 0.000701904296875, -0.00247192382812, -0.00173950195312, -0.00128173828125, -0.00436401367188, -0.00518798828125, -0.000274658203125, 0.00640869140625, 0.00936889648438, 0.00439453125, -0.004150390625, -0.00454711914062, 0.0035400390625, 0.00845336914062, 0.00485229492188, -0.0001220703125, 0.00372314453125, 0.013427734375, 0.0133666992188, 0.000457763671875, -0.00637817382812, 0.004638671875, 0.0160522460938, 0.010986328125, 0.000823974609375, 0.0003662109375, 0.00372314453125, 0.00155639648438, -0.0006103515625, 0.00411987304688, 0.00839233398438, 0.00466918945312, -0.00054931640625, 0.00180053710938, 0.00714111328125, 0.00595092773438, 0.00347900390625, 0.00772094726562, 0.0111694335938, 0.00784301757812, 0.00372314453125, 0.00363159179688, 0.00588989257812, 0.00634765625, 0.00503540039062, 0.00640869140625, 0.00906372070312, 0.00665283203125, 0.001220703125, 0.00320434570312, 0.0108032226562, 0.0109252929688, 0.00265502929688, -0.00399780273438, -0.0015869140625, 0.00558471679688, 0.0037841796875, -0.00457763671875, -0.00552368164062, -0.00198364257812, -0.00164794921875, -0.00274658203125, -0.00247192382812, -0.00271606445312, -0.00674438476562, -0.00997924804688, -0.00692749023438, -0.00161743164062, 3.0517578125e-05, -0.00296020507812, -0.00576782226562, -0.00506591796875, -0.00424194335938, -0.00299072265625, -9.1552734375e-05, -0.00250244140625, -0.0112915039062, -0.0143737792969, -0.005859375, 0.0029296875, 0.00054931640625, -0.00619506835938, -0.00457763671875, 0.002197265625, 0.00091552734375, -0.00735473632812, -0.0084228515625, -0.00054931640625, 0.00674438476562, 0.00897216796875, 0.005615234375, 0.00152587890625, 0.00360107421875, 0.00576782226562, 0.00128173828125, -0.00054931640625, 0.00692749023438, 0.0127563476562, 0.00738525390625, -0.00119018554688, -0.00125122070312, 0.00405883789062, 0.00399780273438, 0.00048828125, 0.0020751953125, 0.00433349609375, -0.00106811523438, -0.00503540039062, 0.0052490234375, 0.0169982910156, 0.0104370117188, -0.0020751953125, 0.00177001953125, 0.0140686035156, 0.0133972167969, -0.000335693359375, -0.0068359375, 0.000244140625, 0.00631713867188, 0.00665283203125, 0.00933837890625, 0.0158996582031, 0.0172119140625, 0.00851440429688, 0.00244140625, 0.00717163085938, 0.0127868652344, 0.0118713378906, 0.00689697265625, 0.0037841796875, 0.006591796875, 0.0125732421875, 0.0169677734375, 0.0178833007812, 0.0177612304688, 0.0182189941406, 0.0140991210938, 0.00747680664062, 0.00909423828125, 0.0168151855469, 0.0187072753906, 0.0125732421875, 0.00820922851562, 0.0135498046875, 0.0196838378906, 0.01611328125, 0.00982666015625, 0.0107727050781, 0.015380859375, 0.0125122070312, 0.00335693359375, 0.00326538085938, 0.0141296386719, 0.0191955566406, 0.0100708007812, 0.001953125, 0.009521484375, 0.0187377929688, 0.01416015625, 0.00836181640625, 0.014404296875, 0.0222778320312, 0.0165405273438, 0.00234985351562, -0.00430297851562, -0.00131225585938, 0.00332641601562, 0.00393676757812, 0.00259399414062, 0.00381469726562, 0.00534057617188, 0.00503540039062, 0.00491333007812, 0.00433349609375, 0.00250244140625, 0.0040283203125, 0.0102844238281, 0.0119323730469, 0.00677490234375, 0.00344848632812, 0.00241088867188, 0.00125122070312, 0.00509643554688, 0.0158081054688, 0.0224304199219, 0.0148620605469, 0.00262451171875, 0.000732421875, 0.0050048828125, 0.0032958984375, -0.0009765625, 0.00360107421875, 0.0130004882812, 0.0134887695312, 0.00619506835938, 0.00311279296875, 0.00613403320312, 0.00909423828125, 0.0102844238281, 0.0102233886719, 0.00912475585938, 0.0067138671875, 0.00137329101562, -0.00274658203125, -0.00131225585938, 0.000457763671875, -0.00192260742188, -0.0045166015625, -0.00387573242188, -0.00296020507812, -0.00408935546875, -0.0057373046875, -0.00750732421875, -0.0076904296875, -0.00704956054688, -0.00869750976562, -0.00912475585938, -0.00689697265625, -0.00701904296875, -0.00936889648438, -0.0086669921875, -0.00216674804688, 0.0050048828125, 0.00494384765625, -0.001220703125, -0.00433349609375, 0.00112915039062, 0.00894165039062, 0.0112609863281, 0.00967407226562, 0.006103515625, 0.00210571289062, 0.00332641601562, 0.01025390625, 0.0146179199219, 0.00851440429688, -0.000732421875, 0.001220703125, 0.0101928710938, 0.0113525390625, 0.0015869140625, -0.005615234375, 0.0037841796875, 0.0188293457031, 0.0177307128906, 0.0032958984375, -0.001953125, 0.0086669921875, 0.0172424316406, 0.0134582519531, 0.00567626953125, 0.00213623046875, 0.00601196289062, 0.0143737792969, 0.017333984375, 0.0103759765625, 0.00314331054688, 0.00747680664062, 0.0191040039062, 0.0230712890625, 0.0137329101562, 0.00347900390625, 0.00497436523438, 0.0113830566406, 0.0113525390625, 0.00778198242188, 0.0074462890625, 0.00759887695312, 0.00296020507812, -0.00186157226562, 0.00167846679688, 0.0122375488281, 0.0168762207031, 0.0103149414062, 0.00509643554688, 0.00759887695312, 0.0107116699219, 0.0101623535156, 0.00765991210938, 0.00714111328125, 0.00994873046875, 0.0137023925781, 0.0140686035156, 0.0116882324219, 0.0120239257812, 0.0128784179688, 0.0137939453125, 0.0187377929688, 0.0203247070312, 0.0146179199219, 0.0115966796875, 0.0186157226562, 0.0300903320312, 0.0322265625, 0.0238037109375, 0.021484375, 0.0321960449219, 0.0382385253906, 0.0276489257812, 0.018310546875, 0.0237426757812, 0.0303039550781, 0.0279846191406, 0.0234069824219, 0.020751953125, 0.0169982910156, 0.0133972167969, 0.0159301757812, 0.0235595703125, 0.0287170410156, 0.0272827148438, 0.0226440429688, 0.0214233398438, 0.0218505859375, 0.0212097167969, 0.0240173339844, 0.0262756347656, 0.0225524902344, 0.0203552246094, 0.0232849121094, 0.0256958007812, 0.0248718261719, 0.0245666503906, 0.0257568359375, 0.0239562988281, 0.0201721191406, 0.0156555175781, 0.00830078125, 0.0032958984375, 0.00442504882812, 0.0069580078125, 0.00668334960938, 0.0037841796875, 0.000213623046875, -0.00180053710938, -0.0018310546875, -0.00360107421875, -0.00564575195312, -0.00436401367188, -0.00579833984375, -0.0102233886719, -0.00973510742188, -0.0068359375, -0.009033203125, -0.0160217285156, -0.0189514160156, -0.0152282714844, -0.0129089355469, -0.0158081054688, -0.0207824707031, -0.0213012695312, -0.0169067382812, -0.0180358886719, -0.0237121582031, -0.0230407714844, -0.0184936523438, -0.0201110839844, -0.0289306640625, -0.0331115722656, -0.0247497558594, -0.015869140625, -0.0184631347656, -0.0227355957031, -0.017822265625, -0.0147399902344, -0.0236206054688, -0.0282897949219, -0.0181274414062, -0.0143737792969, -0.0291137695312, -0.0411987304688, -0.0341491699219, -0.0229797363281, -0.0277404785156, -0.0383911132812, -0.0347595214844, -0.0256958007812, -0.0315551757812, -0.0447692871094, -0.0404052734375, -0.0244140625, -0.0266723632812, -0.0425109863281, -0.0425109863281, -0.0261840820312, -0.0191345214844, -0.0310668945312, -0.0402221679688, -0.0331115722656, -0.0264587402344, -0.0289916992188, -0.0293273925781, -0.0242919921875, -0.0224304199219, -0.0247192382812, -0.0232543945312, -0.018798828125, -0.0184020996094, -0.0215759277344, -0.0232238769531, -0.0223999023438, -0.0237121582031, -0.0249328613281, -0.0191040039062, -0.0142822265625, -0.0196533203125, -0.0273742675781\}, \{-0.006591796875, -0.00961303710938, -0.0096435546875, -0.00491333007812, 0.00225830078125, 0.00442504882812, 0.000762939453125, -0.0010986328125, -0.0006103515625, -0.00344848632812, -0.0104370117188, -0.0138244628906, -0.00689697265625, 0.001708984375, 0.00067138671875, -0.00650024414062, -0.00967407226562, -0.00689697265625, -0.00814819335938, -0.0147705078125, -0.0120239257812, 0.0008544921875, 0.00460815429688, -0.009521484375, -0.0225219726562, -0.0155944824219, -0.00262451171875, -0.00225830078125, -0.00933837890625, -0.0120544433594, -0.00897216796875, -0.00747680664062, -0.00997924804688, -0.0101318359375, -0.00466918945312, 0.0013427734375, 0.00042724609375, -0.00506591796875, -0.00540161132812, 0.00210571289062, 0.0100402832031, 0.00814819335938, -0.0013427734375, -0.00323486328125, 0.00765991210938, 0.0177307128906, 0.0155944824219, 0.00863647460938, 0.00933837890625, 0.0164489746094, 0.0198669433594, 0.01806640625, 0.0172424316406, 0.0171508789062, 0.0160217285156, 0.0173950195312, 0.0209655761719, 0.0180969238281, 0.00656127929688, 0.00054931640625, 0.00665283203125, 0.0142822265625, 0.0155944824219, 0.0105590820312, 0.00662231445312, 0.00814819335938, 0.0108642578125, 0.0133056640625, 0.0131530761719, 0.0110778808594, 0.0131530761719, 0.0189208984375, 0.0214538574219, 0.0142211914062, 0.0054931640625, 0.00799560546875, 0.0147705078125, 0.0146789550781, 0.00881958007812, 0.00555419921875, 0.007568359375, 0.00982666015625, 0.0126342773438, 0.0156555175781, 0.0157165527344, 0.0142822265625, 0.0116882324219, 0.00949096679688, 0.00888061523438, 0.00717163085938, 0.00482177734375, 0.00408935546875, 0.00473022460938, 0.00506591796875, 0.00537109375, 0.0069580078125, 0.00570678710938, 0.000335693359375, -0.0008544921875, 0.00555419921875, 0.01220703125, 0.0129089355469, 0.0081787109375, 0.00326538085938, 0.00350952148438, 0.00674438476562, 0.00811767578125, 0.00747680664062, 0.00762939453125, 0.0115051269531, 0.0162658691406, 0.0137329101562, 0.00405883789062, -0.0010986328125, 0.00457763671875, 0.0107727050781, 0.00775146484375, 0.00167846679688, 0.00079345703125, 0.00323486328125, 0.00384521484375, 0.00341796875, 0.00613403320312, 0.00924682617188, 0.00668334960938, 0.00067138671875, -6.103515625e-05, 0.00466918945312, 0.00607299804688, 0.0050048828125, 0.00762939453125, 0.00961303710938, 0.00830078125, 0.00851440429688, 0.00985717773438, 0.00759887695312, 0.00213623046875, 0.000244140625, 0.00521850585938, 0.00982666015625, 0.00668334960938, -0.0001220703125, 0.00106811523438, 0.00933837890625, 0.0107116699219, 0.00262451171875, -0.00503540039062, -0.00442504882812, 0.00167846679688, 0.000640869140625, -0.0072021484375, -0.00997924804688, -0.00762939453125, -0.00540161132812, -0.00546264648438, -0.0064697265625, -0.00558471679688, -0.00576782226562, -0.00796508789062, -0.00830078125, -0.00717163085938, -0.00820922851562, -0.0126647949219, -0.0162658691406, -0.0151977539062, -0.0123596191406, -0.00961303710938, -0.00900268554688, -0.0144653320312, -0.0201110839844, -0.0162353515625, -0.00640869140625, -0.0020751953125, -0.00579833984375, -0.00936889648438, -0.0064697265625, -0.00164794921875, -0.00372314453125, -0.0106201171875, -0.0104370117188, -0.00210571289062, 0.00418090820312, 0.00485229492188, 0.00241088867188, 0.000457763671875, 0.00100708007812, -0.000244140625, -0.00387573242188, -0.00189208984375, 0.00637817382812, 0.0100402832031, 0.00357055664062, -0.00473022460938, -0.00540161132812, -0.000244140625, 0.00262451171875, 0.00180053710938, 0.00204467773438, 0.00314331054688, 0.00152587890625, 0.00048828125, 0.00613403320312, 0.010986328125, 0.00326538085938, -0.00637817382812, -0.00164794921875, 0.00958251953125, 0.00933837890625, -0.00167846679688, -0.00469970703125, 0.00485229492188, 0.0110168457031, 0.0093994140625, 0.00958251953125, 0.0151062011719, 0.0172729492188, 0.00869750976562, 0.000823974609375, 0.00473022460938, 0.0121765136719, 0.0142517089844, 0.0112915039062, 0.00827026367188, 0.008544921875, 0.010986328125, 0.0145263671875, 0.0161743164062, 0.0143737792969, 0.0129089355469, 0.0111999511719, 0.00912475585938, 0.0119934082031, 0.0172729492188, 0.0176086425781, 0.0136413574219, 0.0130310058594, 0.0191650390625, 0.023193359375, 0.0187683105469, 0.0132141113281, 0.0124816894531, 0.0141906738281, 0.0116271972656, 0.00485229492188, 0.00515747070312, 0.0151977539062, 0.0221252441406, 0.0174255371094, 0.0119323730469, 0.0180053710938, 0.0238952636719, 0.0179138183594, 0.0130615234375, 0.0198059082031, 0.0267944335938, 0.0199584960938, 0.00625610351562, 0.00167846679688, 0.00601196289062, 0.0103759765625, 0.0111389160156, 0.0106506347656, 0.0103759765625, 0.00759887695312, 0.00482177734375, 0.00656127929688, 0.009521484375, 0.00924682617188, 0.00909423828125, 0.0133666992188, 0.0165710449219, 0.0145568847656, 0.0113830566406, 0.00924682617188, 0.0098876953125, 0.0152282714844, 0.0231323242188, 0.0274047851562, 0.0216674804688, 0.00991821289062, 0.00396728515625, 0.00637817382812, 0.0086669921875, 0.00686645507812, 0.00772094726562, 0.0130920410156, 0.014892578125, 0.0104675292969, 0.00631713867188, 0.005859375, 0.00772094726562, 0.0106811523438, 0.0120544433594, 0.0106506347656, 0.0072021484375, 0.0010986328125, -0.00228881835938, 0.0020751953125, 0.00674438476562, 0.00396728515625, -0.00213623046875, -0.00384521484375, -0.00265502929688, -0.00384521484375, -0.00732421875, -0.010986328125, -0.0114135742188, -0.00906372070312, -0.00881958007812, -0.00885009765625, -0.006591796875, -0.00613403320312, -0.00875854492188, -0.00909423828125, -0.00341796875, 0.00192260742188, -0.000457763671875, -0.00595092773438, -0.0062255859375, -3.0517578125e-05, 0.00619506835938, 0.0069580078125, 0.00411987304688, 0.00042724609375, -0.0010986328125, 0.00228881835938, 0.00729370117188, 0.0084228515625, 0.00213623046875, -0.005615234375, -0.0040283203125, 0.00308227539062, 0.00405883789062, -0.0020751953125, -0.00460815429688, 0.00497436523438, 0.0161437988281, 0.0137329101562, 0.00146484375, -0.00396728515625, 0.0042724609375, 0.0132141113281, 0.0103759765625, 0.00054931640625, -0.00387573242188, 0.00277709960938, 0.0117492675781, 0.0115356445312, 0.00509643554688, 0.00469970703125, 0.0134887695312, 0.020751953125, 0.01708984375, 0.005859375, -0.00100708007812, 0.002685546875, 0.00845336914062, 0.009033203125, 0.00860595703125, 0.0112915039062, 0.0127563476562, 0.00778198242188, 0.000732421875, 0.00103759765625, 0.0108032226562, 0.0182800292969, 0.0135803222656, 0.00564575195312, 0.00445556640625, 0.00775146484375, 0.0102233886719, 0.0106811523438, 0.011962890625, 0.0141906738281, 0.0153198242188, 0.0142517089844, 0.0125122070312, 0.013916015625, 0.0149841308594, 0.0145263671875, 0.0176696777344, 0.0204467773438, 0.0187683105469, 0.0164184570312, 0.0179748535156, 0.0240783691406, 0.0271911621094, 0.0238647460938, 0.0234069824219, 0.030517578125, 0.033203125, 0.0232543945312, 0.015380859375, 0.0206604003906, 0.0275268554688, 0.0270385742188, 0.0241088867188, 0.0223693847656, 0.0186157226562, 0.0125427246094, 0.0113525390625, 0.0179748535156, 0.02587890625, 0.0267944335938, 0.0205383300781, 0.0166625976562, 0.0180358886719, 0.02001953125, 0.0234375, 0.02587890625, 0.0236511230469, 0.0201721191406, 0.0186767578125, 0.0215759277344, 0.0268859863281, 0.0275573730469, 0.0226440429688, 0.0189819335938, 0.0215454101562, 0.0215759277344, 0.0110168457031, 0.00131225585938, 0.0023193359375, 0.00762939453125, 0.00946044921875, 0.00674438476562, 0.00140380859375, -0.0025634765625, -0.00164794921875, -0.00100708007812, -0.0042724609375, -0.00680541992188, -0.00830078125, -0.00894165039062, -0.00726318359375, -0.00582885742188, -0.00711059570312, -0.0123901367188, -0.0177307128906, -0.0182800292969, -0.0165405273438, -0.0165100097656, -0.0203247070312, -0.02294921875, -0.01904296875, -0.0156555175781, -0.0158386230469, -0.0149536132812, -0.0152282714844, -0.02001953125, -0.0263671875, -0.0263366699219, -0.0172424316406, -0.0103149414062, -0.0129089355469, -0.0144653320312, -0.00711059570312, -0.00326538085938, -0.0138549804688, -0.0226745605469, -0.015625, -0.0101928710938, -0.0206298828125, -0.0310974121094, -0.0259704589844, -0.0157470703125, -0.0177001953125, -0.0259094238281, -0.0259094238281, -0.0220947265625, -0.0259094238281, -0.0347595214844, -0.0354919433594, -0.0282897949219, -0.0291137695312, -0.0380859375, -0.0399475097656, -0.0311889648438, -0.0246276855469, -0.0308227539062, -0.0380249023438, -0.0344543457031, -0.0314331054688, -0.03466796875, -0.0333251953125, -0.0258483886719, -0.0242309570312, -0.0314025878906, -0.0352172851562, -0.0311279296875, -0.0271606445312, -0.0282592773438, -0.0314331054688, -0.0310668945312, -0.0285339355469, -0.0273742675781, -0.0254516601562, -0.0250244140625, -0.0286560058594, -0.0312805175781\}, \{0.00906372070312, 0.00912475585938, 0.00918579101562, 0.00921630859375, 0.00927734375, 0.00933837890625, 0.00936889648438, 0.00942993164062, 0.00946044921875, 0.009521484375, 0.00955200195312, 0.00961303710938, 0.0096435546875, 0.00970458984375, 0.00973510742188, 0.009765625, 0.00982666015625, 0.00985717773438, 0.0098876953125, 0.00994873046875, 0.00997924804688, 0.010009765625, 0.0100402832031, 0.0100708007812, 0.0101318359375, 0.0101623535156, 0.0101928710938, 0.0102233886719, 0.01025390625, 0.0102844238281, 0.0103149414062, 0.0103149414062, 0.0103454589844, 0.0103759765625, 0.0104064941406, 0.0104370117188, 0.0104370117188, 0.0104675292969, 0.010498046875, 0.010498046875, 0.0105285644531, 0.0105590820312, 0.0105590820312, 0.0105895996094, 0.0105895996094, 0.0106201171875, 0.0106201171875, 0.0106201171875, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106201171875, 0.0106201171875, 0.0105895996094, 0.0105895996094, 0.0105590820312, 0.0105590820312, 0.0105285644531, 0.0105285644531, 0.010498046875, 0.0104675292969, 0.0104675292969, 0.0104370117188, 0.0104064941406, 0.0103759765625, 0.0103454589844, 0.0103454589844, 0.0103149414062, 0.0102844238281, 0.01025390625, 0.0102233886719, 0.0101928710938, 0.0101623535156, 0.0101013183594, 0.0100708007812, 0.0100402832031, 0.010009765625, 0.00997924804688, 0.00991821289062, 0.0098876953125, 0.00985717773438, 0.00979614257812, 0.009765625, 0.00970458984375, 0.00967407226562, 0.00961303710938, 0.00958251953125, 0.009521484375, 0.00946044921875, 0.00942993164062, 0.00936889648438, 0.00930786132812, 0.00927734375, 0.00921630859375, 0.0091552734375, 0.00909423828125, 0.009033203125, 0.00897216796875, 0.0089111328125, 0.00885009765625, 0.0087890625, 0.00872802734375, 0.0086669921875, 0.00860595703125, 0.008544921875, 0.00848388671875, 0.0084228515625, 0.00836181640625, 0.00827026367188, 0.00820922851562, 0.00814819335938, 0.00808715820312, 0.00799560546875, 0.0079345703125, 0.00787353515625, 0.00778198242188, 0.00772094726562, 0.00762939453125, 0.007568359375, 0.00747680664062, 0.00741577148438, 0.00732421875, 0.00726318359375, 0.00717163085938, 0.007080078125, 0.00701904296875, 0.00692749023438, 0.0068359375, 0.00677490234375, 0.00668334960938, 0.006591796875, 0.00650024414062, 0.00643920898438, 0.00634765625, 0.00625610351562, 0.00616455078125, 0.00607299804688, 0.0059814453125, 0.00592041015625, 0.00582885742188, 0.0057373046875, 0.00564575195312, 0.00555419921875, 0.00546264648438, 0.00537109375, 0.00527954101562, 0.00518798828125, 0.00509643554688, 0.0050048828125, 0.00491333007812, 0.00479125976562, 0.00469970703125, 0.00460815429688, 0.0045166015625, 0.00442504882812, 0.00433349609375, 0.00424194335938, 0.00411987304688, 0.0040283203125, 0.00393676757812, 0.00384521484375, 0.00375366210938, 0.00363159179688, 0.0035400390625, 0.00344848632812, 0.00335693359375, 0.00323486328125, 0.00314331054688, 0.0030517578125, 0.0029296875, 0.00283813476562, 0.00274658203125, 0.00262451171875, 0.00253295898438, 0.00244140625, 0.0023193359375, 0.00222778320312, 0.00210571289062, 0.00201416015625, 0.00192260742188, 0.00180053710938, 0.001708984375, 0.0015869140625, 0.00149536132812, 0.00137329101562, 0.00128173828125, 0.00115966796875, 0.00106811523438, 0.0009765625, 0.0008544921875, 0.000762939453125, 0.000640869140625, 0.00054931640625, 0.00042724609375, 0.000335693359375, 0.000213623046875, 0.0001220703125, 0.0, -9.1552734375e-05, -0.000213623046875, -0.00030517578125, -0.00042724609375, -0.000518798828125, -0.000640869140625, -0.000732421875, -0.0008544921875, -0.000946044921875, -0.00106811523438, -0.00115966796875, -0.00128173828125, -0.00137329101562, -0.00149536132812, -0.0015869140625, -0.001708984375, -0.00180053710938, -0.00192260742188, -0.00201416015625, -0.00210571289062, -0.00222778320312, -0.0023193359375, -0.00244140625, -0.00253295898438, -0.00265502929688, -0.00274658203125, -0.00283813476562, -0.00296020507812, -0.0030517578125, -0.003173828125, -0.00326538085938, -0.00335693359375, -0.00347900390625, -0.00357055664062, -0.003662109375, -0.00375366210938, -0.00387573242188, -0.00396728515625, -0.00405883789062, -0.004150390625, -0.00424194335938, -0.00436401367188, -0.00445556640625, -0.00454711914062, -0.004638671875, -0.00473022460938, -0.00482177734375, -0.00491333007812, -0.0050048828125, -0.00509643554688, -0.00518798828125, -0.00527954101562, -0.00537109375, -0.00546264648438, -0.00555419921875, -0.00564575195312, -0.0057373046875, -0.00582885742188, -0.00592041015625, -0.00601196289062, -0.00607299804688, -0.00616455078125, -0.00625610351562, -0.00631713867188, -0.00640869140625, -0.00650024414062, -0.00656127929688, -0.00665283203125, -0.00674438476562, -0.00680541992188, -0.00689697265625, -0.0069580078125, -0.00704956054688, -0.00711059570312, -0.00717163085938, -0.00726318359375, -0.00732421875, -0.00741577148438, -0.00747680664062, -0.00753784179688, -0.00759887695312, -0.0076904296875, -0.00775146484375, -0.0078125, -0.00787353515625, -0.0079345703125, -0.00799560546875, -0.008056640625, -0.00811767578125, -0.0081787109375, -0.00823974609375, -0.00830078125, -0.00836181640625, -0.0084228515625, -0.00845336914062, -0.00851440429688, -0.00857543945312, -0.00863647460938, -0.0086669921875, -0.00872802734375, -0.0087890625, -0.00881958007812, -0.00888061523438, -0.0089111328125, -0.00897216796875, -0.00900268554688, -0.00906372070312, -0.00909423828125, -0.0091552734375, -0.00918579101562, -0.00921630859375, -0.00927734375, -0.00930786132812, -0.00933837890625, -0.0093994140625, -0.00942993164062, -0.00946044921875, -0.00949096679688, -0.009521484375, -0.00955200195312, -0.00958251953125, -0.00961303710938, -0.0096435546875, -0.00967407226562, -0.00970458984375, -0.00973510742188, -0.009765625, -0.00979614257812, -0.00982666015625, -0.00985717773438, -0.00985717773438, -0.0098876953125, -0.00991821289062, -0.00994873046875, -0.00994873046875, -0.00997924804688, -0.010009765625, -0.010009765625, -0.0100402832031, -0.0100402832031, -0.0100708007812, -0.0101013183594, -0.0101013183594, -0.0101318359375, -0.0101318359375, -0.0101623535156, -0.0101623535156, -0.0101623535156, -0.0101928710938, -0.0101928710938, -0.0101928710938, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.0101928710938, -0.0101928710938, -0.0101623535156, -0.0101623535156, -0.0101318359375, -0.0101318359375, -0.0101013183594, -0.0101013183594, -0.0100708007812, -0.0100402832031, -0.0100402832031, -0.010009765625, -0.00997924804688, -0.00997924804688, -0.00994873046875, -0.00991821289062, -0.0098876953125, -0.00985717773438, -0.00982666015625, -0.00979614257812, -0.00979614257812, -0.009765625, -0.00973510742188, -0.00970458984375, -0.0096435546875, -0.00961303710938, -0.00958251953125, -0.00955200195312, -0.009521484375, -0.00949096679688, -0.00946044921875, -0.0093994140625, -0.00936889648438, -0.00933837890625, -0.00927734375, -0.00924682617188, -0.00921630859375, -0.0091552734375, -0.00912475585938, -0.00909423828125, -0.009033203125, -0.00900268554688, -0.00894165039062, -0.0089111328125, -0.00885009765625, -0.0087890625, -0.00875854492188, -0.00869750976562, -0.0086669921875, -0.00860595703125, -0.008544921875, -0.00848388671875, -0.00845336914062, -0.00839233398438, -0.00833129882812, -0.00827026367188, -0.00823974609375, -0.0081787109375, -0.00811767578125, -0.008056640625, -0.00799560546875, -0.0079345703125, -0.00790405273438, -0.00784301757812, -0.00778198242188, -0.00772094726562, -0.00765991210938, -0.00759887695312, -0.00753784179688, -0.00747680664062, -0.00741577148438, -0.00735473632812, -0.00729370117188, -0.0072021484375, -0.00714111328125, -0.007080078125, -0.00701904296875, -0.0069580078125, -0.00689697265625, -0.0068359375, -0.00674438476562, -0.00668334960938, -0.00662231445312, -0.00656127929688, -0.00650024414062, -0.00640869140625, -0.00634765625, -0.00628662109375, -0.00619506835938, -0.00613403320312, -0.00607299804688, -0.0059814453125, -0.00592041015625, -0.005859375, -0.00576782226562, -0.00570678710938, -0.005615234375, -0.00555419921875, -0.0054931640625, -0.00540161132812, -0.00534057617188, -0.0052490234375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}\}}}
\par
{\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_mono_16bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100}
{\bkmkstart AAAAAAABMO}
{\bkmkend AAAAAAABMO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< double > {\b testBuffer} = \{-3.0517578125e-05, -0.0001220703125, -0.001251220703125, -0.002655029296875, -0.003082275390625, 0.00384521484375, 0.02276611328125, 0.032806396484375, 0.02392578125, -0.006927490234375, -0.044647216796875, -0.03363037109375, 0.013580322265625, 0.030853271484375, 0.017547607421875, 0.00823974609375, 0.004669189453125, -0.00555419921875, -0.0089111328125, -0.014495849609375, -0.01409912109375, -0.04644775390625, -0.087615966796875, -0.070159912109375, -0.066192626953125, -0.03851318359375, 0.079010009765625, -0.015350341796875, 0.08154296875, 0.04486083984375, 0.1390380859375, 0.130859375, 0.13897705078125, 0.170257568359375, 0.177337646484375, 0.200958251953125, 0.1513671875, 0.172027587890625, 0.06463623046875, 0.018524169921875, -0.0003662109375, -0.040283203125, 0.0504150390625, 0.1331787109375, -0.0211181640625, 0.0137939453125, -0.061004638671875, 0.03656005859375, 0.14935302734375, -0.0780029296875, -0.030181884765625, -0.13665771484375, 0.083526611328125, 0.14727783203125, 0.075286865234375, 0.043701171875, 0.04949951171875, 0.259674072265625, 0.239288330078125, 0.32977294921875, 0.241302490234375, 0.261627197265625, 0.145355224609375, 0.16058349609375, 0.23248291015625, 0.09307861328125, 0.117095947265625, 0.01812744140625, 0.08355712890625, 0.208099365234375, 0.23675537109375, 0.148284912109375, 0.197235107421875, 0.167083740234375, 0.1513671875, 0.0177001953125, -0.095672607421875, 0.00750732421875, -0.12213134765625, 0.01165771484375, 0.134368896484375, 0.1112060546875, 0.019775390625, 0.019287109375, 0.140533447265625, 0.315887451171875, 0.263671875, 0.111663818359375, 0.12506103515625, 0.083709716796875, 0.076751708984375, -0.1580810546875, -0.16351318359375, -0.114227294921875, -0.08740234375, 0.03411865234375, 0.100738525390625, 0.043792724609375, 0.1314697265625, 0.170318603515625, 0.1011962890625, 0.285430908203125, 0.0733642578125, 0.17108154296875, 0.169342041015625, 0.201751708984375, 0.209381103515625, -0.068695068359375, -0.00189208984375, -0.048553466796875, -0.002410888671875, -0.113494873046875, -0.08819580078125, -0.159271240234375, -0.11395263671875, -0.0447998046875, -0.076934814453125, 0.038970947265625, -0.08612060546875, -0.12738037109375, -0.132049560546875, -0.071685791015625, -0.06298828125, 0.072174072265625, 0.043243408203125, 0.007568359375, -0.112457275390625, -0.235748291015625, -0.246368408203125, -0.339935302734375, -0.268218994140625, -0.31976318359375, -0.125457763671875, -0.166229248046875, -0.169342041015625, -0.165557861328125, -0.165771484375, -0.108154296875, -0.197784423828125, -0.05487060546875, -0.187103271484375, -0.0615234375, -0.077484130859375, -0.140899658203125, -0.017364501953125, -0.040069580078125, 0.063690185546875, 0.06719970703125, 0.06475830078125, 0.032562255859375, 0.03277587890625, -0.020660400390625, -0.0535888671875, -0.097900390625, -0.1622314453125, -0.149749755859375, -0.14080810546875, -0.1466064453125, -0.172393798828125, -0.20135498046875, -0.15380859375, -0.077911376953125, -0.14532470703125, -0.114990234375, -0.110107421875, -0.087249755859375, -0.079376220703125, -0.099761962890625, -0.044403076171875, -0.052398681640625, -0.05029296875, -0.087615966796875, -0.118804931640625, -0.11163330078125, -0.091033935546875, -0.074859619140625, -0.058197021484375, -0.12762451171875, -0.08990478515625, -0.052398681640625, -0.050567626953125, -0.067047119140625, -0.115203857421875, -0.04034423828125, -0.054412841796875, 0.00579833984375, 0.04461669921875, 0.1109619140625, 0.163970947265625, 0.249969482421875, 0.233154296875, 0.126220703125, 0.254669189453125, 0.20391845703125, 0.18463134765625, 0.14215087890625, 0.053375244140625, 0.025787353515625, 0.011260986328125, -0.00982666015625, -0.040985107421875, -0.039093017578125, -0.04107666015625, 0.0111083984375, -0.042633056640625, 0.018280029296875, -0.01263427734375, -0.032440185546875, 0.087493896484375, 0.089385986328125, 0.0784912109375, 0.095489501953125, 0.125396728515625, 0.07867431640625, 0.109405517578125, 0.113433837890625, 0.100341796875, 0.098480224609375, 0.13330078125, 0.127777099609375, 0.0899658203125, 0.091033935546875, -0.0078125, 0.000946044921875, -0.027252197265625, -0.080718994140625, -0.082244873046875, -0.039581298828125, 0.011260986328125, -0.0389404296875, -0.069580078125, -0.035614013671875, 0.00152587890625, 0.039520263671875, 0.08514404296875, 0.023284912109375, 0.035247802734375, 0.055084228515625, 0.064361572265625, 0.10723876953125, 0.067230224609375, 0.121002197265625, 0.124298095703125, 0.124237060546875, 0.168914794921875, 0.125244140625, 0.145721435546875, 0.1474609375, 0.110626220703125, 0.08642578125, 0.05352783203125, 0.090911865234375, 0.1287841796875, 0.094451904296875, 0.071075439453125, 0.073577880859375, 0.036285400390625, 0.031402587890625, 0.025360107421875, 0.029571533203125, -0.00909423828125, -0.032989501953125, -0.02886962890625, -0.080413818359375, -0.02471923828125, -0.0498046875, -0.069122314453125, -0.06512451171875, -0.054931640625, -0.085296630859375, -0.101531982421875, -0.0321044921875, -0.068634033203125, -0.040435791015625, -0.1119384765625, -0.07354736328125, -0.0289306640625, -0.00732421875, -0.004608154296875, -0.037261962890625, 0.025726318359375, -0.076171875, -0.030426025390625, -0.03961181640625, 0.0057373046875, -0.006256103515625, -0.04412841796875, 0.003082275390625, -0.1204833984375, -0.090789794921875, -0.074981689453125, -0.063934326171875, -0.10467529296875, -0.133026123046875, -0.1632080078125, -0.13623046875, -0.151519775390625, -0.208465576171875, -0.132965087890625, -0.143890380859375, -0.152862548828125, -0.16778564453125, -0.08392333984375, -0.1307373046875, -0.16351318359375, -0.1253662109375, -0.1890869140625, -0.19110107421875, -0.175323486328125, -0.10791015625, -0.107330322265625, -0.127532958984375, -0.08636474609375, -0.115692138671875, -0.12982177734375, -0.10577392578125, -0.16046142578125, -0.080841064453125, -0.1798095703125, -0.21697998046875, -0.139892578125, -0.14263916015625, -0.10260009765625, -0.204376220703125, -0.10614013671875, -0.15338134765625, -0.106536865234375, -0.061859130859375, -0.020843505859375, 0.046478271484375, 0.009552001953125, 0.153717041015625, 0.0352783203125, 0.136566162109375, 0.116912841796875, 0.128326416015625, 0.154541015625, 0.01678466796875, 0.0965576171875, 0.057830810546875, 0.154266357421875, 0.115325927734375, 0.07916259765625, 0.126068115234375, 0.06011962890625, 0.051483154296875, 0.06878662109375, 0.047393798828125, 0.059906005859375, -0.018707275390625, -0.022064208984375, 0.0264892578125, -0.020355224609375, 0.04156494140625, -0.001739501953125, 0.0784912109375, 0.01312255859375, 0.0772705078125, 0.13177490234375, 0.009033203125, 0.064544677734375, -0.021148681640625, 0.04193115234375, 0.0037841796875, -0.0091552734375, 0.03631591796875, 0.061859130859375, 0.071258544921875, 0.010162353515625, 0.026885986328125, 0.042266845703125, 0.01922607421875, -0.022613525390625, 0.0460205078125, 0.031341552734375, 0.033538818359375, 0.014251708984375, 0.01312255859375, 0.010284423828125, 0.00469970703125, -0.01556396484375, 0.062286376953125, 0.085968017578125, 0.09210205078125, 0.201751708984375, 0.007476806640625, 0.08587646484375, 0.015777587890625, 0.0203857421875, 0.106353759765625, -0.019561767578125, 0.097381591796875, 0.09967041015625, 0.057342529296875, 0.000701904296875, 0.041290283203125, 0.02935791015625, 0.126434326171875, 0.05072021484375, 0.079559326171875, 0.16424560546875, 0.085968017578125, 0.180694580078125, 0.13385009765625, 0.1304931640625, 0.02130126953125, 0.134429931640625, 0.046234130859375, -0.004425048828125, 0.01910400390625, -0.038604736328125, 0.040802001953125, -0.093536376953125, -0.070404052734375, -0.09259033203125, -0.01220703125, -0.063751220703125, -0.0347900390625, 0.033111572265625, 0.01263427734375, 0.02178955078125, -0.035491943359375, 0.066558837890625, 0.004791259765625, 0.02777099609375, 0.014129638671875, -0.073516845703125, -0.098846435546875, -0.0360107421875, -0.0831298828125, -0.09454345703125, -0.12896728515625, -0.15985107421875, -0.059417724609375, -0.185394287109375, -0.12420654296875, -0.19830322265625, -0.125274658203125, -0.12945556640625, -0.2213134765625, -0.095977783203125, -0.159637451171875, -0.096466064453125, -0.13299560546875, -0.119171142578125, -0.088775634765625, -0.08599853515625, -0.1082763671875, -0.08697509765625, -0.0390625, -0.108489990234375, -0.06884765625, -0.076690673828125, -0.10101318359375, -0.116058349609375, -0.097747802734375, -0.0970458984375, -0.16552734375, -0.170654296875, -0.123992919921875, -0.179107666015625, -0.132415771484375, -0.12921142578125, -0.126708984375, -0.052337646484375, -0.12774658203125, -0.05712890625, -0.055755615234375, -0.043853759765625, -0.05029296875, -0.04345703125, -0.010162353515625, -0.05126953125, -0.0245361328125, -0.05657958984375, -0.01922607421875, -0.0189208984375, 0.00103759765625, 0.001068115234375, -0.010498046875, 0.02166748046875, 0.03521728515625, 0.021820068359375, -0.000579833984375, -0.051055908203125, -0.098114013671875, -0.046630859375, -0.090850830078125, -0.047882080078125, -0.052764892578125, -0.1024169921875, -0.06805419921875, -0.05572509765625, -0.0196533203125, 0.0538330078125, 0.051605224609375, -0.02459716796875, -0.003875732421875, -0.027984619140625, 0.0260009765625\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_44100::bitDepth = 16}}
\par
{\bkmkstart AAAAAAABMP}
{\bkmkend AAAAAAABMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_44100::numChannels = 1}}
\par
{\bkmkstart AAAAAAABMQ}
{\bkmkend AAAAAAABMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAABMR}
{\bkmkend AAAAAAABMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_mono_16bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAABMS}
{\bkmkend AAAAAAABMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_mono_16bit_44100}
{\xe \v wav_mono_16bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<double> wav_mono_16bit_44100::testBuffer = \{-3.0517578125e-05, -0.0001220703125, -0.001251220703125, -0.002655029296875, -0.003082275390625, 0.00384521484375, 0.02276611328125, 0.032806396484375, 0.02392578125, -0.006927490234375, -0.044647216796875, -0.03363037109375, 0.013580322265625, 0.030853271484375, 0.017547607421875, 0.00823974609375, 0.004669189453125, -0.00555419921875, -0.0089111328125, -0.014495849609375, -0.01409912109375, -0.04644775390625, -0.087615966796875, -0.070159912109375, -0.066192626953125, -0.03851318359375, 0.079010009765625, -0.015350341796875, 0.08154296875, 0.04486083984375, 0.1390380859375, 0.130859375, 0.13897705078125, 0.170257568359375, 0.177337646484375, 0.200958251953125, 0.1513671875, 0.172027587890625, 0.06463623046875, 0.018524169921875, -0.0003662109375, -0.040283203125, 0.0504150390625, 0.1331787109375, -0.0211181640625, 0.0137939453125, -0.061004638671875, 0.03656005859375, 0.14935302734375, -0.0780029296875, -0.030181884765625, -0.13665771484375, 0.083526611328125, 0.14727783203125, 0.075286865234375, 0.043701171875, 0.04949951171875, 0.259674072265625, 0.239288330078125, 0.32977294921875, 0.241302490234375, 0.261627197265625, 0.145355224609375, 0.16058349609375, 0.23248291015625, 0.09307861328125, 0.117095947265625, 0.01812744140625, 0.08355712890625, 0.208099365234375, 0.23675537109375, 0.148284912109375, 0.197235107421875, 0.167083740234375, 0.1513671875, 0.0177001953125, -0.095672607421875, 0.00750732421875, -0.12213134765625, 0.01165771484375, 0.134368896484375, 0.1112060546875, 0.019775390625, 0.019287109375, 0.140533447265625, 0.315887451171875, 0.263671875, 0.111663818359375, 0.12506103515625, 0.083709716796875, 0.076751708984375, -0.1580810546875, -0.16351318359375, -0.114227294921875, -0.08740234375, 0.03411865234375, 0.100738525390625, 0.043792724609375, 0.1314697265625, 0.170318603515625, 0.1011962890625, 0.285430908203125, 0.0733642578125, 0.17108154296875, 0.169342041015625, 0.201751708984375, 0.209381103515625, -0.068695068359375, -0.00189208984375, -0.048553466796875, -0.002410888671875, -0.113494873046875, -0.08819580078125, -0.159271240234375, -0.11395263671875, -0.0447998046875, -0.076934814453125, 0.038970947265625, -0.08612060546875, -0.12738037109375, -0.132049560546875, -0.071685791015625, -0.06298828125, 0.072174072265625, 0.043243408203125, 0.007568359375, -0.112457275390625, -0.235748291015625, -0.246368408203125, -0.339935302734375, -0.268218994140625, -0.31976318359375, -0.125457763671875, -0.166229248046875, -0.169342041015625, -0.165557861328125, -0.165771484375, -0.108154296875, -0.197784423828125, -0.05487060546875, -0.187103271484375, -0.0615234375, -0.077484130859375, -0.140899658203125, -0.017364501953125, -0.040069580078125, 0.063690185546875, 0.06719970703125, 0.06475830078125, 0.032562255859375, 0.03277587890625, -0.020660400390625, -0.0535888671875, -0.097900390625, -0.1622314453125, -0.149749755859375, -0.14080810546875, -0.1466064453125, -0.172393798828125, -0.20135498046875, -0.15380859375, -0.077911376953125, -0.14532470703125, -0.114990234375, -0.110107421875, -0.087249755859375, -0.079376220703125, -0.099761962890625, -0.044403076171875, -0.052398681640625, -0.05029296875, -0.087615966796875, -0.118804931640625, -0.11163330078125, -0.091033935546875, -0.074859619140625, -0.058197021484375, -0.12762451171875, -0.08990478515625, -0.052398681640625, -0.050567626953125, -0.067047119140625, -0.115203857421875, -0.04034423828125, -0.054412841796875, 0.00579833984375, 0.04461669921875, 0.1109619140625, 0.163970947265625, 0.249969482421875, 0.233154296875, 0.126220703125, 0.254669189453125, 0.20391845703125, 0.18463134765625, 0.14215087890625, 0.053375244140625, 0.025787353515625, 0.011260986328125, -0.00982666015625, -0.040985107421875, -0.039093017578125, -0.04107666015625, 0.0111083984375, -0.042633056640625, 0.018280029296875, -0.01263427734375, -0.032440185546875, 0.087493896484375, 0.089385986328125, 0.0784912109375, 0.095489501953125, 0.125396728515625, 0.07867431640625, 0.109405517578125, 0.113433837890625, 0.100341796875, 0.098480224609375, 0.13330078125, 0.127777099609375, 0.0899658203125, 0.091033935546875, -0.0078125, 0.000946044921875, -0.027252197265625, -0.080718994140625, -0.082244873046875, -0.039581298828125, 0.011260986328125, -0.0389404296875, -0.069580078125, -0.035614013671875, 0.00152587890625, 0.039520263671875, 0.08514404296875, 0.023284912109375, 0.035247802734375, 0.055084228515625, 0.064361572265625, 0.10723876953125, 0.067230224609375, 0.121002197265625, 0.124298095703125, 0.124237060546875, 0.168914794921875, 0.125244140625, 0.145721435546875, 0.1474609375, 0.110626220703125, 0.08642578125, 0.05352783203125, 0.090911865234375, 0.1287841796875, 0.094451904296875, 0.071075439453125, 0.073577880859375, 0.036285400390625, 0.031402587890625, 0.025360107421875, 0.029571533203125, -0.00909423828125, -0.032989501953125, -0.02886962890625, -0.080413818359375, -0.02471923828125, -0.0498046875, -0.069122314453125, -0.06512451171875, -0.054931640625, -0.085296630859375, -0.101531982421875, -0.0321044921875, -0.068634033203125, -0.040435791015625, -0.1119384765625, -0.07354736328125, -0.0289306640625, -0.00732421875, -0.004608154296875, -0.037261962890625, 0.025726318359375, -0.076171875, -0.030426025390625, -0.03961181640625, 0.0057373046875, -0.006256103515625, -0.04412841796875, 0.003082275390625, -0.1204833984375, -0.090789794921875, -0.074981689453125, -0.063934326171875, -0.10467529296875, -0.133026123046875, -0.1632080078125, -0.13623046875, -0.151519775390625, -0.208465576171875, -0.132965087890625, -0.143890380859375, -0.152862548828125, -0.16778564453125, -0.08392333984375, -0.1307373046875, -0.16351318359375, -0.1253662109375, -0.1890869140625, -0.19110107421875, -0.175323486328125, -0.10791015625, -0.107330322265625, -0.127532958984375, -0.08636474609375, -0.115692138671875, -0.12982177734375, -0.10577392578125, -0.16046142578125, -0.080841064453125, -0.1798095703125, -0.21697998046875, -0.139892578125, -0.14263916015625, -0.10260009765625, -0.204376220703125, -0.10614013671875, -0.15338134765625, -0.106536865234375, -0.061859130859375, -0.020843505859375, 0.046478271484375, 0.009552001953125, 0.153717041015625, 0.0352783203125, 0.136566162109375, 0.116912841796875, 0.128326416015625, 0.154541015625, 0.01678466796875, 0.0965576171875, 0.057830810546875, 0.154266357421875, 0.115325927734375, 0.07916259765625, 0.126068115234375, 0.06011962890625, 0.051483154296875, 0.06878662109375, 0.047393798828125, 0.059906005859375, -0.018707275390625, -0.022064208984375, 0.0264892578125, -0.020355224609375, 0.04156494140625, -0.001739501953125, 0.0784912109375, 0.01312255859375, 0.0772705078125, 0.13177490234375, 0.009033203125, 0.064544677734375, -0.021148681640625, 0.04193115234375, 0.0037841796875, -0.0091552734375, 0.03631591796875, 0.061859130859375, 0.071258544921875, 0.010162353515625, 0.026885986328125, 0.042266845703125, 0.01922607421875, -0.022613525390625, 0.0460205078125, 0.031341552734375, 0.033538818359375, 0.014251708984375, 0.01312255859375, 0.010284423828125, 0.00469970703125, -0.01556396484375, 0.062286376953125, 0.085968017578125, 0.09210205078125, 0.201751708984375, 0.007476806640625, 0.08587646484375, 0.015777587890625, 0.0203857421875, 0.106353759765625, -0.019561767578125, 0.097381591796875, 0.09967041015625, 0.057342529296875, 0.000701904296875, 0.041290283203125, 0.02935791015625, 0.126434326171875, 0.05072021484375, 0.079559326171875, 0.16424560546875, 0.085968017578125, 0.180694580078125, 0.13385009765625, 0.1304931640625, 0.02130126953125, 0.134429931640625, 0.046234130859375, -0.004425048828125, 0.01910400390625, -0.038604736328125, 0.040802001953125, -0.093536376953125, -0.070404052734375, -0.09259033203125, -0.01220703125, -0.063751220703125, -0.0347900390625, 0.033111572265625, 0.01263427734375, 0.02178955078125, -0.035491943359375, 0.066558837890625, 0.004791259765625, 0.02777099609375, 0.014129638671875, -0.073516845703125, -0.098846435546875, -0.0360107421875, -0.0831298828125, -0.09454345703125, -0.12896728515625, -0.15985107421875, -0.059417724609375, -0.185394287109375, -0.12420654296875, -0.19830322265625, -0.125274658203125, -0.12945556640625, -0.2213134765625, -0.095977783203125, -0.159637451171875, -0.096466064453125, -0.13299560546875, -0.119171142578125, -0.088775634765625, -0.08599853515625, -0.1082763671875, -0.08697509765625, -0.0390625, -0.108489990234375, -0.06884765625, -0.076690673828125, -0.10101318359375, -0.116058349609375, -0.097747802734375, -0.0970458984375, -0.16552734375, -0.170654296875, -0.123992919921875, -0.179107666015625, -0.132415771484375, -0.12921142578125, -0.126708984375, -0.052337646484375, -0.12774658203125, -0.05712890625, -0.055755615234375, -0.043853759765625, -0.05029296875, -0.04345703125, -0.010162353515625, -0.05126953125, -0.0245361328125, -0.05657958984375, -0.01922607421875, -0.0189208984375, 0.00103759765625, 0.001068115234375, -0.010498046875, 0.02166748046875, 0.03521728515625, 0.021820068359375, -0.000579833984375, -0.051055908203125, -0.098114013671875, -0.046630859375, -0.090850830078125, -0.047882080078125, -0.052764892578125, -0.1024169921875, -0.06805419921875, -0.05572509765625, -0.0196533203125, 0.0538330078125, 0.051605224609375, -0.02459716796875, -0.003875732421875, -0.027984619140625, 0.0260009765625\}}}
\par
{\bkmkstart AAAAAAABMT}
{\bkmkend AAAAAAABMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_mono_16bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000}
{\bkmkstart AAAAAAABMU}
{\bkmkend AAAAAAABMU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< double > {\b testBuffer} = \{0.0177001953125, 0.003509521484375, -0.01373291015625, 0.01617431640625, 0.0201416015625, -0.03125, -0.07720947265625, 0.00177001953125, 0.021759033203125, -0.09649658203125, -0.01483154296875, 0.02691650390625, -0.03948974609375, -0.021728515625, -0.11358642578125, -0.109344482421875, -0.012664794921875, 0.000244140625, -0.035552978515625, -0.044647216796875, 0.0345458984375, -0.050140380859375, -0.052947998046875, 0.04705810546875, 0.06439208984375, 0.20098876953125, 0.1834716796875, 0.118438720703125, 0.127838134765625, 0.078704833984375, 0.0621337890625, 0.064178466796875, 0.1717529296875, 0.16400146484375, 0.032257080078125, -0.095550537109375, -0.201629638671875, -0.08441162109375, -0.009063720703125, -0.030792236328125, -0.04974365234375, -0.107269287109375, -0.1378173828125, -0.22943115234375, -0.220977783203125, -0.056884765625, 0.090606689453125, 0.14532470703125, 0.176605224609375, 0.151885986328125, -0.004058837890625, 0.02093505859375, 0.098541259765625, 0.046630859375, 0.0382080078125, 0.068389892578125, 0.165924072265625, 0.112762451171875, 0.13385009765625, 0.354095458984375, 0.310577392578125, 0.154510498046875, -0.049560546875, -0.14569091796875, -0.0330810546875, -0.027008056640625, 0.02398681640625, 0.038421630859375, 0.0145263671875, 0.072357177734375, 0.01226806640625, -0.04656982421875, -0.083831787109375, -0.100921630859375, -0.037078857421875, -0.013153076171875, -0.09112548828125, -0.115753173828125, 0.033416748046875, 0.091033935546875, 0.021514892578125, -0.07977294921875, -0.193359375, -0.134796142578125, -0.052398681640625, -0.096649169921875, -0.150726318359375, -0.145751953125, -0.034820556640625, 0.01708984375, -0.11181640625, -0.23297119140625, -0.234130859375, -0.10552978515625, -0.006805419921875, -0.058502197265625, -0.151763916015625, -0.157928466796875, 0.041595458984375, 0.064300537109375, -0.1041259765625, 0.07110595703125, 0.2601318359375, 0.109344482421875, -0.192413330078125, -0.324188232421875, -0.21563720703125, -0.094482421875, -0.000701904296875, -0.032012939453125, -0.01324462890625, 0.015472412109375, -0.1949462890625, -0.19189453125, -0.01409912109375, 0.091461181640625, 0.147796630859375, 0.100982666015625, 0.214202880859375, 0.206634521484375, -0.046356201171875, -0.13409423828125, -0.12939453125, -0.06060791015625, -0.05914306640625, -0.022369384765625, 0.16217041015625, 0.09503173828125, -0.009918212890625, 0.02069091796875, 0.139862060546875, 0.32208251953125, 0.30682373046875, 0.13201904296875, -0.1802978515625, -0.2109375, 0.2222900390625, 0.429168701171875, 0.340484619140625, 0.22589111328125, 0.08831787109375, -0.016448974609375, -0.06585693359375, -0.123382568359375, -0.15350341796875, 0.03057861328125, 0.248626708984375, 0.25494384765625, 0.2288818359375, 0.209930419921875, 0.033203125, -0.201904296875, -0.179534912109375, 0.0074462890625, 0.081817626953125, 0.155242919921875, 0.162811279296875, 0.08917236328125, 0.02777099609375, -0.054046630859375, 0.027740478515625, 0.048431396484375, -0.06085205078125, 0.002166748046875, 0.033782958984375, -0.0426025390625, -0.125335693359375, -0.0592041015625, 0.14520263671875, 0.062835693359375, -0.087738037109375, 0.0467529296875, 0.18975830078125, 0.304962158203125, 0.2059326171875, -0.258514404296875, -0.469390869140625, -0.3907470703125, -0.424407958984375, -0.448394775390625, -0.29132080078125, -0.07977294921875, 0.06341552734375, 0.1956787109375, 0.1392822265625, 0.054229736328125, 0.05419921875, -0.101531982421875, -0.180206298828125, -0.301300048828125, -0.444488525390625, -0.3128662109375, -0.1505126953125, -0.0086669921875, 0.10284423828125, 0.007293701171875, -0.270599365234375, -0.329437255859375, -0.1015625, 0.014739990234375, 0.1168212890625, 0.183380126953125, -0.06170654296875, -0.392120361328125, -0.29052734375, 0.177032470703125, 0.442352294921875, 0.494171142578125, 0.221710205078125, -0.4381103515625, -0.811370849609375, -0.74688720703125, -0.5858154296875, -0.41314697265625, -0.187713623046875, -0.120635986328125, -0.321563720703125, -0.226409912109375, 0.222442626953125, 0.48468017578125, 0.592803955078125, 0.578094482421875, 0.206817626953125, -0.21771240234375, -0.277130126953125, -0.157623291015625, -0.12664794921875, -0.15045166015625, -0.1463623046875, -0.149810791015625, -0.12579345703125, 0.004791259765625, 0.157470703125, 0.27960205078125, 0.3077392578125, 0.22271728515625, 0.21905517578125, 0.341583251953125, 0.361053466796875, 0.287689208984375, 0.298126220703125, 0.329925537109375, 0.331024169921875, 0.235626220703125, 0.114227294921875, 0.17572021484375, 0.170989990234375, -0.060577392578125, -0.2164306640625, -0.295440673828125, -0.233551025390625, 0.1085205078125, 0.2120361328125, 0.00384521484375, -0.070343017578125, -0.096221923828125, -0.103759765625, 0.0655517578125, 0.18218994140625, 0.03778076171875, -0.053924560546875, -0.116119384765625, -0.258453369140625, -0.034820556640625, 0.249664306640625, 0.247955322265625, 0.33013916015625, 0.4422607421875, 0.442291259765625, 0.407135009765625, 0.386993408203125, 0.45220947265625, 0.527740478515625, 0.545745849609375, 0.428497314453125, 0.128662109375, -0.055877685546875, -0.028594970703125, -0.0426025390625, -0.076141357421875, -0.02142333984375, 0.050384521484375, 0.05133056640625, -0.001495361328125, -0.032684326171875, -0.05157470703125, -0.084686279296875, -0.091339111328125, -0.205780029296875, -0.436737060546875, -0.518096923828125, -0.445220947265625, -0.262725830078125, -0.109161376953125, -0.013702392578125, 0.119354248046875, -0.044769287109375, -0.169158935546875, 0.030426025390625, 0.128173828125, 0.2552490234375, 0.337310791015625, 0.29351806640625, 0.191925048828125, -0.023223876953125, 0.017791748046875, 0.079498291015625, -0.211181640625, -0.438568115234375, -0.518524169921875, -0.664703369140625, -0.551300048828125, -0.142242431640625, -0.050689697265625, -0.283935546875, -0.484405517578125, -0.529541015625, -0.469970703125, -0.37457275390625, -0.168609619140625, -0.264984130859375, -0.591033935546875, -0.62158203125, -0.727752685546875, -0.85272216796875, -0.608245849609375, -0.332000732421875, -0.2779541015625, -0.322967529296875, -0.325592041015625, -0.243927001953125, -0.014495849609375, 0.252777099609375, 0.35235595703125, 0.355499267578125, 0.442352294921875, 0.51495361328125, 0.32513427734375, 0.11834716796875, 0.128387451171875, 0.227996826171875, 0.365753173828125, 0.34832763671875, 0.265380859375, 0.377716064453125, 0.579803466796875, 0.680389404296875, 0.633392333984375, 0.482757568359375, 0.143218994140625, -0.0994873046875, -0.1571044921875, -0.160400390625, 0.14752197265625, 0.328399658203125, 0.34173583984375, 0.50335693359375, 0.517486572265625, 0.29034423828125, -0.11956787109375, -0.08306884765625, 0.224365234375, 0.1968994140625, 0.1746826171875, 0.032440185546875, -0.0792236328125, -0.121307373046875, -0.250396728515625, -0.2518310546875, -0.2427978515625, -0.14068603515625, -0.0711669921875, -0.08074951171875, -0.1668701171875, -0.2625732421875, -0.227630615234375, -0.364288330078125, -0.3048095703125, -0.073760986328125, -0.084625244140625, -0.09783935546875, -0.06524658203125, -0.037322998046875, -0.052764892578125, -0.0020751953125, 0.1044921875, 0.11383056640625, -0.0050048828125, -0.13726806640625, -0.060791015625, 0.102020263671875, 0.174163818359375, 0.0224609375, -0.06365966796875, 0.040069580078125, 0.036224365234375, 0.10809326171875, 0.25335693359375, 0.397552490234375, 0.319793701171875, 0.04486083984375, -0.00787353515625, -0.0826416015625, -0.0626220703125, 0.06475830078125, 0.132720947265625, 0.315338134765625, 0.348236083984375, 0.31103515625, 0.206939697265625, 0.02978515625, 0.090789794921875, 0.126129150390625, 0.11895751953125, 0.151031494140625, 0.134246826171875, 0.064666748046875, -0.159576416015625, -0.248260498046875, -0.130096435546875, -0.128997802734375, -0.0440673828125, 0.29901123046875, 0.400848388671875, 0.212158203125, 0.164154052734375, 0.1925048828125, 0.204833984375, 0.1300048828125, 0.062042236328125, 0.0621337890625, -0.005645751953125, 0.132110595703125, 0.30535888671875, 0.342926025390625, 0.3685302734375, 0.19403076171875, 0.014495849609375, -0.05145263671875, -0.026153564453125, 0.110809326171875, 0.175689697265625, 0.14898681640625, 0.099853515625, 0.160797119140625, 0.28460693359375, 0.21795654296875, 0.096435546875, 0.131011962890625, 0.139617919921875, 0.1119384765625, 0.140167236328125, 0.063446044921875, -0.051788330078125, -0.066497802734375, 0.053070068359375, 0.16845703125, 0.178131103515625, 0.2095947265625, 0.20892333984375, 0.1214599609375, -0.0062255859375, 0.02252197265625, 0.169281005859375, 0.146575927734375, 0.116607666015625, 0.17706298828125, 0.263519287109375, 0.167572021484375, -0.074493408203125, -0.002838134765625, 0.178253173828125, 0.18597412109375, 0.158233642578125, 0.1856689453125, 0.194671630859375, 0.05572509765625, 0.025421142578125, 0.125823974609375, 0.096099853515625, 0.094635009765625, 0.1485595703125, 0.17242431640625, 0.22265625, 0.100067138671875, -0.07476806640625, -0.045166015625, -0.031402587890625, 0.003570556640625, 0.085357666015625, 0.031341552734375, -0.04022216796875, -0.052459716796875, -0.01885986328125, 0.015228271484375, -0.012725830078125, -0.11968994140625, -0.247406005859375, -0.270721435546875, -0.24151611328125\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_48000::bitDepth = 16}}
\par
{\bkmkstart AAAAAAABMV}
{\bkmkend AAAAAAABMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_48000::numChannels = 1}}
\par
{\bkmkstart AAAAAAABMW}
{\bkmkend AAAAAAABMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_mono_16bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAABMX}
{\bkmkend AAAAAAABMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_mono_16bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABMY}
{\bkmkend AAAAAAABMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_mono_16bit_48000}
{\xe \v wav_mono_16bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<double> wav_mono_16bit_48000::testBuffer = \{0.0177001953125, 0.003509521484375, -0.01373291015625, 0.01617431640625, 0.0201416015625, -0.03125, -0.07720947265625, 0.00177001953125, 0.021759033203125, -0.09649658203125, -0.01483154296875, 0.02691650390625, -0.03948974609375, -0.021728515625, -0.11358642578125, -0.109344482421875, -0.012664794921875, 0.000244140625, -0.035552978515625, -0.044647216796875, 0.0345458984375, -0.050140380859375, -0.052947998046875, 0.04705810546875, 0.06439208984375, 0.20098876953125, 0.1834716796875, 0.118438720703125, 0.127838134765625, 0.078704833984375, 0.0621337890625, 0.064178466796875, 0.1717529296875, 0.16400146484375, 0.032257080078125, -0.095550537109375, -0.201629638671875, -0.08441162109375, -0.009063720703125, -0.030792236328125, -0.04974365234375, -0.107269287109375, -0.1378173828125, -0.22943115234375, -0.220977783203125, -0.056884765625, 0.090606689453125, 0.14532470703125, 0.176605224609375, 0.151885986328125, -0.004058837890625, 0.02093505859375, 0.098541259765625, 0.046630859375, 0.0382080078125, 0.068389892578125, 0.165924072265625, 0.112762451171875, 0.13385009765625, 0.354095458984375, 0.310577392578125, 0.154510498046875, -0.049560546875, -0.14569091796875, -0.0330810546875, -0.027008056640625, 0.02398681640625, 0.038421630859375, 0.0145263671875, 0.072357177734375, 0.01226806640625, -0.04656982421875, -0.083831787109375, -0.100921630859375, -0.037078857421875, -0.013153076171875, -0.09112548828125, -0.115753173828125, 0.033416748046875, 0.091033935546875, 0.021514892578125, -0.07977294921875, -0.193359375, -0.134796142578125, -0.052398681640625, -0.096649169921875, -0.150726318359375, -0.145751953125, -0.034820556640625, 0.01708984375, -0.11181640625, -0.23297119140625, -0.234130859375, -0.10552978515625, -0.006805419921875, -0.058502197265625, -0.151763916015625, -0.157928466796875, 0.041595458984375, 0.064300537109375, -0.1041259765625, 0.07110595703125, 0.2601318359375, 0.109344482421875, -0.192413330078125, -0.324188232421875, -0.21563720703125, -0.094482421875, -0.000701904296875, -0.032012939453125, -0.01324462890625, 0.015472412109375, -0.1949462890625, -0.19189453125, -0.01409912109375, 0.091461181640625, 0.147796630859375, 0.100982666015625, 0.214202880859375, 0.206634521484375, -0.046356201171875, -0.13409423828125, -0.12939453125, -0.06060791015625, -0.05914306640625, -0.022369384765625, 0.16217041015625, 0.09503173828125, -0.009918212890625, 0.02069091796875, 0.139862060546875, 0.32208251953125, 0.30682373046875, 0.13201904296875, -0.1802978515625, -0.2109375, 0.2222900390625, 0.429168701171875, 0.340484619140625, 0.22589111328125, 0.08831787109375, -0.016448974609375, -0.06585693359375, -0.123382568359375, -0.15350341796875, 0.03057861328125, 0.248626708984375, 0.25494384765625, 0.2288818359375, 0.209930419921875, 0.033203125, -0.201904296875, -0.179534912109375, 0.0074462890625, 0.081817626953125, 0.155242919921875, 0.162811279296875, 0.08917236328125, 0.02777099609375, -0.054046630859375, 0.027740478515625, 0.048431396484375, -0.06085205078125, 0.002166748046875, 0.033782958984375, -0.0426025390625, -0.125335693359375, -0.0592041015625, 0.14520263671875, 0.062835693359375, -0.087738037109375, 0.0467529296875, 0.18975830078125, 0.304962158203125, 0.2059326171875, -0.258514404296875, -0.469390869140625, -0.3907470703125, -0.424407958984375, -0.448394775390625, -0.29132080078125, -0.07977294921875, 0.06341552734375, 0.1956787109375, 0.1392822265625, 0.054229736328125, 0.05419921875, -0.101531982421875, -0.180206298828125, -0.301300048828125, -0.444488525390625, -0.3128662109375, -0.1505126953125, -0.0086669921875, 0.10284423828125, 0.007293701171875, -0.270599365234375, -0.329437255859375, -0.1015625, 0.014739990234375, 0.1168212890625, 0.183380126953125, -0.06170654296875, -0.392120361328125, -0.29052734375, 0.177032470703125, 0.442352294921875, 0.494171142578125, 0.221710205078125, -0.4381103515625, -0.811370849609375, -0.74688720703125, -0.5858154296875, -0.41314697265625, -0.187713623046875, -0.120635986328125, -0.321563720703125, -0.226409912109375, 0.222442626953125, 0.48468017578125, 0.592803955078125, 0.578094482421875, 0.206817626953125, -0.21771240234375, -0.277130126953125, -0.157623291015625, -0.12664794921875, -0.15045166015625, -0.1463623046875, -0.149810791015625, -0.12579345703125, 0.004791259765625, 0.157470703125, 0.27960205078125, 0.3077392578125, 0.22271728515625, 0.21905517578125, 0.341583251953125, 0.361053466796875, 0.287689208984375, 0.298126220703125, 0.329925537109375, 0.331024169921875, 0.235626220703125, 0.114227294921875, 0.17572021484375, 0.170989990234375, -0.060577392578125, -0.2164306640625, -0.295440673828125, -0.233551025390625, 0.1085205078125, 0.2120361328125, 0.00384521484375, -0.070343017578125, -0.096221923828125, -0.103759765625, 0.0655517578125, 0.18218994140625, 0.03778076171875, -0.053924560546875, -0.116119384765625, -0.258453369140625, -0.034820556640625, 0.249664306640625, 0.247955322265625, 0.33013916015625, 0.4422607421875, 0.442291259765625, 0.407135009765625, 0.386993408203125, 0.45220947265625, 0.527740478515625, 0.545745849609375, 0.428497314453125, 0.128662109375, -0.055877685546875, -0.028594970703125, -0.0426025390625, -0.076141357421875, -0.02142333984375, 0.050384521484375, 0.05133056640625, -0.001495361328125, -0.032684326171875, -0.05157470703125, -0.084686279296875, -0.091339111328125, -0.205780029296875, -0.436737060546875, -0.518096923828125, -0.445220947265625, -0.262725830078125, -0.109161376953125, -0.013702392578125, 0.119354248046875, -0.044769287109375, -0.169158935546875, 0.030426025390625, 0.128173828125, 0.2552490234375, 0.337310791015625, 0.29351806640625, 0.191925048828125, -0.023223876953125, 0.017791748046875, 0.079498291015625, -0.211181640625, -0.438568115234375, -0.518524169921875, -0.664703369140625, -0.551300048828125, -0.142242431640625, -0.050689697265625, -0.283935546875, -0.484405517578125, -0.529541015625, -0.469970703125, -0.37457275390625, -0.168609619140625, -0.264984130859375, -0.591033935546875, -0.62158203125, -0.727752685546875, -0.85272216796875, -0.608245849609375, -0.332000732421875, -0.2779541015625, -0.322967529296875, -0.325592041015625, -0.243927001953125, -0.014495849609375, 0.252777099609375, 0.35235595703125, 0.355499267578125, 0.442352294921875, 0.51495361328125, 0.32513427734375, 0.11834716796875, 0.128387451171875, 0.227996826171875, 0.365753173828125, 0.34832763671875, 0.265380859375, 0.377716064453125, 0.579803466796875, 0.680389404296875, 0.633392333984375, 0.482757568359375, 0.143218994140625, -0.0994873046875, -0.1571044921875, -0.160400390625, 0.14752197265625, 0.328399658203125, 0.34173583984375, 0.50335693359375, 0.517486572265625, 0.29034423828125, -0.11956787109375, -0.08306884765625, 0.224365234375, 0.1968994140625, 0.1746826171875, 0.032440185546875, -0.0792236328125, -0.121307373046875, -0.250396728515625, -0.2518310546875, -0.2427978515625, -0.14068603515625, -0.0711669921875, -0.08074951171875, -0.1668701171875, -0.2625732421875, -0.227630615234375, -0.364288330078125, -0.3048095703125, -0.073760986328125, -0.084625244140625, -0.09783935546875, -0.06524658203125, -0.037322998046875, -0.052764892578125, -0.0020751953125, 0.1044921875, 0.11383056640625, -0.0050048828125, -0.13726806640625, -0.060791015625, 0.102020263671875, 0.174163818359375, 0.0224609375, -0.06365966796875, 0.040069580078125, 0.036224365234375, 0.10809326171875, 0.25335693359375, 0.397552490234375, 0.319793701171875, 0.04486083984375, -0.00787353515625, -0.0826416015625, -0.0626220703125, 0.06475830078125, 0.132720947265625, 0.315338134765625, 0.348236083984375, 0.31103515625, 0.206939697265625, 0.02978515625, 0.090789794921875, 0.126129150390625, 0.11895751953125, 0.151031494140625, 0.134246826171875, 0.064666748046875, -0.159576416015625, -0.248260498046875, -0.130096435546875, -0.128997802734375, -0.0440673828125, 0.29901123046875, 0.400848388671875, 0.212158203125, 0.164154052734375, 0.1925048828125, 0.204833984375, 0.1300048828125, 0.062042236328125, 0.0621337890625, -0.005645751953125, 0.132110595703125, 0.30535888671875, 0.342926025390625, 0.3685302734375, 0.19403076171875, 0.014495849609375, -0.05145263671875, -0.026153564453125, 0.110809326171875, 0.175689697265625, 0.14898681640625, 0.099853515625, 0.160797119140625, 0.28460693359375, 0.21795654296875, 0.096435546875, 0.131011962890625, 0.139617919921875, 0.1119384765625, 0.140167236328125, 0.063446044921875, -0.051788330078125, -0.066497802734375, 0.053070068359375, 0.16845703125, 0.178131103515625, 0.2095947265625, 0.20892333984375, 0.1214599609375, -0.0062255859375, 0.02252197265625, 0.169281005859375, 0.146575927734375, 0.116607666015625, 0.17706298828125, 0.263519287109375, 0.167572021484375, -0.074493408203125, -0.002838134765625, 0.178253173828125, 0.18597412109375, 0.158233642578125, 0.1856689453125, 0.194671630859375, 0.05572509765625, 0.025421142578125, 0.125823974609375, 0.096099853515625, 0.094635009765625, 0.1485595703125, 0.17242431640625, 0.22265625, 0.100067138671875, -0.07476806640625, -0.045166015625, -0.031402587890625, 0.003570556640625, 0.085357666015625, 0.031341552734375, -0.04022216796875, -0.052459716796875, -0.01885986328125, 0.015228271484375, -0.012725830078125, -0.11968994140625, -0.247406005859375, -0.270721435546875, -0.24151611328125\}}}
\par
{\bkmkstart AAAAAAABMZ}
{\bkmkend AAAAAAABMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_16bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100}
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, -9.1552734375e-05, -0.00054931640625, -0.001190185546875, -0.00128173828125, 0.001983642578125, 0.01055908203125, 0.014495849609375, 0.009765625, -0.004638671875, -0.02252197265625, -0.016510009765625, 0.00762939453125, 0.016693115234375, 0.00927734375, 0.003326416015625, 0.00128173828125, -0.00262451171875, -0.002960205078125, -0.0047607421875, -0.004425048828125, -0.020904541015625, -0.0406494140625, -0.0335693359375, -0.029541015625, -0.028472900390625, -0.021820068359375, -0.018157958984375, -0.0096435546875, 0.011688232421875, 0.035186767578125, 0.0457763671875, 0.045166015625, 0.0595703125, 0.073455810546875, 0.06561279296875, 0.071868896484375, 0.059326171875, 0.0093994140625, -0.032958984375, 0.01373291015625, -0.051055908203125, 0.033660888671875, 0.107086181640625, -0.042236328125, 0.0374755859375, -0.07269287109375, 0.036834716796875, 0.106475830078125, -0.051483154296875, 0.010162353515625, -0.06182861328125, 0.085662841796875, 0.104461669921875, 0.077178955078125, 0.05010986328125, 0.0333251953125, 0.138336181640625, 0.124298095703125, 0.1722412109375, 0.084716796875, 0.10321044921875, 0.0732421875, 0.063934326171875, 0.107696533203125, 0.063140869140625, 0.046356201171875, -0.013458251953125, 0.04345703125, 0.08270263671875, 0.109619140625, 0.06256103515625, 0.08746337890625, 0.10504150390625, 0.060577392578125, 0.035430908203125, -0.045196533203125, -0.02105712890625, -0.054901123046875, 0.001068115234375, 0.08062744140625, 0.044830322265625, 0.015380859375, 0.031585693359375, 0.10845947265625, 0.187469482421875, 0.161468505859375, 0.066253662109375, 0.061431884765625, 0.078826904296875, 0.073211669921875, -0.054290771484375, -0.057708740234375, -0.00146484375, -0.047943115234375, 0.0653076171875, 0.079925537109375, 0.001190185546875, 0.08831787109375, 0.05804443359375, 0.05072021484375, 0.14404296875, 0.022003173828125, 0.084014892578125, 0.122406005859375, 0.1221923828125, 0.154815673828125, 0.001495361328125, 0.0361328125, 0.013519287109375, 0.0263671875, 0.02099609375, -0.058013916015625, -0.041015625, -0.0712890625, -0.0126953125, 0.002899169921875, 0.00677490234375, -0.008544921875, -0.0557861328125, -0.06121826171875, -0.035369873046875, -0.00250244140625, 0.034912109375, 0.065673828125, 0.001373291015625, -0.031219482421875, -0.12091064453125, -0.159271240234375, -0.15771484375, -0.233642578125, -0.17938232421875, -0.133697509765625, -0.10784912109375, -0.122406005859375, -0.138427734375, -0.06597900390625, -0.088623046875, -0.07586669921875, -0.0291748046875, -0.079498291015625, -0.04180908203125, -0.024627685546875, -0.07989501953125, -0.000457763671875, 0.0233154296875, 0.02703857421875, 0.05950927734375, -0.001220703125, 0.000335693359375, -0.00848388671875, -0.030029296875, -0.0479736328125, -0.06280517578125, -0.078399658203125, -0.080474853515625, -0.001434326171875, -0.050018310546875, -0.086517333984375, -0.074462890625, -0.07928466796875, -0.04638671875, -0.088226318359375, -0.094512939453125, -0.093353271484375, -0.112884521484375, -0.0833740234375, -0.084808349609375, -0.093902587890625, -0.056304931640625, -0.0721435546875, -0.095947265625, -0.060394287109375, -0.07598876953125, -0.063140869140625, -0.03704833984375, -0.05523681640625, -0.052490234375, -0.055877685546875, -0.058929443359375, -0.055877685546875, -0.055999755859375, -0.063873291015625, -0.058563232421875, -0.03863525390625, -0.0389404296875, 0.011322021484375, 0.057708740234375, 0.072113037109375, 0.15484619140625, 0.141021728515625, 0.098785400390625, 0.16357421875, 0.13140869140625, 0.0897216796875, 0.082122802734375, 0.01055908203125, -0.009429931640625, -0.013092041015625, -0.03692626953125, -0.05224609375, -0.0833740234375, -0.05377197265625, -0.037689208984375, -0.065216064453125, -0.02923583984375, -0.040863037109375, -0.05072021484375, 0.026336669921875, 0.047149658203125, 0.03546142578125, 0.035003662109375, 0.06072998046875, 0.070892333984375, 0.039794921875, 0.064453125, 0.032562255859375, 0.016143798828125, 0.048583984375, 0.0120849609375, 0.0284423828125, 0.023223876953125, -0.013641357421875, 0.003326416015625, -0.006072998046875, -0.02593994140625, -0.017791748046875, 0.003631591796875, 0.000701904296875, -0.03082275390625, -0.019744873046875, -0.012237548828125, -0.021820068359375, 0.02117919921875, 0.037139892578125, -0.001495361328125, 0.01947021484375, 0.03375244140625, 0.0155029296875, 0.063751220703125, 0.052947998046875, 0.092254638671875, 0.12091064453125, 0.09771728515625, 0.142486572265625, 0.088104248046875, 0.10980224609375, 0.12286376953125, 0.092498779296875, 0.078521728515625, 0.04241943359375, 0.088592529296875, 0.10113525390625, 0.091949462890625, 0.093505859375, 0.086029052734375, 0.069000244140625, 0.098785400390625, 0.087310791015625, 0.082794189453125, 0.063873291015625, 0.038330078125, 0.047210693359375, 0.013427734375, 0.04443359375, 0.007080078125, 0.009979248046875, -0.01641845703125, -0.010986328125, -0.01239013671875, -0.031463623046875, 0.023834228515625, -0.0289306640625, 0.00579833984375, -0.046722412109375, -0.0147705078125, 0.018157958984375, 0.021514892578125, 0.02850341796875, -0.006866455078125, 0.051239013671875, -0.05078125, -0.0111083984375, -0.009368896484375, 0.01312255859375, 0.01922607421875, -0.013427734375, 0.0438232421875, -0.078399658203125, -0.049041748046875, -0.033538818359375, -0.045867919921875, -0.03564453125, -0.04864501953125, -0.064666748046875, -0.068359375, -0.071746826171875, -0.0931396484375, -0.0380859375, -0.08538818359375, -0.065704345703125, -0.082061767578125, -0.069549560546875, -0.054931640625, -0.1007080078125, -0.057586669921875, -0.1146240234375, -0.09619140625, -0.12591552734375, -0.116729736328125, -0.075653076171875, -0.114990234375, -0.05810546875, -0.1025390625, -0.073577880859375, -0.085601806640625, -0.13800048828125, -0.0701904296875, -0.14849853515625, -0.15142822265625, -0.131988525390625, -0.11383056640625, -0.11053466796875, -0.161376953125, -0.11029052734375, -0.135498046875, -0.116943359375, -0.084228515625, -0.019439697265625, -0.03717041015625, -0.04473876953125, 0.0430908203125, -0.01092529296875, 0.066375732421875, 0.055511474609375, 0.062225341796875, 0.06390380859375, -0.02301025390625, 0.037445068359375, 0.024993896484375, 0.06573486328125, 0.0367431640625, 0.006378173828125, 0.045318603515625, -0.033905029296875, 0.015960693359375, 0.010162353515625, -0.035064697265625, 0.039886474609375, -0.04119873046875, -0.00555419921875, 0.0078125, -0.04998779296875, 0.005584716796875, -0.042724609375, 0.0107421875, -0.001617431640625, 0.00384521484375, 0.037322998046875, -0.012786865234375, 0.012603759765625, -0.022430419921875, -0.017059326171875, -0.021392822265625, -0.047943115234375, -0.02191162109375, 0.014495849609375, -0.003997802734375, -0.014862060546875, -0.01690673828125, -0.008880615234375, 0.005340576171875, -0.02423095703125, 0.018096923828125, 0.00567626953125, -0.0106201171875, -0.00958251953125, -0.016845703125, 0.006622314453125, 0.000335693359375, 0.0013427734375, 0.068084716796875, 0.046722412109375, 0.05419921875, 0.14739990234375, 0.0347900390625, 0.083740234375, 0.0494384765625, 0.01873779296875, 0.119903564453125, -0.026214599609375, 0.084625244140625, 0.11651611328125, 0.040252685546875, 0.07470703125, 0.0350341796875, 0.080535888671875, 0.08270263671875, 0.053741455078125, 0.071441650390625, 0.12750244140625, 0.133880615234375, 0.13836669921875, 0.129852294921875, 0.0904541015625, 0.086181640625, 0.09222412109375, 0.074462890625, 0.0079345703125, 0.036224365234375, -0.00897216796875, -0.015411376953125, 0.017425537109375, -0.053070068359375, -0.012725830078125, -0.008758544921875, 0.009490966796875, 0.02520751953125, 0.035400390625, 0.061309814453125, 0.028106689453125, 0.064971923828125, 0.09173583984375, 0.064239501953125, 0.037445068359375, 0.071044921875, -0.00439453125, -0.029083251953125, 0.012908935546875, -0.022979736328125, 0.025634765625, -0.047943115234375, -0.017364501953125, 0.01617431640625, -0.0498046875, -0.022247314453125, -0.02459716796875, 0.016326904296875, -0.0391845703125, -0.05670166015625, -0.028350830078125, -0.029266357421875, -0.01300048828125, -0.062591552734375, -0.062042236328125, -0.054351806640625, -0.049468994140625, -0.054534912109375, -0.054779052734375, -0.028778076171875, -0.03436279296875, -0.0391845703125, -0.037445068359375, -0.062835693359375, -0.08154296875, -0.06982421875, -0.092529296875, -0.117095947265625, -0.108154296875, -0.1209716796875, -0.14031982421875, -0.1102294921875, -0.109161376953125, -0.09857177734375, -0.05816650390625, -0.067169189453125, -0.06890869140625, -0.06353759765625, -0.0526123046875, -0.036224365234375, -0.0203857421875, -0.011322021484375, -0.02117919921875, -0.03900146484375, -0.04412841796875, -0.032806396484375, -0.043609619140625, -0.033721923828125, -0.018157958984375, -0.041748046875, -0.017578125, 0.0009765625, -0.018310546875, -0.0189208984375, -0.06451416015625, -0.072662353515625, -0.055694580078125, -0.0848388671875, -0.07269287109375, -0.07049560546875, -0.099334716796875, -0.07208251953125, -0.063446044921875, -0.067291259765625, -0.012725830078125, -0.031158447265625, -0.066314697265625, -0.07171630859375, -0.064361572265625, -0.035369873046875\}, \{0.0, -9.1552734375e-05, -0.000640869140625, -0.00152587890625, -0.001739501953125, 0.0018310546875, 0.01220703125, 0.018310546875, 0.01416015625, -0.002288818359375, -0.022125244140625, -0.017120361328125, 0.00592041015625, 0.01422119140625, 0.008209228515625, 0.004974365234375, 0.003326416015625, -0.002899169921875, -0.005950927734375, -0.009735107421875, -0.00970458984375, -0.025482177734375, -0.047027587890625, -0.036529541015625, -0.036712646484375, -0.010009765625, 0.100830078125, 0.0028076171875, 0.0911865234375, 0.03314208984375, 0.103912353515625, 0.08502197265625, 0.0938720703125, 0.110626220703125, 0.103912353515625, 0.1353759765625, 0.079437255859375, 0.11279296875, 0.05511474609375, 0.051605224609375, -0.014190673828125, 0.010833740234375, 0.0167236328125, 0.026123046875, 0.02105712890625, -0.023590087890625, 0.011566162109375, -0.000152587890625, 0.04278564453125, -0.026458740234375, -0.040374755859375, -0.0748291015625, -0.002105712890625, 0.042755126953125, -0.0018310546875, -0.006439208984375, 0.016204833984375, 0.12127685546875, 0.11505126953125, 0.157501220703125, 0.156585693359375, 0.158447265625, 0.072052001953125, 0.096710205078125, 0.124755859375, 0.029937744140625, 0.070770263671875, 0.031524658203125, 0.0401611328125, 0.1253662109375, 0.12713623046875, 0.08575439453125, 0.1097412109375, 0.06207275390625, 0.09075927734375, -0.0177001953125, -0.050506591796875, 0.028594970703125, -0.067230224609375, 0.01055908203125, 0.053802490234375, 0.066314697265625, 0.004425048828125, -0.0123291015625, 0.032135009765625, 0.12835693359375, 0.10223388671875, 0.04541015625, 0.0635986328125, 0.004974365234375, 0.00341796875, -0.10369873046875, -0.10589599609375, -0.112640380859375, -0.039581298828125, -0.03106689453125, 0.02069091796875, 0.042694091796875, 0.0430908203125, 0.1123046875, 0.05047607421875, 0.141387939453125, 0.051361083984375, 0.087066650390625, 0.04693603515625, 0.079559326171875, 0.0545654296875, -0.0701904296875, -0.03802490234375, -0.06207275390625, -0.028778076171875, -0.13446044921875, -0.030242919921875, -0.1181640625, -0.04278564453125, -0.031982421875, -0.079925537109375, 0.032257080078125, -0.07757568359375, -0.0716552734375, -0.07073974609375, -0.036407470703125, -0.0604248046875, 0.037261962890625, -0.022491455078125, 0.00628662109375, -0.081329345703125, -0.11474609375, -0.087158203125, -0.18218994140625, -0.034576416015625, -0.14044189453125, 0.008331298828125, -0.058441162109375, -0.046905517578125, -0.027130126953125, -0.099822998046875, -0.019500732421875, -0.1219482421875, -0.025665283203125, -0.107635498046875, -0.0196533203125, -0.052947998046875, -0.060943603515625, -0.01690673828125, -0.063446044921875, 0.036773681640625, 0.007537841796875, 0.06610107421875, 0.03216552734375, 0.041290283203125, 0.009368896484375, -0.005645751953125, -0.035064697265625, -0.0838623046875, -0.0692138671875, -0.139434814453125, -0.0965576171875, -0.08587646484375, -0.126922607421875, -0.074462890625, -0.0316162109375, -0.056976318359375, -0.020599365234375, -0.01666259765625, 0.025604248046875, 0.003936767578125, -0.01483154296875, 0.04937744140625, 0.003997802734375, 0.02178955078125, 0.00836181640625, -0.05841064453125, -0.03564453125, -0.02789306640625, -0.037811279296875, -0.00299072265625, -0.075042724609375, -0.034149169921875, 0.00665283203125, 0.005218505859375, -0.010986328125, -0.051361083984375, 0.018218994140625, -0.015777587890625, 0.04473876953125, 0.033294677734375, 0.053253173828125, 0.091888427734375, 0.09503173828125, 0.092254638671875, 0.02728271484375, 0.09124755859375, 0.072418212890625, 0.094940185546875, 0.060028076171875, 0.04278564453125, 0.035247802734375, 0.02435302734375, 0.027069091796875, 0.011322021484375, 0.044219970703125, 0.012725830078125, 0.048828125, 0.022491455078125, 0.047637939453125, 0.028106689453125, 0.01837158203125, 0.061126708984375, 0.042205810546875, 0.043121337890625, 0.06036376953125, 0.06475830078125, 0.007720947265625, 0.06964111328125, 0.048980712890625, 0.067779541015625, 0.08233642578125, 0.084686279296875, 0.11572265625, 0.0615234375, 0.067779541015625, 0.005889892578125, -0.002471923828125, -0.021087646484375, -0.054840087890625, -0.064422607421875, -0.043212890625, 0.010528564453125, -0.008087158203125, -0.049835205078125, -0.023406982421875, 0.02337646484375, 0.018341064453125, 0.048004150390625, 0.0247802734375, 0.0157470703125, 0.021392822265625, 0.048797607421875, 0.043548583984375, 0.014251708984375, 0.02874755859375, 0.00341796875, 0.026458740234375, 0.0264892578125, 0.037078857421875, 0.0360107421875, 0.02447509765625, 0.018218994140625, 0.007843017578125, 0.01116943359375, 0.00225830078125, 0.0277099609375, 0.002410888671875, -0.022308349609375, -0.0125732421875, -0.032623291015625, -0.06744384765625, -0.0618896484375, -0.05328369140625, -0.072906494140625, -0.071380615234375, -0.076019287109375, -0.093902587890625, -0.069091796875, -0.05694580078125, -0.079010009765625, -0.048797607421875, -0.04388427734375, -0.07293701171875, -0.070068359375, -0.055908203125, -0.03973388671875, -0.046234130859375, -0.065216064453125, -0.05877685546875, -0.047088623046875, -0.02880859375, -0.03314208984375, -0.0303955078125, -0.0255126953125, -0.025390625, -0.019287109375, -0.030303955078125, -0.007293701171875, -0.025604248046875, -0.03057861328125, -0.040863037109375, -0.0419921875, -0.04180908203125, -0.0413818359375, -0.018157958984375, -0.068939208984375, -0.08447265625, -0.09844970703125, -0.067962646484375, -0.079681396484375, -0.11541748046875, -0.09478759765625, -0.05859375, -0.08709716796875, -0.08575439453125, -0.01434326171875, -0.0758056640625, -0.0628662109375, -0.06768798828125, -0.074554443359375, -0.094818115234375, -0.0494384765625, 0.008758544921875, -0.031585693359375, -0.01263427734375, -0.028167724609375, -0.013214111328125, -0.05621337890625, -0.02020263671875, -0.022430419921875, -0.01068115234375, -0.03125, -0.06561279296875, -0.00787353515625, -0.028839111328125, 0.00799560546875, -0.0430908203125, 0.004302978515625, -0.018096923828125, 0.0106201171875, 0.022186279296875, -0.00128173828125, 0.083587646484375, 0.0543212890625, 0.110626220703125, 0.046173095703125, 0.070220947265625, 0.061370849609375, 0.066131591796875, 0.09063720703125, 0.039764404296875, 0.059173583984375, 0.03277587890625, 0.08856201171875, 0.07855224609375, 0.072845458984375, 0.0806884765625, 0.094085693359375, 0.03546142578125, 0.05865478515625, 0.08245849609375, 0.02001953125, 0.022491455078125, -0.016510009765625, 0.018646240234375, 0.0296630859375, 0.035980224609375, 0.040985107421875, 0.0677490234375, 0.01470947265625, 0.07342529296875, 0.094482421875, 0.02178955078125, 0.05194091796875, 0.001312255859375, 0.0589599609375, 0.025177001953125, 0.038818359375, 0.058135986328125, 0.0474853515625, 0.075164794921875, 0.02508544921875, 0.04376220703125, 0.051177978515625, 0.013824462890625, 0.001708984375, 0.027801513671875, 0.02581787109375, 0.04400634765625, 0.023956298828125, 0.029876708984375, 0.00372314453125, 0.004364013671875, -0.016937255859375, -0.00579833984375, 0.039276123046875, 0.037841796875, 0.054412841796875, -0.02734375, 0.00213623046875, -0.03363037109375, 0.001617431640625, -0.013580322265625, 0.0067138671875, 0.0126953125, -0.01678466796875, 0.01702880859375, -0.073944091796875, 0.00616455078125, -0.051055908203125, 0.043609619140625, -0.0029296875, 0.008056640625, 0.0367431640625, -0.0478515625, 0.042236328125, 0.00408935546875, 0.03997802734375, -0.064849853515625, 0.042205810546875, -0.02825927734375, -0.012298583984375, -0.017181396484375, -0.029571533203125, 0.05615234375, -0.11090087890625, -0.017364501953125, -0.079833984375, -0.00347900390625, -0.073211669921875, -0.060028076171875, -0.002288818359375, -0.04864501953125, -0.006378173828125, -0.100372314453125, -0.0252685546875, -0.05938720703125, -0.009735107421875, -0.056854248046875, -0.069183349609375, -0.069732666015625, -0.04888916015625, -0.060211181640625, -0.1201171875, -0.081085205078125, -0.1424560546875, -0.075592041015625, -0.13555908203125, -0.102020263671875, -0.17364501953125, -0.14166259765625, -0.0902099609375, -0.1646728515625, -0.067596435546875, -0.13037109375, -0.083465576171875, -0.07037353515625, -0.05718994140625, -0.03436279296875, -0.03662109375, -0.0535888671875, -0.0323486328125, -0.010162353515625, -0.074188232421875, -0.0296630859375, -0.039215087890625, -0.0382080078125, -0.034515380859375, -0.02789306640625, -0.0045166015625, -0.0484619140625, -0.0625, -0.00299072265625, -0.038848876953125, -0.0220947265625, -0.0201416015625, -0.028045654296875, 0.0057373046875, -0.060516357421875, 0.01171875, 0.007843017578125, 0.00872802734375, -0.014068603515625, -0.0230712890625, 0.00115966796875, -0.03009033203125, 0.01446533203125, -0.012451171875, 0.0135498046875, 0.024749755859375, 0.034698486328125, 0.019287109375, 0.03118896484375, 0.039306640625, 0.0341796875, 0.0401611328125, 0.01837158203125, 0.013397216796875, -0.025390625, 0.009002685546875, -0.0059814453125, 0.024810791015625, 0.0177001953125, -0.003021240234375, 0.00396728515625, 0.00775146484375, 0.047637939453125, 0.066558837890625, 0.082763671875, 0.041717529296875, 0.067840576171875, 0.036376953125, 0.061370849609375\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_44100::bitDepth = 16}}
\par
{\bkmkstart AAAAAAABNB}
{\bkmkend AAAAAAABNB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAABNC}
{\bkmkend AAAAAAABNC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAABND}
{\bkmkend AAAAAAABND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_16bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAABNE}
{\bkmkend AAAAAAABNE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_16bit_44100}
{\xe \v wav_stereo_16bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_16bit_44100::testBuffer = \{\{0.0, -9.1552734375e-05, -0.00054931640625, -0.001190185546875, -0.00128173828125, 0.001983642578125, 0.01055908203125, 0.014495849609375, 0.009765625, -0.004638671875, -0.02252197265625, -0.016510009765625, 0.00762939453125, 0.016693115234375, 0.00927734375, 0.003326416015625, 0.00128173828125, -0.00262451171875, -0.002960205078125, -0.0047607421875, -0.004425048828125, -0.020904541015625, -0.0406494140625, -0.0335693359375, -0.029541015625, -0.028472900390625, -0.021820068359375, -0.018157958984375, -0.0096435546875, 0.011688232421875, 0.035186767578125, 0.0457763671875, 0.045166015625, 0.0595703125, 0.073455810546875, 0.06561279296875, 0.071868896484375, 0.059326171875, 0.0093994140625, -0.032958984375, 0.01373291015625, -0.051055908203125, 0.033660888671875, 0.107086181640625, -0.042236328125, 0.0374755859375, -0.07269287109375, 0.036834716796875, 0.106475830078125, -0.051483154296875, 0.010162353515625, -0.06182861328125, 0.085662841796875, 0.104461669921875, 0.077178955078125, 0.05010986328125, 0.0333251953125, 0.138336181640625, 0.124298095703125, 0.1722412109375, 0.084716796875, 0.10321044921875, 0.0732421875, 0.063934326171875, 0.107696533203125, 0.063140869140625, 0.046356201171875, -0.013458251953125, 0.04345703125, 0.08270263671875, 0.109619140625, 0.06256103515625, 0.08746337890625, 0.10504150390625, 0.060577392578125, 0.035430908203125, -0.045196533203125, -0.02105712890625, -0.054901123046875, 0.001068115234375, 0.08062744140625, 0.044830322265625, 0.015380859375, 0.031585693359375, 0.10845947265625, 0.187469482421875, 0.161468505859375, 0.066253662109375, 0.061431884765625, 0.078826904296875, 0.073211669921875, -0.054290771484375, -0.057708740234375, -0.00146484375, -0.047943115234375, 0.0653076171875, 0.079925537109375, 0.001190185546875, 0.08831787109375, 0.05804443359375, 0.05072021484375, 0.14404296875, 0.022003173828125, 0.084014892578125, 0.122406005859375, 0.1221923828125, 0.154815673828125, 0.001495361328125, 0.0361328125, 0.013519287109375, 0.0263671875, 0.02099609375, -0.058013916015625, -0.041015625, -0.0712890625, -0.0126953125, 0.002899169921875, 0.00677490234375, -0.008544921875, -0.0557861328125, -0.06121826171875, -0.035369873046875, -0.00250244140625, 0.034912109375, 0.065673828125, 0.001373291015625, -0.031219482421875, -0.12091064453125, -0.159271240234375, -0.15771484375, -0.233642578125, -0.17938232421875, -0.133697509765625, -0.10784912109375, -0.122406005859375, -0.138427734375, -0.06597900390625, -0.088623046875, -0.07586669921875, -0.0291748046875, -0.079498291015625, -0.04180908203125, -0.024627685546875, -0.07989501953125, -0.000457763671875, 0.0233154296875, 0.02703857421875, 0.05950927734375, -0.001220703125, 0.000335693359375, -0.00848388671875, -0.030029296875, -0.0479736328125, -0.06280517578125, -0.078399658203125, -0.080474853515625, -0.001434326171875, -0.050018310546875, -0.086517333984375, -0.074462890625, -0.07928466796875, -0.04638671875, -0.088226318359375, -0.094512939453125, -0.093353271484375, -0.112884521484375, -0.0833740234375, -0.084808349609375, -0.093902587890625, -0.056304931640625, -0.0721435546875, -0.095947265625, -0.060394287109375, -0.07598876953125, -0.063140869140625, -0.03704833984375, -0.05523681640625, -0.052490234375, -0.055877685546875, -0.058929443359375, -0.055877685546875, -0.055999755859375, -0.063873291015625, -0.058563232421875, -0.03863525390625, -0.0389404296875, 0.011322021484375, 0.057708740234375, 0.072113037109375, 0.15484619140625, 0.141021728515625, 0.098785400390625, 0.16357421875, 0.13140869140625, 0.0897216796875, 0.082122802734375, 0.01055908203125, -0.009429931640625, -0.013092041015625, -0.03692626953125, -0.05224609375, -0.0833740234375, -0.05377197265625, -0.037689208984375, -0.065216064453125, -0.02923583984375, -0.040863037109375, -0.05072021484375, 0.026336669921875, 0.047149658203125, 0.03546142578125, 0.035003662109375, 0.06072998046875, 0.070892333984375, 0.039794921875, 0.064453125, 0.032562255859375, 0.016143798828125, 0.048583984375, 0.0120849609375, 0.0284423828125, 0.023223876953125, -0.013641357421875, 0.003326416015625, -0.006072998046875, -0.02593994140625, -0.017791748046875, 0.003631591796875, 0.000701904296875, -0.03082275390625, -0.019744873046875, -0.012237548828125, -0.021820068359375, 0.02117919921875, 0.037139892578125, -0.001495361328125, 0.01947021484375, 0.03375244140625, 0.0155029296875, 0.063751220703125, 0.052947998046875, 0.092254638671875, 0.12091064453125, 0.09771728515625, 0.142486572265625, 0.088104248046875, 0.10980224609375, 0.12286376953125, 0.092498779296875, 0.078521728515625, 0.04241943359375, 0.088592529296875, 0.10113525390625, 0.091949462890625, 0.093505859375, 0.086029052734375, 0.069000244140625, 0.098785400390625, 0.087310791015625, 0.082794189453125, 0.063873291015625, 0.038330078125, 0.047210693359375, 0.013427734375, 0.04443359375, 0.007080078125, 0.009979248046875, -0.01641845703125, -0.010986328125, -0.01239013671875, -0.031463623046875, 0.023834228515625, -0.0289306640625, 0.00579833984375, -0.046722412109375, -0.0147705078125, 0.018157958984375, 0.021514892578125, 0.02850341796875, -0.006866455078125, 0.051239013671875, -0.05078125, -0.0111083984375, -0.009368896484375, 0.01312255859375, 0.01922607421875, -0.013427734375, 0.0438232421875, -0.078399658203125, -0.049041748046875, -0.033538818359375, -0.045867919921875, -0.03564453125, -0.04864501953125, -0.064666748046875, -0.068359375, -0.071746826171875, -0.0931396484375, -0.0380859375, -0.08538818359375, -0.065704345703125, -0.082061767578125, -0.069549560546875, -0.054931640625, -0.1007080078125, -0.057586669921875, -0.1146240234375, -0.09619140625, -0.12591552734375, -0.116729736328125, -0.075653076171875, -0.114990234375, -0.05810546875, -0.1025390625, -0.073577880859375, -0.085601806640625, -0.13800048828125, -0.0701904296875, -0.14849853515625, -0.15142822265625, -0.131988525390625, -0.11383056640625, -0.11053466796875, -0.161376953125, -0.11029052734375, -0.135498046875, -0.116943359375, -0.084228515625, -0.019439697265625, -0.03717041015625, -0.04473876953125, 0.0430908203125, -0.01092529296875, 0.066375732421875, 0.055511474609375, 0.062225341796875, 0.06390380859375, -0.02301025390625, 0.037445068359375, 0.024993896484375, 0.06573486328125, 0.0367431640625, 0.006378173828125, 0.045318603515625, -0.033905029296875, 0.015960693359375, 0.010162353515625, -0.035064697265625, 0.039886474609375, -0.04119873046875, -0.00555419921875, 0.0078125, -0.04998779296875, 0.005584716796875, -0.042724609375, 0.0107421875, -0.001617431640625, 0.00384521484375, 0.037322998046875, -0.012786865234375, 0.012603759765625, -0.022430419921875, -0.017059326171875, -0.021392822265625, -0.047943115234375, -0.02191162109375, 0.014495849609375, -0.003997802734375, -0.014862060546875, -0.01690673828125, -0.008880615234375, 0.005340576171875, -0.02423095703125, 0.018096923828125, 0.00567626953125, -0.0106201171875, -0.00958251953125, -0.016845703125, 0.006622314453125, 0.000335693359375, 0.0013427734375, 0.068084716796875, 0.046722412109375, 0.05419921875, 0.14739990234375, 0.0347900390625, 0.083740234375, 0.0494384765625, 0.01873779296875, 0.119903564453125, -0.026214599609375, 0.084625244140625, 0.11651611328125, 0.040252685546875, 0.07470703125, 0.0350341796875, 0.080535888671875, 0.08270263671875, 0.053741455078125, 0.071441650390625, 0.12750244140625, 0.133880615234375, 0.13836669921875, 0.129852294921875, 0.0904541015625, 0.086181640625, 0.09222412109375, 0.074462890625, 0.0079345703125, 0.036224365234375, -0.00897216796875, -0.015411376953125, 0.017425537109375, -0.053070068359375, -0.012725830078125, -0.008758544921875, 0.009490966796875, 0.02520751953125, 0.035400390625, 0.061309814453125, 0.028106689453125, 0.064971923828125, 0.09173583984375, 0.064239501953125, 0.037445068359375, 0.071044921875, -0.00439453125, -0.029083251953125, 0.012908935546875, -0.022979736328125, 0.025634765625, -0.047943115234375, -0.017364501953125, 0.01617431640625, -0.0498046875, -0.022247314453125, -0.02459716796875, 0.016326904296875, -0.0391845703125, -0.05670166015625, -0.028350830078125, -0.029266357421875, -0.01300048828125, -0.062591552734375, -0.062042236328125, -0.054351806640625, -0.049468994140625, -0.054534912109375, -0.054779052734375, -0.028778076171875, -0.03436279296875, -0.0391845703125, -0.037445068359375, -0.062835693359375, -0.08154296875, -0.06982421875, -0.092529296875, -0.117095947265625, -0.108154296875, -0.1209716796875, -0.14031982421875, -0.1102294921875, -0.109161376953125, -0.09857177734375, -0.05816650390625, -0.067169189453125, -0.06890869140625, -0.06353759765625, -0.0526123046875, -0.036224365234375, -0.0203857421875, -0.011322021484375, -0.02117919921875, -0.03900146484375, -0.04412841796875, -0.032806396484375, -0.043609619140625, -0.033721923828125, -0.018157958984375, -0.041748046875, -0.017578125, 0.0009765625, -0.018310546875, -0.0189208984375, -0.06451416015625, -0.072662353515625, -0.055694580078125, -0.0848388671875, -0.07269287109375, -0.07049560546875, -0.099334716796875, -0.07208251953125, -0.063446044921875, -0.067291259765625, -0.012725830078125, -0.031158447265625, -0.066314697265625, -0.07171630859375, -0.064361572265625, -0.035369873046875\}, \{0.0, -9.1552734375e-05, -0.000640869140625, -0.00152587890625, -0.001739501953125, 0.0018310546875, 0.01220703125, 0.018310546875, 0.01416015625, -0.002288818359375, -0.022125244140625, -0.017120361328125, 0.00592041015625, 0.01422119140625, 0.008209228515625, 0.004974365234375, 0.003326416015625, -0.002899169921875, -0.005950927734375, -0.009735107421875, -0.00970458984375, -0.025482177734375, -0.047027587890625, -0.036529541015625, -0.036712646484375, -0.010009765625, 0.100830078125, 0.0028076171875, 0.0911865234375, 0.03314208984375, 0.103912353515625, 0.08502197265625, 0.0938720703125, 0.110626220703125, 0.103912353515625, 0.1353759765625, 0.079437255859375, 0.11279296875, 0.05511474609375, 0.051605224609375, -0.014190673828125, 0.010833740234375, 0.0167236328125, 0.026123046875, 0.02105712890625, -0.023590087890625, 0.011566162109375, -0.000152587890625, 0.04278564453125, -0.026458740234375, -0.040374755859375, -0.0748291015625, -0.002105712890625, 0.042755126953125, -0.0018310546875, -0.006439208984375, 0.016204833984375, 0.12127685546875, 0.11505126953125, 0.157501220703125, 0.156585693359375, 0.158447265625, 0.072052001953125, 0.096710205078125, 0.124755859375, 0.029937744140625, 0.070770263671875, 0.031524658203125, 0.0401611328125, 0.1253662109375, 0.12713623046875, 0.08575439453125, 0.1097412109375, 0.06207275390625, 0.09075927734375, -0.0177001953125, -0.050506591796875, 0.028594970703125, -0.067230224609375, 0.01055908203125, 0.053802490234375, 0.066314697265625, 0.004425048828125, -0.0123291015625, 0.032135009765625, 0.12835693359375, 0.10223388671875, 0.04541015625, 0.0635986328125, 0.004974365234375, 0.00341796875, -0.10369873046875, -0.10589599609375, -0.112640380859375, -0.039581298828125, -0.03106689453125, 0.02069091796875, 0.042694091796875, 0.0430908203125, 0.1123046875, 0.05047607421875, 0.141387939453125, 0.051361083984375, 0.087066650390625, 0.04693603515625, 0.079559326171875, 0.0545654296875, -0.0701904296875, -0.03802490234375, -0.06207275390625, -0.028778076171875, -0.13446044921875, -0.030242919921875, -0.1181640625, -0.04278564453125, -0.031982421875, -0.079925537109375, 0.032257080078125, -0.07757568359375, -0.0716552734375, -0.07073974609375, -0.036407470703125, -0.0604248046875, 0.037261962890625, -0.022491455078125, 0.00628662109375, -0.081329345703125, -0.11474609375, -0.087158203125, -0.18218994140625, -0.034576416015625, -0.14044189453125, 0.008331298828125, -0.058441162109375, -0.046905517578125, -0.027130126953125, -0.099822998046875, -0.019500732421875, -0.1219482421875, -0.025665283203125, -0.107635498046875, -0.0196533203125, -0.052947998046875, -0.060943603515625, -0.01690673828125, -0.063446044921875, 0.036773681640625, 0.007537841796875, 0.06610107421875, 0.03216552734375, 0.041290283203125, 0.009368896484375, -0.005645751953125, -0.035064697265625, -0.0838623046875, -0.0692138671875, -0.139434814453125, -0.0965576171875, -0.08587646484375, -0.126922607421875, -0.074462890625, -0.0316162109375, -0.056976318359375, -0.020599365234375, -0.01666259765625, 0.025604248046875, 0.003936767578125, -0.01483154296875, 0.04937744140625, 0.003997802734375, 0.02178955078125, 0.00836181640625, -0.05841064453125, -0.03564453125, -0.02789306640625, -0.037811279296875, -0.00299072265625, -0.075042724609375, -0.034149169921875, 0.00665283203125, 0.005218505859375, -0.010986328125, -0.051361083984375, 0.018218994140625, -0.015777587890625, 0.04473876953125, 0.033294677734375, 0.053253173828125, 0.091888427734375, 0.09503173828125, 0.092254638671875, 0.02728271484375, 0.09124755859375, 0.072418212890625, 0.094940185546875, 0.060028076171875, 0.04278564453125, 0.035247802734375, 0.02435302734375, 0.027069091796875, 0.011322021484375, 0.044219970703125, 0.012725830078125, 0.048828125, 0.022491455078125, 0.047637939453125, 0.028106689453125, 0.01837158203125, 0.061126708984375, 0.042205810546875, 0.043121337890625, 0.06036376953125, 0.06475830078125, 0.007720947265625, 0.06964111328125, 0.048980712890625, 0.067779541015625, 0.08233642578125, 0.084686279296875, 0.11572265625, 0.0615234375, 0.067779541015625, 0.005889892578125, -0.002471923828125, -0.021087646484375, -0.054840087890625, -0.064422607421875, -0.043212890625, 0.010528564453125, -0.008087158203125, -0.049835205078125, -0.023406982421875, 0.02337646484375, 0.018341064453125, 0.048004150390625, 0.0247802734375, 0.0157470703125, 0.021392822265625, 0.048797607421875, 0.043548583984375, 0.014251708984375, 0.02874755859375, 0.00341796875, 0.026458740234375, 0.0264892578125, 0.037078857421875, 0.0360107421875, 0.02447509765625, 0.018218994140625, 0.007843017578125, 0.01116943359375, 0.00225830078125, 0.0277099609375, 0.002410888671875, -0.022308349609375, -0.0125732421875, -0.032623291015625, -0.06744384765625, -0.0618896484375, -0.05328369140625, -0.072906494140625, -0.071380615234375, -0.076019287109375, -0.093902587890625, -0.069091796875, -0.05694580078125, -0.079010009765625, -0.048797607421875, -0.04388427734375, -0.07293701171875, -0.070068359375, -0.055908203125, -0.03973388671875, -0.046234130859375, -0.065216064453125, -0.05877685546875, -0.047088623046875, -0.02880859375, -0.03314208984375, -0.0303955078125, -0.0255126953125, -0.025390625, -0.019287109375, -0.030303955078125, -0.007293701171875, -0.025604248046875, -0.03057861328125, -0.040863037109375, -0.0419921875, -0.04180908203125, -0.0413818359375, -0.018157958984375, -0.068939208984375, -0.08447265625, -0.09844970703125, -0.067962646484375, -0.079681396484375, -0.11541748046875, -0.09478759765625, -0.05859375, -0.08709716796875, -0.08575439453125, -0.01434326171875, -0.0758056640625, -0.0628662109375, -0.06768798828125, -0.074554443359375, -0.094818115234375, -0.0494384765625, 0.008758544921875, -0.031585693359375, -0.01263427734375, -0.028167724609375, -0.013214111328125, -0.05621337890625, -0.02020263671875, -0.022430419921875, -0.01068115234375, -0.03125, -0.06561279296875, -0.00787353515625, -0.028839111328125, 0.00799560546875, -0.0430908203125, 0.004302978515625, -0.018096923828125, 0.0106201171875, 0.022186279296875, -0.00128173828125, 0.083587646484375, 0.0543212890625, 0.110626220703125, 0.046173095703125, 0.070220947265625, 0.061370849609375, 0.066131591796875, 0.09063720703125, 0.039764404296875, 0.059173583984375, 0.03277587890625, 0.08856201171875, 0.07855224609375, 0.072845458984375, 0.0806884765625, 0.094085693359375, 0.03546142578125, 0.05865478515625, 0.08245849609375, 0.02001953125, 0.022491455078125, -0.016510009765625, 0.018646240234375, 0.0296630859375, 0.035980224609375, 0.040985107421875, 0.0677490234375, 0.01470947265625, 0.07342529296875, 0.094482421875, 0.02178955078125, 0.05194091796875, 0.001312255859375, 0.0589599609375, 0.025177001953125, 0.038818359375, 0.058135986328125, 0.0474853515625, 0.075164794921875, 0.02508544921875, 0.04376220703125, 0.051177978515625, 0.013824462890625, 0.001708984375, 0.027801513671875, 0.02581787109375, 0.04400634765625, 0.023956298828125, 0.029876708984375, 0.00372314453125, 0.004364013671875, -0.016937255859375, -0.00579833984375, 0.039276123046875, 0.037841796875, 0.054412841796875, -0.02734375, 0.00213623046875, -0.03363037109375, 0.001617431640625, -0.013580322265625, 0.0067138671875, 0.0126953125, -0.01678466796875, 0.01702880859375, -0.073944091796875, 0.00616455078125, -0.051055908203125, 0.043609619140625, -0.0029296875, 0.008056640625, 0.0367431640625, -0.0478515625, 0.042236328125, 0.00408935546875, 0.03997802734375, -0.064849853515625, 0.042205810546875, -0.02825927734375, -0.012298583984375, -0.017181396484375, -0.029571533203125, 0.05615234375, -0.11090087890625, -0.017364501953125, -0.079833984375, -0.00347900390625, -0.073211669921875, -0.060028076171875, -0.002288818359375, -0.04864501953125, -0.006378173828125, -0.100372314453125, -0.0252685546875, -0.05938720703125, -0.009735107421875, -0.056854248046875, -0.069183349609375, -0.069732666015625, -0.04888916015625, -0.060211181640625, -0.1201171875, -0.081085205078125, -0.1424560546875, -0.075592041015625, -0.13555908203125, -0.102020263671875, -0.17364501953125, -0.14166259765625, -0.0902099609375, -0.1646728515625, -0.067596435546875, -0.13037109375, -0.083465576171875, -0.07037353515625, -0.05718994140625, -0.03436279296875, -0.03662109375, -0.0535888671875, -0.0323486328125, -0.010162353515625, -0.074188232421875, -0.0296630859375, -0.039215087890625, -0.0382080078125, -0.034515380859375, -0.02789306640625, -0.0045166015625, -0.0484619140625, -0.0625, -0.00299072265625, -0.038848876953125, -0.0220947265625, -0.0201416015625, -0.028045654296875, 0.0057373046875, -0.060516357421875, 0.01171875, 0.007843017578125, 0.00872802734375, -0.014068603515625, -0.0230712890625, 0.00115966796875, -0.03009033203125, 0.01446533203125, -0.012451171875, 0.0135498046875, 0.024749755859375, 0.034698486328125, 0.019287109375, 0.03118896484375, 0.039306640625, 0.0341796875, 0.0401611328125, 0.01837158203125, 0.013397216796875, -0.025390625, 0.009002685546875, -0.0059814453125, 0.024810791015625, 0.0177001953125, -0.003021240234375, 0.00396728515625, 0.00775146484375, 0.047637939453125, 0.066558837890625, 0.082763671875, 0.041717529296875, 0.067840576171875, 0.036376953125, 0.061370849609375\}\}}}
\par
{\bkmkstart AAAAAAABNF}
{\bkmkend AAAAAAABNF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_16bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000}
{\bkmkstart AAAAAAABNG}
{\bkmkend AAAAAAABNG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.009552001953125, 0.0015869140625, -0.0078125, 0.010101318359375, 0.015838623046875, -0.0091552734375, -0.03271484375, 0.012451171875, 0.024200439453125, -0.041015625, 0.00286865234375, 0.0247802734375, -0.011444091796875, -0.0018310546875, -0.053619384765625, -0.053497314453125, -0.00543212890625, -0.003875732421875, -0.02850341796875, -0.038543701171875, -0.0006103515625, -0.059417724609375, -0.076080322265625, -0.024627685546875, -0.008544921875, 0.067718505859375, 0.060882568359375, 0.0457763671875, 0.07611083984375, 0.05322265625, 0.03656005859375, 0.038330078125, 0.104095458984375, 0.115631103515625, 0.072357177734375, 0.028594970703125, -0.024505615234375, 0.027862548828125, 0.06280517578125, 0.042327880859375, -0.00823974609375, -0.079071044921875, -0.095672607421875, -0.14447021484375, -0.1536865234375, -0.06884765625, -0.00634765625, -0.017547607421875, -0.019195556640625, -0.017913818359375, -0.0867919921875, -0.058135986328125, 0.014312744140625, 0.002349853515625, -0.029998779296875, -0.01702880859375, 0.101715087890625, 0.124664306640625, 0.10516357421875, 0.167205810546875, 0.144317626953125, 0.11053466796875, 0.026947021484375, -0.04449462890625, -0.00347900390625, 0.0157470703125, 0.073699951171875, 0.08599853515625, 0.073974609375, 0.12091064453125, 0.08251953125, 0.03070068359375, 0.022186279296875, 0.03271484375, 0.043975830078125, 0.026641845703125, -0.00518798828125, -0.00439453125, 0.05633544921875, 0.064910888671875, 0.030487060546875, -0.00836181640625, -0.07415771484375, -0.077545166015625, -0.04986572265625, -0.04522705078125, -0.056732177734375, -0.085662841796875, -0.06280517578125, -0.021484375, -0.04278564453125, -0.101104736328125, -0.155517578125, -0.124176025390625, -0.035064697265625, -0.00750732421875, -0.07073974609375, -0.123687744140625, -0.000152587890625, 0.059356689453125, -0.06842041015625, -0.031280517578125, 0.10589599609375, 0.0687255859375, -0.110198974609375, -0.18499755859375, -0.11370849609375, -0.054718017578125, -0.004791259765625, -0.037841796875, -0.04937744140625, -0.0015869140625, -0.0987548828125, -0.160125732421875, -0.09619140625, 0.014801025390625, 0.071868896484375, 0.0018310546875, 0.035736083984375, 0.05902099609375, -0.062286376953125, -0.1287841796875, -0.130462646484375, -0.073516845703125, -0.072784423828125, -0.073394775390625, 0.0230712890625, 0.00372314453125, -0.04766845703125, -0.03338623046875, 0.0394287109375, 0.1282958984375, 0.09771728515625, 0.02508544921875, -0.09869384765625, -0.12109375, 0.075653076171875, 0.1900634765625, 0.168914794921875, 0.11016845703125, 0.03326416015625, -0.010040283203125, -0.02618408203125, -0.06951904296875, -0.10546875, -0.00164794921875, 0.1368408203125, 0.147186279296875, 0.119659423828125, 0.10919189453125, 0.049591064453125, -0.062286376953125, -0.0689697265625, 0.0321044921875, 0.073089599609375, 0.090545654296875, 0.085784912109375, 0.052978515625, 0.02081298828125, -0.023681640625, 0.031646728515625, 0.06005859375, 0.00341796875, 0.017913818359375, 0.0389404296875, 0.0357666015625, -0.0186767578125, -0.037506103515625, 0.08551025390625, 0.10662841796875, 0.029052734375, 0.04766845703125, 0.101593017578125, 0.19451904296875, 0.18646240234375, -0.0447998046875, -0.17230224609375, -0.128021240234375, -0.120513916015625, -0.140777587890625, -0.098114013671875, -0.01129150390625, 0.07672119140625, 0.165313720703125, 0.10693359375, 0.02984619140625, 0.060333251953125, 0.014678955078125, -0.044403076171875, -0.136688232421875, -0.201812744140625, -0.1259765625, -0.0650634765625, -0.00689697265625, 0.05084228515625, -0.000335693359375, -0.142791748046875, -0.166229248046875, -0.046112060546875, 0.0142822265625, 0.078857421875, 0.110107421875, -0.0355224609375, -0.19854736328125, -0.138946533203125, 0.069854736328125, 0.191558837890625, 0.25177001953125, 0.127105712890625, -0.2283935546875, -0.421295166015625, -0.373291015625, -0.28814697265625, -0.2061767578125, -0.085052490234375, -0.047576904296875, -0.176544189453125, -0.15478515625, 0.081573486328125, 0.2298583984375, 0.281982421875, 0.2686767578125, 0.080902099609375, -0.117950439453125, -0.122314453125, -0.0638427734375, -0.079559326171875, -0.1121826171875, -0.1019287109375, -0.10064697265625, -0.107330322265625, -0.05731201171875, 0.015625, 0.083038330078125, 0.101776123046875, 0.041229248046875, 0.0211181640625, 0.09796142578125, 0.126800537109375, 0.074920654296875, 0.05908203125, 0.073822021484375, 0.08807373046875, 0.06243896484375, 0.0130615234375, 0.03302001953125, 0.024993896484375, -0.07000732421875, -0.1373291015625, -0.197052001953125, -0.171844482421875, 0.026580810546875, 0.0965576171875, -0.010711669921875, -0.04388427734375, -0.0458984375, -0.06494140625, -0.001617431640625, 0.07379150390625, 0.03271484375, -0.004180908203125, -0.047210693359375, -0.12298583984375, 0.003326416015625, 0.147247314453125, 0.130767822265625, 0.1695556640625, 0.235626220703125, 0.239105224609375, 0.21185302734375, 0.1990966796875, 0.246368408203125, 0.300537109375, 0.3109130859375, 0.2421875, 0.082183837890625, -0.01959228515625, -9.1552734375e-05, 0.018768310546875, 0.01885986328125, 0.024169921875, 0.026458740234375, 0.056488037109375, 0.101837158203125, 0.10894775390625, 0.08154296875, 0.059356689453125, 0.060516357421875, 0.000244140625, -0.133453369140625, -0.200775146484375, -0.181915283203125, -0.08795166015625, -0.01397705078125, 0.0185546875, 0.091705322265625, 0.020263671875, -0.04205322265625, 0.059478759765625, 0.107666015625, 0.171142578125, 0.205352783203125, 0.18194580078125, 0.14117431640625, 0.02252197265625, 0.030181884765625, 0.070587158203125, -0.05975341796875, -0.18084716796875, -0.244293212890625, -0.320098876953125, -0.251617431640625, -0.054229736328125, -0.018463134765625, -0.125518798828125, -0.232025146484375, -0.279693603515625, -0.247772216796875, -0.1702880859375, -0.0498046875, -0.118682861328125, -0.30462646484375, -0.311309814453125, -0.362091064453125, -0.433197021484375, -0.312255859375, -0.1749267578125, -0.144317626953125, -0.169464111328125, -0.177154541015625, -0.135162353515625, -0.023284912109375, 0.10821533203125, 0.157501220703125, 0.149810791015625, 0.190277099609375, 0.241485595703125, 0.150634765625, 0.03094482421875, 0.0299072265625, 0.087677001953125, 0.152130126953125, 0.1353759765625, 0.104095458984375, 0.16558837890625, 0.257171630859375, 0.3074951171875, 0.286773681640625, 0.2109375, 0.028167724609375, -0.116851806640625, -0.14923095703125, -0.1326904296875, 0.029022216796875, 0.1065673828125, 0.118865966796875, 0.217376708984375, 0.22393798828125, 0.1204833984375, -0.079345703125, -0.078521728515625, 0.060028076171875, 0.05572509765625, 0.0697021484375, -0.0111083984375, -0.0888671875, -0.10675048828125, -0.156219482421875, -0.143646240234375, -0.13800048828125, -0.0911865234375, -0.071319580078125, -0.080596923828125, -0.10809326171875, -0.14617919921875, -0.1256103515625, -0.19732666015625, -0.169189453125, -0.058258056640625, -0.064849853515625, -0.05877685546875, -0.033721923828125, -0.016204833984375, -0.03680419921875, -0.02386474609375, 0.049957275390625, 0.08245849609375, 0.020355224609375, -0.069580078125, -0.035797119140625, 0.062042236328125, 0.1090087890625, 0.029937744140625, -0.01580810546875, 0.038177490234375, 0.0303955078125, 0.06951904296875, 0.162689208984375, 0.260223388671875, 0.225921630859375, 0.071990966796875, 0.049835205078125, 0.035736083984375, 0.056365966796875, 0.10784912109375, 0.12786865234375, 0.22332763671875, 0.242401123046875, 0.22943115234375, 0.189666748046875, 0.09967041015625, 0.12066650390625, 0.13116455078125, 0.126678466796875, 0.13763427734375, 0.124664306640625, 0.09564208984375, -0.025970458984375, -0.087005615234375, -0.0201416015625, -0.021209716796875, -0.00762939453125, 0.15771484375, 0.230712890625, 0.136444091796875, 0.096099853515625, 0.118072509765625, 0.1395263671875, 0.092926025390625, 0.045013427734375, 0.04302978515625, 0.0050048828125, 0.062896728515625, 0.131866455078125, 0.1470947265625, 0.175201416015625, 0.094818115234375, -0.000213623046875, -0.036224365234375, -0.027557373046875, 0.031707763671875, 0.07171630859375, 0.07440185546875, 0.0364990234375, 0.0478515625, 0.118438720703125, 0.095916748046875, 0.021484375, 0.025604248046875, 0.035308837890625, 0.030670166015625, 0.041656494140625, -0.0079345703125, -0.066253662109375, -0.07470703125, -0.02252197265625, 0.03021240234375, 0.0255126953125, 0.03350830078125, 0.030975341796875, -0.014495849609375, -0.082794189453125, -0.06915283203125, 0.013824462890625, 0.001068115234375, -0.0189208984375, 0.022308349609375, 0.068878173828125, 0.00653076171875, -0.11773681640625, -0.064849853515625, 0.031707763671875, 0.0272216796875, 0.01507568359375, 0.04547119140625, 0.060638427734375, -0.01031494140625, -0.01934814453125, 0.047210693359375, 0.038360595703125, 0.031097412109375, 0.05364990234375, 0.06817626953125, 0.103668212890625, 0.049224853515625, -0.03436279296875, -0.00872802734375, 0.000457763671875, 0.01220703125, 0.052032470703125, 0.028594970703125, 0.002655029296875, -0.0074462890625, 0.001617431640625, 0.03961181640625, 0.047576904296875, -0.0181884765625, -0.10174560546875, -0.114532470703125, -0.092498779296875\}, \{0.008148193359375, 0.001922607421875, -0.00592041015625, 0.006072998046875, 0.00433349609375, -0.02215576171875, -0.044464111328125, -0.01068115234375, -0.00244140625, -0.05548095703125, -0.0177001953125, 0.002105712890625, -0.02801513671875, -0.019866943359375, -0.06005859375, -0.055755615234375, -0.007293701171875, 0.004150390625, -0.007049560546875, -0.006103515625, 0.03515625, 0.00927734375, 0.02313232421875, 0.071685791015625, 0.07293701171875, 0.133270263671875, 0.122589111328125, 0.072662353515625, 0.051727294921875, 0.025482177734375, 0.02557373046875, 0.025848388671875, 0.067657470703125, 0.048370361328125, -0.04010009765625, -0.1241455078125, -0.1771240234375, -0.112274169921875, -0.071868896484375, -0.0731201171875, -0.041473388671875, -0.02825927734375, -0.0421142578125, -0.0849609375, -0.06732177734375, 0.01202392578125, 0.096893310546875, 0.162933349609375, 0.19573974609375, 0.169830322265625, 0.08270263671875, 0.079132080078125, 0.08416748046875, 0.044342041015625, 0.068115234375, 0.085540771484375, 0.0640869140625, -0.01177978515625, 0.028564453125, 0.186981201171875, 0.166229248046875, 0.0439453125, -0.076416015625, -0.101318359375, -0.02947998046875, -0.042877197265625, -0.049591064453125, -0.047698974609375, -0.059356689453125, -0.048614501953125, -0.070220947265625, -0.0772705078125, -0.10601806640625, -0.1336669921875, -0.081024169921875, -0.039794921875, -0.085968017578125, -0.111297607421875, -0.022979736328125, 0.026153564453125, -0.009002685546875, -0.07135009765625, -0.1192626953125, -0.05718994140625, -0.002593994140625, -0.051422119140625, -0.09393310546875, -0.060150146484375, 0.028045654296875, 0.038482666015625, -0.068939208984375, -0.1319580078125, -0.078521728515625, 0.01861572265625, 0.028228759765625, -0.05096435546875, -0.081024169921875, -0.034271240234375, 0.04180908203125, 0.0048828125, -0.035675048828125, 0.102386474609375, 0.15423583984375, 0.04058837890625, -0.082183837890625, -0.13922119140625, -0.101898193359375, -0.039794921875, 0.004150390625, 0.0057373046875, 0.03619384765625, 0.017059326171875, -0.09625244140625, -0.0316162109375, 0.0819091796875, 0.076812744140625, 0.0758056640625, 0.0992431640625, 0.17840576171875, 0.147674560546875, 0.015838623046875, -0.00518798828125, 0.00091552734375, 0.0130615234375, 0.01348876953125, 0.0511474609375, 0.1390380859375, 0.091339111328125, 0.037750244140625, 0.054046630859375, 0.1004638671875, 0.193756103515625, 0.20916748046875, 0.10687255859375, -0.081573486328125, -0.08984375, 0.1466064453125, 0.2391357421875, 0.17156982421875, 0.115692138671875, 0.055084228515625, -0.006439208984375, -0.039642333984375, -0.05389404296875, -0.0479736328125, 0.032135009765625, 0.111846923828125, 0.10772705078125, 0.109222412109375, 0.100799560546875, -0.0164794921875, -0.139556884765625, -0.110595703125, -0.024688720703125, 0.008819580078125, 0.064605712890625, 0.07708740234375, 0.0361328125, 0.00701904296875, -0.030426025390625, -0.00384521484375, -0.011688232421875, -0.064239501953125, -0.0157470703125, -0.005157470703125, -0.078369140625, -0.106658935546875, -0.021697998046875, 0.059661865234375, -0.04376220703125, -0.116790771484375, -0.00091552734375, 0.088134765625, 0.110504150390625, 0.01934814453125, -0.21356201171875, -0.297210693359375, -0.2626953125, -0.3038330078125, -0.307708740234375, -0.193145751953125, -0.068511962890625, -0.0133056640625, 0.0303955078125, 0.0323486328125, 0.024322509765625, -0.00604248046875, -0.1163330078125, -0.135650634765625, -0.16473388671875, -0.24261474609375, -0.186920166015625, -0.085418701171875, -0.001800537109375, 0.052032470703125, 0.00762939453125, -0.127838134765625, -0.16314697265625, -0.055511474609375, 0.00048828125, 0.037994384765625, 0.073211669921875, -0.026123046875, -0.193634033203125, -0.15155029296875, 0.107208251953125, 0.250732421875, 0.242431640625, 0.0946044921875, -0.209747314453125, -0.3900146484375, -0.3736572265625, -0.297637939453125, -0.20697021484375, -0.1026611328125, -0.073089599609375, -0.14495849609375, -0.07171630859375, 0.140960693359375, 0.254791259765625, 0.310791015625, 0.309478759765625, 0.125823974609375, -0.09967041015625, -0.154876708984375, -0.09375, -0.047088623046875, -0.038299560546875, -0.044403076171875, -0.0491943359375, -0.0184326171875, 0.06207275390625, 0.14190673828125, 0.19647216796875, 0.206024169921875, 0.18145751953125, 0.19793701171875, 0.243682861328125, 0.234130859375, 0.212921142578125, 0.238861083984375, 0.25628662109375, 0.242828369140625, 0.173248291015625, 0.101165771484375, 0.14263916015625, 0.14605712890625, 0.009429931640625, -0.079132080078125, -0.09832763671875, -0.061798095703125, 0.082000732421875, 0.115478515625, 0.014495849609375, -0.026336669921875, -0.050506591796875, -0.03863525390625, 0.067047119140625, 0.10845947265625, 0.00506591796875, -0.049774169921875, -0.06890869140625, -0.135406494140625, -0.038238525390625, 0.1025390625, 0.1170654296875, 0.16070556640625, 0.206512451171875, 0.203277587890625, 0.195220947265625, 0.18792724609375, 0.20587158203125, 0.22711181640625, 0.23492431640625, 0.186248779296875, 0.046478271484375, -0.036224365234375, -0.028594970703125, -0.061279296875, -0.0950927734375, -0.045501708984375, 0.02386474609375, -0.005126953125, -0.103363037109375, -0.1416015625, -0.13311767578125, -0.14404296875, -0.15185546875, -0.2060546875, -0.30322265625, -0.3173828125, -0.263214111328125, -0.174896240234375, -0.095062255859375, -0.032379150390625, 0.02777099609375, -0.065155029296875, -0.126953125, -0.029205322265625, 0.0206298828125, 0.083984375, 0.132049560546875, 0.11151123046875, 0.050811767578125, -0.045806884765625, -0.0123291015625, 0.00885009765625, -0.1513671875, -0.257781982421875, -0.274200439453125, -0.344573974609375, -0.299774169921875, -0.087860107421875, -0.03240966796875, -0.158233642578125, -0.252532958984375, -0.249725341796875, -0.2222900390625, -0.2042236328125, -0.11883544921875, -0.14630126953125, -0.286346435546875, -0.310394287109375, -0.365478515625, -0.419708251953125, -0.295867919921875, -0.157135009765625, -0.13360595703125, -0.15350341796875, -0.148468017578125, -0.10870361328125, 0.008697509765625, 0.1446533203125, 0.194793701171875, 0.2056884765625, 0.25213623046875, 0.27337646484375, 0.174560546875, 0.08740234375, 0.09844970703125, 0.140380859375, 0.2135009765625, 0.213104248046875, 0.1611328125, 0.2122802734375, 0.322479248046875, 0.373016357421875, 0.3465576171875, 0.2718505859375, 0.115020751953125, 0.017364501953125, -0.00787353515625, -0.02764892578125, 0.118408203125, 0.221923828125, 0.2227783203125, 0.286041259765625, 0.293548583984375, 0.169830322265625, -0.040191650390625, -0.00457763671875, 0.164337158203125, 0.141204833984375, 0.104949951171875, 0.0435791015625, 0.00958251953125, -0.01446533203125, -0.09429931640625, -0.108062744140625, -0.104888916015625, -0.049468994140625, 0.00018310546875, -0.000213623046875, -0.058685302734375, -0.11651611328125, -0.1019287109375, -0.1669921875, -0.1356201171875, -0.015472412109375, -0.01983642578125, -0.039031982421875, -0.031494140625, -0.02117919921875, -0.015869140625, 0.021697998046875, 0.054595947265625, 0.031341552734375, -0.025360107421875, -0.067657470703125, -0.0250244140625, 0.040008544921875, 0.06512451171875, -0.0074462890625, -0.04791259765625, 0.001983642578125, 0.005706787109375, 0.038726806640625, 0.09051513671875, 0.137451171875, 0.093780517578125, -0.027069091796875, -0.0577392578125, -0.11834716796875, -0.1190185546875, -0.043060302734375, 0.004791259765625, 0.092071533203125, 0.105804443359375, 0.08160400390625, 0.017333984375, -0.07000732421875, -0.02978515625, -0.00506591796875, -0.00775146484375, 0.013458251953125, 0.009552001953125, -0.031005859375, -0.133544921875, -0.16131591796875, -0.109893798828125, -0.10784912109375, -0.036376953125, 0.141265869140625, 0.170135498046875, 0.07574462890625, 0.068023681640625, 0.074462890625, 0.065277099609375, 0.037109375, 0.016998291015625, 0.0191650390625, -0.010711669921875, 0.069244384765625, 0.1734619140625, 0.195892333984375, 0.193267822265625, 0.099273681640625, 0.0146484375, -0.01519775390625, 0.00140380859375, 0.0791015625, 0.10394287109375, 0.074676513671875, 0.063232421875, 0.113067626953125, 0.16607666015625, 0.1220703125, 0.074951171875, 0.105438232421875, 0.104248046875, 0.08135986328125, 0.098388671875, 0.071502685546875, 0.014373779296875, 0.00823974609375, 0.07562255859375, 0.13818359375, 0.1527099609375, 0.175994873046875, 0.178009033203125, 0.13592529296875, 0.07659912109375, 0.091644287109375, 0.155487060546875, 0.1455078125, 0.135498046875, 0.154815673828125, 0.194549560546875, 0.1611328125, 0.043212890625, 0.06201171875, 0.146514892578125, 0.1588134765625, 0.143096923828125, 0.1402587890625, 0.134002685546875, 0.066009521484375, 0.044830322265625, 0.078582763671875, 0.0577392578125, 0.063568115234375, 0.0948486328125, 0.10430908203125, 0.11895751953125, 0.05084228515625, -0.040374755859375, -0.036468505859375, -0.0318603515625, -0.008636474609375, 0.033355712890625, 0.002685546875, -0.042816162109375, -0.0450439453125, -0.020477294921875, -0.02435302734375, -0.06036376953125, -0.101470947265625, -0.1456298828125, -0.156219482421875, -0.149017333984375\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_48000::bitDepth = 16}}
\par
{\bkmkstart AAAAAAABNH}
{\bkmkend AAAAAAABNH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAABNI}
{\bkmkend AAAAAAABNI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_16bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAABNJ}
{\bkmkend AAAAAAABNJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_16bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABNK}
{\bkmkend AAAAAAABNK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_16bit_48000}
{\xe \v wav_stereo_16bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_16bit_48000::testBuffer = \{\{0.009552001953125, 0.0015869140625, -0.0078125, 0.010101318359375, 0.015838623046875, -0.0091552734375, -0.03271484375, 0.012451171875, 0.024200439453125, -0.041015625, 0.00286865234375, 0.0247802734375, -0.011444091796875, -0.0018310546875, -0.053619384765625, -0.053497314453125, -0.00543212890625, -0.003875732421875, -0.02850341796875, -0.038543701171875, -0.0006103515625, -0.059417724609375, -0.076080322265625, -0.024627685546875, -0.008544921875, 0.067718505859375, 0.060882568359375, 0.0457763671875, 0.07611083984375, 0.05322265625, 0.03656005859375, 0.038330078125, 0.104095458984375, 0.115631103515625, 0.072357177734375, 0.028594970703125, -0.024505615234375, 0.027862548828125, 0.06280517578125, 0.042327880859375, -0.00823974609375, -0.079071044921875, -0.095672607421875, -0.14447021484375, -0.1536865234375, -0.06884765625, -0.00634765625, -0.017547607421875, -0.019195556640625, -0.017913818359375, -0.0867919921875, -0.058135986328125, 0.014312744140625, 0.002349853515625, -0.029998779296875, -0.01702880859375, 0.101715087890625, 0.124664306640625, 0.10516357421875, 0.167205810546875, 0.144317626953125, 0.11053466796875, 0.026947021484375, -0.04449462890625, -0.00347900390625, 0.0157470703125, 0.073699951171875, 0.08599853515625, 0.073974609375, 0.12091064453125, 0.08251953125, 0.03070068359375, 0.022186279296875, 0.03271484375, 0.043975830078125, 0.026641845703125, -0.00518798828125, -0.00439453125, 0.05633544921875, 0.064910888671875, 0.030487060546875, -0.00836181640625, -0.07415771484375, -0.077545166015625, -0.04986572265625, -0.04522705078125, -0.056732177734375, -0.085662841796875, -0.06280517578125, -0.021484375, -0.04278564453125, -0.101104736328125, -0.155517578125, -0.124176025390625, -0.035064697265625, -0.00750732421875, -0.07073974609375, -0.123687744140625, -0.000152587890625, 0.059356689453125, -0.06842041015625, -0.031280517578125, 0.10589599609375, 0.0687255859375, -0.110198974609375, -0.18499755859375, -0.11370849609375, -0.054718017578125, -0.004791259765625, -0.037841796875, -0.04937744140625, -0.0015869140625, -0.0987548828125, -0.160125732421875, -0.09619140625, 0.014801025390625, 0.071868896484375, 0.0018310546875, 0.035736083984375, 0.05902099609375, -0.062286376953125, -0.1287841796875, -0.130462646484375, -0.073516845703125, -0.072784423828125, -0.073394775390625, 0.0230712890625, 0.00372314453125, -0.04766845703125, -0.03338623046875, 0.0394287109375, 0.1282958984375, 0.09771728515625, 0.02508544921875, -0.09869384765625, -0.12109375, 0.075653076171875, 0.1900634765625, 0.168914794921875, 0.11016845703125, 0.03326416015625, -0.010040283203125, -0.02618408203125, -0.06951904296875, -0.10546875, -0.00164794921875, 0.1368408203125, 0.147186279296875, 0.119659423828125, 0.10919189453125, 0.049591064453125, -0.062286376953125, -0.0689697265625, 0.0321044921875, 0.073089599609375, 0.090545654296875, 0.085784912109375, 0.052978515625, 0.02081298828125, -0.023681640625, 0.031646728515625, 0.06005859375, 0.00341796875, 0.017913818359375, 0.0389404296875, 0.0357666015625, -0.0186767578125, -0.037506103515625, 0.08551025390625, 0.10662841796875, 0.029052734375, 0.04766845703125, 0.101593017578125, 0.19451904296875, 0.18646240234375, -0.0447998046875, -0.17230224609375, -0.128021240234375, -0.120513916015625, -0.140777587890625, -0.098114013671875, -0.01129150390625, 0.07672119140625, 0.165313720703125, 0.10693359375, 0.02984619140625, 0.060333251953125, 0.014678955078125, -0.044403076171875, -0.136688232421875, -0.201812744140625, -0.1259765625, -0.0650634765625, -0.00689697265625, 0.05084228515625, -0.000335693359375, -0.142791748046875, -0.166229248046875, -0.046112060546875, 0.0142822265625, 0.078857421875, 0.110107421875, -0.0355224609375, -0.19854736328125, -0.138946533203125, 0.069854736328125, 0.191558837890625, 0.25177001953125, 0.127105712890625, -0.2283935546875, -0.421295166015625, -0.373291015625, -0.28814697265625, -0.2061767578125, -0.085052490234375, -0.047576904296875, -0.176544189453125, -0.15478515625, 0.081573486328125, 0.2298583984375, 0.281982421875, 0.2686767578125, 0.080902099609375, -0.117950439453125, -0.122314453125, -0.0638427734375, -0.079559326171875, -0.1121826171875, -0.1019287109375, -0.10064697265625, -0.107330322265625, -0.05731201171875, 0.015625, 0.083038330078125, 0.101776123046875, 0.041229248046875, 0.0211181640625, 0.09796142578125, 0.126800537109375, 0.074920654296875, 0.05908203125, 0.073822021484375, 0.08807373046875, 0.06243896484375, 0.0130615234375, 0.03302001953125, 0.024993896484375, -0.07000732421875, -0.1373291015625, -0.197052001953125, -0.171844482421875, 0.026580810546875, 0.0965576171875, -0.010711669921875, -0.04388427734375, -0.0458984375, -0.06494140625, -0.001617431640625, 0.07379150390625, 0.03271484375, -0.004180908203125, -0.047210693359375, -0.12298583984375, 0.003326416015625, 0.147247314453125, 0.130767822265625, 0.1695556640625, 0.235626220703125, 0.239105224609375, 0.21185302734375, 0.1990966796875, 0.246368408203125, 0.300537109375, 0.3109130859375, 0.2421875, 0.082183837890625, -0.01959228515625, -9.1552734375e-05, 0.018768310546875, 0.01885986328125, 0.024169921875, 0.026458740234375, 0.056488037109375, 0.101837158203125, 0.10894775390625, 0.08154296875, 0.059356689453125, 0.060516357421875, 0.000244140625, -0.133453369140625, -0.200775146484375, -0.181915283203125, -0.08795166015625, -0.01397705078125, 0.0185546875, 0.091705322265625, 0.020263671875, -0.04205322265625, 0.059478759765625, 0.107666015625, 0.171142578125, 0.205352783203125, 0.18194580078125, 0.14117431640625, 0.02252197265625, 0.030181884765625, 0.070587158203125, -0.05975341796875, -0.18084716796875, -0.244293212890625, -0.320098876953125, -0.251617431640625, -0.054229736328125, -0.018463134765625, -0.125518798828125, -0.232025146484375, -0.279693603515625, -0.247772216796875, -0.1702880859375, -0.0498046875, -0.118682861328125, -0.30462646484375, -0.311309814453125, -0.362091064453125, -0.433197021484375, -0.312255859375, -0.1749267578125, -0.144317626953125, -0.169464111328125, -0.177154541015625, -0.135162353515625, -0.023284912109375, 0.10821533203125, 0.157501220703125, 0.149810791015625, 0.190277099609375, 0.241485595703125, 0.150634765625, 0.03094482421875, 0.0299072265625, 0.087677001953125, 0.152130126953125, 0.1353759765625, 0.104095458984375, 0.16558837890625, 0.257171630859375, 0.3074951171875, 0.286773681640625, 0.2109375, 0.028167724609375, -0.116851806640625, -0.14923095703125, -0.1326904296875, 0.029022216796875, 0.1065673828125, 0.118865966796875, 0.217376708984375, 0.22393798828125, 0.1204833984375, -0.079345703125, -0.078521728515625, 0.060028076171875, 0.05572509765625, 0.0697021484375, -0.0111083984375, -0.0888671875, -0.10675048828125, -0.156219482421875, -0.143646240234375, -0.13800048828125, -0.0911865234375, -0.071319580078125, -0.080596923828125, -0.10809326171875, -0.14617919921875, -0.1256103515625, -0.19732666015625, -0.169189453125, -0.058258056640625, -0.064849853515625, -0.05877685546875, -0.033721923828125, -0.016204833984375, -0.03680419921875, -0.02386474609375, 0.049957275390625, 0.08245849609375, 0.020355224609375, -0.069580078125, -0.035797119140625, 0.062042236328125, 0.1090087890625, 0.029937744140625, -0.01580810546875, 0.038177490234375, 0.0303955078125, 0.06951904296875, 0.162689208984375, 0.260223388671875, 0.225921630859375, 0.071990966796875, 0.049835205078125, 0.035736083984375, 0.056365966796875, 0.10784912109375, 0.12786865234375, 0.22332763671875, 0.242401123046875, 0.22943115234375, 0.189666748046875, 0.09967041015625, 0.12066650390625, 0.13116455078125, 0.126678466796875, 0.13763427734375, 0.124664306640625, 0.09564208984375, -0.025970458984375, -0.087005615234375, -0.0201416015625, -0.021209716796875, -0.00762939453125, 0.15771484375, 0.230712890625, 0.136444091796875, 0.096099853515625, 0.118072509765625, 0.1395263671875, 0.092926025390625, 0.045013427734375, 0.04302978515625, 0.0050048828125, 0.062896728515625, 0.131866455078125, 0.1470947265625, 0.175201416015625, 0.094818115234375, -0.000213623046875, -0.036224365234375, -0.027557373046875, 0.031707763671875, 0.07171630859375, 0.07440185546875, 0.0364990234375, 0.0478515625, 0.118438720703125, 0.095916748046875, 0.021484375, 0.025604248046875, 0.035308837890625, 0.030670166015625, 0.041656494140625, -0.0079345703125, -0.066253662109375, -0.07470703125, -0.02252197265625, 0.03021240234375, 0.0255126953125, 0.03350830078125, 0.030975341796875, -0.014495849609375, -0.082794189453125, -0.06915283203125, 0.013824462890625, 0.001068115234375, -0.0189208984375, 0.022308349609375, 0.068878173828125, 0.00653076171875, -0.11773681640625, -0.064849853515625, 0.031707763671875, 0.0272216796875, 0.01507568359375, 0.04547119140625, 0.060638427734375, -0.01031494140625, -0.01934814453125, 0.047210693359375, 0.038360595703125, 0.031097412109375, 0.05364990234375, 0.06817626953125, 0.103668212890625, 0.049224853515625, -0.03436279296875, -0.00872802734375, 0.000457763671875, 0.01220703125, 0.052032470703125, 0.028594970703125, 0.002655029296875, -0.0074462890625, 0.001617431640625, 0.03961181640625, 0.047576904296875, -0.0181884765625, -0.10174560546875, -0.114532470703125, -0.092498779296875\}, \{0.008148193359375, 0.001922607421875, -0.00592041015625, 0.006072998046875, 0.00433349609375, -0.02215576171875, -0.044464111328125, -0.01068115234375, -0.00244140625, -0.05548095703125, -0.0177001953125, 0.002105712890625, -0.02801513671875, -0.019866943359375, -0.06005859375, -0.055755615234375, -0.007293701171875, 0.004150390625, -0.007049560546875, -0.006103515625, 0.03515625, 0.00927734375, 0.02313232421875, 0.071685791015625, 0.07293701171875, 0.133270263671875, 0.122589111328125, 0.072662353515625, 0.051727294921875, 0.025482177734375, 0.02557373046875, 0.025848388671875, 0.067657470703125, 0.048370361328125, -0.04010009765625, -0.1241455078125, -0.1771240234375, -0.112274169921875, -0.071868896484375, -0.0731201171875, -0.041473388671875, -0.02825927734375, -0.0421142578125, -0.0849609375, -0.06732177734375, 0.01202392578125, 0.096893310546875, 0.162933349609375, 0.19573974609375, 0.169830322265625, 0.08270263671875, 0.079132080078125, 0.08416748046875, 0.044342041015625, 0.068115234375, 0.085540771484375, 0.0640869140625, -0.01177978515625, 0.028564453125, 0.186981201171875, 0.166229248046875, 0.0439453125, -0.076416015625, -0.101318359375, -0.02947998046875, -0.042877197265625, -0.049591064453125, -0.047698974609375, -0.059356689453125, -0.048614501953125, -0.070220947265625, -0.0772705078125, -0.10601806640625, -0.1336669921875, -0.081024169921875, -0.039794921875, -0.085968017578125, -0.111297607421875, -0.022979736328125, 0.026153564453125, -0.009002685546875, -0.07135009765625, -0.1192626953125, -0.05718994140625, -0.002593994140625, -0.051422119140625, -0.09393310546875, -0.060150146484375, 0.028045654296875, 0.038482666015625, -0.068939208984375, -0.1319580078125, -0.078521728515625, 0.01861572265625, 0.028228759765625, -0.05096435546875, -0.081024169921875, -0.034271240234375, 0.04180908203125, 0.0048828125, -0.035675048828125, 0.102386474609375, 0.15423583984375, 0.04058837890625, -0.082183837890625, -0.13922119140625, -0.101898193359375, -0.039794921875, 0.004150390625, 0.0057373046875, 0.03619384765625, 0.017059326171875, -0.09625244140625, -0.0316162109375, 0.0819091796875, 0.076812744140625, 0.0758056640625, 0.0992431640625, 0.17840576171875, 0.147674560546875, 0.015838623046875, -0.00518798828125, 0.00091552734375, 0.0130615234375, 0.01348876953125, 0.0511474609375, 0.1390380859375, 0.091339111328125, 0.037750244140625, 0.054046630859375, 0.1004638671875, 0.193756103515625, 0.20916748046875, 0.10687255859375, -0.081573486328125, -0.08984375, 0.1466064453125, 0.2391357421875, 0.17156982421875, 0.115692138671875, 0.055084228515625, -0.006439208984375, -0.039642333984375, -0.05389404296875, -0.0479736328125, 0.032135009765625, 0.111846923828125, 0.10772705078125, 0.109222412109375, 0.100799560546875, -0.0164794921875, -0.139556884765625, -0.110595703125, -0.024688720703125, 0.008819580078125, 0.064605712890625, 0.07708740234375, 0.0361328125, 0.00701904296875, -0.030426025390625, -0.00384521484375, -0.011688232421875, -0.064239501953125, -0.0157470703125, -0.005157470703125, -0.078369140625, -0.106658935546875, -0.021697998046875, 0.059661865234375, -0.04376220703125, -0.116790771484375, -0.00091552734375, 0.088134765625, 0.110504150390625, 0.01934814453125, -0.21356201171875, -0.297210693359375, -0.2626953125, -0.3038330078125, -0.307708740234375, -0.193145751953125, -0.068511962890625, -0.0133056640625, 0.0303955078125, 0.0323486328125, 0.024322509765625, -0.00604248046875, -0.1163330078125, -0.135650634765625, -0.16473388671875, -0.24261474609375, -0.186920166015625, -0.085418701171875, -0.001800537109375, 0.052032470703125, 0.00762939453125, -0.127838134765625, -0.16314697265625, -0.055511474609375, 0.00048828125, 0.037994384765625, 0.073211669921875, -0.026123046875, -0.193634033203125, -0.15155029296875, 0.107208251953125, 0.250732421875, 0.242431640625, 0.0946044921875, -0.209747314453125, -0.3900146484375, -0.3736572265625, -0.297637939453125, -0.20697021484375, -0.1026611328125, -0.073089599609375, -0.14495849609375, -0.07171630859375, 0.140960693359375, 0.254791259765625, 0.310791015625, 0.309478759765625, 0.125823974609375, -0.09967041015625, -0.154876708984375, -0.09375, -0.047088623046875, -0.038299560546875, -0.044403076171875, -0.0491943359375, -0.0184326171875, 0.06207275390625, 0.14190673828125, 0.19647216796875, 0.206024169921875, 0.18145751953125, 0.19793701171875, 0.243682861328125, 0.234130859375, 0.212921142578125, 0.238861083984375, 0.25628662109375, 0.242828369140625, 0.173248291015625, 0.101165771484375, 0.14263916015625, 0.14605712890625, 0.009429931640625, -0.079132080078125, -0.09832763671875, -0.061798095703125, 0.082000732421875, 0.115478515625, 0.014495849609375, -0.026336669921875, -0.050506591796875, -0.03863525390625, 0.067047119140625, 0.10845947265625, 0.00506591796875, -0.049774169921875, -0.06890869140625, -0.135406494140625, -0.038238525390625, 0.1025390625, 0.1170654296875, 0.16070556640625, 0.206512451171875, 0.203277587890625, 0.195220947265625, 0.18792724609375, 0.20587158203125, 0.22711181640625, 0.23492431640625, 0.186248779296875, 0.046478271484375, -0.036224365234375, -0.028594970703125, -0.061279296875, -0.0950927734375, -0.045501708984375, 0.02386474609375, -0.005126953125, -0.103363037109375, -0.1416015625, -0.13311767578125, -0.14404296875, -0.15185546875, -0.2060546875, -0.30322265625, -0.3173828125, -0.263214111328125, -0.174896240234375, -0.095062255859375, -0.032379150390625, 0.02777099609375, -0.065155029296875, -0.126953125, -0.029205322265625, 0.0206298828125, 0.083984375, 0.132049560546875, 0.11151123046875, 0.050811767578125, -0.045806884765625, -0.0123291015625, 0.00885009765625, -0.1513671875, -0.257781982421875, -0.274200439453125, -0.344573974609375, -0.299774169921875, -0.087860107421875, -0.03240966796875, -0.158233642578125, -0.252532958984375, -0.249725341796875, -0.2222900390625, -0.2042236328125, -0.11883544921875, -0.14630126953125, -0.286346435546875, -0.310394287109375, -0.365478515625, -0.419708251953125, -0.295867919921875, -0.157135009765625, -0.13360595703125, -0.15350341796875, -0.148468017578125, -0.10870361328125, 0.008697509765625, 0.1446533203125, 0.194793701171875, 0.2056884765625, 0.25213623046875, 0.27337646484375, 0.174560546875, 0.08740234375, 0.09844970703125, 0.140380859375, 0.2135009765625, 0.213104248046875, 0.1611328125, 0.2122802734375, 0.322479248046875, 0.373016357421875, 0.3465576171875, 0.2718505859375, 0.115020751953125, 0.017364501953125, -0.00787353515625, -0.02764892578125, 0.118408203125, 0.221923828125, 0.2227783203125, 0.286041259765625, 0.293548583984375, 0.169830322265625, -0.040191650390625, -0.00457763671875, 0.164337158203125, 0.141204833984375, 0.104949951171875, 0.0435791015625, 0.00958251953125, -0.01446533203125, -0.09429931640625, -0.108062744140625, -0.104888916015625, -0.049468994140625, 0.00018310546875, -0.000213623046875, -0.058685302734375, -0.11651611328125, -0.1019287109375, -0.1669921875, -0.1356201171875, -0.015472412109375, -0.01983642578125, -0.039031982421875, -0.031494140625, -0.02117919921875, -0.015869140625, 0.021697998046875, 0.054595947265625, 0.031341552734375, -0.025360107421875, -0.067657470703125, -0.0250244140625, 0.040008544921875, 0.06512451171875, -0.0074462890625, -0.04791259765625, 0.001983642578125, 0.005706787109375, 0.038726806640625, 0.09051513671875, 0.137451171875, 0.093780517578125, -0.027069091796875, -0.0577392578125, -0.11834716796875, -0.1190185546875, -0.043060302734375, 0.004791259765625, 0.092071533203125, 0.105804443359375, 0.08160400390625, 0.017333984375, -0.07000732421875, -0.02978515625, -0.00506591796875, -0.00775146484375, 0.013458251953125, 0.009552001953125, -0.031005859375, -0.133544921875, -0.16131591796875, -0.109893798828125, -0.10784912109375, -0.036376953125, 0.141265869140625, 0.170135498046875, 0.07574462890625, 0.068023681640625, 0.074462890625, 0.065277099609375, 0.037109375, 0.016998291015625, 0.0191650390625, -0.010711669921875, 0.069244384765625, 0.1734619140625, 0.195892333984375, 0.193267822265625, 0.099273681640625, 0.0146484375, -0.01519775390625, 0.00140380859375, 0.0791015625, 0.10394287109375, 0.074676513671875, 0.063232421875, 0.113067626953125, 0.16607666015625, 0.1220703125, 0.074951171875, 0.105438232421875, 0.104248046875, 0.08135986328125, 0.098388671875, 0.071502685546875, 0.014373779296875, 0.00823974609375, 0.07562255859375, 0.13818359375, 0.1527099609375, 0.175994873046875, 0.178009033203125, 0.13592529296875, 0.07659912109375, 0.091644287109375, 0.155487060546875, 0.1455078125, 0.135498046875, 0.154815673828125, 0.194549560546875, 0.1611328125, 0.043212890625, 0.06201171875, 0.146514892578125, 0.1588134765625, 0.143096923828125, 0.1402587890625, 0.134002685546875, 0.066009521484375, 0.044830322265625, 0.078582763671875, 0.0577392578125, 0.063568115234375, 0.0948486328125, 0.10430908203125, 0.11895751953125, 0.05084228515625, -0.040374755859375, -0.036468505859375, -0.0318603515625, -0.008636474609375, 0.033355712890625, 0.002685546875, -0.042816162109375, -0.0450439453125, -0.020477294921875, -0.02435302734375, -0.06036376953125, -0.101470947265625, -0.1456298828125, -0.156219482421875, -0.149017333984375\}\}}}
\par
{\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_24bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100}
{\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{7.772445678710938e-05, 0.0004398822784423828, 0.006743192672729492, 0.01638209819793701, 0.015148758888244629, 0.003415822982788086, -0.012502312660217285, -0.02174532413482666, -0.022707462310791016, -0.01782703399658203, -0.000893712043762207, 0.010785818099975586, 0.007664799690246582, -0.0017873048782348633, -0.006292223930358887, 0.0017839670181274414, 0.03135275840759277, 0.02077305316925049, -0.022290825843811035, 0.00968170166015625, -0.0037343502044677734, -0.04702770709991455, 0.014231562614440918, 0.025177717208862305, -0.002476334571838379, 0.0208892822265625, -0.010953903198242188, -0.03929746150970459, -0.009381890296936035, -0.016600728034973145, -0.053926944732666016, -0.0511249303817749, 0.012263298034667969, 0.10370278358459473, 0.10517358779907227, 0.06131696701049805, 0.10799956321716309, 0.026469826698303223, -0.08833801746368408, -0.04072582721710205, -0.010347366333007812, -0.008848786354064941, 0.07863211631774902, -0.011377096176147461, -0.08304083347320557, 0.14268147945404053, 0.019171833992004395, -0.02190697193145752, 0.024938583374023438, -0.05969548225402832, 0.05296933650970459, -0.02652561664581299, 0.04038584232330322, -0.0020700693130493164, 0.03850662708282471, 0.20856308937072754, 0.09956228733062744, 0.17125451564788818, 0.1496039628982544, 0.13909387588500977, 0.14089739322662354, 0.0962514877319336, 0.04986727237701416, 0.02048802375793457, 0.0566558837890625, 0.09959805011749268, 0.09493052959442139, 0.036646127700805664, 0.11851608753204346, 0.09835231304168701, 0.09826183319091797, 0.05072355270385742, 0.0033426284790039062, -0.06493532657623291, -0.07894647121429443, 0.005789637565612793, -0.013865947723388672, 0.021342992782592773, -0.012151718139648438, -0.004226088523864746, -0.02786850929260254, 0.09692883491516113, 0.11129248142242432, 0.05087876319885254, 0.1409435272216797, 0.08547282218933105, 0.07452201843261719, 0.06534135341644287, 0.11802232265472412, 0.08807814121246338, 0.04501223564147949, -0.008744359016418457, -0.047516584396362305, 0.01402890682220459, -0.05588829517364502, 0.0301285982131958, 0.004475831985473633, -0.04382979869842529, 0.09533393383026123, -0.011836409568786621, 0.016367316246032715, 0.15248620510101318, 0.10806906223297119, 0.1622295379638672, 0.10599386692047119, 0.057660579681396484, 0.11620891094207764, 0.042479872703552246, 0.12323212623596191, -0.008516907691955566, -0.03785204887390137, 0.04009568691253662, -0.06582355499267578, 0.041135311126708984, -0.022390007972717285, -0.04398488998413086, 0.02522444725036621, 0.013634681701660156, -0.06991755962371826, 0.005938410758972168, -0.05128169059753418, -0.15547513961791992, -0.038370490074157715, -0.06447291374206543, -0.06329619884490967, 0.025112509727478027, 0.013485550880432129, -0.1583108901977539, -0.14777565002441406, -0.07871747016906738, -0.004330277442932129, -0.023392677307128906, -0.028845548629760742, -0.15916478633880615, -0.1702878475189209, -0.07268369197845459, -0.030699610710144043, 0.04839169979095459, -0.13267171382904053, -0.05659747123718262, -0.07804441452026367, -0.07250046730041504, -0.0420839786529541, 0.009454727172851562, 0.0044231414794921875, -0.0782996416091919, 0.12100696563720703, 0.10586345195770264, 0.13628458976745605, 0.08055365085601807, -0.059798598289489746, -0.012486696243286133, -0.045432209968566895, -0.030544757843017578, -0.009402155876159668, -0.16086816787719727, -0.13744628429412842, -0.13416564464569092, -0.1451784372329712, -0.06093001365661621, -0.04240572452545166, -0.08354818820953369, -0.24525511264801025, -0.20385456085205078, -0.16884958744049072, -0.17037129402160645, -0.2208331823348999, -0.17389047145843506, -0.05583536624908447, -0.06288135051727295, -0.001920938491821289, -0.059445738792419434, -0.03829348087310791, 0.007696986198425293, 0.023210763931274414, 0.06338143348693848, 0.042083024978637695, -0.04947829246520996, -0.058402299880981445, -0.009893536567687988, -0.05562102794647217, 0.017005443572998047, 0.05759775638580322, 0.011791110038757324, 0.009711623191833496, 0.014118432998657227, 0.08127009868621826, 0.104591965675354, 0.03410696983337402, 0.11503005027770996, 0.10374283790588379, 0.05804848670959473, 0.1612861156463623, 0.13553106784820557, 0.0641927719116211, -0.021430134773254395, -0.06853151321411133, -0.04921913146972656, -0.08648741245269775, -0.09437549114227295, 0.009367108345031738, -0.11895644664764404, -0.1315290927886963, -0.059738993644714355, -0.02378249168395996, 0.09388375282287598, -0.08167862892150879, -0.04953038692474365, -0.022271275520324707, 0.031540632247924805, 0.046356916427612305, 0.030506610870361328, -0.009370803833007812, -0.14389240741729736, -0.05150902271270752, -0.04874718189239502, 0.12016379833221436, 0.08701252937316895, 0.06670725345611572, 0.09199368953704834, -0.02392101287841797, 0.0029305219650268555, 0.020512819290161133, -0.012623906135559082, -0.11215317249298096, -0.13250315189361572, -0.07563507556915283, 0.16805803775787354, 0.11204671859741211, -0.08967649936676025, 0.01865208148956299, -0.0014612674713134766, -0.06678366661071777, 0.09464156627655029, 0.036797285079956055, -0.13109350204467773, -0.07675790786743164, -0.0292508602142334, 0.028480887413024902, 0.042666077613830566, 0.12598037719726562, 0.20616328716278076, 0.13286590576171875, 0.030478239059448242, 0.09143495559692383, 0.09783267974853516, 0.05633056163787842, 0.06166732311248779, 0.02894425392150879, 0.08850526809692383, 0.10513806343078613, 0.1469053030014038, 0.13902509212493896, 0.10053157806396484, 0.07451224327087402, 0.14704430103302002, 0.09977459907531738, 0.08720541000366211, 0.1354900598526001, 0.03182387351989746, 0.09245073795318604, 0.04966402053833008, 0.028046607971191406, -0.003153562545776367, 0.07754969596862793, 0.09218788146972656, 0.03981149196624756, 0.13070297241210938, -0.04679226875305176, -0.06851482391357422, 0.08562469482421875, 0.13417303562164307, 0.11722826957702637, 0.08451175689697266, 0.07737910747528076, 0.07056164741516113, 0.04733157157897949, 0.03259634971618652, -0.02635324001312256, -0.034725069999694824, -0.013739824295043945, -0.09675395488739014, -0.07172870635986328, -0.017947673797607422, -0.08871150016784668, -0.12103724479675293, 0.00458216667175293, 0.02868354320526123, -0.005054116249084473, -0.03126931190490723, 0.006526350975036621, 0.08465361595153809, -0.10705184936523438, -0.2045072317123413, -0.15299832820892334, -0.10345721244812012, -0.10416686534881592, -0.15007221698760986, -0.10555052757263184, -0.10171198844909668, -0.044877052307128906, 0.09200990200042725, 0.08595049381256104, 0.017150402069091797, -0.07854771614074707, -0.15437519550323486, -0.08307826519012451, -0.09273636341094971, -0.04710745811462402, -0.09569931030273438, -0.14513301849365234, -0.060158371925354004, -0.08331036567687988, -0.020992636680603027, -0.04927635192871094, -0.03493046760559082, -0.09201478958129883, -0.19229352474212646, -0.11125481128692627, -0.17124629020690918, -0.16532135009765625, -0.08842384815216064, -0.09226536750793457, -0.13955974578857422, -0.08941650390625, -0.08104157447814941, -0.1617288589477539, -0.06526148319244385, -0.06567585468292236, -0.09695005416870117, -0.08749604225158691, -0.05502212047576904, -0.02487766742706299, -0.010029435157775879, 0.051400184631347656, -0.05158281326293945, -0.16222476959228516, 0.013801217079162598, 0.21317052841186523, 0.16003811359405518, 0.053701162338256836, -0.07303762435913086, -0.18421411514282227, -0.15222477912902832, -0.005701780319213867, -0.004059195518493652, 0.09779715538024902, 0.1908048391342163, 0.0834038257598877, 0.0755777359008789, 0.06660938262939453, 0.07782065868377686, 0.0016276836395263672, 0.052121877670288086, -0.06304931640625, -0.07101106643676758, 0.283036470413208, 0.23420226573944092, 0.11509418487548828, 0.07007575035095215, 0.10632443428039551, 0.09322202205657959, -0.009222149848937988, -0.0775613784790039, -0.15642118453979492, -0.15477323532104492, -0.22873127460479736, -0.09078001976013184, -0.019733071327209473, -0.07302188873291016, 0.019240498542785645, -0.043523192405700684, -0.08997869491577148, -0.1429065465927124, -0.17169725894927979, 0.0011061429977416992, 0.04186892509460449, -0.03519797325134277, -0.1503528356552124, -0.2305161952972412, -0.12338101863861084, -0.13310003280639648, -0.08669531345367432, -0.010907173156738281, 0.09250295162200928, 0.3262755870819092, 0.3633342981338501, 0.31913018226623535, 0.2944319248199463, 0.15929710865020752, 0.03830099105834961, 0.13411331176757812, 0.26100456714630127, 0.23708152770996094, -0.020155787467956543, -0.1350693702697754, -0.05746173858642578, -0.0189056396484375, 0.0511472225189209, 0.13150262832641602, 0.06261634826660156, 0.0357588529586792, 0.15615522861480713, 0.06488323211669922, 0.1347740888595581, 0.1938924789428711, 0.16320264339447021, 0.0455857515335083, -0.10741567611694336, -0.06749045848846436, -0.08584213256835938, -0.167250394821167, -0.286704421043396, -0.21827661991119385, 0.06567072868347168, 0.3111051321029663, 0.28112244606018066, 0.22265136241912842, 0.041222333908081055, -0.0840843915939331, -0.1026303768157959, -0.15429818630218506, -0.02058279514312744, -0.08935832977294922, -0.0821298360824585, 0.004825115203857422, 0.016100049018859863, 0.08710324764251709, 0.12260019779205322, 0.17987537384033203, 0.06927883625030518, -0.0010390281677246094, 0.04574692249298096, 0.035332560539245605, -0.004963874816894531, -0.04323470592498779, 0.09513819217681885, 0.07587885856628418, -0.036042094230651855, -0.14196562767028809, -0.13315391540527344, 0.06393778324127197, 0.0827789306640625, 0.0330204963684082, -0.11815404891967773, -0.10106527805328369, 0.058075547218322754, 0.1603459119796753, 0.10678362846374512, -0.005323886871337891, 0.06901776790618896, 0.1205282211303711, 0.1670818328857422, 0.013057351112365723, -0.22411012649536133, -0.32327795028686523, -0.3463834524154663, -0.2790212631225586, -0.19580376148223877, -0.15061545372009277, -0.1303313970565796, -0.2070552110671997, -0.2472902536392212, -0.2602022886276245, -0.20493102073669434, 0.025650858879089355, -0.003476381301879883, -0.06905138492584229, -0.023279547691345215, -0.04260969161987305, -0.054593682289123535, 0.0778958797454834, 0.06443548202514648, -0.05693972110748291, 0.005445003509521484, -0.08362078666687012, -0.16733992099761963, -0.18423688411712646, -0.0517193078994751, 0.033306241035461426, -0.08193027973175049, -0.11993145942687988, -0.10234415531158447, 0.0061043500900268555, 0.07484579086303711, -0.05073535442352295, -0.08442938327789307, -0.08484184741973877, -0.15062463283538818, -0.008023262023925781, 0.05667006969451904, -0.008153676986694336, -0.15402865409851074, -0.2023838758468628, -0.11574554443359375, -0.0822218656539917, -0.014519333839416504, 0.024001240730285645, 0.030484795570373535, -0.1094663143157959\}, \{0.00014531612396240234, 0.0003026723861694336, 0.0061228275299072266, 0.01531529426574707, 0.014214873313903809, 0.005872130393981934, -0.003571629524230957, -0.011501073837280273, -0.0217818021774292, -0.02349567413330078, -0.0021892786026000977, 0.009360551834106445, 0.0019000768661499023, -0.0047607421875, -0.00045371055603027344, 0.011203885078430176, 0.028331518173217773, 0.011770963668823242, -0.032657504081726074, -0.0038737058639526367, -0.003230452537536621, -0.054546236991882324, 0.0016318559646606445, 0.043387651443481445, 0.018745899200439453, 0.033548593521118164, 0.007503986358642578, -0.035471320152282715, -0.03578329086303711, -0.04156792163848877, -0.03262460231781006, -0.07966649532318115, 0.0022858381271362305, 0.11960327625274658, 0.17072904109954834, 0.13358569145202637, 0.10121607780456543, 0.12370002269744873, 0.014243841171264648, -0.04270625114440918, -0.007448792457580566, 0.021951794624328613, 0.02632308006286621, 0.012888193130493164, -0.03148782253265381, 0.015161752700805664, 0.00898754596710205, 0.0010167360305786133, 0.039624929428100586, -0.027303457260131836, 0.0076944828033447266, -0.06281912326812744, -0.03747844696044922, -0.051398396492004395, 0.023775935173034668, 0.18034601211547852, 0.09792137145996094, 0.2142629623413086, 0.14957165718078613, 0.12811613082885742, 0.24105870723724365, 0.1438659429550171, 0.047646522521972656, 0.0452275276184082, 0.03128981590270996, 0.03966724872589111, 0.08848786354064941, 0.13390421867370605, 0.1761789321899414, 0.1665400266647339, 0.1325986385345459, -0.0062408447265625, 0.009238958358764648, -0.10025954246520996, -0.08755910396575928, -0.027674317359924316, -0.05386149883270264, -0.014961481094360352, -0.1329728364944458, -0.049570322036743164, -0.0948643684387207, -0.04607105255126953, 0.017781972885131836, 0.030459284782409668, 0.029267311096191406, 0.033022284507751465, 0.06600737571716309, 0.02454078197479248, 0.10619509220123291, -0.02482008934020996, 0.020810604095458984, -0.03023087978363037, -0.11976230144500732, -0.055702924728393555, -0.11338329315185547, -0.047113776206970215, -0.016416311264038086, 0.05975151062011719, 0.027684569358825684, 0.018033742904663086, 0.12152421474456787, 0.13441455364227295, 0.11325681209564209, 0.10796773433685303, 0.12257766723632812, 0.09334337711334229, 0.03721284866333008, -0.053385257720947266, 0.034006357192993164, -0.012964844703674316, -0.04612410068511963, 0.03693878650665283, -0.02908039093017578, -0.024319171905517578, -0.0758582353591919, -0.11957776546478271, -0.027537941932678223, -0.05850076675415039, -0.12008631229400635, 0.026453375816345215, -0.09930944442749023, -0.14972960948944092, -0.11608529090881348, -0.06361627578735352, -0.05357074737548828, -0.07091999053955078, 0.02643716335296631, -0.10877501964569092, -0.10226273536682129, -0.021042823791503906, 0.09982955455780029, 0.08040308952331543, 0.05795574188232422, -0.1541132926940918, -0.12092244625091553, -0.03849589824676514, -0.04191231727600098, 0.09772062301635742, -0.12899017333984375, -0.12862694263458252, -0.10501980781555176, 0.039525508880615234, -0.0442347526550293, -0.016072988510131836, -0.037876248359680176, -0.11103498935699463, 0.11035466194152832, 0.032811522483825684, 0.18132483959197998, 0.14637386798858643, 0.0159071683883667, 0.013512611389160156, 0.0213625431060791, -0.017754316329956055, -0.003086090087890625, -0.0926826000213623, -0.16442131996154785, -0.08979856967926025, -0.15116703510284424, -0.041053056716918945, -0.0322650671005249, -0.0714561939239502, -0.14662301540374756, -0.1331472396850586, -0.06467413902282715, -0.10977935791015625, -0.18236768245697021, -0.14627957344055176, -0.04047083854675293, 0.050158143043518066, 0.03616786003112793, -0.006065845489501953, 0.01762568950653076, -0.029483437538146973, 0.06909382343292236, 0.017613530158996582, 0.1411212682723999, -0.0004214048385620117, -0.11188042163848877, 0.0959094762802124, -0.012173056602478027, 0.026494622230529785, 0.06489241123199463, 0.07623898983001709, 0.07761132717132568, 0.04770660400390625, 0.015567779541015625, 0.0996851921081543, 0.004631996154785156, 0.02761220932006836, 0.05128300189971924, -0.012336969375610352, 0.16547024250030518, 0.12702488899230957, 0.16686749458312988, -0.0023344755172729492, -0.057866454124450684, 0.028400897979736328, 0.013679027557373047, 0.05764281749725342, 0.029740571975708008, -0.027033567428588867, -0.02772843837738037, 0.05683267116546631, 0.06291651725769043, 0.1472402811050415, 0.031247258186340332, 0.002817988395690918, 0.052356719970703125, 0.05753350257873535, 0.02772510051727295, 0.0367664098739624, -0.000621795654296875, -0.11895751953125, -0.07552659511566162, -0.09563326835632324, 0.057701945304870605, 0.12588179111480713, 0.14808166027069092, 0.0775977373123169, 0.03882777690887451, -0.056693196296691895, -0.04770064353942871, -0.059575557708740234, -0.1674025058746338, -0.04993391036987305, -0.14888012409210205, 0.14030754566192627, 0.14607632160186768, -0.0367206335067749, -0.010816693305969238, -0.05927073955535889, 0.05057668685913086, 0.09573769569396973, 0.06161010265350342, -0.12335312366485596, -0.15832948684692383, -0.08543610572814941, 0.025018692016601562, 0.04983663558959961, 0.11459195613861084, 0.13610219955444336, 0.06955468654632568, 0.08442318439483643, 0.04231274127960205, 0.07518088817596436, 0.047752976417541504, 0.0092390775680542, 0.012347817420959473, 0.07412326335906982, 0.04498732089996338, 0.052185654640197754, 0.0561290979385376, 0.016014933586120605, 0.009300827980041504, 0.011299371719360352, -0.026348352432250977, -0.07991170883178711, 0.00456082820892334, -0.07255637645721436, -0.0662146806716919, -0.06942272186279297, -0.11140179634094238, -0.0777508020401001, -0.01154017448425293, 0.022281289100646973, -0.02172696590423584, -0.007172942161560059, -0.12752747535705566, -0.15928196907043457, -0.02195429801940918, 0.06171274185180664, 0.024596810340881348, 0.02268040180206299, 0.014704227447509766, -0.04373776912689209, -0.04601633548736572, -0.024355411529541016, -0.046300292015075684, -0.04499781131744385, -0.010166168212890625, -0.046591997146606445, -0.06600236892700195, -0.11835086345672607, -0.13773322105407715, -0.1660672426223755, -0.08911430835723877, 0.0007213354110717773, -0.029314517974853516, -0.03780770301818848, -0.001434326171875, 0.07385039329528809, -0.10922801494598389, -0.1780637502670288, -0.11420047283172607, -0.05511748790740967, -0.012658238410949707, -0.1439073085784912, -0.06996595859527588, -0.023008108139038086, 0.009072542190551758, 0.14282965660095215, 0.05195295810699463, -0.05921435356140137, -0.1279923915863037, -0.18509018421173096, -0.09284543991088867, -0.062430500984191895, -0.020524024963378906, -0.03549039363861084, -0.06731200218200684, -0.007006645202636719, -0.0338667631149292, 0.018387436866760254, 0.020735859870910645, 0.06530976295471191, 0.0013363361358642578, -0.09083878993988037, -0.056249260902404785, -0.07698309421539307, -0.016828417778015137, -0.009676098823547363, 0.0411602258682251, -0.03669464588165283, -0.04103195667266846, 0.03097820281982422, 0.03929567337036133, 0.06697344779968262, 0.018067240715026855, 0.04634296894073486, 0.0312809944152832, 0.0550159215927124, 0.019544243812561035, 0.07291030883789062, 0.047817349433898926, -0.07897686958312988, -0.04620826244354248, 0.1578766107559204, 0.21405291557312012, 0.134649395942688, 0.23505151271820068, 0.14573252201080322, 0.18817031383514404, 0.19115328788757324, 0.07130730152130127, -0.055851101875305176, 0.0889047384262085, 0.24372708797454834, 0.06527304649353027, -0.026049375534057617, -0.1920100450515747, -0.1887197494506836, -0.1230231523513794, -0.15177500247955322, -0.17393672466278076, -0.036741018295288086, 0.01209115982055664, 0.09482753276824951, 0.19767236709594727, 0.12888967990875244, 0.05918526649475098, -0.17664670944213867, -0.1450185775756836, -0.059859514236450195, 0.07130491733551025, 0.2006598711013794, 0.16137707233428955, 0.16134941577911377, 0.16017520427703857, 0.21886563301086426, 0.07416236400604248, 0.0008838176727294922, 0.020757675170898438, -0.08129191398620605, 0.07270872592926025, 0.24175703525543213, 0.1378624439239502, -0.04464840888977051, 0.013095855712890625, 0.20195841789245605, 0.009476661682128906, -0.1463150978088379, -0.18553638458251953, -0.03614664077758789, 0.14386296272277832, 0.005479097366333008, 0.06461405754089355, 0.14626193046569824, 0.11436605453491211, -0.13300037384033203, -0.17176222801208496, -0.03338766098022461, -0.008151650428771973, 0.08735406398773193, -0.023522615432739258, -0.06866192817687988, -0.08685517311096191, -0.10927093029022217, -0.04322373867034912, 0.10138273239135742, 0.1425774097442627, 0.05542862415313721, -0.0758368968963623, -0.144561767578125, -0.005609393119812012, -0.08104383945465088, -0.1415024995803833, -0.15574884414672852, -0.19782376289367676, -0.17292726039886475, -0.03877091407775879, 0.08620834350585938, -0.07055211067199707, -0.15339624881744385, -0.02893984317779541, 0.08021032810211182, 0.031609416007995605, 0.006580471992492676, 0.07689964771270752, 0.21531295776367188, 0.16154372692108154, 0.044898152351379395, 0.006253600120544434, -0.19837284088134766, -0.2151949405670166, -0.17036771774291992, -0.07629287242889404, 0.015300154685974121, -0.06160330772399902, -0.07866597175598145, -0.16221439838409424, -0.144822359085083, -0.09148359298706055, -0.14923810958862305, -0.02550041675567627, -0.06046855449676514, -0.2215942144393921, -0.11046421527862549, -0.0039054155349731445, 0.07030045986175537, 0.00940084457397461, -0.039721012115478516, -0.10050654411315918, -0.1359238624572754, -0.09123992919921875, -0.14342272281646729, -0.01744544506072998, -0.007034897804260254, -0.13935387134552002, -0.24030029773712158, -0.11399579048156738, -0.0422520637512207, 0.12081456184387207, 0.1172795295715332, -0.07949447631835938, 0.0266873836517334, -0.05616903305053711, 0.018961071968078613, -0.01629316806793213, 0.10182523727416992, 0.09769141674041748, -0.017367839813232422, -0.013981819152832031, -0.15589380264282227, 0.02320230007171631, 0.057131290435791016, 0.10260951519012451, 0.0043714046478271484, -0.061622023582458496, -0.10669302940368652, -0.06113171577453613, -0.0050241947174072266, -0.04991602897644043, 0.024848461151123047, -0.06206011772155762, -0.052773475646972656, -0.2108449935913086, -0.11649513244628906, 0.01307213306427002, 0.05459737777709961, 0.007590770721435547, -0.10294437408447266, 0.024706482887268066, 0.010705709457397461, 0.10431015491485596, 0.01610851287841797, 0.02116537094116211, 0.03261399269104004, 0.031459689140319824, 0.11359620094299316, 0.08095300197601318, 0.07681679725646973, -0.012017250061035156, -0.07649779319763184, -0.18218135833740234, -0.049326419830322266, 0.021213769912719727, 0.13950908184051514, 0.23577892780303955, 0.09651291370391846\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_44100::bitDepth = 24}}
\par
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAABNP}
{\bkmkend AAAAAAABNP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_24bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAABNQ}
{\bkmkend AAAAAAABNQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_24bit_44100}
{\xe \v wav_stereo_24bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_24bit_44100::testBuffer = \{\{7.772445678710938e-05, 0.0004398822784423828, 0.006743192672729492, 0.01638209819793701, 0.015148758888244629, 0.003415822982788086, -0.012502312660217285, -0.02174532413482666, -0.022707462310791016, -0.01782703399658203, -0.000893712043762207, 0.010785818099975586, 0.007664799690246582, -0.0017873048782348633, -0.006292223930358887, 0.0017839670181274414, 0.03135275840759277, 0.02077305316925049, -0.022290825843811035, 0.00968170166015625, -0.0037343502044677734, -0.04702770709991455, 0.014231562614440918, 0.025177717208862305, -0.002476334571838379, 0.0208892822265625, -0.010953903198242188, -0.03929746150970459, -0.009381890296936035, -0.016600728034973145, -0.053926944732666016, -0.0511249303817749, 0.012263298034667969, 0.10370278358459473, 0.10517358779907227, 0.06131696701049805, 0.10799956321716309, 0.026469826698303223, -0.08833801746368408, -0.04072582721710205, -0.010347366333007812, -0.008848786354064941, 0.07863211631774902, -0.011377096176147461, -0.08304083347320557, 0.14268147945404053, 0.019171833992004395, -0.02190697193145752, 0.024938583374023438, -0.05969548225402832, 0.05296933650970459, -0.02652561664581299, 0.04038584232330322, -0.0020700693130493164, 0.03850662708282471, 0.20856308937072754, 0.09956228733062744, 0.17125451564788818, 0.1496039628982544, 0.13909387588500977, 0.14089739322662354, 0.0962514877319336, 0.04986727237701416, 0.02048802375793457, 0.0566558837890625, 0.09959805011749268, 0.09493052959442139, 0.036646127700805664, 0.11851608753204346, 0.09835231304168701, 0.09826183319091797, 0.05072355270385742, 0.0033426284790039062, -0.06493532657623291, -0.07894647121429443, 0.005789637565612793, -0.013865947723388672, 0.021342992782592773, -0.012151718139648438, -0.004226088523864746, -0.02786850929260254, 0.09692883491516113, 0.11129248142242432, 0.05087876319885254, 0.1409435272216797, 0.08547282218933105, 0.07452201843261719, 0.06534135341644287, 0.11802232265472412, 0.08807814121246338, 0.04501223564147949, -0.008744359016418457, -0.047516584396362305, 0.01402890682220459, -0.05588829517364502, 0.0301285982131958, 0.004475831985473633, -0.04382979869842529, 0.09533393383026123, -0.011836409568786621, 0.016367316246032715, 0.15248620510101318, 0.10806906223297119, 0.1622295379638672, 0.10599386692047119, 0.057660579681396484, 0.11620891094207764, 0.042479872703552246, 0.12323212623596191, -0.008516907691955566, -0.03785204887390137, 0.04009568691253662, -0.06582355499267578, 0.041135311126708984, -0.022390007972717285, -0.04398488998413086, 0.02522444725036621, 0.013634681701660156, -0.06991755962371826, 0.005938410758972168, -0.05128169059753418, -0.15547513961791992, -0.038370490074157715, -0.06447291374206543, -0.06329619884490967, 0.025112509727478027, 0.013485550880432129, -0.1583108901977539, -0.14777565002441406, -0.07871747016906738, -0.004330277442932129, -0.023392677307128906, -0.028845548629760742, -0.15916478633880615, -0.1702878475189209, -0.07268369197845459, -0.030699610710144043, 0.04839169979095459, -0.13267171382904053, -0.05659747123718262, -0.07804441452026367, -0.07250046730041504, -0.0420839786529541, 0.009454727172851562, 0.0044231414794921875, -0.0782996416091919, 0.12100696563720703, 0.10586345195770264, 0.13628458976745605, 0.08055365085601807, -0.059798598289489746, -0.012486696243286133, -0.045432209968566895, -0.030544757843017578, -0.009402155876159668, -0.16086816787719727, -0.13744628429412842, -0.13416564464569092, -0.1451784372329712, -0.06093001365661621, -0.04240572452545166, -0.08354818820953369, -0.24525511264801025, -0.20385456085205078, -0.16884958744049072, -0.17037129402160645, -0.2208331823348999, -0.17389047145843506, -0.05583536624908447, -0.06288135051727295, -0.001920938491821289, -0.059445738792419434, -0.03829348087310791, 0.007696986198425293, 0.023210763931274414, 0.06338143348693848, 0.042083024978637695, -0.04947829246520996, -0.058402299880981445, -0.009893536567687988, -0.05562102794647217, 0.017005443572998047, 0.05759775638580322, 0.011791110038757324, 0.009711623191833496, 0.014118432998657227, 0.08127009868621826, 0.104591965675354, 0.03410696983337402, 0.11503005027770996, 0.10374283790588379, 0.05804848670959473, 0.1612861156463623, 0.13553106784820557, 0.0641927719116211, -0.021430134773254395, -0.06853151321411133, -0.04921913146972656, -0.08648741245269775, -0.09437549114227295, 0.009367108345031738, -0.11895644664764404, -0.1315290927886963, -0.059738993644714355, -0.02378249168395996, 0.09388375282287598, -0.08167862892150879, -0.04953038692474365, -0.022271275520324707, 0.031540632247924805, 0.046356916427612305, 0.030506610870361328, -0.009370803833007812, -0.14389240741729736, -0.05150902271270752, -0.04874718189239502, 0.12016379833221436, 0.08701252937316895, 0.06670725345611572, 0.09199368953704834, -0.02392101287841797, 0.0029305219650268555, 0.020512819290161133, -0.012623906135559082, -0.11215317249298096, -0.13250315189361572, -0.07563507556915283, 0.16805803775787354, 0.11204671859741211, -0.08967649936676025, 0.01865208148956299, -0.0014612674713134766, -0.06678366661071777, 0.09464156627655029, 0.036797285079956055, -0.13109350204467773, -0.07675790786743164, -0.0292508602142334, 0.028480887413024902, 0.042666077613830566, 0.12598037719726562, 0.20616328716278076, 0.13286590576171875, 0.030478239059448242, 0.09143495559692383, 0.09783267974853516, 0.05633056163787842, 0.06166732311248779, 0.02894425392150879, 0.08850526809692383, 0.10513806343078613, 0.1469053030014038, 0.13902509212493896, 0.10053157806396484, 0.07451224327087402, 0.14704430103302002, 0.09977459907531738, 0.08720541000366211, 0.1354900598526001, 0.03182387351989746, 0.09245073795318604, 0.04966402053833008, 0.028046607971191406, -0.003153562545776367, 0.07754969596862793, 0.09218788146972656, 0.03981149196624756, 0.13070297241210938, -0.04679226875305176, -0.06851482391357422, 0.08562469482421875, 0.13417303562164307, 0.11722826957702637, 0.08451175689697266, 0.07737910747528076, 0.07056164741516113, 0.04733157157897949, 0.03259634971618652, -0.02635324001312256, -0.034725069999694824, -0.013739824295043945, -0.09675395488739014, -0.07172870635986328, -0.017947673797607422, -0.08871150016784668, -0.12103724479675293, 0.00458216667175293, 0.02868354320526123, -0.005054116249084473, -0.03126931190490723, 0.006526350975036621, 0.08465361595153809, -0.10705184936523438, -0.2045072317123413, -0.15299832820892334, -0.10345721244812012, -0.10416686534881592, -0.15007221698760986, -0.10555052757263184, -0.10171198844909668, -0.044877052307128906, 0.09200990200042725, 0.08595049381256104, 0.017150402069091797, -0.07854771614074707, -0.15437519550323486, -0.08307826519012451, -0.09273636341094971, -0.04710745811462402, -0.09569931030273438, -0.14513301849365234, -0.060158371925354004, -0.08331036567687988, -0.020992636680603027, -0.04927635192871094, -0.03493046760559082, -0.09201478958129883, -0.19229352474212646, -0.11125481128692627, -0.17124629020690918, -0.16532135009765625, -0.08842384815216064, -0.09226536750793457, -0.13955974578857422, -0.08941650390625, -0.08104157447814941, -0.1617288589477539, -0.06526148319244385, -0.06567585468292236, -0.09695005416870117, -0.08749604225158691, -0.05502212047576904, -0.02487766742706299, -0.010029435157775879, 0.051400184631347656, -0.05158281326293945, -0.16222476959228516, 0.013801217079162598, 0.21317052841186523, 0.16003811359405518, 0.053701162338256836, -0.07303762435913086, -0.18421411514282227, -0.15222477912902832, -0.005701780319213867, -0.004059195518493652, 0.09779715538024902, 0.1908048391342163, 0.0834038257598877, 0.0755777359008789, 0.06660938262939453, 0.07782065868377686, 0.0016276836395263672, 0.052121877670288086, -0.06304931640625, -0.07101106643676758, 0.283036470413208, 0.23420226573944092, 0.11509418487548828, 0.07007575035095215, 0.10632443428039551, 0.09322202205657959, -0.009222149848937988, -0.0775613784790039, -0.15642118453979492, -0.15477323532104492, -0.22873127460479736, -0.09078001976013184, -0.019733071327209473, -0.07302188873291016, 0.019240498542785645, -0.043523192405700684, -0.08997869491577148, -0.1429065465927124, -0.17169725894927979, 0.0011061429977416992, 0.04186892509460449, -0.03519797325134277, -0.1503528356552124, -0.2305161952972412, -0.12338101863861084, -0.13310003280639648, -0.08669531345367432, -0.010907173156738281, 0.09250295162200928, 0.3262755870819092, 0.3633342981338501, 0.31913018226623535, 0.2944319248199463, 0.15929710865020752, 0.03830099105834961, 0.13411331176757812, 0.26100456714630127, 0.23708152770996094, -0.020155787467956543, -0.1350693702697754, -0.05746173858642578, -0.0189056396484375, 0.0511472225189209, 0.13150262832641602, 0.06261634826660156, 0.0357588529586792, 0.15615522861480713, 0.06488323211669922, 0.1347740888595581, 0.1938924789428711, 0.16320264339447021, 0.0455857515335083, -0.10741567611694336, -0.06749045848846436, -0.08584213256835938, -0.167250394821167, -0.286704421043396, -0.21827661991119385, 0.06567072868347168, 0.3111051321029663, 0.28112244606018066, 0.22265136241912842, 0.041222333908081055, -0.0840843915939331, -0.1026303768157959, -0.15429818630218506, -0.02058279514312744, -0.08935832977294922, -0.0821298360824585, 0.004825115203857422, 0.016100049018859863, 0.08710324764251709, 0.12260019779205322, 0.17987537384033203, 0.06927883625030518, -0.0010390281677246094, 0.04574692249298096, 0.035332560539245605, -0.004963874816894531, -0.04323470592498779, 0.09513819217681885, 0.07587885856628418, -0.036042094230651855, -0.14196562767028809, -0.13315391540527344, 0.06393778324127197, 0.0827789306640625, 0.0330204963684082, -0.11815404891967773, -0.10106527805328369, 0.058075547218322754, 0.1603459119796753, 0.10678362846374512, -0.005323886871337891, 0.06901776790618896, 0.1205282211303711, 0.1670818328857422, 0.013057351112365723, -0.22411012649536133, -0.32327795028686523, -0.3463834524154663, -0.2790212631225586, -0.19580376148223877, -0.15061545372009277, -0.1303313970565796, -0.2070552110671997, -0.2472902536392212, -0.2602022886276245, -0.20493102073669434, 0.025650858879089355, -0.003476381301879883, -0.06905138492584229, -0.023279547691345215, -0.04260969161987305, -0.054593682289123535, 0.0778958797454834, 0.06443548202514648, -0.05693972110748291, 0.005445003509521484, -0.08362078666687012, -0.16733992099761963, -0.18423688411712646, -0.0517193078994751, 0.033306241035461426, -0.08193027973175049, -0.11993145942687988, -0.10234415531158447, 0.0061043500900268555, 0.07484579086303711, -0.05073535442352295, -0.08442938327789307, -0.08484184741973877, -0.15062463283538818, -0.008023262023925781, 0.05667006969451904, -0.008153676986694336, -0.15402865409851074, -0.2023838758468628, -0.11574554443359375, -0.0822218656539917, -0.014519333839416504, 0.024001240730285645, 0.030484795570373535, -0.1094663143157959\}, \{0.00014531612396240234, 0.0003026723861694336, 0.0061228275299072266, 0.01531529426574707, 0.014214873313903809, 0.005872130393981934, -0.003571629524230957, -0.011501073837280273, -0.0217818021774292, -0.02349567413330078, -0.0021892786026000977, 0.009360551834106445, 0.0019000768661499023, -0.0047607421875, -0.00045371055603027344, 0.011203885078430176, 0.028331518173217773, 0.011770963668823242, -0.032657504081726074, -0.0038737058639526367, -0.003230452537536621, -0.054546236991882324, 0.0016318559646606445, 0.043387651443481445, 0.018745899200439453, 0.033548593521118164, 0.007503986358642578, -0.035471320152282715, -0.03578329086303711, -0.04156792163848877, -0.03262460231781006, -0.07966649532318115, 0.0022858381271362305, 0.11960327625274658, 0.17072904109954834, 0.13358569145202637, 0.10121607780456543, 0.12370002269744873, 0.014243841171264648, -0.04270625114440918, -0.007448792457580566, 0.021951794624328613, 0.02632308006286621, 0.012888193130493164, -0.03148782253265381, 0.015161752700805664, 0.00898754596710205, 0.0010167360305786133, 0.039624929428100586, -0.027303457260131836, 0.0076944828033447266, -0.06281912326812744, -0.03747844696044922, -0.051398396492004395, 0.023775935173034668, 0.18034601211547852, 0.09792137145996094, 0.2142629623413086, 0.14957165718078613, 0.12811613082885742, 0.24105870723724365, 0.1438659429550171, 0.047646522521972656, 0.0452275276184082, 0.03128981590270996, 0.03966724872589111, 0.08848786354064941, 0.13390421867370605, 0.1761789321899414, 0.1665400266647339, 0.1325986385345459, -0.0062408447265625, 0.009238958358764648, -0.10025954246520996, -0.08755910396575928, -0.027674317359924316, -0.05386149883270264, -0.014961481094360352, -0.1329728364944458, -0.049570322036743164, -0.0948643684387207, -0.04607105255126953, 0.017781972885131836, 0.030459284782409668, 0.029267311096191406, 0.033022284507751465, 0.06600737571716309, 0.02454078197479248, 0.10619509220123291, -0.02482008934020996, 0.020810604095458984, -0.03023087978363037, -0.11976230144500732, -0.055702924728393555, -0.11338329315185547, -0.047113776206970215, -0.016416311264038086, 0.05975151062011719, 0.027684569358825684, 0.018033742904663086, 0.12152421474456787, 0.13441455364227295, 0.11325681209564209, 0.10796773433685303, 0.12257766723632812, 0.09334337711334229, 0.03721284866333008, -0.053385257720947266, 0.034006357192993164, -0.012964844703674316, -0.04612410068511963, 0.03693878650665283, -0.02908039093017578, -0.024319171905517578, -0.0758582353591919, -0.11957776546478271, -0.027537941932678223, -0.05850076675415039, -0.12008631229400635, 0.026453375816345215, -0.09930944442749023, -0.14972960948944092, -0.11608529090881348, -0.06361627578735352, -0.05357074737548828, -0.07091999053955078, 0.02643716335296631, -0.10877501964569092, -0.10226273536682129, -0.021042823791503906, 0.09982955455780029, 0.08040308952331543, 0.05795574188232422, -0.1541132926940918, -0.12092244625091553, -0.03849589824676514, -0.04191231727600098, 0.09772062301635742, -0.12899017333984375, -0.12862694263458252, -0.10501980781555176, 0.039525508880615234, -0.0442347526550293, -0.016072988510131836, -0.037876248359680176, -0.11103498935699463, 0.11035466194152832, 0.032811522483825684, 0.18132483959197998, 0.14637386798858643, 0.0159071683883667, 0.013512611389160156, 0.0213625431060791, -0.017754316329956055, -0.003086090087890625, -0.0926826000213623, -0.16442131996154785, -0.08979856967926025, -0.15116703510284424, -0.041053056716918945, -0.0322650671005249, -0.0714561939239502, -0.14662301540374756, -0.1331472396850586, -0.06467413902282715, -0.10977935791015625, -0.18236768245697021, -0.14627957344055176, -0.04047083854675293, 0.050158143043518066, 0.03616786003112793, -0.006065845489501953, 0.01762568950653076, -0.029483437538146973, 0.06909382343292236, 0.017613530158996582, 0.1411212682723999, -0.0004214048385620117, -0.11188042163848877, 0.0959094762802124, -0.012173056602478027, 0.026494622230529785, 0.06489241123199463, 0.07623898983001709, 0.07761132717132568, 0.04770660400390625, 0.015567779541015625, 0.0996851921081543, 0.004631996154785156, 0.02761220932006836, 0.05128300189971924, -0.012336969375610352, 0.16547024250030518, 0.12702488899230957, 0.16686749458312988, -0.0023344755172729492, -0.057866454124450684, 0.028400897979736328, 0.013679027557373047, 0.05764281749725342, 0.029740571975708008, -0.027033567428588867, -0.02772843837738037, 0.05683267116546631, 0.06291651725769043, 0.1472402811050415, 0.031247258186340332, 0.002817988395690918, 0.052356719970703125, 0.05753350257873535, 0.02772510051727295, 0.0367664098739624, -0.000621795654296875, -0.11895751953125, -0.07552659511566162, -0.09563326835632324, 0.057701945304870605, 0.12588179111480713, 0.14808166027069092, 0.0775977373123169, 0.03882777690887451, -0.056693196296691895, -0.04770064353942871, -0.059575557708740234, -0.1674025058746338, -0.04993391036987305, -0.14888012409210205, 0.14030754566192627, 0.14607632160186768, -0.0367206335067749, -0.010816693305969238, -0.05927073955535889, 0.05057668685913086, 0.09573769569396973, 0.06161010265350342, -0.12335312366485596, -0.15832948684692383, -0.08543610572814941, 0.025018692016601562, 0.04983663558959961, 0.11459195613861084, 0.13610219955444336, 0.06955468654632568, 0.08442318439483643, 0.04231274127960205, 0.07518088817596436, 0.047752976417541504, 0.0092390775680542, 0.012347817420959473, 0.07412326335906982, 0.04498732089996338, 0.052185654640197754, 0.0561290979385376, 0.016014933586120605, 0.009300827980041504, 0.011299371719360352, -0.026348352432250977, -0.07991170883178711, 0.00456082820892334, -0.07255637645721436, -0.0662146806716919, -0.06942272186279297, -0.11140179634094238, -0.0777508020401001, -0.01154017448425293, 0.022281289100646973, -0.02172696590423584, -0.007172942161560059, -0.12752747535705566, -0.15928196907043457, -0.02195429801940918, 0.06171274185180664, 0.024596810340881348, 0.02268040180206299, 0.014704227447509766, -0.04373776912689209, -0.04601633548736572, -0.024355411529541016, -0.046300292015075684, -0.04499781131744385, -0.010166168212890625, -0.046591997146606445, -0.06600236892700195, -0.11835086345672607, -0.13773322105407715, -0.1660672426223755, -0.08911430835723877, 0.0007213354110717773, -0.029314517974853516, -0.03780770301818848, -0.001434326171875, 0.07385039329528809, -0.10922801494598389, -0.1780637502670288, -0.11420047283172607, -0.05511748790740967, -0.012658238410949707, -0.1439073085784912, -0.06996595859527588, -0.023008108139038086, 0.009072542190551758, 0.14282965660095215, 0.05195295810699463, -0.05921435356140137, -0.1279923915863037, -0.18509018421173096, -0.09284543991088867, -0.062430500984191895, -0.020524024963378906, -0.03549039363861084, -0.06731200218200684, -0.007006645202636719, -0.0338667631149292, 0.018387436866760254, 0.020735859870910645, 0.06530976295471191, 0.0013363361358642578, -0.09083878993988037, -0.056249260902404785, -0.07698309421539307, -0.016828417778015137, -0.009676098823547363, 0.0411602258682251, -0.03669464588165283, -0.04103195667266846, 0.03097820281982422, 0.03929567337036133, 0.06697344779968262, 0.018067240715026855, 0.04634296894073486, 0.0312809944152832, 0.0550159215927124, 0.019544243812561035, 0.07291030883789062, 0.047817349433898926, -0.07897686958312988, -0.04620826244354248, 0.1578766107559204, 0.21405291557312012, 0.134649395942688, 0.23505151271820068, 0.14573252201080322, 0.18817031383514404, 0.19115328788757324, 0.07130730152130127, -0.055851101875305176, 0.0889047384262085, 0.24372708797454834, 0.06527304649353027, -0.026049375534057617, -0.1920100450515747, -0.1887197494506836, -0.1230231523513794, -0.15177500247955322, -0.17393672466278076, -0.036741018295288086, 0.01209115982055664, 0.09482753276824951, 0.19767236709594727, 0.12888967990875244, 0.05918526649475098, -0.17664670944213867, -0.1450185775756836, -0.059859514236450195, 0.07130491733551025, 0.2006598711013794, 0.16137707233428955, 0.16134941577911377, 0.16017520427703857, 0.21886563301086426, 0.07416236400604248, 0.0008838176727294922, 0.020757675170898438, -0.08129191398620605, 0.07270872592926025, 0.24175703525543213, 0.1378624439239502, -0.04464840888977051, 0.013095855712890625, 0.20195841789245605, 0.009476661682128906, -0.1463150978088379, -0.18553638458251953, -0.03614664077758789, 0.14386296272277832, 0.005479097366333008, 0.06461405754089355, 0.14626193046569824, 0.11436605453491211, -0.13300037384033203, -0.17176222801208496, -0.03338766098022461, -0.008151650428771973, 0.08735406398773193, -0.023522615432739258, -0.06866192817687988, -0.08685517311096191, -0.10927093029022217, -0.04322373867034912, 0.10138273239135742, 0.1425774097442627, 0.05542862415313721, -0.0758368968963623, -0.144561767578125, -0.005609393119812012, -0.08104383945465088, -0.1415024995803833, -0.15574884414672852, -0.19782376289367676, -0.17292726039886475, -0.03877091407775879, 0.08620834350585938, -0.07055211067199707, -0.15339624881744385, -0.02893984317779541, 0.08021032810211182, 0.031609416007995605, 0.006580471992492676, 0.07689964771270752, 0.21531295776367188, 0.16154372692108154, 0.044898152351379395, 0.006253600120544434, -0.19837284088134766, -0.2151949405670166, -0.17036771774291992, -0.07629287242889404, 0.015300154685974121, -0.06160330772399902, -0.07866597175598145, -0.16221439838409424, -0.144822359085083, -0.09148359298706055, -0.14923810958862305, -0.02550041675567627, -0.06046855449676514, -0.2215942144393921, -0.11046421527862549, -0.0039054155349731445, 0.07030045986175537, 0.00940084457397461, -0.039721012115478516, -0.10050654411315918, -0.1359238624572754, -0.09123992919921875, -0.14342272281646729, -0.01744544506072998, -0.007034897804260254, -0.13935387134552002, -0.24030029773712158, -0.11399579048156738, -0.0422520637512207, 0.12081456184387207, 0.1172795295715332, -0.07949447631835938, 0.0266873836517334, -0.05616903305053711, 0.018961071968078613, -0.01629316806793213, 0.10182523727416992, 0.09769141674041748, -0.017367839813232422, -0.013981819152832031, -0.15589380264282227, 0.02320230007171631, 0.057131290435791016, 0.10260951519012451, 0.0043714046478271484, -0.061622023582458496, -0.10669302940368652, -0.06113171577453613, -0.0050241947174072266, -0.04991602897644043, 0.024848461151123047, -0.06206011772155762, -0.052773475646972656, -0.2108449935913086, -0.11649513244628906, 0.01307213306427002, 0.05459737777709961, 0.007590770721435547, -0.10294437408447266, 0.024706482887268066, 0.010705709457397461, 0.10431015491485596, 0.01610851287841797, 0.02116537094116211, 0.03261399269104004, 0.031459689140319824, 0.11359620094299316, 0.08095300197601318, 0.07681679725646973, -0.012017250061035156, -0.07649779319763184, -0.18218135833740234, -0.049326419830322266, 0.021213769912719727, 0.13950908184051514, 0.23577892780303955, 0.09651291370391846\}\}}}
\par
{\bkmkstart AAAAAAABNR}
{\bkmkend AAAAAAABNR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_24bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000}
{\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.0005353689193725586, -0.0018157958984375, -0.0024815797805786133, -0.0017586946487426758, -0.0009694099426269531, -0.0005301237106323242, -0.00023984909057617188, -0.0006633996963500977, -0.0007344484329223633, 0.0013926029205322266, 0.004686951637268066, 0.005301952362060547, 0.001447916030883789, -0.003507852554321289, -0.005098938941955566, -0.0023632049560546875, 0.0019316673278808594, 0.003896951675415039, 0.0021713972091674805, -0.0007047653198242188, -0.0014480352401733398, -0.0008498430252075195, -0.001700282096862793, -0.0032678842544555664, -0.0038613080978393555, -0.0010759830474853516, 0.01182401180267334, 0.02786707878112793, 0.01855754852294922, -0.016994118690490723, -0.03550422191619873, -0.021430492401123047, -0.0009359121322631836, 0.018381357192993164, 0.02882969379425049, 0.007241487503051758, -0.018944501876831055, -0.00481104850769043, 0.01887667179107666, 0.002834796905517578, -0.023562073707580566, -0.008999109268188477, 0.01643657684326172, 0.0038520097732543945, -0.0024552345275878906, 0.033385276794433594, 0.04029250144958496, -0.007833361625671387, -0.03152954578399658, -0.00864863395690918, 0.010521411895751953, 0.021465659141540527, 0.027612924575805664, -0.004909515380859375, -0.041514039039611816, -0.0006999969482421875, 0.07184028625488281, 0.05355656147003174, -0.03894925117492676, -0.06949126720428467, -0.0004367828369140625, 0.05938148498535156, 0.03382563591003418, -0.021600723266601562, -0.02450406551361084, 0.018337607383728027, 0.035019755363464355, 0.009488821029663086, -0.002547740936279297, 0.005485415458679199, -0.004842281341552734, -0.010583758354187012, 0.013787388801574707, 0.016601920127868652, -0.018032312393188477, -0.02136683464050293, 0.01699841022491455, 0.03017401695251465, 0.007547736167907715, -0.004074692726135254, 0.00835728645324707, 0.014879941940307617, -0.007208824157714844, -0.026047229766845703, 0.0035952329635620117, 0.041936397552490234, 0.017410874366760254, -0.04070174694061279, -0.04405665397644043, 0.01763904094696045, 0.05734562873840332, 0.01208043098449707, -0.053052544593811035, -0.033879995346069336, 0.04517984390258789, 0.06426751613616943, 0.002217888832092285, -0.023540019989013672, 0.03292644023895264, 0.041263461112976074, -0.044199466705322266, -0.05868065357208252, 0.030320167541503906, 0.052309274673461914, 0.0027663707733154297, -0.0023293495178222656, 0.010164737701416016, 0.004391789436340332, 0.004195094108581543, -0.008912801742553711, -0.014009714126586914, 0.007948517799377441, -0.018178105354309082, -0.06131124496459961, 0.002528667449951172, 0.09173691272735596, 0.04485476016998291, -0.0588078498840332, -0.05958127975463867, 0.0005204677581787109, 0.005663275718688965, -0.024928927421569824, -0.023584365844726562, -0.008938193321228027, -0.01889955997467041, -0.02177739143371582, 0.011068344116210938, 0.027295351028442383, -0.011210322380065918, -0.051587700843811035, -0.053266286849975586, -0.039228200912475586, -0.014955282211303711, 0.022309303283691406, 0.02100658416748047, -0.03366053104400635, -0.05080461502075195, 0.012375712394714355, 0.07740390300750732, 0.08623313903808594, 0.04926800727844238, -0.02035236358642578, -0.1011120080947876, -0.14040255546569824, -0.10365068912506104, -0.023254036903381348, 0.03857135772705078, 0.05435192584991455, 0.03889870643615723, 0.012852787971496582, -0.030987024307250977, -0.08929860591888428, -0.09824728965759277, -0.0326007604598999, 0.030603647232055664, 0.05155456066131592, 0.0559309720993042, 0.030367136001586914, -0.024924635887145996, -0.05092668533325195, -0.024532198905944824, 0.011846780776977539, 0.013265013694763184, -0.00581967830657959, 0.0026712417602539062, 0.007601737976074219, -0.039343833923339844, -0.04319131374359131, 0.06665289402008057, 0.14398396015167236, 0.07255923748016357, -0.03774690628051758, -0.06214296817779541, -0.029167890548706055, -0.023360371589660645, -0.058979034423828125, -0.08780872821807861, -0.0894085168838501, -0.09925878047943115, -0.12716281414031982, -0.1099623441696167, -0.014007568359375, 0.088714599609375, 0.1116938591003418, 0.06560969352722168, 0.03189575672149658, 0.02760756015777588, -0.005571961402893066, -0.0620419979095459, -0.07850146293640137, -0.06346392631530762, -0.0638892650604248, -0.06543803215026855, -0.047734737396240234, -0.040279388427734375, -0.053655028343200684, -0.0394212007522583, 0.026441454887390137, 0.08167052268981934, 0.08292233943939209, 0.06283867359161377, 0.03786969184875488, 0.016643762588500977, 0.035663723945617676, 0.08345603942871094, 0.11807060241699219, 0.14475929737091064, 0.1512831449508667, 0.07611465454101562, -0.06967699527740479, -0.18366336822509766, -0.2215193510055542, -0.228063702583313, -0.21772289276123047, -0.17403638362884521, -0.10664904117584229, -0.012221217155456543, 0.11883389949798584, 0.23630857467651367, 0.26976871490478516, 0.2348005771636963, 0.19006073474884033, 0.14441847801208496, 0.08886027336120605, 0.013650059700012207, -0.07653796672821045, -0.1362673044204712, -0.13289117813110352, -0.09005904197692871, -0.05935049057006836, -0.04871571063995361, -0.022919416427612305, 0.023525714874267578, 0.060304999351501465, 0.06689858436584473, 0.06617927551269531, 0.09962904453277588, 0.15390539169311523, 0.16637468338012695, 0.1253190040588379, 0.08236527442932129, 0.06566929817199707, 0.06699633598327637, 0.0629422664642334, 0.021541595458984375, -0.042909860610961914, -0.07471799850463867, -0.08527469635009766, -0.12843263149261475, -0.16909754276275635, -0.15074551105499268, -0.10744369029998779, -0.08842837810516357, -0.08267450332641602, -0.06730234622955322, -0.06644761562347412, -0.0873953104019165, -0.07795059680938721, -0.03837764263153076, -0.034098267555236816, -0.07519185543060303, -0.11002027988433838, -0.10905241966247559, -0.08707404136657715, -0.06271755695343018, -0.03213071823120117, 0.016660451889038086, 0.07577764987945557, 0.12079823017120361, 0.14485979080200195, 0.16540908813476562, 0.18814897537231445, 0.18603217601776123, 0.14115381240844727, 0.078652024269104, 0.03346526622772217, 0.020048856735229492, 0.028243064880371094, 0.027113676071166992, -0.006494998931884766, -0.04590046405792236, -0.020364046096801758, 0.07584714889526367, 0.13061916828155518, 0.0785517692565918, -0.0022612810134887695, -0.04539132118225098, -0.07252788543701172, -0.10594463348388672, -0.14356112480163574, -0.16857707500457764, -0.15273058414459229, -0.10285747051239014, -0.055068254470825195, -0.012634634971618652, 0.039493441581726074, 0.08833456039428711, 0.11618483066558838, 0.12784481048583984, 0.13093805313110352, 0.12640225887298584, 0.12281036376953125, 0.12299621105194092, 0.1068580150604248, 0.07169830799102783, 0.048117876052856445, 0.03379940986633301, -0.01625370979309082, -0.09772813320159912, -0.14298546314239502, -0.134590744972229, -0.12811553478240967, -0.1353682279586792, -0.11606812477111816, -0.08822298049926758, -0.09889388084411621, -0.11676955223083496, -0.09562039375305176, -0.07921159267425537, -0.1261528730392456, -0.20061981678009033, -0.23133325576782227, -0.22429180145263672, -0.2265070676803589, -0.23732519149780273, -0.2323462963104248, -0.20833563804626465, -0.17016899585723877, -0.11388063430786133, -0.03736007213592529, 0.04158031940460205, 0.10008406639099121, 0.13604795932769775, 0.15819740295410156, 0.1686631441116333, 0.17503464221954346, 0.18374860286712646, 0.1799170970916748, 0.16497564315795898, 0.16522789001464844, 0.17826223373413086, 0.19110441207885742, 0.2133733034133911, 0.23157572746276855, 0.2186269760131836, 0.19382965564727783, 0.1786268949508667, 0.1509941816329956, 0.09754598140716553, 0.03965890407562256, 0.01019740104675293, 0.02343595027923584, 0.04391515254974365, 0.034508466720581055, 0.027436256408691406, 0.05022251605987549, 0.06523478031158447, 0.06500518321990967, 0.07601487636566162, 0.07491195201873779, 0.04451632499694824, 0.024481773376464844, 0.02528250217437744, -0.0024760961532592773, -0.07039666175842285, -0.12084364891052246, -0.12771594524383545, -0.129064679145813, -0.14493012428283691, -0.16004621982574463, -0.16779577732086182, -0.16288995742797852, -0.13577568531036377, -0.10431289672851562, -0.09752440452575684, -0.11126375198364258, -0.13270068168640137, -0.1605534553527832, -0.1712244749069214, -0.14864563941955566, -0.12050533294677734, -0.11020779609680176, -0.11559748649597168, -0.11937582492828369, -0.09243893623352051, -0.04015517234802246, -0.018019914627075195, -0.04698038101196289, -0.07125461101531982, -0.04965519905090332, -0.014166831970214844, -0.0044831037521362305, -0.010814666748046875, -0.0033524036407470703, 0.0196835994720459, 0.04633009433746338, 0.07793891429901123, 0.10954630374908447, 0.11985993385314941, 0.10022234916687012, 0.0797581672668457, 0.08235812187194824, 0.07843363285064697, 0.043930888175964355, 0.012169480323791504, 0.021724343299865723, 0.06522941589355469, 0.10875856876373291, 0.1341007947921753, 0.1399155855178833, 0.12991487979888916, 0.11990725994110107, 0.11670315265655518, 0.1050945520401001, 0.08710646629333496, 0.07422339916229248, 0.04929494857788086, 0.01374828815460205, 0.007164478302001953, 0.025658607482910156, 0.026568055152893066, 0.03109431266784668, 0.08767318725585938, 0.1506139039993286, 0.15682220458984375, 0.14418649673461914, 0.15093612670898438, 0.15042626857757568, 0.1358642578125, 0.11857342720031738, 0.09690451622009277, 0.08896052837371826, 0.1047893762588501, 0.11650681495666504, 0.12035048007965088, 0.14209628105163574, 0.16403353214263916, 0.15483248233795166, 0.1357945203781128, 0.13604998588562012, 0.14855635166168213, 0.1522594690322876, 0.1344432830810547, 0.11377418041229248, 0.12683308124542236, 0.15817606449127197, 0.15553045272827148, 0.12389230728149414, 0.10789799690246582, 0.11085271835327148, 0.10509026050567627, 0.08825063705444336, 0.07614541053771973, 0.05879080295562744, 0.034650444984436035, 0.036742568016052246, 0.05430877208709717, 0.04065108299255371, 0.013470053672790527, 0.01580369472503662, 0.027284622192382812, 0.023079514503479004, 0.027742385864257812, 0.04296374320983887, 0.03832972049713135, 0.02705836296081543, 0.03471183776855469, 0.038552165031433105, 0.028060317039489746, 0.03086388111114502, 0.03963184356689453, 0.028004884719848633, 0.01490938663482666, 0.014776945114135742, 0.0006202459335327148, -0.01997840404510498, -0.008894920349121094, 0.006175875663757324, -0.01719522476196289, -0.04103231430053711, -0.03052210807800293, -0.015636682510375977, -0.0078202486038208, 0.009159684181213379, 0.014788269996643066, -0.015173554420471191, -0.05453753471374512, -0.06772994995117188, -0.062456488609313965, -0.06600832939147949, -0.08294367790222168, -0.0989910364151001, -0.0930023193359375, -0.06335842609405518, -0.06311619281768799, -0.11351346969604492, -0.13675391674041748, -0.11063992977142334, -0.10651528835296631, -0.10274779796600342\}, \{-0.00019276142120361328, -0.0008546113967895508, -0.0011512041091918945, -0.0003414154052734375, 0.00031960010528564453, 0.00026595592498779297, -0.000202178955078125, -0.001486063003540039, -0.002101898193359375, 1.811981201171875e-05, 0.003612518310546875, 0.004551410675048828, 0.0009132623672485352, -0.0033173561096191406, -0.0034875869750976562, 6.556510925292969e-06, 0.003580451011657715, 0.005030274391174316, 0.0047149658203125, 0.0023479461669921875, -0.002699732780456543, -0.007408738136291504, -0.007855415344238281, -0.006338238716125488, -0.004579901695251465, 0.006789565086364746, 0.025725483894348145, 0.022507071495056152, -0.01045382022857666, -0.03273916244506836, -0.023112177848815918, -0.0021512508392333984, 0.01935100555419922, 0.02936422824859619, 0.008227109909057617, -0.015272736549377441, -0.0035239458084106445, 0.011955857276916504, -0.007554292678833008, -0.027881383895874023, -0.007137775421142578, 0.01538383960723877, -0.002095937728881836, -0.005031943321228027, 0.035779714584350586, 0.040422677993774414, -0.010872960090637207, -0.03330528736114502, -0.010599255561828613, 0.005516767501831055, 0.016508936882019043, 0.025953292846679688, -0.0038393735885620117, -0.03726637363433838, 0.006607174873352051, 0.07679438591003418, 0.050582289695739746, -0.04903602600097656, -0.08028292655944824, -0.005838274955749512, 0.06014561653137207, 0.03633856773376465, -0.023099780082702637, -0.03108060359954834, 0.011297345161437988, 0.03178298473358154, 0.01012730598449707, -0.002532958984375, 0.0007157325744628906, -0.009153008460998535, -0.004942774772644043, 0.025640368461608887, 0.021431326866149902, -0.021207213401794434, -0.023672103881835938, 0.014607787132263184, 0.019919633865356445, -0.0077359676361083984, -0.011949539184570312, 0.011954665184020996, 0.01865363121032715, -0.013427972793579102, -0.0347137451171875, 0.005061507225036621, 0.050296902656555176, 0.023358702659606934, -0.03509020805358887, -0.034333229064941406, 0.023107171058654785, 0.045990943908691406, -0.01065373420715332, -0.06581234931945801, -0.027550339698791504, 0.05623173713684082, 0.06109762191772461, -0.015583395957946777, -0.036693453788757324, 0.03572821617126465, 0.04913675785064697, -0.03798544406890869, -0.04867219924926758, 0.038854241371154785, 0.05463826656341553, 0.01032400131225586, 0.00984954833984375, 0.011184096336364746, -0.004972696304321289, -0.004260540008544922, -0.0103074312210083, -0.002702951431274414, 0.02236759662628174, -0.023937582969665527, -0.08607518672943115, -0.01564610004425049, 0.09415388107299805, 0.060933589935302734, -0.04587054252624512, -0.06493103504180908, -0.020270943641662598, -0.00892174243927002, -0.019640445709228516, -0.008898735046386719, -0.0026618242263793945, -0.0260392427444458, -0.03579521179199219, 0.0015512704849243164, 0.03997945785522461, 0.03140711784362793, -0.007421135902404785, -0.04778718948364258, -0.06973564624786377, -0.03937232494354248, 0.030640125274658203, 0.0492023229598999, -0.01496422290802002, -0.060074448585510254, -0.024803638458251953, 0.029970288276672363, 0.060141801834106445, 0.07193243503570557, 0.04773902893066406, -0.0312345027923584, -0.11586475372314453, -0.1246786117553711, -0.058272719383239746, 0.007813811302185059, 0.03402233123779297, 0.04491865634918213, 0.05979466438293457, 0.03185844421386719, -0.06257164478302002, -0.12773776054382324, -0.09966015815734863, -0.04123198986053467, 0.01120150089263916, 0.06698894500732422, 0.08770668506622314, 0.05374789237976074, 0.0075310468673706055, -0.013025760650634766, -0.008366823196411133, -0.008133411407470703, -0.012332320213317871, 0.008831977844238281, 0.011703729629516602, -0.04704737663269043, -0.06306934356689453, 0.03733408451080322, 0.12193751335144043, 0.08452796936035156, 0.01544797420501709, 0.008822917938232422, 0.027741670608520508, 0.004280686378479004, -0.058293938636779785, -0.09628283977508545, -0.08288919925689697, -0.08616721630096436, -0.14423513412475586, -0.16563522815704346, -0.0805734395980835, 0.04283595085144043, 0.09959423542022705, 0.08430111408233643, 0.08578622341156006, 0.10448980331420898, 0.04402446746826172, -0.05954265594482422, -0.08478283882141113, -0.05704939365386963, -0.0678093433380127, -0.08811557292938232, -0.06034541130065918, -0.020751476287841797, -0.01802682876586914, -0.030344247817993164, -0.008818507194519043, 0.042110562324523926, 0.07975828647613525, 0.07644355297088623, 0.03725326061248779, 0.017053604125976562, 0.03372490406036377, 0.04184901714324951, 0.07449650764465332, 0.16484880447387695, 0.2086268663406372, 0.14426195621490479, 0.03964376449584961, -0.060538291931152344, -0.1561272144317627, -0.228829026222229, -0.25271451473236084, -0.23596715927124023, -0.2032707929611206, -0.13231194019317627, 0.00919651985168457, 0.17594587802886963, 0.2688401937484741, 0.2683805227279663, 0.24067473411560059, 0.21136140823364258, 0.1679096221923828, 0.08660686016082764, -0.03515136241912842, -0.12369036674499512, -0.13155591487884521, -0.10489225387573242, -0.08960938453674316, -0.07591736316680908, -0.04494881629943848, 0.0006262063980102539, 0.04543006420135498, 0.05810260772705078, 0.047572970390319824, 0.07597637176513672, 0.13945400714874268, 0.16162514686584473, 0.13311779499053955, 0.11332476139068604, 0.11291730403900146, 0.10619139671325684, 0.08590149879455566, 0.04206740856170654, -0.01557159423828125, -0.04412078857421875, -0.05707597732543945, -0.11134445667266846, -0.16953599452972412, -0.1619105339050293, -0.12540876865386963, -0.12011933326721191, -0.12652587890625, -0.10605597496032715, -0.08773314952850342, -0.09902238845825195, -0.08056032657623291, -0.015919804573059082, 0.003995180130004883, -0.05193126201629639, -0.10588502883911133, -0.11218905448913574, -0.10307466983795166, -0.0995858907699585, -0.07815062999725342, -0.026581645011901855, 0.030030131340026855, 0.07472968101501465, 0.11796140670776367, 0.16021192073822021, 0.18784892559051514, 0.19012200832366943, 0.16503000259399414, 0.12352192401885986, 0.07967805862426758, 0.054854393005371094, 0.06149017810821533, 0.06472361087799072, 0.021869301795959473, -0.036287784576416016, -0.0190279483795166, 0.07918262481689453, 0.12698709964752197, 0.059715986251831055, -0.024969100952148438, -0.06018102169036865, -0.0839623212814331, -0.11879599094390869, -0.15084350109100342, -0.1678851842880249, -0.15017127990722656, -0.1017221212387085, -0.05564475059509277, -0.011201977729797363, 0.04347264766693115, 0.0857917070388794, 0.1058722734451294, 0.11930596828460693, 0.12347972393035889, 0.11101508140563965, 0.10329151153564453, 0.11336326599121094, 0.11137628555297852, 0.07915294170379639, 0.051343679428100586, 0.04898476600646973, 0.02268528938293457, -0.057979702949523926, -0.12369036674499512, -0.12723660469055176, -0.12671709060668945, -0.1443500518798828, -0.12954139709472656, -0.09769916534423828, -0.10130727291107178, -0.11140549182891846, -0.08407294750213623, -0.06281077861785889, -0.10980761051177979, -0.1911386251449585, -0.22972261905670166, -0.23002183437347412, -0.234694242477417, -0.24427258968353271, -0.2479795217514038, -0.2351667881011963, -0.2099541425704956, -0.1788642406463623, -0.11421144008636475, -0.025595426559448242, 0.05230224132537842, 0.11520254611968994, 0.15294742584228516, 0.17534947395324707, 0.2000635862350464, 0.21004951000213623, 0.1932692527770996, 0.17428350448608398, 0.179948091506958, 0.18530499935150146, 0.17960584163665771, 0.19712412357330322, 0.219488263130188, 0.21025347709655762, 0.19125282764434814, 0.18508470058441162, 0.1694704294204712, 0.12549221515655518, 0.07104885578155518, 0.04029583930969238, 0.05243551731109619, 0.07193624973297119, 0.05684053897857666, 0.03926825523376465, 0.050171613693237305, 0.057363033294677734, 0.049514055252075195, 0.04949069023132324, 0.045107126235961914, 0.026120424270629883, 0.024148941040039062, 0.03752493858337402, 0.0141066312789917, -0.05343949794769287, -0.10280013084411621, -0.10529124736785889, -0.10992920398712158, -0.14469683170318604, -0.1778407096862793, -0.19040298461914062, -0.1854931116104126, -0.15789580345153809, -0.12273216247558594, -0.11422383785247803, -0.1266012191772461, -0.13487815856933594, -0.15205121040344238, -0.17784321308135986, -0.1768789291381836, -0.15126550197601318, -0.1354731321334839, -0.14378559589385986, -0.15488409996032715, -0.12973201274871826, -0.0766911506652832, -0.054975152015686035, -0.08002400398254395, -0.09874999523162842, -0.07738864421844482, -0.04359161853790283, -0.029198527336120605, -0.028589606285095215, -0.02039027214050293, 0.00023305416107177734, 0.02946031093597412, 0.07000374794006348, 0.10936415195465088, 0.11771225929260254, 0.09067606925964355, 0.07157456874847412, 0.08761930465698242, 0.096099853515625, 0.06136214733123779, 0.01703023910522461, 0.010963082313537598, 0.04609501361846924, 0.0911339521408081, 0.12428069114685059, 0.13417983055114746, 0.11591219902038574, 0.0977945327758789, 0.10513758659362793, 0.1107625961303711, 0.09388995170593262, 0.07846200466156006, 0.06401729583740234, 0.029898762702941895, 0.004997134208679199, 0.013776302337646484, 0.020159244537353516, 0.021957039833068848, 0.06718671321868896, 0.12535429000854492, 0.13554716110229492, 0.13538765907287598, 0.15213918685913086, 0.13934075832366943, 0.10779285430908203, 0.1019829511642456, 0.09841740131378174, 0.07521116733551025, 0.06976711750030518, 0.10565197467803955, 0.1457512378692627, 0.15254628658294678, 0.14875996112823486, 0.16248536109924316, 0.16472065448760986, 0.14304983615875244, 0.145097017288208, 0.17108142375946045, 0.15649104118347168, 0.1066904067993164, 0.10265815258026123, 0.15045702457427979, 0.16820776462554932, 0.13838410377502441, 0.12171757221221924, 0.12875676155090332, 0.1176307201385498, 0.08721673488616943, 0.07331037521362305, 0.07018780708312988, 0.04355001449584961, 0.01278221607208252, 0.018721580505371094, 0.04105055332183838, 0.039315223693847656, 0.02689528465270996, 0.030165791511535645, 0.036980628967285156, 0.037801265716552734, 0.03967130184173584, 0.03875696659088135, 0.03334546089172363, 0.025502324104309082, 0.012368917465209961, 0.007869720458984375, 0.025928497314453125, 0.04088783264160156, 0.030080199241638184, 0.01993858814239502, 0.033383727073669434, 0.03838944435119629, 0.0026932954788208008, -0.02671802043914795, -0.0038722753524780273, 0.007236838340759277, -0.03801846504211426, -0.06738543510437012, -0.04260730743408203, -0.013179421424865723, -0.0030993223190307617, 0.0028181076049804688, -0.0020074844360351562, -0.037847280502319336, -0.08669781684875488, -0.10269773006439209, -0.08195006847381592, -0.06769907474517822, -0.08812320232391357, -0.11547243595123291, -0.09213685989379883, -0.04346668720245361, -0.07539713382720947, -0.15947413444519043, -0.1560577154159546, -0.09122884273529053, -0.07877826690673828, -0.08785176277160645\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_48000::bitDepth = 24}}
\par
{\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAABNU}
{\bkmkend AAAAAAABNU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_24bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_24bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_24bit_48000}
{\xe \v wav_stereo_24bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_24bit_48000::testBuffer = \{\{-0.0005353689193725586, -0.0018157958984375, -0.0024815797805786133, -0.0017586946487426758, -0.0009694099426269531, -0.0005301237106323242, -0.00023984909057617188, -0.0006633996963500977, -0.0007344484329223633, 0.0013926029205322266, 0.004686951637268066, 0.005301952362060547, 0.001447916030883789, -0.003507852554321289, -0.005098938941955566, -0.0023632049560546875, 0.0019316673278808594, 0.003896951675415039, 0.0021713972091674805, -0.0007047653198242188, -0.0014480352401733398, -0.0008498430252075195, -0.001700282096862793, -0.0032678842544555664, -0.0038613080978393555, -0.0010759830474853516, 0.01182401180267334, 0.02786707878112793, 0.01855754852294922, -0.016994118690490723, -0.03550422191619873, -0.021430492401123047, -0.0009359121322631836, 0.018381357192993164, 0.02882969379425049, 0.007241487503051758, -0.018944501876831055, -0.00481104850769043, 0.01887667179107666, 0.002834796905517578, -0.023562073707580566, -0.008999109268188477, 0.01643657684326172, 0.0038520097732543945, -0.0024552345275878906, 0.033385276794433594, 0.04029250144958496, -0.007833361625671387, -0.03152954578399658, -0.00864863395690918, 0.010521411895751953, 0.021465659141540527, 0.027612924575805664, -0.004909515380859375, -0.041514039039611816, -0.0006999969482421875, 0.07184028625488281, 0.05355656147003174, -0.03894925117492676, -0.06949126720428467, -0.0004367828369140625, 0.05938148498535156, 0.03382563591003418, -0.021600723266601562, -0.02450406551361084, 0.018337607383728027, 0.035019755363464355, 0.009488821029663086, -0.002547740936279297, 0.005485415458679199, -0.004842281341552734, -0.010583758354187012, 0.013787388801574707, 0.016601920127868652, -0.018032312393188477, -0.02136683464050293, 0.01699841022491455, 0.03017401695251465, 0.007547736167907715, -0.004074692726135254, 0.00835728645324707, 0.014879941940307617, -0.007208824157714844, -0.026047229766845703, 0.0035952329635620117, 0.041936397552490234, 0.017410874366760254, -0.04070174694061279, -0.04405665397644043, 0.01763904094696045, 0.05734562873840332, 0.01208043098449707, -0.053052544593811035, -0.033879995346069336, 0.04517984390258789, 0.06426751613616943, 0.002217888832092285, -0.023540019989013672, 0.03292644023895264, 0.041263461112976074, -0.044199466705322266, -0.05868065357208252, 0.030320167541503906, 0.052309274673461914, 0.0027663707733154297, -0.0023293495178222656, 0.010164737701416016, 0.004391789436340332, 0.004195094108581543, -0.008912801742553711, -0.014009714126586914, 0.007948517799377441, -0.018178105354309082, -0.06131124496459961, 0.002528667449951172, 0.09173691272735596, 0.04485476016998291, -0.0588078498840332, -0.05958127975463867, 0.0005204677581787109, 0.005663275718688965, -0.024928927421569824, -0.023584365844726562, -0.008938193321228027, -0.01889955997467041, -0.02177739143371582, 0.011068344116210938, 0.027295351028442383, -0.011210322380065918, -0.051587700843811035, -0.053266286849975586, -0.039228200912475586, -0.014955282211303711, 0.022309303283691406, 0.02100658416748047, -0.03366053104400635, -0.05080461502075195, 0.012375712394714355, 0.07740390300750732, 0.08623313903808594, 0.04926800727844238, -0.02035236358642578, -0.1011120080947876, -0.14040255546569824, -0.10365068912506104, -0.023254036903381348, 0.03857135772705078, 0.05435192584991455, 0.03889870643615723, 0.012852787971496582, -0.030987024307250977, -0.08929860591888428, -0.09824728965759277, -0.0326007604598999, 0.030603647232055664, 0.05155456066131592, 0.0559309720993042, 0.030367136001586914, -0.024924635887145996, -0.05092668533325195, -0.024532198905944824, 0.011846780776977539, 0.013265013694763184, -0.00581967830657959, 0.0026712417602539062, 0.007601737976074219, -0.039343833923339844, -0.04319131374359131, 0.06665289402008057, 0.14398396015167236, 0.07255923748016357, -0.03774690628051758, -0.06214296817779541, -0.029167890548706055, -0.023360371589660645, -0.058979034423828125, -0.08780872821807861, -0.0894085168838501, -0.09925878047943115, -0.12716281414031982, -0.1099623441696167, -0.014007568359375, 0.088714599609375, 0.1116938591003418, 0.06560969352722168, 0.03189575672149658, 0.02760756015777588, -0.005571961402893066, -0.0620419979095459, -0.07850146293640137, -0.06346392631530762, -0.0638892650604248, -0.06543803215026855, -0.047734737396240234, -0.040279388427734375, -0.053655028343200684, -0.0394212007522583, 0.026441454887390137, 0.08167052268981934, 0.08292233943939209, 0.06283867359161377, 0.03786969184875488, 0.016643762588500977, 0.035663723945617676, 0.08345603942871094, 0.11807060241699219, 0.14475929737091064, 0.1512831449508667, 0.07611465454101562, -0.06967699527740479, -0.18366336822509766, -0.2215193510055542, -0.228063702583313, -0.21772289276123047, -0.17403638362884521, -0.10664904117584229, -0.012221217155456543, 0.11883389949798584, 0.23630857467651367, 0.26976871490478516, 0.2348005771636963, 0.19006073474884033, 0.14441847801208496, 0.08886027336120605, 0.013650059700012207, -0.07653796672821045, -0.1362673044204712, -0.13289117813110352, -0.09005904197692871, -0.05935049057006836, -0.04871571063995361, -0.022919416427612305, 0.023525714874267578, 0.060304999351501465, 0.06689858436584473, 0.06617927551269531, 0.09962904453277588, 0.15390539169311523, 0.16637468338012695, 0.1253190040588379, 0.08236527442932129, 0.06566929817199707, 0.06699633598327637, 0.0629422664642334, 0.021541595458984375, -0.042909860610961914, -0.07471799850463867, -0.08527469635009766, -0.12843263149261475, -0.16909754276275635, -0.15074551105499268, -0.10744369029998779, -0.08842837810516357, -0.08267450332641602, -0.06730234622955322, -0.06644761562347412, -0.0873953104019165, -0.07795059680938721, -0.03837764263153076, -0.034098267555236816, -0.07519185543060303, -0.11002027988433838, -0.10905241966247559, -0.08707404136657715, -0.06271755695343018, -0.03213071823120117, 0.016660451889038086, 0.07577764987945557, 0.12079823017120361, 0.14485979080200195, 0.16540908813476562, 0.18814897537231445, 0.18603217601776123, 0.14115381240844727, 0.078652024269104, 0.03346526622772217, 0.020048856735229492, 0.028243064880371094, 0.027113676071166992, -0.006494998931884766, -0.04590046405792236, -0.020364046096801758, 0.07584714889526367, 0.13061916828155518, 0.0785517692565918, -0.0022612810134887695, -0.04539132118225098, -0.07252788543701172, -0.10594463348388672, -0.14356112480163574, -0.16857707500457764, -0.15273058414459229, -0.10285747051239014, -0.055068254470825195, -0.012634634971618652, 0.039493441581726074, 0.08833456039428711, 0.11618483066558838, 0.12784481048583984, 0.13093805313110352, 0.12640225887298584, 0.12281036376953125, 0.12299621105194092, 0.1068580150604248, 0.07169830799102783, 0.048117876052856445, 0.03379940986633301, -0.01625370979309082, -0.09772813320159912, -0.14298546314239502, -0.134590744972229, -0.12811553478240967, -0.1353682279586792, -0.11606812477111816, -0.08822298049926758, -0.09889388084411621, -0.11676955223083496, -0.09562039375305176, -0.07921159267425537, -0.1261528730392456, -0.20061981678009033, -0.23133325576782227, -0.22429180145263672, -0.2265070676803589, -0.23732519149780273, -0.2323462963104248, -0.20833563804626465, -0.17016899585723877, -0.11388063430786133, -0.03736007213592529, 0.04158031940460205, 0.10008406639099121, 0.13604795932769775, 0.15819740295410156, 0.1686631441116333, 0.17503464221954346, 0.18374860286712646, 0.1799170970916748, 0.16497564315795898, 0.16522789001464844, 0.17826223373413086, 0.19110441207885742, 0.2133733034133911, 0.23157572746276855, 0.2186269760131836, 0.19382965564727783, 0.1786268949508667, 0.1509941816329956, 0.09754598140716553, 0.03965890407562256, 0.01019740104675293, 0.02343595027923584, 0.04391515254974365, 0.034508466720581055, 0.027436256408691406, 0.05022251605987549, 0.06523478031158447, 0.06500518321990967, 0.07601487636566162, 0.07491195201873779, 0.04451632499694824, 0.024481773376464844, 0.02528250217437744, -0.0024760961532592773, -0.07039666175842285, -0.12084364891052246, -0.12771594524383545, -0.129064679145813, -0.14493012428283691, -0.16004621982574463, -0.16779577732086182, -0.16288995742797852, -0.13577568531036377, -0.10431289672851562, -0.09752440452575684, -0.11126375198364258, -0.13270068168640137, -0.1605534553527832, -0.1712244749069214, -0.14864563941955566, -0.12050533294677734, -0.11020779609680176, -0.11559748649597168, -0.11937582492828369, -0.09243893623352051, -0.04015517234802246, -0.018019914627075195, -0.04698038101196289, -0.07125461101531982, -0.04965519905090332, -0.014166831970214844, -0.0044831037521362305, -0.010814666748046875, -0.0033524036407470703, 0.0196835994720459, 0.04633009433746338, 0.07793891429901123, 0.10954630374908447, 0.11985993385314941, 0.10022234916687012, 0.0797581672668457, 0.08235812187194824, 0.07843363285064697, 0.043930888175964355, 0.012169480323791504, 0.021724343299865723, 0.06522941589355469, 0.10875856876373291, 0.1341007947921753, 0.1399155855178833, 0.12991487979888916, 0.11990725994110107, 0.11670315265655518, 0.1050945520401001, 0.08710646629333496, 0.07422339916229248, 0.04929494857788086, 0.01374828815460205, 0.007164478302001953, 0.025658607482910156, 0.026568055152893066, 0.03109431266784668, 0.08767318725585938, 0.1506139039993286, 0.15682220458984375, 0.14418649673461914, 0.15093612670898438, 0.15042626857757568, 0.1358642578125, 0.11857342720031738, 0.09690451622009277, 0.08896052837371826, 0.1047893762588501, 0.11650681495666504, 0.12035048007965088, 0.14209628105163574, 0.16403353214263916, 0.15483248233795166, 0.1357945203781128, 0.13604998588562012, 0.14855635166168213, 0.1522594690322876, 0.1344432830810547, 0.11377418041229248, 0.12683308124542236, 0.15817606449127197, 0.15553045272827148, 0.12389230728149414, 0.10789799690246582, 0.11085271835327148, 0.10509026050567627, 0.08825063705444336, 0.07614541053771973, 0.05879080295562744, 0.034650444984436035, 0.036742568016052246, 0.05430877208709717, 0.04065108299255371, 0.013470053672790527, 0.01580369472503662, 0.027284622192382812, 0.023079514503479004, 0.027742385864257812, 0.04296374320983887, 0.03832972049713135, 0.02705836296081543, 0.03471183776855469, 0.038552165031433105, 0.028060317039489746, 0.03086388111114502, 0.03963184356689453, 0.028004884719848633, 0.01490938663482666, 0.014776945114135742, 0.0006202459335327148, -0.01997840404510498, -0.008894920349121094, 0.006175875663757324, -0.01719522476196289, -0.04103231430053711, -0.03052210807800293, -0.015636682510375977, -0.0078202486038208, 0.009159684181213379, 0.014788269996643066, -0.015173554420471191, -0.05453753471374512, -0.06772994995117188, -0.062456488609313965, -0.06600832939147949, -0.08294367790222168, -0.0989910364151001, -0.0930023193359375, -0.06335842609405518, -0.06311619281768799, -0.11351346969604492, -0.13675391674041748, -0.11063992977142334, -0.10651528835296631, -0.10274779796600342\}, \{-0.00019276142120361328, -0.0008546113967895508, -0.0011512041091918945, -0.0003414154052734375, 0.00031960010528564453, 0.00026595592498779297, -0.000202178955078125, -0.001486063003540039, -0.002101898193359375, 1.811981201171875e-05, 0.003612518310546875, 0.004551410675048828, 0.0009132623672485352, -0.0033173561096191406, -0.0034875869750976562, 6.556510925292969e-06, 0.003580451011657715, 0.005030274391174316, 0.0047149658203125, 0.0023479461669921875, -0.002699732780456543, -0.007408738136291504, -0.007855415344238281, -0.006338238716125488, -0.004579901695251465, 0.006789565086364746, 0.025725483894348145, 0.022507071495056152, -0.01045382022857666, -0.03273916244506836, -0.023112177848815918, -0.0021512508392333984, 0.01935100555419922, 0.02936422824859619, 0.008227109909057617, -0.015272736549377441, -0.0035239458084106445, 0.011955857276916504, -0.007554292678833008, -0.027881383895874023, -0.007137775421142578, 0.01538383960723877, -0.002095937728881836, -0.005031943321228027, 0.035779714584350586, 0.040422677993774414, -0.010872960090637207, -0.03330528736114502, -0.010599255561828613, 0.005516767501831055, 0.016508936882019043, 0.025953292846679688, -0.0038393735885620117, -0.03726637363433838, 0.006607174873352051, 0.07679438591003418, 0.050582289695739746, -0.04903602600097656, -0.08028292655944824, -0.005838274955749512, 0.06014561653137207, 0.03633856773376465, -0.023099780082702637, -0.03108060359954834, 0.011297345161437988, 0.03178298473358154, 0.01012730598449707, -0.002532958984375, 0.0007157325744628906, -0.009153008460998535, -0.004942774772644043, 0.025640368461608887, 0.021431326866149902, -0.021207213401794434, -0.023672103881835938, 0.014607787132263184, 0.019919633865356445, -0.0077359676361083984, -0.011949539184570312, 0.011954665184020996, 0.01865363121032715, -0.013427972793579102, -0.0347137451171875, 0.005061507225036621, 0.050296902656555176, 0.023358702659606934, -0.03509020805358887, -0.034333229064941406, 0.023107171058654785, 0.045990943908691406, -0.01065373420715332, -0.06581234931945801, -0.027550339698791504, 0.05623173713684082, 0.06109762191772461, -0.015583395957946777, -0.036693453788757324, 0.03572821617126465, 0.04913675785064697, -0.03798544406890869, -0.04867219924926758, 0.038854241371154785, 0.05463826656341553, 0.01032400131225586, 0.00984954833984375, 0.011184096336364746, -0.004972696304321289, -0.004260540008544922, -0.0103074312210083, -0.002702951431274414, 0.02236759662628174, -0.023937582969665527, -0.08607518672943115, -0.01564610004425049, 0.09415388107299805, 0.060933589935302734, -0.04587054252624512, -0.06493103504180908, -0.020270943641662598, -0.00892174243927002, -0.019640445709228516, -0.008898735046386719, -0.0026618242263793945, -0.0260392427444458, -0.03579521179199219, 0.0015512704849243164, 0.03997945785522461, 0.03140711784362793, -0.007421135902404785, -0.04778718948364258, -0.06973564624786377, -0.03937232494354248, 0.030640125274658203, 0.0492023229598999, -0.01496422290802002, -0.060074448585510254, -0.024803638458251953, 0.029970288276672363, 0.060141801834106445, 0.07193243503570557, 0.04773902893066406, -0.0312345027923584, -0.11586475372314453, -0.1246786117553711, -0.058272719383239746, 0.007813811302185059, 0.03402233123779297, 0.04491865634918213, 0.05979466438293457, 0.03185844421386719, -0.06257164478302002, -0.12773776054382324, -0.09966015815734863, -0.04123198986053467, 0.01120150089263916, 0.06698894500732422, 0.08770668506622314, 0.05374789237976074, 0.0075310468673706055, -0.013025760650634766, -0.008366823196411133, -0.008133411407470703, -0.012332320213317871, 0.008831977844238281, 0.011703729629516602, -0.04704737663269043, -0.06306934356689453, 0.03733408451080322, 0.12193751335144043, 0.08452796936035156, 0.01544797420501709, 0.008822917938232422, 0.027741670608520508, 0.004280686378479004, -0.058293938636779785, -0.09628283977508545, -0.08288919925689697, -0.08616721630096436, -0.14423513412475586, -0.16563522815704346, -0.0805734395980835, 0.04283595085144043, 0.09959423542022705, 0.08430111408233643, 0.08578622341156006, 0.10448980331420898, 0.04402446746826172, -0.05954265594482422, -0.08478283882141113, -0.05704939365386963, -0.0678093433380127, -0.08811557292938232, -0.06034541130065918, -0.020751476287841797, -0.01802682876586914, -0.030344247817993164, -0.008818507194519043, 0.042110562324523926, 0.07975828647613525, 0.07644355297088623, 0.03725326061248779, 0.017053604125976562, 0.03372490406036377, 0.04184901714324951, 0.07449650764465332, 0.16484880447387695, 0.2086268663406372, 0.14426195621490479, 0.03964376449584961, -0.060538291931152344, -0.1561272144317627, -0.228829026222229, -0.25271451473236084, -0.23596715927124023, -0.2032707929611206, -0.13231194019317627, 0.00919651985168457, 0.17594587802886963, 0.2688401937484741, 0.2683805227279663, 0.24067473411560059, 0.21136140823364258, 0.1679096221923828, 0.08660686016082764, -0.03515136241912842, -0.12369036674499512, -0.13155591487884521, -0.10489225387573242, -0.08960938453674316, -0.07591736316680908, -0.04494881629943848, 0.0006262063980102539, 0.04543006420135498, 0.05810260772705078, 0.047572970390319824, 0.07597637176513672, 0.13945400714874268, 0.16162514686584473, 0.13311779499053955, 0.11332476139068604, 0.11291730403900146, 0.10619139671325684, 0.08590149879455566, 0.04206740856170654, -0.01557159423828125, -0.04412078857421875, -0.05707597732543945, -0.11134445667266846, -0.16953599452972412, -0.1619105339050293, -0.12540876865386963, -0.12011933326721191, -0.12652587890625, -0.10605597496032715, -0.08773314952850342, -0.09902238845825195, -0.08056032657623291, -0.015919804573059082, 0.003995180130004883, -0.05193126201629639, -0.10588502883911133, -0.11218905448913574, -0.10307466983795166, -0.0995858907699585, -0.07815062999725342, -0.026581645011901855, 0.030030131340026855, 0.07472968101501465, 0.11796140670776367, 0.16021192073822021, 0.18784892559051514, 0.19012200832366943, 0.16503000259399414, 0.12352192401885986, 0.07967805862426758, 0.054854393005371094, 0.06149017810821533, 0.06472361087799072, 0.021869301795959473, -0.036287784576416016, -0.0190279483795166, 0.07918262481689453, 0.12698709964752197, 0.059715986251831055, -0.024969100952148438, -0.06018102169036865, -0.0839623212814331, -0.11879599094390869, -0.15084350109100342, -0.1678851842880249, -0.15017127990722656, -0.1017221212387085, -0.05564475059509277, -0.011201977729797363, 0.04347264766693115, 0.0857917070388794, 0.1058722734451294, 0.11930596828460693, 0.12347972393035889, 0.11101508140563965, 0.10329151153564453, 0.11336326599121094, 0.11137628555297852, 0.07915294170379639, 0.051343679428100586, 0.04898476600646973, 0.02268528938293457, -0.057979702949523926, -0.12369036674499512, -0.12723660469055176, -0.12671709060668945, -0.1443500518798828, -0.12954139709472656, -0.09769916534423828, -0.10130727291107178, -0.11140549182891846, -0.08407294750213623, -0.06281077861785889, -0.10980761051177979, -0.1911386251449585, -0.22972261905670166, -0.23002183437347412, -0.234694242477417, -0.24427258968353271, -0.2479795217514038, -0.2351667881011963, -0.2099541425704956, -0.1788642406463623, -0.11421144008636475, -0.025595426559448242, 0.05230224132537842, 0.11520254611968994, 0.15294742584228516, 0.17534947395324707, 0.2000635862350464, 0.21004951000213623, 0.1932692527770996, 0.17428350448608398, 0.179948091506958, 0.18530499935150146, 0.17960584163665771, 0.19712412357330322, 0.219488263130188, 0.21025347709655762, 0.19125282764434814, 0.18508470058441162, 0.1694704294204712, 0.12549221515655518, 0.07104885578155518, 0.04029583930969238, 0.05243551731109619, 0.07193624973297119, 0.05684053897857666, 0.03926825523376465, 0.050171613693237305, 0.057363033294677734, 0.049514055252075195, 0.04949069023132324, 0.045107126235961914, 0.026120424270629883, 0.024148941040039062, 0.03752493858337402, 0.0141066312789917, -0.05343949794769287, -0.10280013084411621, -0.10529124736785889, -0.10992920398712158, -0.14469683170318604, -0.1778407096862793, -0.19040298461914062, -0.1854931116104126, -0.15789580345153809, -0.12273216247558594, -0.11422383785247803, -0.1266012191772461, -0.13487815856933594, -0.15205121040344238, -0.17784321308135986, -0.1768789291381836, -0.15126550197601318, -0.1354731321334839, -0.14378559589385986, -0.15488409996032715, -0.12973201274871826, -0.0766911506652832, -0.054975152015686035, -0.08002400398254395, -0.09874999523162842, -0.07738864421844482, -0.04359161853790283, -0.029198527336120605, -0.028589606285095215, -0.02039027214050293, 0.00023305416107177734, 0.02946031093597412, 0.07000374794006348, 0.10936415195465088, 0.11771225929260254, 0.09067606925964355, 0.07157456874847412, 0.08761930465698242, 0.096099853515625, 0.06136214733123779, 0.01703023910522461, 0.010963082313537598, 0.04609501361846924, 0.0911339521408081, 0.12428069114685059, 0.13417983055114746, 0.11591219902038574, 0.0977945327758789, 0.10513758659362793, 0.1107625961303711, 0.09388995170593262, 0.07846200466156006, 0.06401729583740234, 0.029898762702941895, 0.004997134208679199, 0.013776302337646484, 0.020159244537353516, 0.021957039833068848, 0.06718671321868896, 0.12535429000854492, 0.13554716110229492, 0.13538765907287598, 0.15213918685913086, 0.13934075832366943, 0.10779285430908203, 0.1019829511642456, 0.09841740131378174, 0.07521116733551025, 0.06976711750030518, 0.10565197467803955, 0.1457512378692627, 0.15254628658294678, 0.14875996112823486, 0.16248536109924316, 0.16472065448760986, 0.14304983615875244, 0.145097017288208, 0.17108142375946045, 0.15649104118347168, 0.1066904067993164, 0.10265815258026123, 0.15045702457427979, 0.16820776462554932, 0.13838410377502441, 0.12171757221221924, 0.12875676155090332, 0.1176307201385498, 0.08721673488616943, 0.07331037521362305, 0.07018780708312988, 0.04355001449584961, 0.01278221607208252, 0.018721580505371094, 0.04105055332183838, 0.039315223693847656, 0.02689528465270996, 0.030165791511535645, 0.036980628967285156, 0.037801265716552734, 0.03967130184173584, 0.03875696659088135, 0.03334546089172363, 0.025502324104309082, 0.012368917465209961, 0.007869720458984375, 0.025928497314453125, 0.04088783264160156, 0.030080199241638184, 0.01993858814239502, 0.033383727073669434, 0.03838944435119629, 0.0026932954788208008, -0.02671802043914795, -0.0038722753524780273, 0.007236838340759277, -0.03801846504211426, -0.06738543510437012, -0.04260730743408203, -0.013179421424865723, -0.0030993223190307617, 0.0028181076049804688, -0.0020074844360351562, -0.037847280502319336, -0.08669781684875488, -0.10269773006439209, -0.08195006847381592, -0.06769907474517822, -0.08812320232391357, -0.11547243595123291, -0.09213685989379883, -0.04346668720245361, -0.07539713382720947, -0.15947413444519043, -0.1560577154159546, -0.09122884273529053, -0.07877826690673828, -0.08785176277160645\}\}}}
\par
{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_32bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100}
{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384873\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.11745091527700424, -0.1519666165113449, -0.10189135372638702, -0.08010855317115784, -0.08006346225738525, -0.10594028234481812, -0.1045377254486084, -0.12010768800973892, -0.17069905996322632, -0.1643330603837967, -0.17723800241947174, -0.12911230325698853, -0.07929547876119614, -0.089617058634758, -0.1707475483417511, -0.23355633020401, -0.25208917260169983, -0.24941004812717438, -0.19202817976474762, -0.15740983188152313, -0.07586338371038437, -0.05384133756160736, -0.12085731327533722, -0.17894165217876434, -0.24375104904174805, -0.23023466765880585, -0.2126595675945282, -0.18714800477027893, -0.1683509200811386, -0.15499532222747803, -0.14854571223258972, -0.10749486088752747, -0.06997065991163254, -0.05418848246335983, -0.08211927115917206, -0.13974328339099884, -0.15651385486125946, -0.15499214828014374, -0.10364945232868195, -0.08582746982574463, -0.056141868233680725, -0.010228204540908337, -0.05224359780550003, -0.10708943009376526, -0.11960842460393906, -0.1222459152340889, -0.1288643181324005, -0.07630115747451782, -0.006927777547389269, 0.01795179396867752, -0.01826094277203083, -0.06945661455392838, -0.14971168339252472, -0.18301473557949066, -0.17486467957496643, -0.15588313341140747, -0.1256936639547348, -0.11358562856912613, -0.09434855729341507, -0.07327721267938614, -0.06722074747085571, -0.04297478497028351, -0.04013794660568237, -0.02908974699676037, 0.055253252387046814, 0.058947134763002396, 0.03990260884165764, -0.023352447897195816, -0.05745059251785278, -0.0698191374540329, -0.05459041893482208, -0.0408746600151062, -0.03184802457690239, -0.006078124046325684, -0.03471580520272255, -0.021939394995570183, 0.005969506688416004, 0.01585994102060795, 0.015617938712239265, 0.0036787076387554407, -0.02015535533428192, -0.03665279969573021, -0.008294102735817432, 0.0007386141223832965, -0.0059650312177836895, 0.015064614824950695, 0.05684284120798111, 0.048504941165447235, 0.0879620835185051, 0.01712639071047306, 0.02702873758971691, 0.05021873489022255, 0.0010235735680907965, 0.042404476553201675, -0.004635974764823914, -0.0136331832036376, 0.04071985185146332, 0.09806989878416061, 0.16411001980304718, 0.1329004168510437, 0.11618109047412872, 0.10378669202327728, 0.04145503044128418, 0.027141818776726723, 0.04278336465358734, 0.0981810912489891, 0.11417917162179947, 0.15195536613464355, 0.20625101029872894, 0.18852993845939636, 0.15145990252494812, 0.1642044633626938, 0.1353333294391632, 0.12715831398963928, 0.1428956389427185, 0.1930069923400879, 0.2147543728351593, 0.24385258555412292, 0.26336562633514404, 0.24763081967830658, 0.23317265510559082, 0.17020933330059052, 0.12415832281112671, 0.12139394134283066, 0.12269188463687897, 0.16398823261260986, 0.18169990181922913, 0.22289110720157623, 0.24980822205543518, 0.25091034173965454, 0.30712440609931946, 0.2836054265499115, 0.23030813038349152, 0.1811419427394867, 0.19849999248981476, 0.23386316001415253, 0.20443186163902283, 0.19374917447566986, 0.18743258714675903, 0.24394799768924713, 0.3041987717151642, 0.3082346022129059, 0.3078215718269348, 0.3346748352050781, 0.33939746022224426, 0.33178940415382385, 0.3123377561569214, 0.2806440591812134, 0.2399751842021942, 0.24678122997283936, 0.2629908621311188, 0.2584831118583679, 0.2899355888366699, 0.2910745143890381, 0.29694750905036926, 0.3317975699901581, 0.288880854845047, 0.30398717522621155, 0.29040858149528503, 0.30649128556251526, 0.36260879039764404, 0.3220243453979492, 0.34334564208984375, 0.3413156270980835, 0.3172188103199005, 0.2689215838909149, 0.30487531423568726, 0.33099856972694397, 0.3144553601741791, 0.3462160527706146, 0.36258894205093384, 0.3252076804637909, 0.3194389343261719, 0.3036641776561737, 0.25708121061325073, 0.29499632120132446, 0.342328816652298, 0.3466757833957672, 0.361691415309906, 0.37056344747543335, 0.38426199555397034, 0.3349151909351349, 0.3347189426422119, 0.32905617356300354, 0.33780014514923096, 0.36501580476760864, 0.3765137493610382, 0.38854432106018066, 0.3586300015449524, 0.3168526589870453, 0.3674073815345764, 0.39473751187324524, 0.38887321949005127, 0.3557429611682892, 0.3551374673843384, 0.3711024522781372, 0.3542231619358063, 0.36219924688339233, 0.3432430624961853, 0.3397129476070404, 0.30429407954216003, 0.32580316066741943, 0.31904128193855286, 0.35295140743255615, 0.37153366208076477, 0.3470722436904907, 0.3311869204044342, 0.3327701985836029, 0.3308747410774231, 0.3223779797554016, 0.30104562640190125, 0.30388343334198, 0.2958034873008728, 0.28519725799560547, 0.30291759967803955, 0.319441556930542, 0.34594473242759705, 0.3312903046607971, 0.34635746479034424, 0.33610767126083374, 0.32953688502311707, 0.2787168025970459, 0.3333706855773926, 0.4060133397579193, 0.32209160923957825, 0.3166391849517822, 0.2763248383998871, 0.3064301609992981, 0.36547496914863586, 0.3600216507911682, 0.3404928743839264, 0.29173538088798523, 0.2710213363170624, 0.2909623384475708, 0.2891555726528168, 0.3117993474006653, 0.32151544094085693, 0.32411423325538635, 0.34733694791793823, 0.3345957100391388, 0.28963983058929443, 0.24601003527641296, 0.2513003349304199, 0.27049198746681213, 0.2422894537448883, 0.25775226950645447, 0.2501382827758789, 0.19214101135730743, 0.207952618598938, 0.2106490433216095, 0.19737987220287323, 0.20567284524440765, 0.24501562118530273, 0.23003444075584412, 0.20529034733772278, 0.21945036947727203, 0.23218272626399994, 0.21327334642410278, 0.24402275681495667, 0.23493564128875732, 0.19046658277511597, 0.21575114130973816, 0.22768324613571167, 0.2092726230621338, 0.19002340734004974, 0.13522867858409882, 0.12268216162919998, 0.17647099494934082, 0.2109791487455368, 0.1558707356452942, 0.12947095930576324, 0.1463015079498291, 0.1453084647655487, 0.1382286548614502, 0.20309056341648102, 0.20064382255077362, 0.1465475857257843, 0.1334095597267151, 0.12587256729602814, 0.1676919311285019, 0.2224082052707672, 0.163563534617424, 0.14245274662971497, 0.16373880207538605, 0.142917200922966, 0.19022820889949799, 0.16985447704792023, 0.1301048845052719, 0.11300548911094666, 0.15129171311855316, 0.13286198675632477, 0.14040029048919678, 0.14664053916931152, 0.13062885403633118, 0.10715299099683762, 0.08115778118371964, 0.085812047123909, 0.07227258384227753, 0.08421732485294342, 0.12207389622926712, 0.10124144703149796, 0.08667103946208954, 0.09451831877231598, 0.09063462913036346, 0.08296550810337067, 0.06617414951324463, 0.018341753631830215, -0.009546236135065556, 0.033847153186798096, 0.07320927083492279, 0.0742604061961174, 0.053371626883745193, 0.018197771161794662, 0.00010955917969113216, 0.00849555991590023, 0.052488598972558975, 0.05392748489975929, 0.020632490515708923, -0.0014059048844501376, -0.03429478779435158, 0.010657618753612041, 0.018800750374794006, -0.005862411577254534, -0.001595183159224689, -0.014736674726009369, -0.005861277226358652, -0.014622094109654427, -0.0374210923910141, -0.004873877391219139, -0.033410605043172836, -0.04989872872829437, -0.08438336104154587, -0.06128227710723877, -0.07007080316543579, -0.10347139835357666, -0.04780936613678932, -0.029831213876605034, -0.02914373017847538, -0.06620641052722931, -0.07206017524003983, -0.08283764868974686, -0.1389988660812378, -0.12305622547864914, -0.08447632938623428, -0.11901732534170151, -0.1343684196472168, -0.10295043140649796, -0.11089020222425461, -0.15527492761611938, -0.20642851293087006, -0.18571743369102478, -0.19110149145126343, -0.20455224812030792, -0.21635526418685913, -0.23807404935359955, -0.19793345034122467, -0.18239383399486542, -0.22023989260196686, -0.24310143291950226, -0.24149978160858154, -0.28612351417541504, -0.2682749927043915, -0.24638114869594574, -0.2312518209218979, -0.24376265704631805, -0.25982844829559326, -0.2808520495891571, -0.2846362292766571, -0.2595588266849518, -0.25831013917922974, -0.25091809034347534, -0.2671825885772705, -0.25788068771362305, -0.24501173198223114, -0.2567179203033447, -0.2822698652744293, -0.26564422249794006, -0.2201167792081833, -0.22571492195129395, -0.23650482296943665, -0.22148175537586212, -0.24315188825130463, -0.2578386962413788, -0.26928189396858215, -0.23204943537712097, -0.18412165343761444, -0.19862449169158936, -0.1959797739982605, -0.1961382031440735, -0.22044727206230164, -0.23305222392082214, -0.22257383167743683, -0.22933588922023773, -0.2550237476825714, -0.22568301856517792, -0.21072830259799957, -0.2088153064250946, -0.23270362615585327, -0.2598850727081299, -0.24071119725704193, -0.2606392502784729, -0.23548568785190582, -0.23500142991542816, -0.25143805146217346, -0.26692140102386475, -0.2947622239589691, -0.29505306482315063, -0.2959592938423157, -0.30114033818244934, -0.27142882347106934, -0.283139169216156, -0.2941094934940338, -0.31543728709220886, -0.30685660243034363, -0.2838909327983856, -0.26452749967575073, -0.3003668785095215, -0.3072950541973114, -0.2938304543495178, -0.32176485657691956, -0.3040652871131897, -0.3078610301017761, -0.33437323570251465, -0.3373573422431946, -0.3199157416820526, -0.3041103184223175, -0.325987309217453, -0.3423168361186981, -0.37401697039604187, -0.39339521527290344, -0.32598036527633667, -0.333600789308548, -0.33140814304351807, -0.3529396653175354, -0.36917582154273987, -0.3272600471973419, -0.33309489488601685, -0.32379376888275146, -0.3346962630748749, -0.3481053113937378, -0.3569624125957489, -0.3655528128147125, -0.35622313618659973, -0.36791616678237915, -0.3116530478000641, -0.2877035140991211, -0.3295574486255646, -0.3268430233001709, -0.30244317650794983, -0.31500038504600525, -0.30234119296073914, -0.3095283508300781, -0.3105032742023468, -0.33231520652770996, -0.34866470098495483, -0.3287450075149536, -0.29917824268341064, -0.30157580971717834, -0.31343698501586914, -0.2935395836830139, -0.2682177424430847, -0.24872705340385437, -0.28714632987976074, -0.3205910325050354, -0.3126949667930603, -0.28004008531570435, -0.2668001651763916, -0.2398473024368286, -0.23373688757419586, -0.25119146704673767, -0.22790375351905823, -0.21315571665763855, -0.19156785309314728, -0.20250552892684937, -0.20938974618911743, -0.2017270028591156, -0.22154997289180756, -0.23030896484851837, -0.23299358785152435, -0.2009795606136322, -0.2083967626094818, -0.24404963850975037, -0.22504310309886932, -0.22425732016563416, -0.2172090858221054, -0.151815265417099, -0.14263620972633362, -0.1462625116109848, -0.19352608919143677, -0.19288837909698486, -0.18963740766048431, -0.2025534212589264, -0.20362155139446259, -0.2199726104736328, -0.1809442937374115, -0.16966786980628967, -0.18323242664337158, -0.16361762583255768, -0.1399923712015152, -0.17768995463848114\}, \{-0.11072379350662231, -0.13729815185070038, -0.1267399936914444, -0.11636942625045776, -0.09551115334033966, -0.09793742746114731, -0.10290190577507019, -0.12347399443387985, -0.15839241445064545, -0.16287899017333984, -0.1602189838886261, -0.14383186399936676, -0.1207243949174881, -0.11808833479881287, -0.16280776262283325, -0.215272456407547, -0.24947932362556458, -0.24947424232959747, -0.19842781126499176, -0.13826966285705566, -0.07515928894281387, -0.07494708895683289, -0.1385485678911209, -0.20067572593688965, -0.23558133840560913, -0.21376074850559235, -0.18519100546836853, -0.16925129294395447, -0.16318413615226746, -0.1672046184539795, -0.15750129520893097, -0.11372211575508118, -0.0612185113132, -0.0403585284948349, -0.06754045188426971, -0.11893715709447861, -0.1480223387479782, -0.15305379033088684, -0.12282578647136688, -0.08459563553333282, -0.05341276153922081, -0.03230641782283783, -0.053255584090948105, -0.08619812875986099, -0.11729932576417923, -0.12576867640018463, -0.13225769996643066, -0.09891803562641144, -0.043875470757484436, -0.00416877306997776, -0.0019667265005409718, -0.04369892552495003, -0.11262684315443039, -0.16726623475551605, -0.2105841040611267, -0.19697728753089905, -0.13843174278736115, -0.08216095715761185, -0.06380161643028259, -0.07022470235824585, -0.06948968768119812, -0.05413774400949478, -0.012841553427278996, 0.014611201360821724, 0.053954098373651505, 0.043219760060310364, 0.038239993155002594, -0.004565409850329161, -0.05635152384638786, -0.055958617478609085, -0.05480978265404701, -0.018473414704203606, -0.016873799264431, -0.00975613109767437, -0.02406373992562294, 0.0003135528531856835, 0.035754505544900894, 0.04809505492448807, 0.034217480570077896, 0.006153158377856016, -0.03792446851730347, -0.03530360385775566, -0.027267755940556526, 0.008829369209706783, 0.02398429811000824, 0.0554293617606163, 0.07824815064668655, 0.05960438400506973, 0.06786000728607178, 0.026156773790717125, 0.026902921497821808, 0.014889917336404324, 0.03298762068152428, 0.008410227485001087, 0.0183186586946249, 0.04366762936115265, 0.07179853320121765, 0.09205688536167145, 0.12377265840768814, 0.11665060371160507, 0.11447082459926605, 0.08514569699764252, 0.08825648576021194, 0.07909093052148819, 0.056503426283597946, 0.07774364203214645, 0.08261113613843918, 0.12013927102088928, 0.17443840205669403, 0.19250792264938354, 0.18261604011058807, 0.17323312163352966, 0.1576785445213318, 0.12889118492603302, 0.13337460160255432, 0.15900593996047974, 0.1941351741552353, 0.2514135241508484, 0.26935556530952454, 0.2472713142633438, 0.2194904237985611, 0.17580324411392212, 0.1466473937034607, 0.13050201535224915, 0.13021984696388245, 0.1666308492422104, 0.17867515981197357, 0.23360876739025116, 0.25217410922050476, 0.2724156677722931, 0.273562490940094, 0.2607496976852417, 0.23856595158576965, 0.20644375681877136, 0.20534498989582062, 0.21807847917079926, 0.21494939923286438, 0.2107226550579071, 0.21270382404327393, 0.231735959649086, 0.27000048756599426, 0.2951087951660156, 0.31689453125, 0.3487880825996399, 0.3596723973751068, 0.3388538360595703, 0.32353246212005615, 0.2897266447544098, 0.263121098279953, 0.2563686668872833, 0.26680654287338257, 0.24979214370250702, 0.28256097435951233, 0.2964693605899811, 0.30643707513809204, 0.3204716742038727, 0.29390081763267517, 0.3170807957649231, 0.3043062090873718, 0.32429325580596924, 0.3379199802875519, 0.35226887464523315, 0.34502869844436646, 0.33444198966026306, 0.32780227065086365, 0.3061904311180115, 0.3122765123844147, 0.31873929500579834, 0.33739057183265686, 0.365013062953949, 0.361936092376709, 0.33953383564949036, 0.33121350407600403, 0.31553494930267334, 0.3085240125656128, 0.3213137984275818, 0.33502569794654846, 0.35156166553497314, 0.3503088057041168, 0.3692806363105774, 0.3586415648460388, 0.3409934341907501, 0.33835721015930176, 0.3412306010723114, 0.3529731035232544, 0.35466790199279785, 0.3727894425392151, 0.3726060688495636, 0.35819894075393677, 0.3551692068576813, 0.36861884593963623, 0.35608217120170593, 0.3710094094276428, 0.3679933547973633, 0.36577752232551575, 0.35155773162841797, 0.34575143456459045, 0.34859371185302734, 0.3317561745643616, 0.32771608233451843, 0.34196609258651733, 0.3541117310523987, 0.34161239862442017, 0.33971256017684937, 0.35003072023391724, 0.3680301010608673, 0.35963138937950134, 0.33667826652526855, 0.3222064673900604, 0.30316320061683655, 0.29817554354667664, 0.3098444640636444, 0.3174203932285309, 0.3026682436466217, 0.3011409342288971, 0.31043484807014465, 0.3313298523426056, 0.34353816509246826, 0.34569051861763, 0.33778586983680725, 0.32333990931510925, 0.2997446358203888, 0.31296688318252563, 0.33817583322525024, 0.33889859914779663, 0.3453516960144043, 0.33867764472961426, 0.31780096888542175, 0.30332911014556885, 0.2934674322605133, 0.2921311557292938, 0.2845841348171234, 0.27494823932647705, 0.2846226692199707, 0.29453614354133606, 0.29512399435043335, 0.29511547088623047, 0.3135390281677246, 0.31833112239837646, 0.30576127767562866, 0.29072344303131104, 0.26909199357032776, 0.261836975812912, 0.25876471400260925, 0.24017903208732605, 0.24509769678115845, 0.2307053804397583, 0.20867183804512024, 0.20991528034210205, 0.22712384164333344, 0.2409021556377411, 0.25723305344581604, 0.23535360395908356, 0.223523810505867, 0.2218291461467743, 0.2328866571187973, 0.2214651256799698, 0.22584955394268036, 0.24143490195274353, 0.25559818744659424, 0.25206291675567627, 0.24042777717113495, 0.22198237478733063, 0.20694322884082794, 0.21718817949295044, 0.1946299970149994, 0.19665059447288513, 0.17926757037639618, 0.18738937377929688, 0.19490785896778107, 0.18808600306510925, 0.18752317130565643, 0.15501807630062103, 0.14939014613628387, 0.18299829959869385, 0.17917077243328094, 0.1796722710132599, 0.16218893229961395, 0.15062133967876434, 0.11937238276004791, 0.1410170942544937, 0.15585380792617798, 0.16717559099197388, 0.17416061460971832, 0.13180416822433472, 0.11632887274026871, 0.11670582741498947, 0.11338747292757034, 0.10235738009214401, 0.09620164334774017, 0.10113222151994705, 0.12399545311927795, 0.14085987210273743, 0.13931970298290253, 0.11777323484420776, 0.07397374510765076, 0.05026386305689812, 0.056618187576532364, 0.08211204409599304, 0.10591191798448563, 0.07536312937736511, 0.04350098967552185, 0.04022908955812454, 0.07121910154819489, 0.08081405609846115, 0.06358505040407181, 0.024451635777950287, 0.015775226056575775, 0.015594745986163616, 0.05044833570718765, 0.06750033795833588, 0.07349153608083725, 0.029585089534521103, -0.0030780357774347067, -0.0235537588596344, -0.008272203616797924, 0.01717485301196575, 0.04319754242897034, 0.056251659989356995, 0.025213439017534256, -0.011780718341469765, -0.04311766102910042, -0.027216719463467598, -0.014362565241754055, -0.010899648070335388, -0.0009600796620361507, -0.0067351097241044044, -0.0524953231215477, -0.06791646033525467, -0.0797148048877716, -0.06129483878612518, -0.06053248792886734, -0.06694734841585159, -0.09003780782222748, -0.11513417214155197, -0.10149917751550674, -0.09573996812105179, -0.07454951107501984, -0.08203934878110886, -0.10688453167676926, -0.10701542347669601, -0.12552477419376373, -0.09847646951675415, -0.10391896218061447, -0.12195268273353577, -0.1286635547876358, -0.12292200326919556, -0.1313697248697281, -0.14843015372753143, -0.16189338266849518, -0.17068804800510406, -0.1654747873544693, -0.1635136902332306, -0.1438785195350647, -0.148142009973526, -0.16563619673252106, -0.17685428261756897, -0.1852768510580063, -0.18347300589084625, -0.18301455676555634, -0.20242758095264435, -0.19196827709674835, -0.19671548902988434, -0.17883826792240143, -0.1743423193693161, -0.1726166158914566, -0.1791154444217682, -0.21812692284584045, -0.2293783575296402, -0.21471142768859863, -0.2024274617433548, -0.20931504666805267, -0.2337028682231903, -0.24451275169849396, -0.25104767084121704, -0.26192763447761536, -0.2566256821155548, -0.2512812614440918, -0.26296210289001465, -0.27002736926078796, -0.26836323738098145, -0.2843373417854309, -0.26696106791496277, -0.2727724015712738, -0.2726498544216156, -0.27117905020713806, -0.26952946186065674, -0.2632896304130554, -0.26277223229408264, -0.27365487813949585, -0.2826443612575531, -0.26812687516212463, -0.27332422137260437, -0.3138662874698639, -0.30810001492500305, -0.3026326298713684, -0.28741729259490967, -0.28931570053100586, -0.3055301010608673, -0.28361478447914124, -0.2974072992801666, -0.28478366136550903, -0.2762286067008972, -0.2940105199813843, -0.29795020818710327, -0.31031253933906555, -0.28337815403938293, -0.2902356684207916, -0.29173463582992554, -0.28965187072753906, -0.31722304224967957, -0.31651991605758667, -0.3318515717983246, -0.33213815093040466, -0.3137553036212921, -0.3046993911266327, -0.3109334707260132, -0.30179792642593384, -0.3086741864681244, -0.30140355229377747, -0.3068599998950958, -0.29909905791282654, -0.3210791349411011, -0.3231632113456726, -0.3002535104751587, -0.29957371950149536, -0.3138962686061859, -0.31369122862815857, -0.3185322880744934, -0.3329922556877136, -0.3109058141708374, -0.29935187101364136, -0.2965705096721649, -0.31605955958366394, -0.3292261064052582, -0.32378101348876953, -0.3088163733482361, -0.29780179262161255, -0.29015761613845825, -0.2892093360424042, -0.30680352449417114, -0.312654048204422, -0.3237158954143524, -0.3279646337032318, -0.2933115065097809, -0.29887476563453674, -0.3049148619174957, -0.3102954626083374, -0.3187956213951111, -0.29547083377838135, -0.29665806889533997, -0.2912338376045227, -0.30190104246139526, -0.304116815328598, -0.29537200927734375, -0.30574095249176025, -0.30563727021217346, -0.30588823556900024, -0.3146663010120392, -0.31381064653396606, -0.3189947009086609, -0.30824512243270874, -0.2819882333278656, -0.2915264964103699, -0.27608156204223633, -0.28454214334487915, -0.2956501245498657, -0.2801623046398163, -0.2713943123817444, -0.2628224194049835, -0.2676028609275818, -0.2554929852485657, -0.2415909469127655, -0.24831140041351318, -0.261271208524704, -0.2682480216026306, -0.2634791135787964, -0.25868937373161316, -0.2576367259025574, -0.2484843134880066, -0.25240394473075867, -0.25915804505348206, -0.2511327266693115, -0.25457629561424255, -0.2519420087337494, -0.24096252024173737, -0.23856672644615173, -0.2313115894794464, -0.23023086786270142, -0.2257687896490097, -0.23126794397830963, -0.24063323438167572, -0.2465483546257019, -0.24357911944389343, -0.2139151394367218, -0.20592661201953888, -0.204367533326149, -0.201622873544693, -0.20362550020217896, -0.18360061943531036\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_44100::bitDepth = 32}}
\par
{\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_44100::numSamplesPerChannel = 384873}}
\par
{\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_32bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_32bit_44100}
{\xe \v wav_stereo_32bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_32bit_44100::testBuffer = \{\{-0.11745091527700424, -0.1519666165113449, -0.10189135372638702, -0.08010855317115784, -0.08006346225738525, -0.10594028234481812, -0.1045377254486084, -0.12010768800973892, -0.17069905996322632, -0.1643330603837967, -0.17723800241947174, -0.12911230325698853, -0.07929547876119614, -0.089617058634758, -0.1707475483417511, -0.23355633020401, -0.25208917260169983, -0.24941004812717438, -0.19202817976474762, -0.15740983188152313, -0.07586338371038437, -0.05384133756160736, -0.12085731327533722, -0.17894165217876434, -0.24375104904174805, -0.23023466765880585, -0.2126595675945282, -0.18714800477027893, -0.1683509200811386, -0.15499532222747803, -0.14854571223258972, -0.10749486088752747, -0.06997065991163254, -0.05418848246335983, -0.08211927115917206, -0.13974328339099884, -0.15651385486125946, -0.15499214828014374, -0.10364945232868195, -0.08582746982574463, -0.056141868233680725, -0.010228204540908337, -0.05224359780550003, -0.10708943009376526, -0.11960842460393906, -0.1222459152340889, -0.1288643181324005, -0.07630115747451782, -0.006927777547389269, 0.01795179396867752, -0.01826094277203083, -0.06945661455392838, -0.14971168339252472, -0.18301473557949066, -0.17486467957496643, -0.15588313341140747, -0.1256936639547348, -0.11358562856912613, -0.09434855729341507, -0.07327721267938614, -0.06722074747085571, -0.04297478497028351, -0.04013794660568237, -0.02908974699676037, 0.055253252387046814, 0.058947134763002396, 0.03990260884165764, -0.023352447897195816, -0.05745059251785278, -0.0698191374540329, -0.05459041893482208, -0.0408746600151062, -0.03184802457690239, -0.006078124046325684, -0.03471580520272255, -0.021939394995570183, 0.005969506688416004, 0.01585994102060795, 0.015617938712239265, 0.0036787076387554407, -0.02015535533428192, -0.03665279969573021, -0.008294102735817432, 0.0007386141223832965, -0.0059650312177836895, 0.015064614824950695, 0.05684284120798111, 0.048504941165447235, 0.0879620835185051, 0.01712639071047306, 0.02702873758971691, 0.05021873489022255, 0.0010235735680907965, 0.042404476553201675, -0.004635974764823914, -0.0136331832036376, 0.04071985185146332, 0.09806989878416061, 0.16411001980304718, 0.1329004168510437, 0.11618109047412872, 0.10378669202327728, 0.04145503044128418, 0.027141818776726723, 0.04278336465358734, 0.0981810912489891, 0.11417917162179947, 0.15195536613464355, 0.20625101029872894, 0.18852993845939636, 0.15145990252494812, 0.1642044633626938, 0.1353333294391632, 0.12715831398963928, 0.1428956389427185, 0.1930069923400879, 0.2147543728351593, 0.24385258555412292, 0.26336562633514404, 0.24763081967830658, 0.23317265510559082, 0.17020933330059052, 0.12415832281112671, 0.12139394134283066, 0.12269188463687897, 0.16398823261260986, 0.18169990181922913, 0.22289110720157623, 0.24980822205543518, 0.25091034173965454, 0.30712440609931946, 0.2836054265499115, 0.23030813038349152, 0.1811419427394867, 0.19849999248981476, 0.23386316001415253, 0.20443186163902283, 0.19374917447566986, 0.18743258714675903, 0.24394799768924713, 0.3041987717151642, 0.3082346022129059, 0.3078215718269348, 0.3346748352050781, 0.33939746022224426, 0.33178940415382385, 0.3123377561569214, 0.2806440591812134, 0.2399751842021942, 0.24678122997283936, 0.2629908621311188, 0.2584831118583679, 0.2899355888366699, 0.2910745143890381, 0.29694750905036926, 0.3317975699901581, 0.288880854845047, 0.30398717522621155, 0.29040858149528503, 0.30649128556251526, 0.36260879039764404, 0.3220243453979492, 0.34334564208984375, 0.3413156270980835, 0.3172188103199005, 0.2689215838909149, 0.30487531423568726, 0.33099856972694397, 0.3144553601741791, 0.3462160527706146, 0.36258894205093384, 0.3252076804637909, 0.3194389343261719, 0.3036641776561737, 0.25708121061325073, 0.29499632120132446, 0.342328816652298, 0.3466757833957672, 0.361691415309906, 0.37056344747543335, 0.38426199555397034, 0.3349151909351349, 0.3347189426422119, 0.32905617356300354, 0.33780014514923096, 0.36501580476760864, 0.3765137493610382, 0.38854432106018066, 0.3586300015449524, 0.3168526589870453, 0.3674073815345764, 0.39473751187324524, 0.38887321949005127, 0.3557429611682892, 0.3551374673843384, 0.3711024522781372, 0.3542231619358063, 0.36219924688339233, 0.3432430624961853, 0.3397129476070404, 0.30429407954216003, 0.32580316066741943, 0.31904128193855286, 0.35295140743255615, 0.37153366208076477, 0.3470722436904907, 0.3311869204044342, 0.3327701985836029, 0.3308747410774231, 0.3223779797554016, 0.30104562640190125, 0.30388343334198, 0.2958034873008728, 0.28519725799560547, 0.30291759967803955, 0.319441556930542, 0.34594473242759705, 0.3312903046607971, 0.34635746479034424, 0.33610767126083374, 0.32953688502311707, 0.2787168025970459, 0.3333706855773926, 0.4060133397579193, 0.32209160923957825, 0.3166391849517822, 0.2763248383998871, 0.3064301609992981, 0.36547496914863586, 0.3600216507911682, 0.3404928743839264, 0.29173538088798523, 0.2710213363170624, 0.2909623384475708, 0.2891555726528168, 0.3117993474006653, 0.32151544094085693, 0.32411423325538635, 0.34733694791793823, 0.3345957100391388, 0.28963983058929443, 0.24601003527641296, 0.2513003349304199, 0.27049198746681213, 0.2422894537448883, 0.25775226950645447, 0.2501382827758789, 0.19214101135730743, 0.207952618598938, 0.2106490433216095, 0.19737987220287323, 0.20567284524440765, 0.24501562118530273, 0.23003444075584412, 0.20529034733772278, 0.21945036947727203, 0.23218272626399994, 0.21327334642410278, 0.24402275681495667, 0.23493564128875732, 0.19046658277511597, 0.21575114130973816, 0.22768324613571167, 0.2092726230621338, 0.19002340734004974, 0.13522867858409882, 0.12268216162919998, 0.17647099494934082, 0.2109791487455368, 0.1558707356452942, 0.12947095930576324, 0.1463015079498291, 0.1453084647655487, 0.1382286548614502, 0.20309056341648102, 0.20064382255077362, 0.1465475857257843, 0.1334095597267151, 0.12587256729602814, 0.1676919311285019, 0.2224082052707672, 0.163563534617424, 0.14245274662971497, 0.16373880207538605, 0.142917200922966, 0.19022820889949799, 0.16985447704792023, 0.1301048845052719, 0.11300548911094666, 0.15129171311855316, 0.13286198675632477, 0.14040029048919678, 0.14664053916931152, 0.13062885403633118, 0.10715299099683762, 0.08115778118371964, 0.085812047123909, 0.07227258384227753, 0.08421732485294342, 0.12207389622926712, 0.10124144703149796, 0.08667103946208954, 0.09451831877231598, 0.09063462913036346, 0.08296550810337067, 0.06617414951324463, 0.018341753631830215, -0.009546236135065556, 0.033847153186798096, 0.07320927083492279, 0.0742604061961174, 0.053371626883745193, 0.018197771161794662, 0.00010955917969113216, 0.00849555991590023, 0.052488598972558975, 0.05392748489975929, 0.020632490515708923, -0.0014059048844501376, -0.03429478779435158, 0.010657618753612041, 0.018800750374794006, -0.005862411577254534, -0.001595183159224689, -0.014736674726009369, -0.005861277226358652, -0.014622094109654427, -0.0374210923910141, -0.004873877391219139, -0.033410605043172836, -0.04989872872829437, -0.08438336104154587, -0.06128227710723877, -0.07007080316543579, -0.10347139835357666, -0.04780936613678932, -0.029831213876605034, -0.02914373017847538, -0.06620641052722931, -0.07206017524003983, -0.08283764868974686, -0.1389988660812378, -0.12305622547864914, -0.08447632938623428, -0.11901732534170151, -0.1343684196472168, -0.10295043140649796, -0.11089020222425461, -0.15527492761611938, -0.20642851293087006, -0.18571743369102478, -0.19110149145126343, -0.20455224812030792, -0.21635526418685913, -0.23807404935359955, -0.19793345034122467, -0.18239383399486542, -0.22023989260196686, -0.24310143291950226, -0.24149978160858154, -0.28612351417541504, -0.2682749927043915, -0.24638114869594574, -0.2312518209218979, -0.24376265704631805, -0.25982844829559326, -0.2808520495891571, -0.2846362292766571, -0.2595588266849518, -0.25831013917922974, -0.25091809034347534, -0.2671825885772705, -0.25788068771362305, -0.24501173198223114, -0.2567179203033447, -0.2822698652744293, -0.26564422249794006, -0.2201167792081833, -0.22571492195129395, -0.23650482296943665, -0.22148175537586212, -0.24315188825130463, -0.2578386962413788, -0.26928189396858215, -0.23204943537712097, -0.18412165343761444, -0.19862449169158936, -0.1959797739982605, -0.1961382031440735, -0.22044727206230164, -0.23305222392082214, -0.22257383167743683, -0.22933588922023773, -0.2550237476825714, -0.22568301856517792, -0.21072830259799957, -0.2088153064250946, -0.23270362615585327, -0.2598850727081299, -0.24071119725704193, -0.2606392502784729, -0.23548568785190582, -0.23500142991542816, -0.25143805146217346, -0.26692140102386475, -0.2947622239589691, -0.29505306482315063, -0.2959592938423157, -0.30114033818244934, -0.27142882347106934, -0.283139169216156, -0.2941094934940338, -0.31543728709220886, -0.30685660243034363, -0.2838909327983856, -0.26452749967575073, -0.3003668785095215, -0.3072950541973114, -0.2938304543495178, -0.32176485657691956, -0.3040652871131897, -0.3078610301017761, -0.33437323570251465, -0.3373573422431946, -0.3199157416820526, -0.3041103184223175, -0.325987309217453, -0.3423168361186981, -0.37401697039604187, -0.39339521527290344, -0.32598036527633667, -0.333600789308548, -0.33140814304351807, -0.3529396653175354, -0.36917582154273987, -0.3272600471973419, -0.33309489488601685, -0.32379376888275146, -0.3346962630748749, -0.3481053113937378, -0.3569624125957489, -0.3655528128147125, -0.35622313618659973, -0.36791616678237915, -0.3116530478000641, -0.2877035140991211, -0.3295574486255646, -0.3268430233001709, -0.30244317650794983, -0.31500038504600525, -0.30234119296073914, -0.3095283508300781, -0.3105032742023468, -0.33231520652770996, -0.34866470098495483, -0.3287450075149536, -0.29917824268341064, -0.30157580971717834, -0.31343698501586914, -0.2935395836830139, -0.2682177424430847, -0.24872705340385437, -0.28714632987976074, -0.3205910325050354, -0.3126949667930603, -0.28004008531570435, -0.2668001651763916, -0.2398473024368286, -0.23373688757419586, -0.25119146704673767, -0.22790375351905823, -0.21315571665763855, -0.19156785309314728, -0.20250552892684937, -0.20938974618911743, -0.2017270028591156, -0.22154997289180756, -0.23030896484851837, -0.23299358785152435, -0.2009795606136322, -0.2083967626094818, -0.24404963850975037, -0.22504310309886932, -0.22425732016563416, -0.2172090858221054, -0.151815265417099, -0.14263620972633362, -0.1462625116109848, -0.19352608919143677, -0.19288837909698486, -0.18963740766048431, -0.2025534212589264, -0.20362155139446259, -0.2199726104736328, -0.1809442937374115, -0.16966786980628967, -0.18323242664337158, -0.16361762583255768, -0.1399923712015152, -0.17768995463848114\}, \{-0.11072379350662231, -0.13729815185070038, -0.1267399936914444, -0.11636942625045776, -0.09551115334033966, -0.09793742746114731, -0.10290190577507019, -0.12347399443387985, -0.15839241445064545, -0.16287899017333984, -0.1602189838886261, -0.14383186399936676, -0.1207243949174881, -0.11808833479881287, -0.16280776262283325, -0.215272456407547, -0.24947932362556458, -0.24947424232959747, -0.19842781126499176, -0.13826966285705566, -0.07515928894281387, -0.07494708895683289, -0.1385485678911209, -0.20067572593688965, -0.23558133840560913, -0.21376074850559235, -0.18519100546836853, -0.16925129294395447, -0.16318413615226746, -0.1672046184539795, -0.15750129520893097, -0.11372211575508118, -0.0612185113132, -0.0403585284948349, -0.06754045188426971, -0.11893715709447861, -0.1480223387479782, -0.15305379033088684, -0.12282578647136688, -0.08459563553333282, -0.05341276153922081, -0.03230641782283783, -0.053255584090948105, -0.08619812875986099, -0.11729932576417923, -0.12576867640018463, -0.13225769996643066, -0.09891803562641144, -0.043875470757484436, -0.00416877306997776, -0.0019667265005409718, -0.04369892552495003, -0.11262684315443039, -0.16726623475551605, -0.2105841040611267, -0.19697728753089905, -0.13843174278736115, -0.08216095715761185, -0.06380161643028259, -0.07022470235824585, -0.06948968768119812, -0.05413774400949478, -0.012841553427278996, 0.014611201360821724, 0.053954098373651505, 0.043219760060310364, 0.038239993155002594, -0.004565409850329161, -0.05635152384638786, -0.055958617478609085, -0.05480978265404701, -0.018473414704203606, -0.016873799264431, -0.00975613109767437, -0.02406373992562294, 0.0003135528531856835, 0.035754505544900894, 0.04809505492448807, 0.034217480570077896, 0.006153158377856016, -0.03792446851730347, -0.03530360385775566, -0.027267755940556526, 0.008829369209706783, 0.02398429811000824, 0.0554293617606163, 0.07824815064668655, 0.05960438400506973, 0.06786000728607178, 0.026156773790717125, 0.026902921497821808, 0.014889917336404324, 0.03298762068152428, 0.008410227485001087, 0.0183186586946249, 0.04366762936115265, 0.07179853320121765, 0.09205688536167145, 0.12377265840768814, 0.11665060371160507, 0.11447082459926605, 0.08514569699764252, 0.08825648576021194, 0.07909093052148819, 0.056503426283597946, 0.07774364203214645, 0.08261113613843918, 0.12013927102088928, 0.17443840205669403, 0.19250792264938354, 0.18261604011058807, 0.17323312163352966, 0.1576785445213318, 0.12889118492603302, 0.13337460160255432, 0.15900593996047974, 0.1941351741552353, 0.2514135241508484, 0.26935556530952454, 0.2472713142633438, 0.2194904237985611, 0.17580324411392212, 0.1466473937034607, 0.13050201535224915, 0.13021984696388245, 0.1666308492422104, 0.17867515981197357, 0.23360876739025116, 0.25217410922050476, 0.2724156677722931, 0.273562490940094, 0.2607496976852417, 0.23856595158576965, 0.20644375681877136, 0.20534498989582062, 0.21807847917079926, 0.21494939923286438, 0.2107226550579071, 0.21270382404327393, 0.231735959649086, 0.27000048756599426, 0.2951087951660156, 0.31689453125, 0.3487880825996399, 0.3596723973751068, 0.3388538360595703, 0.32353246212005615, 0.2897266447544098, 0.263121098279953, 0.2563686668872833, 0.26680654287338257, 0.24979214370250702, 0.28256097435951233, 0.2964693605899811, 0.30643707513809204, 0.3204716742038727, 0.29390081763267517, 0.3170807957649231, 0.3043062090873718, 0.32429325580596924, 0.3379199802875519, 0.35226887464523315, 0.34502869844436646, 0.33444198966026306, 0.32780227065086365, 0.3061904311180115, 0.3122765123844147, 0.31873929500579834, 0.33739057183265686, 0.365013062953949, 0.361936092376709, 0.33953383564949036, 0.33121350407600403, 0.31553494930267334, 0.3085240125656128, 0.3213137984275818, 0.33502569794654846, 0.35156166553497314, 0.3503088057041168, 0.3692806363105774, 0.3586415648460388, 0.3409934341907501, 0.33835721015930176, 0.3412306010723114, 0.3529731035232544, 0.35466790199279785, 0.3727894425392151, 0.3726060688495636, 0.35819894075393677, 0.3551692068576813, 0.36861884593963623, 0.35608217120170593, 0.3710094094276428, 0.3679933547973633, 0.36577752232551575, 0.35155773162841797, 0.34575143456459045, 0.34859371185302734, 0.3317561745643616, 0.32771608233451843, 0.34196609258651733, 0.3541117310523987, 0.34161239862442017, 0.33971256017684937, 0.35003072023391724, 0.3680301010608673, 0.35963138937950134, 0.33667826652526855, 0.3222064673900604, 0.30316320061683655, 0.29817554354667664, 0.3098444640636444, 0.3174203932285309, 0.3026682436466217, 0.3011409342288971, 0.31043484807014465, 0.3313298523426056, 0.34353816509246826, 0.34569051861763, 0.33778586983680725, 0.32333990931510925, 0.2997446358203888, 0.31296688318252563, 0.33817583322525024, 0.33889859914779663, 0.3453516960144043, 0.33867764472961426, 0.31780096888542175, 0.30332911014556885, 0.2934674322605133, 0.2921311557292938, 0.2845841348171234, 0.27494823932647705, 0.2846226692199707, 0.29453614354133606, 0.29512399435043335, 0.29511547088623047, 0.3135390281677246, 0.31833112239837646, 0.30576127767562866, 0.29072344303131104, 0.26909199357032776, 0.261836975812912, 0.25876471400260925, 0.24017903208732605, 0.24509769678115845, 0.2307053804397583, 0.20867183804512024, 0.20991528034210205, 0.22712384164333344, 0.2409021556377411, 0.25723305344581604, 0.23535360395908356, 0.223523810505867, 0.2218291461467743, 0.2328866571187973, 0.2214651256799698, 0.22584955394268036, 0.24143490195274353, 0.25559818744659424, 0.25206291675567627, 0.24042777717113495, 0.22198237478733063, 0.20694322884082794, 0.21718817949295044, 0.1946299970149994, 0.19665059447288513, 0.17926757037639618, 0.18738937377929688, 0.19490785896778107, 0.18808600306510925, 0.18752317130565643, 0.15501807630062103, 0.14939014613628387, 0.18299829959869385, 0.17917077243328094, 0.1796722710132599, 0.16218893229961395, 0.15062133967876434, 0.11937238276004791, 0.1410170942544937, 0.15585380792617798, 0.16717559099197388, 0.17416061460971832, 0.13180416822433472, 0.11632887274026871, 0.11670582741498947, 0.11338747292757034, 0.10235738009214401, 0.09620164334774017, 0.10113222151994705, 0.12399545311927795, 0.14085987210273743, 0.13931970298290253, 0.11777323484420776, 0.07397374510765076, 0.05026386305689812, 0.056618187576532364, 0.08211204409599304, 0.10591191798448563, 0.07536312937736511, 0.04350098967552185, 0.04022908955812454, 0.07121910154819489, 0.08081405609846115, 0.06358505040407181, 0.024451635777950287, 0.015775226056575775, 0.015594745986163616, 0.05044833570718765, 0.06750033795833588, 0.07349153608083725, 0.029585089534521103, -0.0030780357774347067, -0.0235537588596344, -0.008272203616797924, 0.01717485301196575, 0.04319754242897034, 0.056251659989356995, 0.025213439017534256, -0.011780718341469765, -0.04311766102910042, -0.027216719463467598, -0.014362565241754055, -0.010899648070335388, -0.0009600796620361507, -0.0067351097241044044, -0.0524953231215477, -0.06791646033525467, -0.0797148048877716, -0.06129483878612518, -0.06053248792886734, -0.06694734841585159, -0.09003780782222748, -0.11513417214155197, -0.10149917751550674, -0.09573996812105179, -0.07454951107501984, -0.08203934878110886, -0.10688453167676926, -0.10701542347669601, -0.12552477419376373, -0.09847646951675415, -0.10391896218061447, -0.12195268273353577, -0.1286635547876358, -0.12292200326919556, -0.1313697248697281, -0.14843015372753143, -0.16189338266849518, -0.17068804800510406, -0.1654747873544693, -0.1635136902332306, -0.1438785195350647, -0.148142009973526, -0.16563619673252106, -0.17685428261756897, -0.1852768510580063, -0.18347300589084625, -0.18301455676555634, -0.20242758095264435, -0.19196827709674835, -0.19671548902988434, -0.17883826792240143, -0.1743423193693161, -0.1726166158914566, -0.1791154444217682, -0.21812692284584045, -0.2293783575296402, -0.21471142768859863, -0.2024274617433548, -0.20931504666805267, -0.2337028682231903, -0.24451275169849396, -0.25104767084121704, -0.26192763447761536, -0.2566256821155548, -0.2512812614440918, -0.26296210289001465, -0.27002736926078796, -0.26836323738098145, -0.2843373417854309, -0.26696106791496277, -0.2727724015712738, -0.2726498544216156, -0.27117905020713806, -0.26952946186065674, -0.2632896304130554, -0.26277223229408264, -0.27365487813949585, -0.2826443612575531, -0.26812687516212463, -0.27332422137260437, -0.3138662874698639, -0.30810001492500305, -0.3026326298713684, -0.28741729259490967, -0.28931570053100586, -0.3055301010608673, -0.28361478447914124, -0.2974072992801666, -0.28478366136550903, -0.2762286067008972, -0.2940105199813843, -0.29795020818710327, -0.31031253933906555, -0.28337815403938293, -0.2902356684207916, -0.29173463582992554, -0.28965187072753906, -0.31722304224967957, -0.31651991605758667, -0.3318515717983246, -0.33213815093040466, -0.3137553036212921, -0.3046993911266327, -0.3109334707260132, -0.30179792642593384, -0.3086741864681244, -0.30140355229377747, -0.3068599998950958, -0.29909905791282654, -0.3210791349411011, -0.3231632113456726, -0.3002535104751587, -0.29957371950149536, -0.3138962686061859, -0.31369122862815857, -0.3185322880744934, -0.3329922556877136, -0.3109058141708374, -0.29935187101364136, -0.2965705096721649, -0.31605955958366394, -0.3292261064052582, -0.32378101348876953, -0.3088163733482361, -0.29780179262161255, -0.29015761613845825, -0.2892093360424042, -0.30680352449417114, -0.312654048204422, -0.3237158954143524, -0.3279646337032318, -0.2933115065097809, -0.29887476563453674, -0.3049148619174957, -0.3102954626083374, -0.3187956213951111, -0.29547083377838135, -0.29665806889533997, -0.2912338376045227, -0.30190104246139526, -0.304116815328598, -0.29537200927734375, -0.30574095249176025, -0.30563727021217346, -0.30588823556900024, -0.3146663010120392, -0.31381064653396606, -0.3189947009086609, -0.30824512243270874, -0.2819882333278656, -0.2915264964103699, -0.27608156204223633, -0.28454214334487915, -0.2956501245498657, -0.2801623046398163, -0.2713943123817444, -0.2628224194049835, -0.2676028609275818, -0.2554929852485657, -0.2415909469127655, -0.24831140041351318, -0.261271208524704, -0.2682480216026306, -0.2634791135787964, -0.25868937373161316, -0.2576367259025574, -0.2484843134880066, -0.25240394473075867, -0.25915804505348206, -0.2511327266693115, -0.25457629561424255, -0.2519420087337494, -0.24096252024173737, -0.23856672644615173, -0.2313115894794464, -0.23023086786270142, -0.2257687896490097, -0.23126794397830963, -0.24063323438167572, -0.2465483546257019, -0.24357911944389343, -0.2139151394367218, -0.20592661201953888, -0.204367533326149, -0.201622873544693, -0.20362550020217896, -0.18360061943531036\}\}}}
\par
{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_32bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000}
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 418909\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{-0.10833723098039627, -0.13686230778694153, -0.08660777658224106, -0.07025191932916641, -0.07594943791627884, -0.10192184150218964, -0.11632838100194931, -0.09456843882799149, -0.11326359212398529, -0.12219168245792389, -0.10825426131486893, -0.1309429407119751, -0.11157312244176865, -0.09016415476799011, -0.0965714156627655, -0.12620578706264496, -0.14365583658218384, -0.11878309398889542, -0.1251625418663025, -0.12197279185056686, -0.13707268238067627, -0.16403384506702423, -0.12149179726839066, -0.11605630069971085, -0.13082683086395264, -0.12961497902870178, -0.16302011907100677, -0.16787879168987274, -0.1727980673313141, -0.17347824573516846, -0.15056578814983368, -0.13418999314308167, -0.13609308004379272, -0.15870068967342377, -0.15973517298698425, -0.16675157845020294, -0.1538539081811905, -0.13986317813396454, -0.1356811225414276, -0.11068937927484512, -0.11542622745037079, -0.11571431159973145, -0.14208760857582092, -0.18606315553188324, -0.15333223342895508, -0.1170574203133583, -0.12660381197929382, -0.1302478164434433, -0.12123790383338928, -0.1418413519859314, -0.19688516855239868, -0.21770331263542175, -0.20560204982757568, -0.1930108666419983, -0.18868814408779144, -0.1661619395017624, -0.13854163885116577, -0.1325310915708542, -0.11040335148572922, -0.12708288431167603, -0.17054039239883423, -0.21640004217624664, -0.24592463672161102, -0.21843625605106354, -0.1573750376701355, -0.11056780070066452, -0.09740602225065231, -0.12069782614707947, -0.2100597321987152, -0.22250661253929138, -0.1898784339427948, -0.18164417147636414, -0.1523897796869278, -0.15555024147033691, -0.14697620272636414, -0.16035667061805725, -0.18182522058486938, -0.19542503356933594, -0.20623499155044556, -0.1562727838754654, -0.12542715668678284, -0.1119709312915802, -0.07725507766008377, -0.08215560019016266, -0.10654792189598083, -0.1284656673669815, -0.140795037150383, -0.1548275202512741, -0.175393745303154, -0.16068312525749207, -0.15743035078048706, -0.1740831434726715, -0.1850689798593521, -0.14626285433769226, -0.13768750429153442, -0.14167004823684692, -0.13158604502677917, -0.2224844992160797, -0.1972336769104004, -0.14786580204963684, -0.16598083078861237, -0.10970427095890045, -0.14206169545650482, -0.21922466158866882, -0.2276635468006134, -0.2204207330942154, -0.1741165667772293, -0.1283014416694641, -0.1455855518579483, -0.12145467847585678, -0.12210126221179962, -0.1665816605091095, -0.16821958124637604, -0.15102557837963104, -0.09825979173183441, -0.07853254675865173, -0.0757584273815155, -0.04167184606194496, -0.03020879440009594, -0.07665292173624039, -0.0867912694811821, -0.06523621082305908, -0.08391410857439041, -0.08976593613624573, -0.0892600566148758, -0.061698853969573975, -0.05050971359014511, -0.0387004055082798, 0.004493299406021833, 0.00935047771781683, -0.000861787295434624, -0.04469887167215347, -0.12444597482681274, -0.15654629468917847, -0.15043316781520844, -0.1368141770362854, -0.09912170469760895, -0.10017985105514526, -0.09730787575244904, -0.09079402685165405, -0.13539952039718628, -0.11584442853927612, -0.0871509462594986, -0.09939737617969513, -0.09079309552907944, -0.07587186992168427, -0.015941079705953598, 0.011376189067959785, -0.02986397035419941, -0.048056282103061676, -0.05423866957426071, -0.009084882214665413, 0.06034950911998749, 0.07316169142723083, 0.04421554133296013, 0.026190321892499924, 0.02441880851984024, 0.023521097376942635, 0.051470398902893066, 0.07469034194946289, 0.06154932454228401, 0.006343642715364695, -0.03554345667362213, -0.06482252478599548, -0.1056675836443901, -0.07906777411699295, -0.010515891015529633, 0.03463919833302498, 0.10182815045118332, 0.12722797691822052, 0.07471873611211777, 0.06801177561283112, 0.015254026278853416, 0.013864085078239441, 0.09221803396940231, 0.0826478824019432, 0.10610705614089966, 0.12229252606630325, 0.09588494151830673, 0.0392443984746933, 0.007177992258220911, 0.05457144230604172, 0.060299959033727646, 0.052177149802446365, 0.0912666916847229, 0.1138489618897438, 0.0880434438586235, 0.09100965410470963, 0.10831927508115768, 0.08488117158412933, 0.09944018721580505, 0.15527090430259705, 0.1495298147201538, 0.12461885809898376, 0.10924600064754486, 0.13051281869411469, 0.18916931748390198, 0.21212251484394073, 0.26510581374168396, 0.2736929655075073, 0.2305777221918106, 0.20042501389980316, 0.17696787416934967, 0.19826193153858185, 0.22595231235027313, 0.21338365972042084, 0.21687710285186768, 0.2768402099609375, 0.2856462597846985, 0.2748701274394989, 0.24429206550121307, 0.23731593787670135, 0.2615853250026703, 0.2385004609823227, 0.25184887647628784, 0.2590377628803253, 0.2912565767765045, 0.2960257828235626, 0.28129681944847107, 0.2943141758441925, 0.2652760148048401, 0.2759816348552704, 0.2811919152736664, 0.26749080419540405, 0.2687794864177704, 0.286419540643692, 0.30105721950531006, 0.29055407643318176, 0.2720890939235687, 0.26196053624153137, 0.28323325514793396, 0.2852235734462738, 0.3042975664138794, 0.3309670686721802, 0.3482053279876709, 0.3756142854690552, 0.37282833456993103, 0.4028853476047516, 0.41528448462486267, 0.39297235012054443, 0.33393821120262146, 0.266926646232605, 0.34839409589767456, 0.36013832688331604, 0.3027712404727936, 0.33048728108406067, 0.31818675994873047, 0.3690297305583954, 0.4518803060054779, 0.4707958400249481, 0.47590383887290955, 0.4487761855125427, 0.408179372549057, 0.4058232009410858, 0.4089888632297516, 0.39989686012268066, 0.4162187874317169, 0.4089035391807556, 0.420042484998703, 0.4633650481700897, 0.47009241580963135, 0.4320559501647949, 0.37477734684944153, 0.3501797020435333, 0.36864542961120605, 0.37505897879600525, 0.38057786226272583, 0.4358638525009155, 0.4221298396587372, 0.37908437848091125, 0.38369178771972656, 0.3746439814567566, 0.36504921317100525, 0.3768764138221741, 0.41595566272735596, 0.4059741795063019, 0.36521267890930176, 0.36811569333076477, 0.40306854248046875, 0.39932534098625183, 0.37550926208496094, 0.39822137355804443, 0.38861456513404846, 0.375042200088501, 0.4241117537021637, 0.44766679406166077, 0.42229682207107544, 0.4069075286388397, 0.372592031955719, 0.33715173602104187, 0.34381675720214844, 0.38447317481040955, 0.3949357569217682, 0.3589608371257782, 0.36023738980293274, 0.3734191060066223, 0.36055001616477966, 0.3458775281906128, 0.4113192558288574, 0.46490100026130676, 0.43123236298561096, 0.4103556275367737, 0.3891814351081848, 0.3787882626056671, 0.4149034321308136, 0.4408852159976959, 0.384807288646698, 0.3910160958766937, 0.4161364734172821, 0.3903489112854004, 0.4329696297645569, 0.4470439851284027, 0.4352726638317108, 0.4092283844947815, 0.40356627106666565, 0.3920864760875702, 0.35180336236953735, 0.3690439462661743, 0.3695223927497864, 0.37285977602005005, 0.3807477355003357, 0.38910341262817383, 0.4154600203037262, 0.40539708733558655, 0.3828776478767395, 0.3979257345199585, 0.4030965268611908, 0.3764788508415222, 0.37100499868392944, 0.376128613948822, 0.3891622722148895, 0.39964398741722107, 0.397924542427063, 0.3694554269313812, 0.34238332509994507, 0.35136398673057556, 0.3466775715351105, 0.32053542137145996, 0.31009066104888916, 0.3154548108577728, 0.3218615651130676, 0.3354693353176117, 0.35251349210739136, 0.3808412253856659, 0.36031875014305115, 0.3247736394405365, 0.3143714368343353, 0.29025644063949585, 0.31819331645965576, 0.3275229036808014, 0.26957404613494873, 0.24069646000862122, 0.2509600818157196, 0.2721013128757477, 0.3218974173069, 0.3379148542881012, 0.3391279876232147, 0.35477057099342346, 0.3122774064540863, 0.28907379508018494, 0.26127633452415466, 0.27174583077430725, 0.3145226538181305, 0.26994219422340393, 0.2655091881752014, 0.27674081921577454, 0.2580544650554657, 0.24641384184360504, 0.22764991223812103, 0.2633393704891205, 0.28490525484085083, 0.22884516417980194, 0.20068077743053436, 0.2081446349620819, 0.1691996455192566, 0.12604139745235443, 0.16754966974258423, 0.2303970754146576, 0.24956415593624115, 0.21513475477695465, 0.14939925074577332, 0.12210232764482498, 0.08341973274946213, 0.06872755289077759, 0.08759518712759018, 0.08676828444004059, 0.12776444852352142, 0.16027037799358368, 0.13295665383338928, 0.08134753257036209, 0.07757977396249771, 0.0713101476430893, 0.04413797706365585, 0.07162045687437057, 0.08646615594625473, 0.09258094429969788, 0.08519972860813141, 0.06007305532693863, 0.029393984004855156, -0.004730659071356058, 0.012075272388756275, 0.03314382582902908, 0.060689739882946014, 0.0810345783829689, 0.06891240179538727, 0.06869363784790039, 0.06015931814908981, 0.024453748017549515, -0.022727468982338905, -0.013939582742750645, 0.05860927700996399, 0.10408946871757507, 0.09776987135410309, 0.09346065670251846, 0.06871064007282257, 0.0237408634275198, 0.01144726388156414, 0.009992995299398899, 0.051026638597249985, 0.07804933935403824, 0.03807005658745766, 0.027966653928160667, 0.05139179527759552, 0.059175532311201096, 0.05797623097896576, 0.0645240992307663, 0.07072844356298447, 0.05304586887359619, 0.042133402079343796, 0.06204916164278984, 0.04282190278172493, 0.02581813745200634, 0.009863116778433323, -0.010559451766312122, 0.017547298222780228, 0.005519622005522251, -0.005481787491589785, -0.020114561542868614, -0.07000157982110977, -0.08455605059862137, -0.08487066626548767, -0.09105613827705383, -0.09063224494457245, -0.11028661578893661, -0.12421509623527527, -0.08011362701654434, -0.05917187035083771, -0.061164360493421555, -0.08317194133996964, -0.11133325845003128, -0.11652016639709473, -0.1209748163819313, -0.12923869490623474, -0.17997758090496063, -0.17784884572029114, -0.15868601202964783, -0.1706957221031189, -0.14923615753650665, -0.14066515862941742, -0.15489116311073303, -0.16371965408325195, -0.16069664061069489, -0.1534927785396576, -0.15805117785930634, -0.19541852176189423, -0.222704216837883, -0.26610279083251953, -0.2662503719329834, -0.1970423460006714, -0.20212861895561218, -0.20889119803905487, -0.22272926568984985, -0.2685690224170685, -0.2498251050710678, -0.23696422576904297, -0.24578432738780975, -0.24855369329452515, -0.2809341549873352, -0.2945394814014435, -0.30566444993019104, -0.3110761344432831, -0.29613038897514343, -0.3023243844509125, -0.2645263671875, -0.23136837780475616, -0.27086758613586426, -0.30555811524391174, -0.28737515211105347, -0.2821108400821686, -0.28427669405937195, -0.2682332992553711, -0.2788289487361908, -0.2803072929382324, -0.3019910454750061, -0.3253365159034729, -0.3186952471733093, -0.3028562068939209, -0.3001079261302948, -0.3300066590309143, -0.3330908417701721\}, \{-0.09994792193174362, -0.11962439119815826, -0.10353175550699234, -0.10857119411230087, -0.0975407138466835, -0.10169847309589386, -0.10419623553752899, -0.10011977702379227, -0.10739824175834656, -0.11306414008140564, -0.1047334149479866, -0.11391763389110565, -0.1269489824771881, -0.13103140890598297, -0.1283167600631714, -0.12672726809978485, -0.12256429344415665, -0.11197789013385773, -0.1225510835647583, -0.127065047621727, -0.13534337282180786, -0.14296957850456238, -0.12996596097946167, -0.13687638938426971, -0.14970701932907104, -0.1526072919368744, -0.15842965245246887, -0.1534164845943451, -0.14922869205474854, -0.15118055045604706, -0.141886368393898, -0.1385745108127594, -0.15126793086528778, -0.16573961079120636, -0.16551728546619415, -0.1554349809885025, -0.14193055033683777, -0.12650495767593384, -0.11480633914470673, -0.10120896995067596, -0.10902541130781174, -0.13003939390182495, -0.1531127244234085, -0.17721183598041534, -0.16370649635791779, -0.1375986784696579, -0.11770003288984299, -0.11037637293338776, -0.12091312557458878, -0.14594615995883942, -0.2005297690629959, -0.23771855235099792, -0.24120627343654633, -0.22393779456615448, -0.18643537163734436, -0.14268536865711212, -0.11127320677042007, -0.09704754501581192, -0.11305031180381775, -0.169209286570549, -0.21140502393245697, -0.22894823551177979, -0.21722517907619476, -0.18683262169361115, -0.1520082950592041, -0.11359807103872299, -0.10803831368684769, -0.11909422278404236, -0.16403381526470184, -0.19894607365131378, -0.20131739974021912, -0.20011816918849945, -0.15102310478687286, -0.1396547555923462, -0.14831775426864624, -0.14927057921886444, -0.18337377905845642, -0.1848442405462265, -0.18638628721237183, -0.16026727855205536, -0.12376182526350021, -0.09934362769126892, -0.05817044526338577, -0.05516081303358078, -0.08013266324996948, -0.1142791286110878, -0.14091607928276062, -0.1753677874803543, -0.17852981388568878, -0.17905759811401367, -0.1700560748577118, -0.1533929705619812, -0.1574300229549408, -0.11412449926137924, -0.12919814884662628, -0.13824273645877838, -0.1613447368144989, -0.21223761141300201, -0.2064344733953476, -0.19133427739143372, -0.1406831592321396, -0.1388634741306305, -0.15151046216487885, -0.16450339555740356, -0.1921345293521881, -0.21124261617660522, -0.20467744767665863, -0.17311713099479675, -0.15831777453422546, -0.1329701989889145, -0.14133886992931366, -0.12255013734102249, -0.11732081323862076, -0.13927452266216278, -0.11711817979812622, -0.11348146200180054, -0.10841589421033859, -0.08195535838603973, -0.06057226285338402, -0.061305347830057144, -0.05880201607942581, -0.05418756604194641, -0.0648375153541565, -0.09700310975313187, -0.10446159541606903, -0.08932163566350937, -0.07691141217947006, -0.035637155175209045, 5.688727833330631e-05, 0.004381988663226366, -0.015582814812660217, -0.052710991352796555, -0.11129812151193619, -0.13720430433750153, -0.1500120759010315, -0.13432498276233673, -0.0947595089673996, -0.10165277868509293, -0.08569087088108063, -0.09615428745746613, -0.12074773013591766, -0.12624377012252808, -0.13209643959999084, -0.10305644571781158, -0.07449965924024582, -0.04758734628558159, -0.020271843299269676, -0.00881312694400549, -0.022414715960621834, -0.034218672662973404, -0.029248716309666634, -0.006246726959943771, 0.031752802431583405, 0.046497054398059845, 0.03946823626756668, 0.03475983440876007, 0.047903694212436676, 0.052925486117601395, 0.06413859874010086, 0.08361437916755676, 0.06616223603487015, 0.023582562804222107, -0.025501947849988937, -0.05855322256684303, -0.10033947229385376, -0.08882986009120941, -0.01367687527090311, 0.03822048753499985, 0.11241403967142105, 0.1203625425696373, 0.08676137775182724, 0.07272087782621384, 0.028201015666127205, 0.03695883974432945, 0.06583039462566376, 0.1025254875421524, 0.12751634418964386, 0.11698959022760391, 0.10515732318162918, 0.06402552127838135, 0.039853695780038834, 0.04782472923398018, 0.061149727553129196, 0.08441037684679031, 0.10849040001630783, 0.10723382234573364, 0.09841576963663101, 0.11526837944984436, 0.13063743710517883, 0.13114410638809204, 0.14082929491996765, 0.14554251730442047, 0.14252158999443054, 0.12895247340202332, 0.11951650679111481, 0.14755801856517792, 0.16673551499843597, 0.20658454298973083, 0.25348418951034546, 0.26842793822288513, 0.25881707668304443, 0.21370655298233032, 0.18995146453380585, 0.1868065446615219, 0.1954771876335144, 0.21372511982917786, 0.25208067893981934, 0.2730892300605774, 0.25945332646369934, 0.2589276134967804, 0.24185380339622498, 0.2397637963294983, 0.23975898325443268, 0.2354113608598709, 0.2516745924949646, 0.2558706998825073, 0.26721006631851196, 0.29076191782951355, 0.31426018476486206, 0.3109114170074463, 0.2845839560031891, 0.2721503674983978, 0.27079394459724426, 0.2831577658653259, 0.29059892892837524, 0.291005939245224, 0.30118197202682495, 0.2933638393878937, 0.27483776211738586, 0.269435316324234, 0.28242531418800354, 0.2927139401435852, 0.29877111315727234, 0.3222566545009613, 0.35182785987854004, 0.3825486898422241, 0.3953903913497925, 0.3971389830112457, 0.39406105875968933, 0.3772681951522827, 0.33756011724472046, 0.30139675736427307, 0.3089078962802887, 0.3119831085205078, 0.3117419183254242, 0.33580657839775085, 0.3651560842990875, 0.3916337788105011, 0.41496148705482483, 0.4222065210342407, 0.4214162826538086, 0.4170536696910858, 0.398937851190567, 0.39465564489364624, 0.4026236832141876, 0.41055724024772644, 0.4055759310722351, 0.4007759988307953, 0.4160097539424896, 0.43319204449653625, 0.4375785291194916, 0.4236885607242584, 0.39181581139564514, 0.36481305956840515, 0.36527419090270996, 0.3643050789833069, 0.3883201479911804, 0.42446377873420715, 0.41976654529571533, 0.39699533581733704, 0.3856772482395172, 0.381778359413147, 0.38220369815826416, 0.4096032381057739, 0.41980433464050293, 0.4185553789138794, 0.41061171889305115, 0.39793452620506287, 0.3881622850894928, 0.3715258836746216, 0.3916380703449249, 0.4126463830471039, 0.4324183166027069, 0.4381665587425232, 0.44356435537338257, 0.44115254282951355, 0.4175683856010437, 0.4181065261363983, 0.39187297224998474, 0.3916023373603821, 0.4059198200702667, 0.3977578580379486, 0.4012296497821808, 0.389100581407547, 0.3854875862598419, 0.3979077935218811, 0.3847251534461975, 0.3865782618522644, 0.4260472357273102, 0.4276198446750641, 0.42497894167900085, 0.4214974045753479, 0.4206068515777588, 0.4138401746749878, 0.3903322219848633, 0.40035924315452576, 0.38313010334968567, 0.387683242559433, 0.40142080187797546, 0.3823452889919281, 0.3835024833679199, 0.38834020495414734, 0.390988826751709, 0.3909831941127777, 0.3865695893764496, 0.3690422475337982, 0.35936620831489563, 0.3610043525695801, 0.36348795890808105, 0.3659120500087738, 0.37513911724090576, 0.3820977807044983, 0.39646682143211365, 0.408132404088974, 0.39342761039733887, 0.38596677780151367, 0.3602036237716675, 0.3375759720802307, 0.33079901337623596, 0.3477686941623688, 0.3761981427669525, 0.38972991704940796, 0.3894626796245575, 0.367550253868103, 0.35796913504600525, 0.3431982696056366, 0.3480483889579773, 0.3415881097316742, 0.32947519421577454, 0.31935441493988037, 0.2979249358177185, 0.3078659176826477, 0.3135370910167694, 0.3420614004135132, 0.3540676236152649, 0.35666486620903015, 0.349386990070343, 0.3172683119773865, 0.30574697256088257, 0.28865373134613037, 0.2833276093006134, 0.2666991055011749, 0.24239185452461243, 0.23900704085826874, 0.27526572346687317, 0.30557453632354736, 0.31010347604751587, 0.31159159541130066, 0.2793470323085785, 0.2645336091518402, 0.25754624605178833, 0.2543703615665436, 0.2593342661857605, 0.24236811697483063, 0.24081335961818695, 0.23648594319820404, 0.21771909296512604, 0.2217126190662384, 0.21581275761127472, 0.22762122750282288, 0.2548814117908478, 0.22819294035434723, 0.21335329115390778, 0.19262206554412842, 0.16463284194469452, 0.17013214528560638, 0.18808600306510925, 0.21299326419830322, 0.20698916912078857, 0.19779641926288605, 0.18487393856048584, 0.1750701516866684, 0.16996583342552185, 0.15596862137317657, 0.16054731607437134, 0.15955840051174164, 0.1525723934173584, 0.15092453360557556, 0.15832728147506714, 0.16580551862716675, 0.1808888167142868, 0.17386390268802643, 0.1497776210308075, 0.1393614411354065, 0.11221929639577866, 0.11007978022098541, 0.11463478207588196, 0.13000912964344025, 0.1533515900373459, 0.12061122059822083, 0.0795946717262268, 0.07035554945468903, 0.08294548094272614, 0.09392234683036804, 0.08972930163145065, 0.06548599153757095, 0.04852929711341858, 0.03991379588842392, 0.031224288046360016, 0.039172254502773285, 0.06015210226178169, 0.07977551221847534, 0.07406746596097946, 0.06532882899045944, 0.028744744136929512, -0.0034865951165556908, -0.004647627007216215, -0.012922829017043114, 0.00285692629404366, 0.012585943564772606, 0.006719670724123716, -0.0017939937533810735, -0.010044789873063564, -0.010709414258599281, -0.012078255414962769, -0.0028731143102049828, 0.01550345215946436, 0.0010065512033179402, -0.020710913464426994, -0.004117028787732124, -0.008085801266133785, -0.00903233326971531, -0.019932616502046585, -0.04797927662730217, -0.03400309383869171, -0.03872649744153023, -0.04582834988832474, -0.03778964281082153, -0.06929195672273636, -0.09303196519613266, -0.10261025279760361, -0.10264366120100021, -0.0714557021856308, -0.08781681209802628, -0.10260650515556335, -0.09530782699584961, -0.10963466763496399, -0.09928926825523376, -0.0994051843881607, -0.1045951321721077, -0.10160116106271744, -0.1036926805973053, -0.13211064040660858, -0.1617400050163269, -0.17330455780029297, -0.18138845264911652, -0.16457676887512207, -0.1607702672481537, -0.1509513556957245, -0.15950234234333038, -0.1727813482284546, -0.151169091463089, -0.14882789552211761, -0.1630387306213379, -0.1829991340637207, -0.18763771653175354, -0.2043699324131012, -0.20931190252304077, -0.17731744050979614, -0.16224192082881927, -0.16079185903072357, -0.17869965732097626, -0.2003573179244995, -0.20782214403152466, -0.20740827918052673, -0.19896581768989563, -0.19556765258312225, -0.19849209487438202, -0.21513067185878754, -0.24276623129844666, -0.24781979620456696, -0.24885743856430054, -0.25135567784309387, -0.2239650934934616, -0.22711986303329468, -0.2541288733482361, -0.262139230966568, -0.28334084153175354, -0.27862101793289185, -0.27003878355026245, -0.2862944006919861, -0.28646120429039, -0.29656219482421875, -0.29326319694519043, -0.2768491804599762, -0.28460410237312317, -0.29289186000823975, -0.3009759187698364, -0.31511402130126953, -0.3198918104171753\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_48000::bitDepth = 32}}
\par
{\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_32bit_48000::numSamplesPerChannel = 418909}}
\par
{\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_32bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_32bit_48000}
{\xe \v wav_stereo_32bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_32bit_48000::testBuffer = \{\{-0.10833723098039627, -0.13686230778694153, -0.08660777658224106, -0.07025191932916641, -0.07594943791627884, -0.10192184150218964, -0.11632838100194931, -0.09456843882799149, -0.11326359212398529, -0.12219168245792389, -0.10825426131486893, -0.1309429407119751, -0.11157312244176865, -0.09016415476799011, -0.0965714156627655, -0.12620578706264496, -0.14365583658218384, -0.11878309398889542, -0.1251625418663025, -0.12197279185056686, -0.13707268238067627, -0.16403384506702423, -0.12149179726839066, -0.11605630069971085, -0.13082683086395264, -0.12961497902870178, -0.16302011907100677, -0.16787879168987274, -0.1727980673313141, -0.17347824573516846, -0.15056578814983368, -0.13418999314308167, -0.13609308004379272, -0.15870068967342377, -0.15973517298698425, -0.16675157845020294, -0.1538539081811905, -0.13986317813396454, -0.1356811225414276, -0.11068937927484512, -0.11542622745037079, -0.11571431159973145, -0.14208760857582092, -0.18606315553188324, -0.15333223342895508, -0.1170574203133583, -0.12660381197929382, -0.1302478164434433, -0.12123790383338928, -0.1418413519859314, -0.19688516855239868, -0.21770331263542175, -0.20560204982757568, -0.1930108666419983, -0.18868814408779144, -0.1661619395017624, -0.13854163885116577, -0.1325310915708542, -0.11040335148572922, -0.12708288431167603, -0.17054039239883423, -0.21640004217624664, -0.24592463672161102, -0.21843625605106354, -0.1573750376701355, -0.11056780070066452, -0.09740602225065231, -0.12069782614707947, -0.2100597321987152, -0.22250661253929138, -0.1898784339427948, -0.18164417147636414, -0.1523897796869278, -0.15555024147033691, -0.14697620272636414, -0.16035667061805725, -0.18182522058486938, -0.19542503356933594, -0.20623499155044556, -0.1562727838754654, -0.12542715668678284, -0.1119709312915802, -0.07725507766008377, -0.08215560019016266, -0.10654792189598083, -0.1284656673669815, -0.140795037150383, -0.1548275202512741, -0.175393745303154, -0.16068312525749207, -0.15743035078048706, -0.1740831434726715, -0.1850689798593521, -0.14626285433769226, -0.13768750429153442, -0.14167004823684692, -0.13158604502677917, -0.2224844992160797, -0.1972336769104004, -0.14786580204963684, -0.16598083078861237, -0.10970427095890045, -0.14206169545650482, -0.21922466158866882, -0.2276635468006134, -0.2204207330942154, -0.1741165667772293, -0.1283014416694641, -0.1455855518579483, -0.12145467847585678, -0.12210126221179962, -0.1665816605091095, -0.16821958124637604, -0.15102557837963104, -0.09825979173183441, -0.07853254675865173, -0.0757584273815155, -0.04167184606194496, -0.03020879440009594, -0.07665292173624039, -0.0867912694811821, -0.06523621082305908, -0.08391410857439041, -0.08976593613624573, -0.0892600566148758, -0.061698853969573975, -0.05050971359014511, -0.0387004055082798, 0.004493299406021833, 0.00935047771781683, -0.000861787295434624, -0.04469887167215347, -0.12444597482681274, -0.15654629468917847, -0.15043316781520844, -0.1368141770362854, -0.09912170469760895, -0.10017985105514526, -0.09730787575244904, -0.09079402685165405, -0.13539952039718628, -0.11584442853927612, -0.0871509462594986, -0.09939737617969513, -0.09079309552907944, -0.07587186992168427, -0.015941079705953598, 0.011376189067959785, -0.02986397035419941, -0.048056282103061676, -0.05423866957426071, -0.009084882214665413, 0.06034950911998749, 0.07316169142723083, 0.04421554133296013, 0.026190321892499924, 0.02441880851984024, 0.023521097376942635, 0.051470398902893066, 0.07469034194946289, 0.06154932454228401, 0.006343642715364695, -0.03554345667362213, -0.06482252478599548, -0.1056675836443901, -0.07906777411699295, -0.010515891015529633, 0.03463919833302498, 0.10182815045118332, 0.12722797691822052, 0.07471873611211777, 0.06801177561283112, 0.015254026278853416, 0.013864085078239441, 0.09221803396940231, 0.0826478824019432, 0.10610705614089966, 0.12229252606630325, 0.09588494151830673, 0.0392443984746933, 0.007177992258220911, 0.05457144230604172, 0.060299959033727646, 0.052177149802446365, 0.0912666916847229, 0.1138489618897438, 0.0880434438586235, 0.09100965410470963, 0.10831927508115768, 0.08488117158412933, 0.09944018721580505, 0.15527090430259705, 0.1495298147201538, 0.12461885809898376, 0.10924600064754486, 0.13051281869411469, 0.18916931748390198, 0.21212251484394073, 0.26510581374168396, 0.2736929655075073, 0.2305777221918106, 0.20042501389980316, 0.17696787416934967, 0.19826193153858185, 0.22595231235027313, 0.21338365972042084, 0.21687710285186768, 0.2768402099609375, 0.2856462597846985, 0.2748701274394989, 0.24429206550121307, 0.23731593787670135, 0.2615853250026703, 0.2385004609823227, 0.25184887647628784, 0.2590377628803253, 0.2912565767765045, 0.2960257828235626, 0.28129681944847107, 0.2943141758441925, 0.2652760148048401, 0.2759816348552704, 0.2811919152736664, 0.26749080419540405, 0.2687794864177704, 0.286419540643692, 0.30105721950531006, 0.29055407643318176, 0.2720890939235687, 0.26196053624153137, 0.28323325514793396, 0.2852235734462738, 0.3042975664138794, 0.3309670686721802, 0.3482053279876709, 0.3756142854690552, 0.37282833456993103, 0.4028853476047516, 0.41528448462486267, 0.39297235012054443, 0.33393821120262146, 0.266926646232605, 0.34839409589767456, 0.36013832688331604, 0.3027712404727936, 0.33048728108406067, 0.31818675994873047, 0.3690297305583954, 0.4518803060054779, 0.4707958400249481, 0.47590383887290955, 0.4487761855125427, 0.408179372549057, 0.4058232009410858, 0.4089888632297516, 0.39989686012268066, 0.4162187874317169, 0.4089035391807556, 0.420042484998703, 0.4633650481700897, 0.47009241580963135, 0.4320559501647949, 0.37477734684944153, 0.3501797020435333, 0.36864542961120605, 0.37505897879600525, 0.38057786226272583, 0.4358638525009155, 0.4221298396587372, 0.37908437848091125, 0.38369178771972656, 0.3746439814567566, 0.36504921317100525, 0.3768764138221741, 0.41595566272735596, 0.4059741795063019, 0.36521267890930176, 0.36811569333076477, 0.40306854248046875, 0.39932534098625183, 0.37550926208496094, 0.39822137355804443, 0.38861456513404846, 0.375042200088501, 0.4241117537021637, 0.44766679406166077, 0.42229682207107544, 0.4069075286388397, 0.372592031955719, 0.33715173602104187, 0.34381675720214844, 0.38447317481040955, 0.3949357569217682, 0.3589608371257782, 0.36023738980293274, 0.3734191060066223, 0.36055001616477966, 0.3458775281906128, 0.4113192558288574, 0.46490100026130676, 0.43123236298561096, 0.4103556275367737, 0.3891814351081848, 0.3787882626056671, 0.4149034321308136, 0.4408852159976959, 0.384807288646698, 0.3910160958766937, 0.4161364734172821, 0.3903489112854004, 0.4329696297645569, 0.4470439851284027, 0.4352726638317108, 0.4092283844947815, 0.40356627106666565, 0.3920864760875702, 0.35180336236953735, 0.3690439462661743, 0.3695223927497864, 0.37285977602005005, 0.3807477355003357, 0.38910341262817383, 0.4154600203037262, 0.40539708733558655, 0.3828776478767395, 0.3979257345199585, 0.4030965268611908, 0.3764788508415222, 0.37100499868392944, 0.376128613948822, 0.3891622722148895, 0.39964398741722107, 0.397924542427063, 0.3694554269313812, 0.34238332509994507, 0.35136398673057556, 0.3466775715351105, 0.32053542137145996, 0.31009066104888916, 0.3154548108577728, 0.3218615651130676, 0.3354693353176117, 0.35251349210739136, 0.3808412253856659, 0.36031875014305115, 0.3247736394405365, 0.3143714368343353, 0.29025644063949585, 0.31819331645965576, 0.3275229036808014, 0.26957404613494873, 0.24069646000862122, 0.2509600818157196, 0.2721013128757477, 0.3218974173069, 0.3379148542881012, 0.3391279876232147, 0.35477057099342346, 0.3122774064540863, 0.28907379508018494, 0.26127633452415466, 0.27174583077430725, 0.3145226538181305, 0.26994219422340393, 0.2655091881752014, 0.27674081921577454, 0.2580544650554657, 0.24641384184360504, 0.22764991223812103, 0.2633393704891205, 0.28490525484085083, 0.22884516417980194, 0.20068077743053436, 0.2081446349620819, 0.1691996455192566, 0.12604139745235443, 0.16754966974258423, 0.2303970754146576, 0.24956415593624115, 0.21513475477695465, 0.14939925074577332, 0.12210232764482498, 0.08341973274946213, 0.06872755289077759, 0.08759518712759018, 0.08676828444004059, 0.12776444852352142, 0.16027037799358368, 0.13295665383338928, 0.08134753257036209, 0.07757977396249771, 0.0713101476430893, 0.04413797706365585, 0.07162045687437057, 0.08646615594625473, 0.09258094429969788, 0.08519972860813141, 0.06007305532693863, 0.029393984004855156, -0.004730659071356058, 0.012075272388756275, 0.03314382582902908, 0.060689739882946014, 0.0810345783829689, 0.06891240179538727, 0.06869363784790039, 0.06015931814908981, 0.024453748017549515, -0.022727468982338905, -0.013939582742750645, 0.05860927700996399, 0.10408946871757507, 0.09776987135410309, 0.09346065670251846, 0.06871064007282257, 0.0237408634275198, 0.01144726388156414, 0.009992995299398899, 0.051026638597249985, 0.07804933935403824, 0.03807005658745766, 0.027966653928160667, 0.05139179527759552, 0.059175532311201096, 0.05797623097896576, 0.0645240992307663, 0.07072844356298447, 0.05304586887359619, 0.042133402079343796, 0.06204916164278984, 0.04282190278172493, 0.02581813745200634, 0.009863116778433323, -0.010559451766312122, 0.017547298222780228, 0.005519622005522251, -0.005481787491589785, -0.020114561542868614, -0.07000157982110977, -0.08455605059862137, -0.08487066626548767, -0.09105613827705383, -0.09063224494457245, -0.11028661578893661, -0.12421509623527527, -0.08011362701654434, -0.05917187035083771, -0.061164360493421555, -0.08317194133996964, -0.11133325845003128, -0.11652016639709473, -0.1209748163819313, -0.12923869490623474, -0.17997758090496063, -0.17784884572029114, -0.15868601202964783, -0.1706957221031189, -0.14923615753650665, -0.14066515862941742, -0.15489116311073303, -0.16371965408325195, -0.16069664061069489, -0.1534927785396576, -0.15805117785930634, -0.19541852176189423, -0.222704216837883, -0.26610279083251953, -0.2662503719329834, -0.1970423460006714, -0.20212861895561218, -0.20889119803905487, -0.22272926568984985, -0.2685690224170685, -0.2498251050710678, -0.23696422576904297, -0.24578432738780975, -0.24855369329452515, -0.2809341549873352, -0.2945394814014435, -0.30566444993019104, -0.3110761344432831, -0.29613038897514343, -0.3023243844509125, -0.2645263671875, -0.23136837780475616, -0.27086758613586426, -0.30555811524391174, -0.28737515211105347, -0.2821108400821686, -0.28427669405937195, -0.2682332992553711, -0.2788289487361908, -0.2803072929382324, -0.3019910454750061, -0.3253365159034729, -0.3186952471733093, -0.3028562068939209, -0.3001079261302948, -0.3300066590309143, -0.3330908417701721\}, \{-0.09994792193174362, -0.11962439119815826, -0.10353175550699234, -0.10857119411230087, -0.0975407138466835, -0.10169847309589386, -0.10419623553752899, -0.10011977702379227, -0.10739824175834656, -0.11306414008140564, -0.1047334149479866, -0.11391763389110565, -0.1269489824771881, -0.13103140890598297, -0.1283167600631714, -0.12672726809978485, -0.12256429344415665, -0.11197789013385773, -0.1225510835647583, -0.127065047621727, -0.13534337282180786, -0.14296957850456238, -0.12996596097946167, -0.13687638938426971, -0.14970701932907104, -0.1526072919368744, -0.15842965245246887, -0.1534164845943451, -0.14922869205474854, -0.15118055045604706, -0.141886368393898, -0.1385745108127594, -0.15126793086528778, -0.16573961079120636, -0.16551728546619415, -0.1554349809885025, -0.14193055033683777, -0.12650495767593384, -0.11480633914470673, -0.10120896995067596, -0.10902541130781174, -0.13003939390182495, -0.1531127244234085, -0.17721183598041534, -0.16370649635791779, -0.1375986784696579, -0.11770003288984299, -0.11037637293338776, -0.12091312557458878, -0.14594615995883942, -0.2005297690629959, -0.23771855235099792, -0.24120627343654633, -0.22393779456615448, -0.18643537163734436, -0.14268536865711212, -0.11127320677042007, -0.09704754501581192, -0.11305031180381775, -0.169209286570549, -0.21140502393245697, -0.22894823551177979, -0.21722517907619476, -0.18683262169361115, -0.1520082950592041, -0.11359807103872299, -0.10803831368684769, -0.11909422278404236, -0.16403381526470184, -0.19894607365131378, -0.20131739974021912, -0.20011816918849945, -0.15102310478687286, -0.1396547555923462, -0.14831775426864624, -0.14927057921886444, -0.18337377905845642, -0.1848442405462265, -0.18638628721237183, -0.16026727855205536, -0.12376182526350021, -0.09934362769126892, -0.05817044526338577, -0.05516081303358078, -0.08013266324996948, -0.1142791286110878, -0.14091607928276062, -0.1753677874803543, -0.17852981388568878, -0.17905759811401367, -0.1700560748577118, -0.1533929705619812, -0.1574300229549408, -0.11412449926137924, -0.12919814884662628, -0.13824273645877838, -0.1613447368144989, -0.21223761141300201, -0.2064344733953476, -0.19133427739143372, -0.1406831592321396, -0.1388634741306305, -0.15151046216487885, -0.16450339555740356, -0.1921345293521881, -0.21124261617660522, -0.20467744767665863, -0.17311713099479675, -0.15831777453422546, -0.1329701989889145, -0.14133886992931366, -0.12255013734102249, -0.11732081323862076, -0.13927452266216278, -0.11711817979812622, -0.11348146200180054, -0.10841589421033859, -0.08195535838603973, -0.06057226285338402, -0.061305347830057144, -0.05880201607942581, -0.05418756604194641, -0.0648375153541565, -0.09700310975313187, -0.10446159541606903, -0.08932163566350937, -0.07691141217947006, -0.035637155175209045, 5.688727833330631e-05, 0.004381988663226366, -0.015582814812660217, -0.052710991352796555, -0.11129812151193619, -0.13720430433750153, -0.1500120759010315, -0.13432498276233673, -0.0947595089673996, -0.10165277868509293, -0.08569087088108063, -0.09615428745746613, -0.12074773013591766, -0.12624377012252808, -0.13209643959999084, -0.10305644571781158, -0.07449965924024582, -0.04758734628558159, -0.020271843299269676, -0.00881312694400549, -0.022414715960621834, -0.034218672662973404, -0.029248716309666634, -0.006246726959943771, 0.031752802431583405, 0.046497054398059845, 0.03946823626756668, 0.03475983440876007, 0.047903694212436676, 0.052925486117601395, 0.06413859874010086, 0.08361437916755676, 0.06616223603487015, 0.023582562804222107, -0.025501947849988937, -0.05855322256684303, -0.10033947229385376, -0.08882986009120941, -0.01367687527090311, 0.03822048753499985, 0.11241403967142105, 0.1203625425696373, 0.08676137775182724, 0.07272087782621384, 0.028201015666127205, 0.03695883974432945, 0.06583039462566376, 0.1025254875421524, 0.12751634418964386, 0.11698959022760391, 0.10515732318162918, 0.06402552127838135, 0.039853695780038834, 0.04782472923398018, 0.061149727553129196, 0.08441037684679031, 0.10849040001630783, 0.10723382234573364, 0.09841576963663101, 0.11526837944984436, 0.13063743710517883, 0.13114410638809204, 0.14082929491996765, 0.14554251730442047, 0.14252158999443054, 0.12895247340202332, 0.11951650679111481, 0.14755801856517792, 0.16673551499843597, 0.20658454298973083, 0.25348418951034546, 0.26842793822288513, 0.25881707668304443, 0.21370655298233032, 0.18995146453380585, 0.1868065446615219, 0.1954771876335144, 0.21372511982917786, 0.25208067893981934, 0.2730892300605774, 0.25945332646369934, 0.2589276134967804, 0.24185380339622498, 0.2397637963294983, 0.23975898325443268, 0.2354113608598709, 0.2516745924949646, 0.2558706998825073, 0.26721006631851196, 0.29076191782951355, 0.31426018476486206, 0.3109114170074463, 0.2845839560031891, 0.2721503674983978, 0.27079394459724426, 0.2831577658653259, 0.29059892892837524, 0.291005939245224, 0.30118197202682495, 0.2933638393878937, 0.27483776211738586, 0.269435316324234, 0.28242531418800354, 0.2927139401435852, 0.29877111315727234, 0.3222566545009613, 0.35182785987854004, 0.3825486898422241, 0.3953903913497925, 0.3971389830112457, 0.39406105875968933, 0.3772681951522827, 0.33756011724472046, 0.30139675736427307, 0.3089078962802887, 0.3119831085205078, 0.3117419183254242, 0.33580657839775085, 0.3651560842990875, 0.3916337788105011, 0.41496148705482483, 0.4222065210342407, 0.4214162826538086, 0.4170536696910858, 0.398937851190567, 0.39465564489364624, 0.4026236832141876, 0.41055724024772644, 0.4055759310722351, 0.4007759988307953, 0.4160097539424896, 0.43319204449653625, 0.4375785291194916, 0.4236885607242584, 0.39181581139564514, 0.36481305956840515, 0.36527419090270996, 0.3643050789833069, 0.3883201479911804, 0.42446377873420715, 0.41976654529571533, 0.39699533581733704, 0.3856772482395172, 0.381778359413147, 0.38220369815826416, 0.4096032381057739, 0.41980433464050293, 0.4185553789138794, 0.41061171889305115, 0.39793452620506287, 0.3881622850894928, 0.3715258836746216, 0.3916380703449249, 0.4126463830471039, 0.4324183166027069, 0.4381665587425232, 0.44356435537338257, 0.44115254282951355, 0.4175683856010437, 0.4181065261363983, 0.39187297224998474, 0.3916023373603821, 0.4059198200702667, 0.3977578580379486, 0.4012296497821808, 0.389100581407547, 0.3854875862598419, 0.3979077935218811, 0.3847251534461975, 0.3865782618522644, 0.4260472357273102, 0.4276198446750641, 0.42497894167900085, 0.4214974045753479, 0.4206068515777588, 0.4138401746749878, 0.3903322219848633, 0.40035924315452576, 0.38313010334968567, 0.387683242559433, 0.40142080187797546, 0.3823452889919281, 0.3835024833679199, 0.38834020495414734, 0.390988826751709, 0.3909831941127777, 0.3865695893764496, 0.3690422475337982, 0.35936620831489563, 0.3610043525695801, 0.36348795890808105, 0.3659120500087738, 0.37513911724090576, 0.3820977807044983, 0.39646682143211365, 0.408132404088974, 0.39342761039733887, 0.38596677780151367, 0.3602036237716675, 0.3375759720802307, 0.33079901337623596, 0.3477686941623688, 0.3761981427669525, 0.38972991704940796, 0.3894626796245575, 0.367550253868103, 0.35796913504600525, 0.3431982696056366, 0.3480483889579773, 0.3415881097316742, 0.32947519421577454, 0.31935441493988037, 0.2979249358177185, 0.3078659176826477, 0.3135370910167694, 0.3420614004135132, 0.3540676236152649, 0.35666486620903015, 0.349386990070343, 0.3172683119773865, 0.30574697256088257, 0.28865373134613037, 0.2833276093006134, 0.2666991055011749, 0.24239185452461243, 0.23900704085826874, 0.27526572346687317, 0.30557453632354736, 0.31010347604751587, 0.31159159541130066, 0.2793470323085785, 0.2645336091518402, 0.25754624605178833, 0.2543703615665436, 0.2593342661857605, 0.24236811697483063, 0.24081335961818695, 0.23648594319820404, 0.21771909296512604, 0.2217126190662384, 0.21581275761127472, 0.22762122750282288, 0.2548814117908478, 0.22819294035434723, 0.21335329115390778, 0.19262206554412842, 0.16463284194469452, 0.17013214528560638, 0.18808600306510925, 0.21299326419830322, 0.20698916912078857, 0.19779641926288605, 0.18487393856048584, 0.1750701516866684, 0.16996583342552185, 0.15596862137317657, 0.16054731607437134, 0.15955840051174164, 0.1525723934173584, 0.15092453360557556, 0.15832728147506714, 0.16580551862716675, 0.1808888167142868, 0.17386390268802643, 0.1497776210308075, 0.1393614411354065, 0.11221929639577866, 0.11007978022098541, 0.11463478207588196, 0.13000912964344025, 0.1533515900373459, 0.12061122059822083, 0.0795946717262268, 0.07035554945468903, 0.08294548094272614, 0.09392234683036804, 0.08972930163145065, 0.06548599153757095, 0.04852929711341858, 0.03991379588842392, 0.031224288046360016, 0.039172254502773285, 0.06015210226178169, 0.07977551221847534, 0.07406746596097946, 0.06532882899045944, 0.028744744136929512, -0.0034865951165556908, -0.004647627007216215, -0.012922829017043114, 0.00285692629404366, 0.012585943564772606, 0.006719670724123716, -0.0017939937533810735, -0.010044789873063564, -0.010709414258599281, -0.012078255414962769, -0.0028731143102049828, 0.01550345215946436, 0.0010065512033179402, -0.020710913464426994, -0.004117028787732124, -0.008085801266133785, -0.00903233326971531, -0.019932616502046585, -0.04797927662730217, -0.03400309383869171, -0.03872649744153023, -0.04582834988832474, -0.03778964281082153, -0.06929195672273636, -0.09303196519613266, -0.10261025279760361, -0.10264366120100021, -0.0714557021856308, -0.08781681209802628, -0.10260650515556335, -0.09530782699584961, -0.10963466763496399, -0.09928926825523376, -0.0994051843881607, -0.1045951321721077, -0.10160116106271744, -0.1036926805973053, -0.13211064040660858, -0.1617400050163269, -0.17330455780029297, -0.18138845264911652, -0.16457676887512207, -0.1607702672481537, -0.1509513556957245, -0.15950234234333038, -0.1727813482284546, -0.151169091463089, -0.14882789552211761, -0.1630387306213379, -0.1829991340637207, -0.18763771653175354, -0.2043699324131012, -0.20931190252304077, -0.17731744050979614, -0.16224192082881927, -0.16079185903072357, -0.17869965732097626, -0.2003573179244995, -0.20782214403152466, -0.20740827918052673, -0.19896581768989563, -0.19556765258312225, -0.19849209487438202, -0.21513067185878754, -0.24276623129844666, -0.24781979620456696, -0.24885743856430054, -0.25135567784309387, -0.2239650934934616, -0.22711986303329468, -0.2541288733482361, -0.262139230966568, -0.28334084153175354, -0.27862101793289185, -0.27003878355026245, -0.2862944006919861, -0.28646120429039, -0.29656219482421875, -0.29326319694519043, -0.2768491804599762, -0.28460410237312317, -0.29289186000823975, -0.3009759187698364, -0.31511402130126953, -0.3198918104171753\}\}}}
\par
{\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_8bit_44100 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100}
{\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0, 0.0234375, -0.09375, 0.09375, 0.0078125, 0.0703125, 0.0546875, 0.0390625, 0.0859375, 0.015625, 0.078125, 0.015625, 0.078125, 0.0390625, -0.015625, 0.046875, 0.0234375, 0.0859375, 0.046875, 0.1328125, 0.0546875, 0.140625, 0.078125, 0.1015625, 0.109375, 0.078125, 0.1171875, 0.0703125, 0.1171875, 0.0546875, 0.125, 0.0546875, 0.09375, 0.1328125, 0.046875, 0.09375, 0.125, 0.0546875, 0.1328125, 0.0859375, 0.1015625, 0.1015625, 0.0546875, 0.1328125, 0.0625, 0.15625, 0.1015625, 0.1328125, 0.1328125, 0.046875, 0.1484375, 0.015625, 0.09375, -0.046875, 0.0625, -0.0078125, 0.03125, 0.0234375, -0.0078125, 0.0234375, -0.015625, 0.0546875, -0.03125, 0.0703125, 0.015625, 0.1015625, 0.046875, -0.0234375, 0.109375, 0.0234375, 0.2421875, 0.3984375, 0.40625, 0.0859375, 0.1015625, 0.21875, 0.2109375, -0.0859375, -0.1171875, -0.1484375, -0.203125, 0.0078125, -0.1875, -0.3046875, -0.2734375, -0.125, 0.1171875, -0.0234375, -0.234375, -0.21875, 0.046875, 0.1484375, 0.171875, -0.1171875, -0.1484375, -0.21875, -0.25, -0.2265625, -0.0078125, -0.046875, -0.1875, -0.1875, -0.1796875, -0.1640625, -0.203125, -0.2421875, -0.2734375, -0.203125, -0.2265625, -0.375, -0.3828125, -0.484375, -0.5, -0.2578125, -0.15625, -0.390625, -0.34375, -0.3046875, -0.3515625, -0.1640625, -0.21875, -0.3359375, -0.28125, -0.03125, -0.25, -0.125, -0.0625, -0.1484375, -0.1484375, -0.0390625, 0.078125, -0.1171875, -0.2265625, -0.125, 0.046875, -0.0859375, -0.296875, -0.109375, -0.0859375, -0.1328125, -0.265625, -0.1953125, -0.0859375, -0.015625, -0.1875, -0.1875, -0.09375, -0.1640625, -0.2265625, -0.21875, -0.0703125, -0.140625, -0.3046875, -0.140625, -0.0703125, -0.2734375, -0.171875, -0.0546875, -0.0390625, -0.03125, -0.1796875, -0.140625, -0.125, 0.03125, 0.0, -0.0859375, -0.0859375, 0.0, 0.09375, 0.140625, 0.0, 0.0234375, 0.1328125, 0.15625, 0.171875, 0.1796875, 0.1953125, 0.125, 0.15625, 0.2890625, 0.359375, 0.21875, 0.2734375, 0.2578125, 0.265625, 0.203125, 0.2109375, 0.2890625, 0.2578125, 0.1484375, 0.1875, 0.2265625, 0.1953125, 0.28125, 0.2265625, 0.2578125, 0.1015625, 0.2109375, 0.3359375, 0.2265625, 0.109375, 0.078125, 0.1640625, 0.2109375, 0.09375, 0.0625, -0.015625, 0.0625, 0.25, 0.078125, 0.03125, 0.2734375, 0.1953125, 0.171875, 0.1484375, 0.3046875, 0.25, 0.125, 0.2421875, 0.390625, 0.265625, 0.171875, 0.34375, 0.359375, 0.390625, 0.234375, 0.296875, 0.3671875, 0.5234375, 0.546875, 0.484375, 0.3828125, 0.359375, 0.40625, 0.3515625, 0.46875, 0.390625, 0.359375, 0.3125, 0.328125, 0.375, 0.421875, 0.34375, 0.359375, 0.3828125, 0.171875, 0.25, 0.2421875, 0.1796875, 0.2421875, 0.2421875, 0.2109375, 0.15625, 0.1328125, 0.1875, 0.1484375, 0.1015625, 0.1015625, 0.3359375, 0.15625, 0.125, 0.1328125, 0.109375, 0.1171875, 0.0546875, 0.015625, -0.015625, 0.2578125, 0.1015625, -0.0078125, -0.046875, -0.015625, -0.0546875, 0.015625, 0.171875, 0.0703125, 0.09375, 0.0, -0.015625, -0.0234375, 0.109375, 0.046875, 0.03125, 0.0234375, -0.046875, -0.03125, 0.0859375, 0.1796875, 0.0, -0.0625, 0.1171875, 0.203125, 0.03125, 0.078125, 0.1875, 0.234375, 0.1328125, 0.140625, 0.0546875, -0.0625, 0.03125, 0.0859375, 0.1171875, -0.03125, 0.125, 0.0859375, 0.140625, 0.1171875, -0.0234375, -0.0234375, -0.1328125, -0.046875, -0.0234375, 0.140625, 0.1171875, 0.1640625, 0.0390625, -0.03125, 0.046875, 0.0859375, 0.109375, 0.0, 0.0546875, 0.125, -0.0078125, 0.078125, 0.09375, 0.03125, 0.078125, 0.125, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.109375, 0.015625, 0.171875, -0.0078125, 0.078125, 0.15625, 0.0625, 0.0625, 0.109375, 0.2734375, 0.2265625, 0.1640625, 0.1796875, 0.203125, 0.1640625, 0.1796875, 0.21875, 0.328125, 0.21875, 0.15625, 0.2578125, 0.34375, 0.2578125, 0.1328125, 0.375, 0.3359375, 0.2421875, 0.21875, 0.359375, 0.3359375, 0.359375, 0.28125, 0.375, 0.34375, 0.296875, 0.2890625, 0.2265625, 0.4453125, 0.359375, 0.3203125, 0.2734375, 0.296875, 0.3203125, 0.296875, 0.4765625, 0.3046875, 0.40625, 0.25, 0.328125, 0.15625, 0.2109375, 0.15625, 0.25, 0.3203125, 0.0625, 0.203125, 0.2421875, 0.203125, 0.09375, 0.140625, 0.2734375, 0.1953125, 0.0859375, 0.1640625, 0.2578125, 0.1484375, 0.125, 0.1171875, 0.140625, 0.1796875, 0.1640625, 0.1015625, 0.03125, 0.015625, 0.0703125, 0.1328125, -0.0234375, -0.0078125, 0.078125, 0.0546875, -0.046875, 0.0078125, 0.0859375, 0.140625, -0.078125, -0.1015625, -0.015625, -0.078125, 0.0078125, -0.125, 0.015625, -0.0234375, -0.03125, -0.0859375, 0.03125, -0.0078125, -0.109375, -0.0625, -0.140625, -0.125, -0.109375, -0.203125, -0.046875, -0.046875, -0.125, -0.1171875, -0.046875, -0.09375, -0.0859375, -0.0859375, -0.1015625, 0.0078125, -0.1328125, -0.1640625, -0.1484375, -0.046875, -0.1328125, -0.1484375, -0.1953125, -0.2578125, -0.0859375, -0.0625, -0.1328125, -0.2734375, -0.140625, -0.296875, -0.2578125, -0.2421875, -0.296875, -0.2578125, -0.34375, -0.2890625, -0.28125, -0.34375, -0.3046875, -0.2265625, -0.375, -0.3671875, -0.40625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, 0.0, 0.0, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0078125, -0.015625, 0.0234375, -0.0234375, 0.03125, -0.0234375, 0.015625, -0.015625, 0.0078125, 0.0078125, -0.0078125, -0.015625, 0.03125, 0.0, 0.0, -0.046875, 0.0078125, 0.0, -0.0078125, 0.0078125, 0.046875, 0.046875, 0.09375, 0.0390625, 0.09375, 0.0390625, 0.0078125, -0.0078125, 0.03125, 0.03125, -0.0546875, 0.0078125, -0.0546875, -0.0078125, -0.015625, 0.0078125, 0.015625, 0.0078125, 0.046875, -0.0078125, 0.046875, -0.03125, 0.0703125, -0.046875, 0.015625, -0.0078125, 0.0234375, 0.015625, -0.0546875, 0.0234375, -0.0078125, 0.03125, -0.015625, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.0, -0.0078125, 0.0078125, 0.0234375, 0.015625, 0.046875, 0.015625, 0.09375, 0.1328125, 0.4375, 0.328125, 0.0546875, 0.0625, 0.2265625, 0.1875, -0.1015625, -0.0625, -0.21875, -0.1796875, -0.0546875, -0.0703125, -0.3046875, -0.234375, -0.09375, 0.140625, 0.1015625, -0.2421875, -0.078125, 0.046875, 0.2578125, 0.21875, 0.0, -0.046875, -0.0390625, -0.2265625, -0.125, 0.0859375, -0.0234375, -0.1171875, -0.234375, -0.0625, -0.1796875, -0.09375, -0.1796875, -0.2578125, -0.0703125, -0.21875, -0.2890625, -0.375, -0.4140625, -0.484375, -0.2265625, -0.140625, -0.3671875, -0.3515625, -0.3203125, -0.359375, -0.203125, -0.109375, -0.3984375, -0.1484375, -0.0546875, -0.1640625, -0.1171875, -0.0859375, -0.1640625, -0.140625, -0.0703125, 0.0625, -0.140625, -0.1484375, -0.0625, 0.09375, -0.03125, -0.2265625, 0.03125, 0.0, -0.078125, -0.2109375, -0.234375, -0.0546875, -0.0390625, -0.1796875, -0.171875, -0.1796875, -0.15625, -0.265625, -0.203125, -0.1328125, -0.140625, -0.3515625, -0.125, -0.140625, -0.3359375, -0.25, -0.1171875, -0.078125, -0.0625, -0.125, -0.234375, -0.03125, 0.0703125, 0.046875, 0.0078125, -0.0859375, -0.046875, 0.171875, 0.0703125, 0.0546875, 0.0625, 0.21875, 0.3046875, 0.2109375, 0.2890625, 0.2578125, 0.234375, 0.2265625, 0.3515625, 0.40625, 0.265625, 0.21875, 0.3125, 0.1875, 0.1875, 0.1171875, 0.21875, 0.21875, 0.1328125, 0.2109375, 0.25, 0.25, 0.25, 0.234375, 0.2421875, 0.0703125, 0.1953125, 0.3359375, 0.1875, 0.1640625, 0.140625, 0.2109375, 0.1953125, 0.1171875, 0.0625, 0.0546875, 0.0625, 0.3046875, 0.0546875, 0.0234375, 0.25, 0.21875, 0.1484375, 0.1640625, 0.2421875, 0.140625, 0.140625, 0.25, 0.3671875, 0.2890625, 0.1484375, 0.3203125, 0.3515625, 0.2578125, 0.25, 0.1484375, 0.34375, 0.3515625, 0.4921875, 0.3828125, 0.3046875, 0.3515625, 0.296875, 0.3046875, 0.34375, 0.3359375, 0.1796875, 0.328125, 0.1953125, 0.328125, 0.375, 0.2109375, 0.3671875, 0.328125, 0.2109375, 0.21875, 0.234375, 0.140625, 0.203125, 0.265625, 0.25, 0.1875, 0.125, 0.15625, 0.1171875, 0.1640625, 0.15625, 0.34375, 0.125, 0.078125, 0.15625, 0.1328125, 0.0546875, 0.046875, -0.0859375, -0.0390625, 0.1875, 0.2109375, -0.015625, -0.0390625, -0.0390625, -0.0625, 0.1171875, 0.1796875, 0.1640625, 0.0546875, 0.0546875, 0.0, 0.0625, 0.1171875, 0.1640625, 0.078125, 0.140625, 0.078125, 0.1015625, 0.2265625, 0.296875, 0.1171875, 0.0546875, 0.171875, 0.1953125, 0.046875, 0.078125, 0.25, 0.2578125, 0.25, 0.1796875, 0.09375, 0.03125, 0.1484375, 0.2109375, 0.1796875, 0.0625, 0.15625, 0.1796875, 0.2265625, 0.15625, 0.125, 0.0, 0.0078125, 0.0078125, 0.125, 0.1796875, 0.1796875, 0.1953125, 0.1171875, 0.109375, 0.078125, 0.1484375, 0.1484375, 0.0546875, 0.09375, 0.2109375, 0.09375, 0.1328125, 0.171875, 0.0390625, 0.1484375, 0.15625, 0.09375, -0.0234375, 0.0546875, 0.15625, 0.109375, 0.0625, 0.125, 0.0703125, 0.109375, 0.1796875, 0.0703125, 0.1328125, 0.1796875, 0.265625, 0.1796875, 0.0859375, 0.125, 0.1171875, 0.109375, 0.1015625, 0.1796875, 0.2578125, 0.171875, 0.0625, 0.2578125, 0.3125, 0.2734375, 0.109375, 0.2890625, 0.3046875, 0.2421875, 0.171875, 0.3359375, 0.3125, 0.2578125, 0.2734375, 0.3359375, 0.3203125, 0.25, 0.15625, 0.234375, 0.3203125, 0.3515625, 0.2109375, 0.2109375, 0.1796875, 0.203125, 0.1953125, 0.3125, 0.2578125, 0.28125, 0.2421875, 0.203125, 0.1328125, 0.1640625, 0.1328125, 0.1484375, 0.2265625, -0.0078125, 0.125, 0.25, 0.1796875, 0.1328125, 0.140625, 0.2265625, 0.2421875, 0.078125, 0.1484375, 0.2578125, 0.1015625, 0.0859375, 0.0859375, 0.09375, 0.171875, 0.125, 0.0546875, 0.0, -0.0859375, 0.078125, 0.0390625, -0.0078125, -0.046875, 0.046875, 0.03125, 0.0, 0.0078125, 0.0390625, 0.1171875, -0.0390625, 0.0, 0.046875, 0.03125, 0.0546875, 0.0078125, 0.03125, 0.03125, -0.0078125, -0.0390625, 0.15625, 0.03125, -0.0234375, -0.03125, 0.015625, -0.0078125, -0.015625, -0.0625, 0.03125, 0.03125, -0.0703125, -0.0859375, 0.0234375, -0.03125, -0.0390625, -0.109375, -0.0625, 0.0078125, -0.0234375, -0.1171875, -0.0234375, -0.046875, -0.0703125, -0.1171875, -0.1875, -0.1875, -0.0859375, -0.1015625, -0.234375, -0.2109375, -0.1796875, -0.2265625, -0.34375, -0.2109375, -0.25, -0.25, -0.3359375, -0.2265625, -0.28125, -0.296875, -0.234375, -0.1875, -0.25, -0.2890625, -0.3046875\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_44100::bitDepth = 8}}
\par
{\bkmkstart AAAAAAABOL}
{\bkmkend AAAAAAABOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_44100::numChannels = 2}}
\par
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_44100::numSamplesPerChannel = 352800}}
\par
{\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_8bit_44100::sampleRate = 44100}}
\par
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_8bit_44100}
{\xe \v wav_stereo_8bit_44100\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_8bit_44100::testBuffer = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0, 0.0234375, -0.09375, 0.09375, 0.0078125, 0.0703125, 0.0546875, 0.0390625, 0.0859375, 0.015625, 0.078125, 0.015625, 0.078125, 0.0390625, -0.015625, 0.046875, 0.0234375, 0.0859375, 0.046875, 0.1328125, 0.0546875, 0.140625, 0.078125, 0.1015625, 0.109375, 0.078125, 0.1171875, 0.0703125, 0.1171875, 0.0546875, 0.125, 0.0546875, 0.09375, 0.1328125, 0.046875, 0.09375, 0.125, 0.0546875, 0.1328125, 0.0859375, 0.1015625, 0.1015625, 0.0546875, 0.1328125, 0.0625, 0.15625, 0.1015625, 0.1328125, 0.1328125, 0.046875, 0.1484375, 0.015625, 0.09375, -0.046875, 0.0625, -0.0078125, 0.03125, 0.0234375, -0.0078125, 0.0234375, -0.015625, 0.0546875, -0.03125, 0.0703125, 0.015625, 0.1015625, 0.046875, -0.0234375, 0.109375, 0.0234375, 0.2421875, 0.3984375, 0.40625, 0.0859375, 0.1015625, 0.21875, 0.2109375, -0.0859375, -0.1171875, -0.1484375, -0.203125, 0.0078125, -0.1875, -0.3046875, -0.2734375, -0.125, 0.1171875, -0.0234375, -0.234375, -0.21875, 0.046875, 0.1484375, 0.171875, -0.1171875, -0.1484375, -0.21875, -0.25, -0.2265625, -0.0078125, -0.046875, -0.1875, -0.1875, -0.1796875, -0.1640625, -0.203125, -0.2421875, -0.2734375, -0.203125, -0.2265625, -0.375, -0.3828125, -0.484375, -0.5, -0.2578125, -0.15625, -0.390625, -0.34375, -0.3046875, -0.3515625, -0.1640625, -0.21875, -0.3359375, -0.28125, -0.03125, -0.25, -0.125, -0.0625, -0.1484375, -0.1484375, -0.0390625, 0.078125, -0.1171875, -0.2265625, -0.125, 0.046875, -0.0859375, -0.296875, -0.109375, -0.0859375, -0.1328125, -0.265625, -0.1953125, -0.0859375, -0.015625, -0.1875, -0.1875, -0.09375, -0.1640625, -0.2265625, -0.21875, -0.0703125, -0.140625, -0.3046875, -0.140625, -0.0703125, -0.2734375, -0.171875, -0.0546875, -0.0390625, -0.03125, -0.1796875, -0.140625, -0.125, 0.03125, 0.0, -0.0859375, -0.0859375, 0.0, 0.09375, 0.140625, 0.0, 0.0234375, 0.1328125, 0.15625, 0.171875, 0.1796875, 0.1953125, 0.125, 0.15625, 0.2890625, 0.359375, 0.21875, 0.2734375, 0.2578125, 0.265625, 0.203125, 0.2109375, 0.2890625, 0.2578125, 0.1484375, 0.1875, 0.2265625, 0.1953125, 0.28125, 0.2265625, 0.2578125, 0.1015625, 0.2109375, 0.3359375, 0.2265625, 0.109375, 0.078125, 0.1640625, 0.2109375, 0.09375, 0.0625, -0.015625, 0.0625, 0.25, 0.078125, 0.03125, 0.2734375, 0.1953125, 0.171875, 0.1484375, 0.3046875, 0.25, 0.125, 0.2421875, 0.390625, 0.265625, 0.171875, 0.34375, 0.359375, 0.390625, 0.234375, 0.296875, 0.3671875, 0.5234375, 0.546875, 0.484375, 0.3828125, 0.359375, 0.40625, 0.3515625, 0.46875, 0.390625, 0.359375, 0.3125, 0.328125, 0.375, 0.421875, 0.34375, 0.359375, 0.3828125, 0.171875, 0.25, 0.2421875, 0.1796875, 0.2421875, 0.2421875, 0.2109375, 0.15625, 0.1328125, 0.1875, 0.1484375, 0.1015625, 0.1015625, 0.3359375, 0.15625, 0.125, 0.1328125, 0.109375, 0.1171875, 0.0546875, 0.015625, -0.015625, 0.2578125, 0.1015625, -0.0078125, -0.046875, -0.015625, -0.0546875, 0.015625, 0.171875, 0.0703125, 0.09375, 0.0, -0.015625, -0.0234375, 0.109375, 0.046875, 0.03125, 0.0234375, -0.046875, -0.03125, 0.0859375, 0.1796875, 0.0, -0.0625, 0.1171875, 0.203125, 0.03125, 0.078125, 0.1875, 0.234375, 0.1328125, 0.140625, 0.0546875, -0.0625, 0.03125, 0.0859375, 0.1171875, -0.03125, 0.125, 0.0859375, 0.140625, 0.1171875, -0.0234375, -0.0234375, -0.1328125, -0.046875, -0.0234375, 0.140625, 0.1171875, 0.1640625, 0.0390625, -0.03125, 0.046875, 0.0859375, 0.109375, 0.0, 0.0546875, 0.125, -0.0078125, 0.078125, 0.09375, 0.03125, 0.078125, 0.125, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.109375, 0.015625, 0.171875, -0.0078125, 0.078125, 0.15625, 0.0625, 0.0625, 0.109375, 0.2734375, 0.2265625, 0.1640625, 0.1796875, 0.203125, 0.1640625, 0.1796875, 0.21875, 0.328125, 0.21875, 0.15625, 0.2578125, 0.34375, 0.2578125, 0.1328125, 0.375, 0.3359375, 0.2421875, 0.21875, 0.359375, 0.3359375, 0.359375, 0.28125, 0.375, 0.34375, 0.296875, 0.2890625, 0.2265625, 0.4453125, 0.359375, 0.3203125, 0.2734375, 0.296875, 0.3203125, 0.296875, 0.4765625, 0.3046875, 0.40625, 0.25, 0.328125, 0.15625, 0.2109375, 0.15625, 0.25, 0.3203125, 0.0625, 0.203125, 0.2421875, 0.203125, 0.09375, 0.140625, 0.2734375, 0.1953125, 0.0859375, 0.1640625, 0.2578125, 0.1484375, 0.125, 0.1171875, 0.140625, 0.1796875, 0.1640625, 0.1015625, 0.03125, 0.015625, 0.0703125, 0.1328125, -0.0234375, -0.0078125, 0.078125, 0.0546875, -0.046875, 0.0078125, 0.0859375, 0.140625, -0.078125, -0.1015625, -0.015625, -0.078125, 0.0078125, -0.125, 0.015625, -0.0234375, -0.03125, -0.0859375, 0.03125, -0.0078125, -0.109375, -0.0625, -0.140625, -0.125, -0.109375, -0.203125, -0.046875, -0.046875, -0.125, -0.1171875, -0.046875, -0.09375, -0.0859375, -0.0859375, -0.1015625, 0.0078125, -0.1328125, -0.1640625, -0.1484375, -0.046875, -0.1328125, -0.1484375, -0.1953125, -0.2578125, -0.0859375, -0.0625, -0.1328125, -0.2734375, -0.140625, -0.296875, -0.2578125, -0.2421875, -0.296875, -0.2578125, -0.34375, -0.2890625, -0.28125, -0.34375, -0.3046875, -0.2265625, -0.375, -0.3671875, -0.40625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, 0.0, 0.0, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0078125, -0.015625, 0.0234375, -0.0234375, 0.03125, -0.0234375, 0.015625, -0.015625, 0.0078125, 0.0078125, -0.0078125, -0.015625, 0.03125, 0.0, 0.0, -0.046875, 0.0078125, 0.0, -0.0078125, 0.0078125, 0.046875, 0.046875, 0.09375, 0.0390625, 0.09375, 0.0390625, 0.0078125, -0.0078125, 0.03125, 0.03125, -0.0546875, 0.0078125, -0.0546875, -0.0078125, -0.015625, 0.0078125, 0.015625, 0.0078125, 0.046875, -0.0078125, 0.046875, -0.03125, 0.0703125, -0.046875, 0.015625, -0.0078125, 0.0234375, 0.015625, -0.0546875, 0.0234375, -0.0078125, 0.03125, -0.015625, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.0, -0.0078125, 0.0078125, 0.0234375, 0.015625, 0.046875, 0.015625, 0.09375, 0.1328125, 0.4375, 0.328125, 0.0546875, 0.0625, 0.2265625, 0.1875, -0.1015625, -0.0625, -0.21875, -0.1796875, -0.0546875, -0.0703125, -0.3046875, -0.234375, -0.09375, 0.140625, 0.1015625, -0.2421875, -0.078125, 0.046875, 0.2578125, 0.21875, 0.0, -0.046875, -0.0390625, -0.2265625, -0.125, 0.0859375, -0.0234375, -0.1171875, -0.234375, -0.0625, -0.1796875, -0.09375, -0.1796875, -0.2578125, -0.0703125, -0.21875, -0.2890625, -0.375, -0.4140625, -0.484375, -0.2265625, -0.140625, -0.3671875, -0.3515625, -0.3203125, -0.359375, -0.203125, -0.109375, -0.3984375, -0.1484375, -0.0546875, -0.1640625, -0.1171875, -0.0859375, -0.1640625, -0.140625, -0.0703125, 0.0625, -0.140625, -0.1484375, -0.0625, 0.09375, -0.03125, -0.2265625, 0.03125, 0.0, -0.078125, -0.2109375, -0.234375, -0.0546875, -0.0390625, -0.1796875, -0.171875, -0.1796875, -0.15625, -0.265625, -0.203125, -0.1328125, -0.140625, -0.3515625, -0.125, -0.140625, -0.3359375, -0.25, -0.1171875, -0.078125, -0.0625, -0.125, -0.234375, -0.03125, 0.0703125, 0.046875, 0.0078125, -0.0859375, -0.046875, 0.171875, 0.0703125, 0.0546875, 0.0625, 0.21875, 0.3046875, 0.2109375, 0.2890625, 0.2578125, 0.234375, 0.2265625, 0.3515625, 0.40625, 0.265625, 0.21875, 0.3125, 0.1875, 0.1875, 0.1171875, 0.21875, 0.21875, 0.1328125, 0.2109375, 0.25, 0.25, 0.25, 0.234375, 0.2421875, 0.0703125, 0.1953125, 0.3359375, 0.1875, 0.1640625, 0.140625, 0.2109375, 0.1953125, 0.1171875, 0.0625, 0.0546875, 0.0625, 0.3046875, 0.0546875, 0.0234375, 0.25, 0.21875, 0.1484375, 0.1640625, 0.2421875, 0.140625, 0.140625, 0.25, 0.3671875, 0.2890625, 0.1484375, 0.3203125, 0.3515625, 0.2578125, 0.25, 0.1484375, 0.34375, 0.3515625, 0.4921875, 0.3828125, 0.3046875, 0.3515625, 0.296875, 0.3046875, 0.34375, 0.3359375, 0.1796875, 0.328125, 0.1953125, 0.328125, 0.375, 0.2109375, 0.3671875, 0.328125, 0.2109375, 0.21875, 0.234375, 0.140625, 0.203125, 0.265625, 0.25, 0.1875, 0.125, 0.15625, 0.1171875, 0.1640625, 0.15625, 0.34375, 0.125, 0.078125, 0.15625, 0.1328125, 0.0546875, 0.046875, -0.0859375, -0.0390625, 0.1875, 0.2109375, -0.015625, -0.0390625, -0.0390625, -0.0625, 0.1171875, 0.1796875, 0.1640625, 0.0546875, 0.0546875, 0.0, 0.0625, 0.1171875, 0.1640625, 0.078125, 0.140625, 0.078125, 0.1015625, 0.2265625, 0.296875, 0.1171875, 0.0546875, 0.171875, 0.1953125, 0.046875, 0.078125, 0.25, 0.2578125, 0.25, 0.1796875, 0.09375, 0.03125, 0.1484375, 0.2109375, 0.1796875, 0.0625, 0.15625, 0.1796875, 0.2265625, 0.15625, 0.125, 0.0, 0.0078125, 0.0078125, 0.125, 0.1796875, 0.1796875, 0.1953125, 0.1171875, 0.109375, 0.078125, 0.1484375, 0.1484375, 0.0546875, 0.09375, 0.2109375, 0.09375, 0.1328125, 0.171875, 0.0390625, 0.1484375, 0.15625, 0.09375, -0.0234375, 0.0546875, 0.15625, 0.109375, 0.0625, 0.125, 0.0703125, 0.109375, 0.1796875, 0.0703125, 0.1328125, 0.1796875, 0.265625, 0.1796875, 0.0859375, 0.125, 0.1171875, 0.109375, 0.1015625, 0.1796875, 0.2578125, 0.171875, 0.0625, 0.2578125, 0.3125, 0.2734375, 0.109375, 0.2890625, 0.3046875, 0.2421875, 0.171875, 0.3359375, 0.3125, 0.2578125, 0.2734375, 0.3359375, 0.3203125, 0.25, 0.15625, 0.234375, 0.3203125, 0.3515625, 0.2109375, 0.2109375, 0.1796875, 0.203125, 0.1953125, 0.3125, 0.2578125, 0.28125, 0.2421875, 0.203125, 0.1328125, 0.1640625, 0.1328125, 0.1484375, 0.2265625, -0.0078125, 0.125, 0.25, 0.1796875, 0.1328125, 0.140625, 0.2265625, 0.2421875, 0.078125, 0.1484375, 0.2578125, 0.1015625, 0.0859375, 0.0859375, 0.09375, 0.171875, 0.125, 0.0546875, 0.0, -0.0859375, 0.078125, 0.0390625, -0.0078125, -0.046875, 0.046875, 0.03125, 0.0, 0.0078125, 0.0390625, 0.1171875, -0.0390625, 0.0, 0.046875, 0.03125, 0.0546875, 0.0078125, 0.03125, 0.03125, -0.0078125, -0.0390625, 0.15625, 0.03125, -0.0234375, -0.03125, 0.015625, -0.0078125, -0.015625, -0.0625, 0.03125, 0.03125, -0.0703125, -0.0859375, 0.0234375, -0.03125, -0.0390625, -0.109375, -0.0625, 0.0078125, -0.0234375, -0.1171875, -0.0234375, -0.046875, -0.0703125, -0.1171875, -0.1875, -0.1875, -0.0859375, -0.1015625, -0.234375, -0.2109375, -0.1796875, -0.2265625, -0.34375, -0.2109375, -0.25, -0.25, -0.3359375, -0.2265625, -0.28125, -0.296875, -0.234375, -0.1875, -0.25, -0.2890625, -0.3046875\}\}}}
\par
{\bkmkstart AAAAAAABOP}
{\bkmkend AAAAAAABOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_8bit_48000 Namespace Reference\par \pard\plain 
{\tc\tcl2 \v wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000}
{\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b testBuffer} = \{\{0.0078125, -0.0078125, -0.0078125, -0.0078125, 0.03125, 0.03125, -0.0859375, -0.0703125, 0.140625, 0.0625, 0.0234375, -0.140625, -0.1171875, 0.109375, 0.15625, 0.046875, -0.171875, -0.1875, 0.0234375, -0.0546875, 0.171875, 0.0859375, 0.078125, 0.1171875, -0.015625, 0.0078125, -0.1015625, -0.171875, -0.09375, -0.0703125, 0.0546875, 0.0234375, 0.0703125, 0.1015625, 0.0, 0.03125, -0.0625, -0.046875, 0.0546875, -0.015625, 0.0078125, -0.0703125, -0.015625, -0.0859375, -0.046875, -0.09375, -0.015625, -0.03125, -0.03125, 0.015625, 0.03125, 0.109375, -0.0234375, 0.1171875, 0.0546875, 0.0, 0.140625, 0.1328125, 0.2265625, 0.3046875, 0.1015625, 0.171875, 0.21875, 0.03125, 0.1953125, 0.203125, 0.0234375, 0.0078125, 0.078125, 0.0859375, -0.0625, -0.0390625, 0.0078125, 0.046875, -0.1171875, -0.140625, 0.0546875, 0.0859375, -0.0078125, 0.1015625, 0.078125, 0.15625, 0.109375, 0.109375, 0.2421875, 0.1171875, 0.0546875, 0.1796875, 0.2734375, 0.3125, 0.1953125, 0.2265625, 0.2734375, 0.15625, 0.109375, 0.140625, 0.1484375, 0.2265625, 0.1328125, 0.140625, 0.09375, 0.0625, 0.046875, 0.078125, 0.03125, 0.078125, 0.0625, 0.0078125, -0.0625, -0.15625, -0.1796875, -0.15625, -0.234375, -0.0625, -0.09375, -0.1875, 0.0, -0.0078125, -0.015625, -0.015625, -0.125, 0.03125, -0.0859375, 0.015625, 0.0546875, 0.0703125, 0.0546875, -0.078125, -0.046875, 0.2109375, 0.1484375, 0.0, 0.1015625, 0.15625, 0.1171875, 0.25, 0.1875, 0.1171875, 0.078125, 0.046875, 0.203125, 0.21875, 0.234375, 0.109375, 0.0, -0.0546875, -0.0234375, 0.1484375, 0.1171875, 0.03125, 0.03125, -0.171875, -0.09375, -0.0703125, -0.0546875, -0.2265625, -0.2109375, 0.125, 0.046875, -0.1796875, -0.125, -0.0234375, -0.0078125, -0.15625, -0.1328125, -0.0703125, 0.015625, -0.15625, -0.1875, -0.140625, -0.171875, -0.03125, 0.1484375, 0.1328125, 0.0234375, -0.109375, 0.0859375, -0.0234375, -0.2109375, 0.0390625, 0.015625, 0.0625, 0.0234375, 0.0546875, 0.265625, 0.0703125, 0.0703125, 0.09375, 0.21875, 0.15625, -0.0625, 0.0, 0.15625, 0.125, 0.125, 0.109375, 0.0078125, 0.0, 0.265625, 0.1171875, -0.046875, 0.1015625, 0.1796875, 0.140625, -0.0078125, -0.0234375, 0.0, -0.015625, -0.09375, 0.078125, -0.0234375, -0.1875, -0.1484375, 0.0234375, 0.09375, 0.0703125, 0.0234375, 0.015625, -0.03125, -0.0078125, 0.125, 0.0546875, 0.0, -0.1640625, 0.078125, 0.125, -0.046875, -0.03125, -0.015625, -0.0625, 0.0625, 0.125, -0.1171875, -0.1640625, -0.078125, -0.1328125, 0.0390625, 0.09375, -0.0390625, -0.1484375, -0.1484375, -0.0546875, 0.140625, 0.0703125, 0.0703125, -0.0703125, 0.0390625, 0.1484375, -0.0078125, 0.1328125, 0.046875, 0.015625, -0.1015625, 0.078125, 0.2265625, 0.0703125, 0.0546875, 0.1796875, 0.1953125, 0.171875, 0.0, 0.015625, 0.1640625, 0.015625, 0.109375, 0.0859375, 0.03125, 0.03125, 0.046875, 0.0703125, 0.0859375, -0.03125, 0.0546875, 0.1171875, 0.078125, 0.1328125, -0.03125, 0.078125, 0.0, 0.0234375, 0.1171875, -0.140625, -0.0390625, 0.1328125, -0.09375, -0.0234375, -0.125, 0.046875, 0.1015625, -0.1015625, -0.0234375, -0.0390625, -0.015625, -0.078125, -0.1171875, -0.2734375, -0.09375, -0.0078125, -0.0703125, -0.09375, -0.0625, -0.03125, -0.1484375, -0.0078125, -0.078125, -0.109375, -0.0234375, -0.015625, -0.1484375, -0.0390625, -0.046875, -0.203125, -0.0859375, -0.015625, -0.046875, -0.203125, -0.09375, -0.0234375, -0.2734375, -0.0625, 0.140625, -0.0859375, -0.0078125, -0.0234375, 0.0390625, 0.109375, -0.0234375, -0.03125, 0.0546875, 0.25, 0.0859375, 0.0390625, 0.2421875, 0.2109375, -0.0078125, 0.0390625, 0.109375, -0.0390625, 0.15625, 0.1484375, 0.0, 0.046875, -0.015625, 0.125, 0.140625, -0.15625, 0.0625, 0.046875, 0.0, -0.015625, -0.0078125, -0.0625, 0.0, 0.078125, 0.046875, 0.0, -0.1015625, 0.03125, 0.125, 0.0703125, 0.0078125, 0.1484375, 0.0625, 0.0234375, 0.0546875, 0.03125, 0.0234375, 0.171875, 0.09375, -0.03125, 0.1015625, -0.0546875, -0.078125, -0.0859375, 0.03125, 0.046875, 0.0390625, 0.0546875, 0.0, 0.03125, -0.109375, -0.0546875, -0.0390625, -0.0859375, -0.203125, -0.125, -0.0234375, -0.0234375, -0.0703125, 0.015625, -0.109375, -0.203125, -0.0859375, 0.015625, -0.0390625, -0.0859375, -0.109375, -0.0703125, 0.0, -0.015625, -0.1015625, -0.015625, -0.171875, -0.171875, -0.046875, -0.03125, -0.15625, -0.03125, -0.09375, -0.1875, -0.1796875, -0.09375, -0.125, -0.1328125, -0.21875, -0.046875, -0.1328125, -0.15625, 0.0078125, -0.0859375, -0.1640625, -0.046875, 0.0703125, 0.1640625, 0.046875, -0.0625, 0.015625, -0.046875, 0.0859375, 0.09375, 0.0390625, 0.0, 0.0546875, 0.078125, -0.0234375, 0.09375, 0.09375, 0.03125, 0.1328125, 0.078125, 0.046875, 0.0625, 0.0703125, 0.078125, 0.140625, 0.2578125, 0.28125, 0.1328125, 0.09375, 0.1015625, 0.1171875, 0.1796875, 0.046875, 0.0703125, 0.171875, 0.1953125, -0.03125, 0.0703125, 0.0234375, 0.1015625, 0.0703125, 0.1171875, 0.2734375, 0.2421875, 0.15625, 0.15625, 0.09375, 0.1796875, 0.15625, -0.03125, 0.21875, 0.1015625, 0.046875, 0.0859375, 0.078125, 0.0234375, 0.0234375, 0.1328125, 0.0078125, -0.078125, -0.015625, 0.09375, 0.0078125, 0.0546875, 0.109375, 0.109375, -0.0234375, 0.1015625, 0.0703125, -0.0390625, 0.0390625, -0.0546875, -0.0234375, 0.0625, 0.1171875, 0.0703125, 0.0390625, 0.0390625, 0.046875, 0.1328125\}, \{0.0078125, -0.0078125, -0.0078125, -0.015625, 0.0546875, 0.015625, -0.09375, -0.0703125, 0.171875, 0.046875, 0.0078125, -0.1484375, -0.109375, 0.1015625, 0.1640625, 0.046875, -0.1875, -0.1796875, 0.015625, 0.0, 0.1484375, 0.109375, 0.0234375, 0.125, -0.015625, 0.046875, -0.109375, -0.15625, -0.09375, -0.0625, 0.0234375, 0.0, 0.109375, 0.0546875, 0.0078125, 0.0546875, -0.0390625, -0.0703125, 0.0546875, -0.0234375, 0.0234375, -0.0390625, -0.015625, -0.0390625, -0.046875, 0.0, 0.0234375, 0.046875, 0.046875, 0.0390625, 0.15625, 0.1171875, 0.0859375, 0.1015625, 0.1484375, 0.0546875, 0.1953125, 0.1875, 0.234375, 0.296875, 0.140625, 0.203125, 0.171875, 0.078125, 0.109375, 0.2421875, 0.0390625, -0.015625, 0.0703125, 0.0, -0.0234375, -0.125, 0.0234375, -0.0234375, -0.109375, -0.21875, 0.0, 0.0234375, -0.0234375, -0.0078125, 0.03125, 0.1171875, 0.0546875, 0.1171875, 0.1640625, 0.15625, 0.0390625, 0.1796875, 0.3046875, 0.3046875, 0.1875, 0.21875, 0.3046875, 0.109375, 0.140625, 0.125, 0.1953125, 0.1640625, 0.09375, 0.0546875, 0.078125, -0.015625, -0.0546875, 0.015625, -0.0859375, 0.046875, -0.0234375, -0.0234375, -0.109375, -0.15625, -0.125, -0.140625, -0.21875, -0.046875, -0.0703125, -0.21875, 0.03125, -0.0234375, 0.03125, -0.015625, -0.0234375, 0.0546875, -0.03125, 0.03125, 0.078125, 0.1015625, 0.0546875, -0.03125, 0.0, 0.265625, 0.1953125, 0.0390625, 0.1171875, 0.140625, 0.1015625, 0.25, 0.171875, 0.09375, 0.0859375, 0.0, 0.1953125, 0.1484375, 0.2109375, 0.078125, -0.0703125, -0.046875, -0.109375, 0.1640625, 0.0390625, -0.0078125, -0.0546875, -0.2109375, -0.1640625, -0.0703125, -0.140625, -0.21875, -0.28125, 0.109375, -0.0078125, -0.21875, -0.140625, -0.0625, -0.0546875, -0.1875, -0.1796875, -0.09375, -0.03125, -0.1640625, -0.21875, -0.1796875, -0.1796875, -0.09375, 0.140625, 0.0625, 0.0078125, -0.15625, 0.0703125, -0.0625, -0.21875, -0.0078125, 0.0078125, 0.0078125, 0.0, 0.0234375, 0.25, 0.0859375, 0.0390625, 0.109375, 0.1875, 0.15625, -0.09375, 0.0390625, 0.1640625, 0.203125, 0.1484375, 0.1875, 0.0390625, 0.0859375, 0.3125, 0.1796875, 0.0078125, 0.1484375, 0.2421875, 0.1796875, 0.0703125, 0.0078125, 0.09375, 0.0, 0.0078125, 0.09375, 0.0625, -0.171875, -0.078125, 0.0234375, 0.125, 0.0625, 0.0234375, 0.015625, -0.0546875, -0.0078125, 0.0859375, 0.0546875, -0.0390625, -0.1640625, 0.0234375, 0.1015625, -0.109375, -0.0625, -0.0703125, -0.09375, 0.015625, 0.09375, -0.1796875, -0.2109375, -0.140625, -0.1640625, -0.0234375, 0.078125, -0.1171875, -0.15625, -0.2265625, -0.0703125, 0.0625, 0.0234375, 0.0078125, -0.140625, -0.0078125, 0.0546875, -0.03125, 0.03125, 0.0546875, -0.0625, -0.0703125, 0.03125, 0.2734375, 0.03125, 0.078125, 0.15625, 0.1953125, 0.1796875, -0.03125, 0.0703125, 0.125, 0.1015625, 0.09375, 0.1875, 0.0546875, 0.1015625, 0.09375, 0.1171875, 0.1484375, 0.0, 0.1484375, 0.15625, 0.1875, 0.1875, 0.0703125, 0.140625, 0.0703125, 0.0859375, 0.140625, -0.0859375, -0.015625, 0.1796875, -0.0625, 0.0234375, -0.0625, 0.125, 0.171875, -0.0078125, 0.015625, 0.0625, -0.015625, 0.015625, -0.1171875, -0.1953125, -0.078125, 0.0234375, -0.0390625, -0.1015625, -0.0078125, -0.046875, -0.0859375, -0.0390625, -0.0234375, -0.1328125, 0.0390625, -0.0078125, -0.0859375, -0.0234375, 0.0078125, -0.1796875, -0.0390625, 0.015625, -0.0078125, -0.15625, -0.0625, 0.0078125, -0.265625, -0.046875, 0.1171875, -0.09375, -0.0390625, -0.0390625, 0.0078125, 0.0859375, -0.0625, -0.0625, 0.0078125, 0.2109375, 0.0390625, 0.0234375, 0.2109375, 0.2109375, -0.0546875, 0.0390625, 0.0546875, -0.0390625, 0.109375, 0.1328125, -0.046875, 0.0, -0.0625, 0.0859375, 0.1015625, -0.1875, 0.0078125, 0.015625, -0.078125, -0.0625, -0.078125, -0.109375, -0.0546875, 0.03125, -0.015625, -0.0625, -0.171875, -0.0390625, 0.0703125, 0.0078125, -0.03125, 0.0703125, 0.0234375, -0.0390625, 0.046875, 0.0, 0.03125, 0.1796875, 0.109375, 0.0078125, 0.109375, -0.0078125, -0.0859375, -0.0625, 0.015625, 0.046875, 0.0234375, 0.046875, 0.015625, 0.03125, -0.0859375, -0.046875, -0.03125, -0.0546875, -0.2109375, -0.0859375, -0.0390625, 0.0078125, -0.078125, 0.0390625, -0.1015625, -0.1875, -0.0703125, 0.0234375, -0.0390625, -0.0859375, -0.109375, -0.0625, 0.0, -0.0078125, -0.1015625, -0.015625, -0.1796875, -0.171875, -0.0625, -0.046875, -0.171875, -0.0546875, -0.1171875, -0.2109375, -0.1875, -0.1328125, -0.09375, -0.1640625, -0.1640625, -0.0625, -0.0703125, -0.140625, 0.0703125, -0.0625, -0.125, -0.03125, 0.078125, 0.171875, 0.0078125, -0.046875, -0.03125, -0.0390625, 0.0390625, 0.09375, 0.0, -0.0078125, 0.046875, 0.09375, -0.0078125, 0.1328125, 0.125, 0.0703125, 0.15625, 0.1015625, 0.0546875, 0.09375, 0.0703125, 0.0859375, 0.140625, 0.265625, 0.2890625, 0.15625, 0.1328125, 0.1328125, 0.1640625, 0.203125, 0.09375, 0.109375, 0.2265625, 0.2421875, 0.0234375, 0.1171875, 0.0859375, 0.140625, 0.1171875, 0.140625, 0.28125, 0.25, 0.1484375, 0.171875, 0.0703125, 0.2109375, 0.109375, 0.0078125, 0.15625, 0.1171875, 0.0, 0.0859375, 0.0390625, 0.015625, 0.0, 0.1171875, 0.0078125, -0.09375, 0.015625, 0.078125, 0.046875, 0.03125, 0.1484375, 0.0703125, 0.0078125, 0.0703125, 0.078125, -0.0625, 0.03125, -0.078125, -0.0234375, 0.0546875, 0.1328125, 0.0859375, 0.0625, 0.0703125, 0.0703125, 0.1640625\}\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v bitDepth\:wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000\:bitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_48000::bitDepth = 8}}
\par
{\bkmkstart AAAAAAABOR}
{\bkmkend AAAAAAABOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numChannels\:wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000\:numChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_48000::numChannels = 2}}
\par
{\bkmkstart AAAAAAABOS}
{\bkmkend AAAAAAABOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSamplesPerChannel\:wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000\:numSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int wav_stereo_8bit_48000::numSamplesPerChannel = 384000}}
\par
{\bkmkstart AAAAAAABOT}
{\bkmkend AAAAAAABOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sampleRate\:wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000\:sampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t wav_stereo_8bit_48000::sampleRate = 48000}}
\par
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testBuffer\:wav_stereo_8bit_48000}
{\xe \v wav_stereo_8bit_48000\:testBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector<std::vector<double> > wav_stereo_8bit_48000::testBuffer = \{\{0.0078125, -0.0078125, -0.0078125, -0.0078125, 0.03125, 0.03125, -0.0859375, -0.0703125, 0.140625, 0.0625, 0.0234375, -0.140625, -0.1171875, 0.109375, 0.15625, 0.046875, -0.171875, -0.1875, 0.0234375, -0.0546875, 0.171875, 0.0859375, 0.078125, 0.1171875, -0.015625, 0.0078125, -0.1015625, -0.171875, -0.09375, -0.0703125, 0.0546875, 0.0234375, 0.0703125, 0.1015625, 0.0, 0.03125, -0.0625, -0.046875, 0.0546875, -0.015625, 0.0078125, -0.0703125, -0.015625, -0.0859375, -0.046875, -0.09375, -0.015625, -0.03125, -0.03125, 0.015625, 0.03125, 0.109375, -0.0234375, 0.1171875, 0.0546875, 0.0, 0.140625, 0.1328125, 0.2265625, 0.3046875, 0.1015625, 0.171875, 0.21875, 0.03125, 0.1953125, 0.203125, 0.0234375, 0.0078125, 0.078125, 0.0859375, -0.0625, -0.0390625, 0.0078125, 0.046875, -0.1171875, -0.140625, 0.0546875, 0.0859375, -0.0078125, 0.1015625, 0.078125, 0.15625, 0.109375, 0.109375, 0.2421875, 0.1171875, 0.0546875, 0.1796875, 0.2734375, 0.3125, 0.1953125, 0.2265625, 0.2734375, 0.15625, 0.109375, 0.140625, 0.1484375, 0.2265625, 0.1328125, 0.140625, 0.09375, 0.0625, 0.046875, 0.078125, 0.03125, 0.078125, 0.0625, 0.0078125, -0.0625, -0.15625, -0.1796875, -0.15625, -0.234375, -0.0625, -0.09375, -0.1875, 0.0, -0.0078125, -0.015625, -0.015625, -0.125, 0.03125, -0.0859375, 0.015625, 0.0546875, 0.0703125, 0.0546875, -0.078125, -0.046875, 0.2109375, 0.1484375, 0.0, 0.1015625, 0.15625, 0.1171875, 0.25, 0.1875, 0.1171875, 0.078125, 0.046875, 0.203125, 0.21875, 0.234375, 0.109375, 0.0, -0.0546875, -0.0234375, 0.1484375, 0.1171875, 0.03125, 0.03125, -0.171875, -0.09375, -0.0703125, -0.0546875, -0.2265625, -0.2109375, 0.125, 0.046875, -0.1796875, -0.125, -0.0234375, -0.0078125, -0.15625, -0.1328125, -0.0703125, 0.015625, -0.15625, -0.1875, -0.140625, -0.171875, -0.03125, 0.1484375, 0.1328125, 0.0234375, -0.109375, 0.0859375, -0.0234375, -0.2109375, 0.0390625, 0.015625, 0.0625, 0.0234375, 0.0546875, 0.265625, 0.0703125, 0.0703125, 0.09375, 0.21875, 0.15625, -0.0625, 0.0, 0.15625, 0.125, 0.125, 0.109375, 0.0078125, 0.0, 0.265625, 0.1171875, -0.046875, 0.1015625, 0.1796875, 0.140625, -0.0078125, -0.0234375, 0.0, -0.015625, -0.09375, 0.078125, -0.0234375, -0.1875, -0.1484375, 0.0234375, 0.09375, 0.0703125, 0.0234375, 0.015625, -0.03125, -0.0078125, 0.125, 0.0546875, 0.0, -0.1640625, 0.078125, 0.125, -0.046875, -0.03125, -0.015625, -0.0625, 0.0625, 0.125, -0.1171875, -0.1640625, -0.078125, -0.1328125, 0.0390625, 0.09375, -0.0390625, -0.1484375, -0.1484375, -0.0546875, 0.140625, 0.0703125, 0.0703125, -0.0703125, 0.0390625, 0.1484375, -0.0078125, 0.1328125, 0.046875, 0.015625, -0.1015625, 0.078125, 0.2265625, 0.0703125, 0.0546875, 0.1796875, 0.1953125, 0.171875, 0.0, 0.015625, 0.1640625, 0.015625, 0.109375, 0.0859375, 0.03125, 0.03125, 0.046875, 0.0703125, 0.0859375, -0.03125, 0.0546875, 0.1171875, 0.078125, 0.1328125, -0.03125, 0.078125, 0.0, 0.0234375, 0.1171875, -0.140625, -0.0390625, 0.1328125, -0.09375, -0.0234375, -0.125, 0.046875, 0.1015625, -0.1015625, -0.0234375, -0.0390625, -0.015625, -0.078125, -0.1171875, -0.2734375, -0.09375, -0.0078125, -0.0703125, -0.09375, -0.0625, -0.03125, -0.1484375, -0.0078125, -0.078125, -0.109375, -0.0234375, -0.015625, -0.1484375, -0.0390625, -0.046875, -0.203125, -0.0859375, -0.015625, -0.046875, -0.203125, -0.09375, -0.0234375, -0.2734375, -0.0625, 0.140625, -0.0859375, -0.0078125, -0.0234375, 0.0390625, 0.109375, -0.0234375, -0.03125, 0.0546875, 0.25, 0.0859375, 0.0390625, 0.2421875, 0.2109375, -0.0078125, 0.0390625, 0.109375, -0.0390625, 0.15625, 0.1484375, 0.0, 0.046875, -0.015625, 0.125, 0.140625, -0.15625, 0.0625, 0.046875, 0.0, -0.015625, -0.0078125, -0.0625, 0.0, 0.078125, 0.046875, 0.0, -0.1015625, 0.03125, 0.125, 0.0703125, 0.0078125, 0.1484375, 0.0625, 0.0234375, 0.0546875, 0.03125, 0.0234375, 0.171875, 0.09375, -0.03125, 0.1015625, -0.0546875, -0.078125, -0.0859375, 0.03125, 0.046875, 0.0390625, 0.0546875, 0.0, 0.03125, -0.109375, -0.0546875, -0.0390625, -0.0859375, -0.203125, -0.125, -0.0234375, -0.0234375, -0.0703125, 0.015625, -0.109375, -0.203125, -0.0859375, 0.015625, -0.0390625, -0.0859375, -0.109375, -0.0703125, 0.0, -0.015625, -0.1015625, -0.015625, -0.171875, -0.171875, -0.046875, -0.03125, -0.15625, -0.03125, -0.09375, -0.1875, -0.1796875, -0.09375, -0.125, -0.1328125, -0.21875, -0.046875, -0.1328125, -0.15625, 0.0078125, -0.0859375, -0.1640625, -0.046875, 0.0703125, 0.1640625, 0.046875, -0.0625, 0.015625, -0.046875, 0.0859375, 0.09375, 0.0390625, 0.0, 0.0546875, 0.078125, -0.0234375, 0.09375, 0.09375, 0.03125, 0.1328125, 0.078125, 0.046875, 0.0625, 0.0703125, 0.078125, 0.140625, 0.2578125, 0.28125, 0.1328125, 0.09375, 0.1015625, 0.1171875, 0.1796875, 0.046875, 0.0703125, 0.171875, 0.1953125, -0.03125, 0.0703125, 0.0234375, 0.1015625, 0.0703125, 0.1171875, 0.2734375, 0.2421875, 0.15625, 0.15625, 0.09375, 0.1796875, 0.15625, -0.03125, 0.21875, 0.1015625, 0.046875, 0.0859375, 0.078125, 0.0234375, 0.0234375, 0.1328125, 0.0078125, -0.078125, -0.015625, 0.09375, 0.0078125, 0.0546875, 0.109375, 0.109375, -0.0234375, 0.1015625, 0.0703125, -0.0390625, 0.0390625, -0.0546875, -0.0234375, 0.0625, 0.1171875, 0.0703125, 0.0390625, 0.0390625, 0.046875, 0.1328125\}, \{0.0078125, -0.0078125, -0.0078125, -0.015625, 0.0546875, 0.015625, -0.09375, -0.0703125, 0.171875, 0.046875, 0.0078125, -0.1484375, -0.109375, 0.1015625, 0.1640625, 0.046875, -0.1875, -0.1796875, 0.015625, 0.0, 0.1484375, 0.109375, 0.0234375, 0.125, -0.015625, 0.046875, -0.109375, -0.15625, -0.09375, -0.0625, 0.0234375, 0.0, 0.109375, 0.0546875, 0.0078125, 0.0546875, -0.0390625, -0.0703125, 0.0546875, -0.0234375, 0.0234375, -0.0390625, -0.015625, -0.0390625, -0.046875, 0.0, 0.0234375, 0.046875, 0.046875, 0.0390625, 0.15625, 0.1171875, 0.0859375, 0.1015625, 0.1484375, 0.0546875, 0.1953125, 0.1875, 0.234375, 0.296875, 0.140625, 0.203125, 0.171875, 0.078125, 0.109375, 0.2421875, 0.0390625, -0.015625, 0.0703125, 0.0, -0.0234375, -0.125, 0.0234375, -0.0234375, -0.109375, -0.21875, 0.0, 0.0234375, -0.0234375, -0.0078125, 0.03125, 0.1171875, 0.0546875, 0.1171875, 0.1640625, 0.15625, 0.0390625, 0.1796875, 0.3046875, 0.3046875, 0.1875, 0.21875, 0.3046875, 0.109375, 0.140625, 0.125, 0.1953125, 0.1640625, 0.09375, 0.0546875, 0.078125, -0.015625, -0.0546875, 0.015625, -0.0859375, 0.046875, -0.0234375, -0.0234375, -0.109375, -0.15625, -0.125, -0.140625, -0.21875, -0.046875, -0.0703125, -0.21875, 0.03125, -0.0234375, 0.03125, -0.015625, -0.0234375, 0.0546875, -0.03125, 0.03125, 0.078125, 0.1015625, 0.0546875, -0.03125, 0.0, 0.265625, 0.1953125, 0.0390625, 0.1171875, 0.140625, 0.1015625, 0.25, 0.171875, 0.09375, 0.0859375, 0.0, 0.1953125, 0.1484375, 0.2109375, 0.078125, -0.0703125, -0.046875, -0.109375, 0.1640625, 0.0390625, -0.0078125, -0.0546875, -0.2109375, -0.1640625, -0.0703125, -0.140625, -0.21875, -0.28125, 0.109375, -0.0078125, -0.21875, -0.140625, -0.0625, -0.0546875, -0.1875, -0.1796875, -0.09375, -0.03125, -0.1640625, -0.21875, -0.1796875, -0.1796875, -0.09375, 0.140625, 0.0625, 0.0078125, -0.15625, 0.0703125, -0.0625, -0.21875, -0.0078125, 0.0078125, 0.0078125, 0.0, 0.0234375, 0.25, 0.0859375, 0.0390625, 0.109375, 0.1875, 0.15625, -0.09375, 0.0390625, 0.1640625, 0.203125, 0.1484375, 0.1875, 0.0390625, 0.0859375, 0.3125, 0.1796875, 0.0078125, 0.1484375, 0.2421875, 0.1796875, 0.0703125, 0.0078125, 0.09375, 0.0, 0.0078125, 0.09375, 0.0625, -0.171875, -0.078125, 0.0234375, 0.125, 0.0625, 0.0234375, 0.015625, -0.0546875, -0.0078125, 0.0859375, 0.0546875, -0.0390625, -0.1640625, 0.0234375, 0.1015625, -0.109375, -0.0625, -0.0703125, -0.09375, 0.015625, 0.09375, -0.1796875, -0.2109375, -0.140625, -0.1640625, -0.0234375, 0.078125, -0.1171875, -0.15625, -0.2265625, -0.0703125, 0.0625, 0.0234375, 0.0078125, -0.140625, -0.0078125, 0.0546875, -0.03125, 0.03125, 0.0546875, -0.0625, -0.0703125, 0.03125, 0.2734375, 0.03125, 0.078125, 0.15625, 0.1953125, 0.1796875, -0.03125, 0.0703125, 0.125, 0.1015625, 0.09375, 0.1875, 0.0546875, 0.1015625, 0.09375, 0.1171875, 0.1484375, 0.0, 0.1484375, 0.15625, 0.1875, 0.1875, 0.0703125, 0.140625, 0.0703125, 0.0859375, 0.140625, -0.0859375, -0.015625, 0.1796875, -0.0625, 0.0234375, -0.0625, 0.125, 0.171875, -0.0078125, 0.015625, 0.0625, -0.015625, 0.015625, -0.1171875, -0.1953125, -0.078125, 0.0234375, -0.0390625, -0.1015625, -0.0078125, -0.046875, -0.0859375, -0.0390625, -0.0234375, -0.1328125, 0.0390625, -0.0078125, -0.0859375, -0.0234375, 0.0078125, -0.1796875, -0.0390625, 0.015625, -0.0078125, -0.15625, -0.0625, 0.0078125, -0.265625, -0.046875, 0.1171875, -0.09375, -0.0390625, -0.0390625, 0.0078125, 0.0859375, -0.0625, -0.0625, 0.0078125, 0.2109375, 0.0390625, 0.0234375, 0.2109375, 0.2109375, -0.0546875, 0.0390625, 0.0546875, -0.0390625, 0.109375, 0.1328125, -0.046875, 0.0, -0.0625, 0.0859375, 0.1015625, -0.1875, 0.0078125, 0.015625, -0.078125, -0.0625, -0.078125, -0.109375, -0.0546875, 0.03125, -0.015625, -0.0625, -0.171875, -0.0390625, 0.0703125, 0.0078125, -0.03125, 0.0703125, 0.0234375, -0.0390625, 0.046875, 0.0, 0.03125, 0.1796875, 0.109375, 0.0078125, 0.109375, -0.0078125, -0.0859375, -0.0625, 0.015625, 0.046875, 0.0234375, 0.046875, 0.015625, 0.03125, -0.0859375, -0.046875, -0.03125, -0.0546875, -0.2109375, -0.0859375, -0.0390625, 0.0078125, -0.078125, 0.0390625, -0.1015625, -0.1875, -0.0703125, 0.0234375, -0.0390625, -0.0859375, -0.109375, -0.0625, 0.0, -0.0078125, -0.1015625, -0.015625, -0.1796875, -0.171875, -0.0625, -0.046875, -0.171875, -0.0546875, -0.1171875, -0.2109375, -0.1875, -0.1328125, -0.09375, -0.1640625, -0.1640625, -0.0625, -0.0703125, -0.140625, 0.0703125, -0.0625, -0.125, -0.03125, 0.078125, 0.171875, 0.0078125, -0.046875, -0.03125, -0.0390625, 0.0390625, 0.09375, 0.0, -0.0078125, 0.046875, 0.09375, -0.0078125, 0.1328125, 0.125, 0.0703125, 0.15625, 0.1015625, 0.0546875, 0.09375, 0.0703125, 0.0859375, 0.140625, 0.265625, 0.2890625, 0.15625, 0.1328125, 0.1328125, 0.1640625, 0.203125, 0.09375, 0.109375, 0.2265625, 0.2421875, 0.0234375, 0.1171875, 0.0859375, 0.140625, 0.1171875, 0.140625, 0.28125, 0.25, 0.1484375, 0.171875, 0.0703125, 0.2109375, 0.109375, 0.0078125, 0.15625, 0.1171875, 0.0, 0.0859375, 0.0390625, 0.015625, 0.0, 0.1171875, 0.0078125, -0.09375, 0.015625, 0.078125, 0.046875, 0.03125, 0.1484375, 0.0703125, 0.0078125, 0.0703125, 0.078125, -0.0625, 0.03125, -0.078125, -0.0234375, 0.0546875, 0.1328125, 0.0859375, 0.0625, 0.0703125, 0.0703125, 0.1640625\}\}}}
\par
{\bkmkstart AAAAAAABOV}
{\bkmkend AAAAAAABOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Approx Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Approx}
{\xe \v doctest::Approx}
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b operator()} (double value) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b epsilon} (double newEpsilon)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b scale} (double newScale)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend {\b String} {\b toString} (const {\b Approx} &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Approx\:doctest::Approx}
{\xe \v doctest::Approx\:Approx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Approx::Approx (double  {\i value}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::epsilon (double  {\i newEpsilon})}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator()\:doctest::Approx}
{\xe \v doctest::Approx\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} doctest::Approx::operator() (double  {\i value}) const}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v scale\:doctest::Approx}
{\xe \v doctest::Approx\:scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::scale (double  {\i newScale})}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends And Related Function Documentation\par
\pard\plain 
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest::Approx}
{\xe \v doctest::Approx\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend {\b String} toString (const {\b Approx} &  {\i in}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::AssertData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::AssertData}
{\xe \v doctest::AssertData}
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::AssertData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_assert_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} * {\b m_test_case}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_expr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_failed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_exception}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw_as}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_at\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::AssertData::m_at}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_decomp\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_decomp}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_exception}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_string\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_exception_string}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_type\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_exception_type}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expr\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_expr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_expr}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_failed\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_failed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_failed}}
\par
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::AssertData::m_file}}
\par
{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::AssertData::m_line}}
\par
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_case\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData}* doctest::AssertData::m_test_case}}
\par
{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw}}
\par
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw_as\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw_as}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw_as}}
\par
{\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile< T >}
{\xe \v AudioFile< T >}
{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\par
{
{\f2 #include <AudioFile.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef std::vector< std::vector< T > > {\b AudioBuffer}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AudioFile} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AudioFile} (std::string filePath)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor, using a given file path to load a file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b load} (std::string filePath)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads an audio file from a given file path. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b save} (std::string filePath, {\b AudioFileFormat} format={\b AudioFileFormat::Wave})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Saves an audio file to a given file path. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b getSampleRate} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the sample rate }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNumChannels} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the number of audio channels in the buffer }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isMono} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the audio file is mono }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isStereo} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the audio file is stereo }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getBitDepth} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the bit depth of each sample }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNumSamplesPerChannel} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the number of samples per channel }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b getLengthInSeconds} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the length in seconds of the audio file based on the number of samples and sample rate }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printSummary} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prints a summary of the audio file to the console. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b setAudioBuffer} ({\b AudioBuffer} &newBuffer)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the audio buffer for this {\b AudioFile} by copying samples from another buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAudioBufferSize} (int numChannels, int numSamples)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the audio buffer to a given number of channels and number of samples per channel. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNumSamplesPerChannel} (int numSamples)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the number of samples per channel in the audio buffer. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setNumChannels} (int numChannels)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the number of channels. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setBitDepth} (int numBitsPerSample)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the bit depth for the audio file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setSampleRate} (uint32_t newSampleRate)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the sample rate for the audio file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shouldLogErrorsToConsole} (bool logErrors)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets whether the library should log error messages to the console. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AudioBuffer} {\b samples}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A vector of vectors holding the audio samples for the {\b AudioFile}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b iXMLChunk}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
An optional iXML chunk that can be added to the {\b AudioFile}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v AudioBuffer\:AudioFile< T >}
{\xe \v AudioFile< T >\:AudioBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef std::vector<std::vector<T> > {\b AudioFile}< T >::{\b AudioBuffer}}}
\par
{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v AudioFile\:AudioFile< T >}
{\xe \v AudioFile< T >\:AudioFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b AudioFile}< T >::{\b AudioFile}}}
\par
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor. }}\par
}
{\xe \v AudioFile\:AudioFile< T >}
{\xe \v AudioFile< T >\:AudioFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b AudioFile}< T >::{\b AudioFile} (std::string  {\i filePath})}}
\par
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor, using a given file path to load a file. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getBitDepth\:AudioFile< T >}
{\xe \v AudioFile< T >\:getBitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > int {\b AudioFile}< T >::getBitDepth}}
\par
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the bit depth of each sample }}\par
}
{\xe \v getLengthInSeconds\:AudioFile< T >}
{\xe \v AudioFile< T >\:getLengthInSeconds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > double {\b AudioFile}< T >::getLengthInSeconds}}
\par
{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the length in seconds of the audio file based on the number of samples and sample rate }}\par
}
{\xe \v getNumChannels\:AudioFile< T >}
{\xe \v AudioFile< T >\:getNumChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > int {\b AudioFile}< T >::getNumChannels}}
\par
{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the number of audio channels in the buffer }}\par
}
{\xe \v getNumSamplesPerChannel\:AudioFile< T >}
{\xe \v AudioFile< T >\:getNumSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > int {\b AudioFile}< T >::getNumSamplesPerChannel}}
\par
{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the number of samples per channel }}\par
}
{\xe \v getSampleRate\:AudioFile< T >}
{\xe \v AudioFile< T >\:getSampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > uint32_t {\b AudioFile}< T >::getSampleRate}}
\par
{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns the sample rate }}\par
}
{\xe \v isMono\:AudioFile< T >}
{\xe \v AudioFile< T >\:isMono}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > bool {\b AudioFile}< T >::isMono}}
\par
{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the audio file is mono }}\par
}
{\xe \v isStereo\:AudioFile< T >}
{\xe \v AudioFile< T >\:isStereo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > bool {\b AudioFile}< T >::isStereo}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the audio file is stereo }}\par
}
{\xe \v load\:AudioFile< T >}
{\xe \v AudioFile< T >\:load}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > bool {\b AudioFile}< T >::load (std::string  {\i filePath})}}
\par
{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Loads an audio file from a given file path. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the file was successfully loaded \par
}}
{\xe \v printSummary\:AudioFile< T >}
{\xe \v AudioFile< T >\:printSummary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::printSummary}}
\par
{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prints a summary of the audio file to the console. }}\par
}
{\xe \v save\:AudioFile< T >}
{\xe \v AudioFile< T >\:save}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > bool {\b AudioFile}< T >::save (std::string  {\i filePath}, {\b AudioFileFormat}  {\i format} = {\f2 {\b AudioFileFormat::Wave}})}}
\par
{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Saves an audio file to a given file path. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the file was successfully saved \par
}}
{\xe \v setAudioBuffer\:AudioFile< T >}
{\xe \v AudioFile< T >\:setAudioBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > bool {\b AudioFile}< T >::setAudioBuffer ({\b AudioBuffer} &  {\i newBuffer})}}
\par
{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Set the audio buffer for this {\b AudioFile} by copying samples from another buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
@Returns true if the buffer was copied successfully. \par
}}
{\xe \v setAudioBufferSize\:AudioFile< T >}
{\xe \v AudioFile< T >\:setAudioBufferSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::setAudioBufferSize (int  {\i numChannels}, int  {\i numSamples})}}
\par
{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the audio buffer to a given number of channels and number of samples per channel. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This will try to preserve the existing audio, adding zeros to any new channels or new samples in a given channel. \par
}}
{\xe \v setBitDepth\:AudioFile< T >}
{\xe \v AudioFile< T >\:setBitDepth}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::setBitDepth (int  {\i numBitsPerSample})}}
\par
{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the bit depth for the audio file. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you use the {\b save()} function, this bit depth rate will be used \par
}}
{\xe \v setNumChannels\:AudioFile< T >}
{\xe \v AudioFile< T >\:setNumChannels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::setNumChannels (int  {\i numChannels})}}
\par
{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the number of channels. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
New channels will have the correct number of samples and be initialised to zero \par
}}
{\xe \v setNumSamplesPerChannel\:AudioFile< T >}
{\xe \v AudioFile< T >\:setNumSamplesPerChannel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::setNumSamplesPerChannel (int  {\i numSamples})}}
\par
{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the number of samples per channel in the audio buffer. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This will try to preserve the existing audio, adding zeros to new samples in a given channel if the number of samples is increased. \par
}}
{\xe \v setSampleRate\:AudioFile< T >}
{\xe \v AudioFile< T >\:setSampleRate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::setSampleRate (uint32_t  {\i newSampleRate})}}
\par
{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets the sample rate for the audio file. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you use the {\b save()} function, this sample rate will be used \par
}}
{\xe \v shouldLogErrorsToConsole\:AudioFile< T >}
{\xe \v AudioFile< T >\:shouldLogErrorsToConsole}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b AudioFile}< T >::shouldLogErrorsToConsole (bool  {\i logErrors})}}
\par
{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sets whether the library should log error messages to the console. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
By default this is true \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v iXMLChunk\:AudioFile< T >}
{\xe \v AudioFile< T >\:iXMLChunk}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > std::string {\b AudioFile}< T >::iXMLChunk}}
\par
{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
An optional iXML chunk that can be added to the {\b AudioFile}. }}\par
}
{\xe \v samples\:AudioFile< T >}
{\xe \v AudioFile< T >\:samples}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b AudioBuffer} {\b AudioFile}< T >::samples}}
\par
{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A vector of vectors holding the audio samples for the {\b AudioFile}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can access the samples by channel and then by sample index, i.e: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  samples[channel][sampleIndex]\par
}
 \par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
basic_ostream< charT, traits > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v basic_ostream< charT, traits >}
{\xe \v basic_ostream< charT, traits >}
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
char_traits< charT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v char_traits< charT >}
{\xe \v char_traits< charT >}
{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::has_insertion_operator_impl::check< class, class > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator_impl::check< class, class >}
{\xe \v doctest::detail::has_insertion_operator_impl::check< class, class >}
{\bkmkstart AAAAAAABLD}
{\bkmkend AAAAAAABLD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr auto {\b value} = false\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::has_insertion_operator_impl::check< class, class >}
{\xe \v doctest::detail::has_insertion_operator_impl::check< class, class >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class , class  = void> constexpr auto {\b doctest::detail::has_insertion_operator_impl::check}< class, class >::value = false{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>}
{\xe \v doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>}
{\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr auto {\b value} = true\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>}
{\xe \v doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > constexpr auto {\b doctest::detail::has_insertion_operator_impl::check}< T, decltype({\b os}()<< val< T >(), void())>::value = true{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAABLG}
{\bkmkend AAAAAAABLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::Context Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::Context}
{\xe \v doctest::Context}
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (int argc=0, const char *const *argv=nullptr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Context} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyCommandLine} (int argc, const char *const *argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addFilter} (const char *filter, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearFilters} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b shouldExit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAsDefaultForAssertsOutOfTestCases} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAssertHandler} ({\b detail::assert_handler} ah)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b run} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (int  {\i argc} = {\f2 0}, const char *const *  {\i argv} = {\f2 nullptr}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Context\:doctest::Context}
{\xe \v doctest::Context\:~Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::~Context ()}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addFilter\:doctest::Context}
{\xe \v doctest::Context\:addFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::addFilter (const char *  {\i filter}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v applyCommandLine\:doctest::Context}
{\xe \v doctest::Context\:applyCommandLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::applyCommandLine (int  {\i argc}, const char *const *  {\i argv})}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v clearFilters\:doctest::Context}
{\xe \v doctest::Context\:clearFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::clearFilters ()}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run\:doctest::Context}
{\xe \v doctest::Context\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::Context::run ()}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAsDefaultForAssertsOutOfTestCases\:doctest::Context}
{\xe \v doctest::Context\:setAsDefaultForAssertsOutOfTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAsDefaultForAssertsOutOfTestCases ()}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAssertHandler\:doctest::Context}
{\xe \v doctest::Context\:setAssertHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAssertHandler ({\b detail::assert_handler}  {\i ah})}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, int  {\i value})}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v shouldExit\:doctest::Context}
{\xe \v doctest::Context\:shouldExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Context::shouldExit ()}}
\par
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::ContextOptions Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::ContextOptions}
{\xe \v doctest::ContextOptions}
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b cout}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b cerr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b binary_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b out}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b order_by}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b rand_seed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b first}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b last}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b abort_after}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b subcase_filter_levels}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b success}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b case_sensitive}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b exit}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b duration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_throw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_exitcode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_run}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b force_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b gnu_file_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_path_in_filenames}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_line_numbers}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skipped_summary}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_time_in_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b count}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_cases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_suites}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_reporters}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v abort_after\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:abort_after}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::abort_after}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v binary_name\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:binary_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::binary_name}}
\par
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v case_sensitive\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:case_sensitive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::case_sensitive}}
\par
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cerr\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:cerr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}* doctest::ContextOptions::cerr}}
\par
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v count\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::count}}
\par
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cout\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:cout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}* doctest::ContextOptions::cout}}
\par
{\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v duration\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:duration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::duration}}
\par
{\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v exit\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:exit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::exit}}
\par
{\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v first\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:first}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::first}}
\par
{\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v force_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:force_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::force_colors}}
\par
{\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v gnu_file_line\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:gnu_file_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::gnu_file_line}}
\par
{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v help\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::help}}
\par
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:last}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::last}}
\par
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_reporters\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_reporters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_reporters}}
\par
{\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_cases\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_cases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_cases}}
\par
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_suites\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_suites}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_suites}}
\par
{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_breaks\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_breaks}}
\par
{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_colors}}
\par
{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_exitcode\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_exitcode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_exitcode}}
\par
{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_line_numbers\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_line_numbers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_line_numbers}}
\par
{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_path_in_filenames\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_path_in_filenames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_path_in_filenames}}
\par
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_run\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_run}}
\par
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skip\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skip}}
\par
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skipped_summary\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skipped_summary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skipped_summary}}
\par
{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_throw\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_throw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_throw}}
\par
{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_time_in_output\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_time_in_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_time_in_output}}
\par
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_version}}
\par
{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v order_by\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:order_by}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::order_by}}
\par
{\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v out\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:out}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::out}}
\par
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rand_seed\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:rand_seed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::rand_seed}}
\par
{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_filter_levels\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:subcase_filter_levels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::subcase_filter_levels}}
\par
{\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v success\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:success}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::success}}
\par
{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::version}}
\par
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ContextScope< L > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >}
{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ContextScope< L >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} ({\b ContextScope} &&other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stringify} ({\b std::ostream} *s) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScope} () override\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::{\b ContextScope} (const L &  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::{\b ContextScope} ({\b ContextScope}< L > &&  {\i other}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:~ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::~{\b ContextScope} (){\f2 [inline]}, {\f2 [override]}}}
\par
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v stringify\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > void {\b doctest::detail::ContextScope}< L >::stringify ({\b std::ostream} *  {\i s}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZH}
{\bkmkend AAAAAAAAZH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b doctest::IContextScope} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZG \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ContextScopeBase Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase}
{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ContextScopeBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_context_scope_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ContextScopeBase::destroy (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::CurrentTestCaseStats Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats}
{\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailedCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b seconds}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failure_flags}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v failure_flags\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:failure_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::failure_flags}}
\par
{\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsCurrentTest}}
\par
{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailedCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsFailedCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsFailedCurrentTest}}
\par
{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v seconds\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:seconds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::CurrentTestCaseStats::seconds}}
\par
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::deferred_false< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::deferred_false< T >}
{\xe \v doctest::detail::deferred_false< T >}
{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const bool {\b value} = false\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:doctest::detail::deferred_false< T >}
{\xe \v doctest::detail::deferred_false< T >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > const bool {\b doctest::detail::deferred_false}< T >::value = false{\f2 [static]}}}
\par
{\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ExceptionTranslator< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >}
{\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ExceptionTranslator< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b translate} ({\b String} &res) const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<typename T>\par
class doctest::detail::ExceptionTranslator< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExceptionTranslator\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:ExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b doctest::detail::ExceptionTranslator}< T >::{\b ExceptionTranslator} ({\b String}(*)(T)  {\i translateFunction}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v translate\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > bool {\b doctest::detail::ExceptionTranslator}< T >::translate ({\b String} &  {\i res}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implements {\b doctest::detail::IExceptionTranslator} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABHN \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ExpressionDecomposer Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer}
{\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExpressionDecomposer} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > Expression_lhs< const {\b DOCTEST_REF_WRAP}(L)> {\b operator<<} (const {\b DOCTEST_REF_WRAP}(L) operand)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ExpressionDecomposer\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:ExpressionDecomposer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ExpressionDecomposer::ExpressionDecomposer ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > Expression_lhs< const {\b DOCTEST_REF_WRAP}(L)> doctest::detail::ExpressionDecomposer::operator<< (const {\b DOCTEST_REF_WRAP}(L)  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_at\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::detail::ExpressionDecomposer::m_at}}
\par
{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::IContextScope Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::IContextScope}
{\xe \v doctest::IContextScope}
{\bkmkstart AAAAAAAAZD}
{\bkmkend AAAAAAAAZD}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::IContextScope:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_i_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IContextScope} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~IContextScope} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IContextScope\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:IContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::IContextScope::IContextScope ()}}
\par
{\bkmkstart AAAAAAAAZE}
{\bkmkend AAAAAAAAZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~IContextScope\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:~IContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual doctest::IContextScope::~IContextScope (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZF}
{\bkmkend AAAAAAAAZF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v stringify\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IContextScope::stringify ({\b std::ostream} * ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZG}
{\bkmkend AAAAAAAAZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::IExceptionTranslator Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator}
{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::IExceptionTranslator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_i_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IExceptionTranslator} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~IExceptionTranslator} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b translate} ({\b String} &) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v IExceptionTranslator\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:IExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::IExceptionTranslator::IExceptionTranslator ()}}
\par
{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~IExceptionTranslator\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:~IExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual doctest::detail::IExceptionTranslator::~IExceptionTranslator (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v translate\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool doctest::detail::IExceptionTranslator::translate ({\b String} & ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implemented in {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABHM \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::IReporter Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::IReporter}
{\xe \v doctest::IReporter}
{\bkmkstart AAAAAAAAZI}
{\bkmkend AAAAAAAAZI}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b report_query} (const {\b QueryData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_start} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_end} (const {\b TestRunStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_start} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_reenter} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_end} (const {\b CurrentTestCaseStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_exception} (const {\b TestCaseException} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_start} (const {\b SubcaseSignature} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_end} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_assert} (const {\b AssertData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_message} (const {\b MessageData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_skipped} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~IReporter} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b IContextScope} *const * {\b get_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_stringified_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b String} * {\b get_stringified_contexts} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ~IReporter\:doctest::IReporter}
{\xe \v doctest::IReporter\:~IReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual doctest::IReporter::~IReporter (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAZJ}
{\bkmkend AAAAAAAAZJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v get_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b IContextScope} *const  * doctest::IReporter::get_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAZK}
{\bkmkend AAAAAAAAZK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAZL}
{\bkmkend AAAAAAAAZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAZM}
{\bkmkend AAAAAAAAZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b String} * doctest::IReporter::get_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAZN}
{\bkmkend AAAAAAAAZN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_assert\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_assert (const {\b AssertData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZO}
{\bkmkend AAAAAAAAZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_message\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_message (const {\b MessageData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZP}
{\bkmkend AAAAAAAAZP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v report_query\:doctest::IReporter}
{\xe \v doctest::IReporter\:report_query}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::report_query (const {\b QueryData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_end (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_start (const {\b SubcaseSignature} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_end (const {\b CurrentTestCaseStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_exception\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_exception (const {\b TestCaseException} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_reenter\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_reenter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_reenter (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_skipped\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_skipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_skipped (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_start (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_end (const {\b TestRunStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_start (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::MessageBuilder Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder}
{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::MessageBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_message_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const char *file, int line, {\b assertType::Enum} severity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} ()=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~MessageBuilder} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator<<} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b m_stream}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const char *  {\i file}, int  {\i line}, {\b assertType::Enum}  {\i severity})}}
\par
{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:~MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::~MessageBuilder ()}}
\par
{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v log\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::log ()}}
\par
{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<<\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator<< (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::MessageBuilder::react ()}}
\par
{\bkmkstart AAAAAAABIB}
{\bkmkend AAAAAAABIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_stream\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:m_stream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream}* doctest::detail::MessageBuilder::m_stream}}
\par
{\bkmkstart AAAAAAABIC}
{\bkmkend AAAAAAABIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::MessageData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::MessageData}
{\xe \v doctest::MessageData}
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::MessageData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_message_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_severity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_file\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::MessageData::m_file}}
\par
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::MessageData::m_line}}
\par
{\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_severity\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_severity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::MessageData::m_severity}}
\par
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_string\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::MessageData::m_string}}
\par
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::QueryData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::QueryData}
{\xe \v doctest::QueryData}
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestRunStats} * {\b run_stats} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} ** {\b data} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b num_data} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v data\:doctest::QueryData}
{\xe \v doctest::QueryData\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData}** doctest::QueryData::data = nullptr}}
\par
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v num_data\:doctest::QueryData}
{\xe \v doctest::QueryData\:num_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::QueryData::num_data = 0}}
\par
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run_stats\:doctest::QueryData}
{\xe \v doctest::QueryData\:run_stats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestRunStats}* doctest::QueryData::run_stats = nullptr}}
\par
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::RelationalComparator< int, L, R > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >}
{\bkmkstart AAAAAAABID}
{\bkmkend AAAAAAABID}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator()} (const {\b DOCTEST_REF_WRAP}(L), const {\b DOCTEST_REF_WRAP}(R)) const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator()\:doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int , class L , class R > bool {\b doctest::detail::RelationalComparator}< int, L, R >::operator() (const   {\i DOCTEST_REF_WRAP}L, const   {\i DOCTEST_REF_WRAP}R) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABIE}
{\bkmkend AAAAAAABIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::remove_const< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::remove_const< T >}
{\xe \v doctest::detail::remove_const< T >}
{\bkmkstart AAAAAAABIF}
{\bkmkend AAAAAAABIF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef T {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::remove_const< T >}
{\xe \v doctest::detail::remove_const< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef T {\b doctest::detail::remove_const}< T >::{\b type}}}
\par
{\bkmkstart AAAAAAABIG}
{\bkmkend AAAAAAABIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::remove_const< const T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::remove_const< const T >}
{\xe \v doctest::detail::remove_const< const T >}
{\bkmkstart AAAAAAABIH}
{\bkmkend AAAAAAABIH}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef T {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::remove_const< const T >}
{\xe \v doctest::detail::remove_const< const T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef T {\b doctest::detail::remove_const}< const T >::{\b type}}}
\par
{\bkmkstart AAAAAAABII}
{\bkmkend AAAAAAABII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::remove_reference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::remove_reference< T >}
{\xe \v doctest::detail::remove_reference< T >}
{\bkmkstart AAAAAAABIJ}
{\bkmkend AAAAAAABIJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef T {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::remove_reference< T >}
{\xe \v doctest::detail::remove_reference< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef T {\b doctest::detail::remove_reference}< T >::{\b type}}}
\par
{\bkmkstart AAAAAAABIK}
{\bkmkend AAAAAAABIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::remove_reference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::remove_reference< T & >}
{\xe \v doctest::detail::remove_reference< T & >}
{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef T {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::remove_reference< T & >}
{\xe \v doctest::detail::remove_reference< T & >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef T {\b doctest::detail::remove_reference}< T & >::{\b type}}}
\par
{\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::remove_reference< T && > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::remove_reference< T && >}
{\xe \v doctest::detail::remove_reference< T && >}
{\bkmkstart AAAAAAABIN}
{\bkmkend AAAAAAABIN}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef T {\b type}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Typedef Documentation\par
\pard\plain 
{\xe \v type\:doctest::detail::remove_reference< T && >}
{\xe \v doctest::detail::remove_reference< T && >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > typedef T {\b doctest::detail::remove_reference}< T && >::{\b type}}}
\par
{\bkmkstart AAAAAAABIO}
{\bkmkend AAAAAAABIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::Result Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Result}
{\xe \v doctest::detail::Result}
{\bkmkstart AAAAAAABIP}
{\bkmkend AAAAAAABIP}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} (bool passed, const {\b String} &decomposition={\b String}())\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_passed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (bool  {\i passed}, const {\b String} &  {\i decomposition} = {\f2 {\b String}()})}}
\par
{\bkmkstart AAAAAAABIQ}
{\bkmkend AAAAAAABIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_decomp\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::Result::m_decomp}}
\par
{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_passed\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_passed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Result::m_passed}}
\par
{\bkmkstart AAAAAAABIS}
{\bkmkend AAAAAAABIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::ResultBuilder Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder}
{\bkmkstart AAAAAAABIT}
{\bkmkend AAAAAAABIT}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::ResultBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_result_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type="", const char *exception_string="")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setResult} (const {\b Result} &res)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} void {\b binary_assert} (const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} void {\b unary_assert} (const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b translateException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type} = {\f2 ""}, const char *  {\i exception_string} = {\f2 ""})}}
\par
{\bkmkstart AAAAAAABIU}
{\bkmkend AAAAAAABIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} void doctest::detail::ResultBuilder::binary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABIV}
{\bkmkend AAAAAAABIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ResultBuilder::log ()}}
\par
{\bkmkstart AAAAAAABIW}
{\bkmkend AAAAAAABIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::react () const}}
\par
{\bkmkstart AAAAAAABIX}
{\bkmkend AAAAAAABIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setResult\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:setResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::setResult (const {\b Result} &  {\i res})}}
\par
{\bkmkstart AAAAAAABIY}
{\bkmkend AAAAAAABIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v translateException\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:translateException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::translateException ()}}
\par
{\bkmkstart AAAAAAABIZ}
{\bkmkend AAAAAAABIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} void doctest::detail::ResultBuilder::unary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i val}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABJA}
{\bkmkend AAAAAAABJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::String Class Reference\par \pard\plain 
{\tc\tcl2 \v doctest::String}
{\xe \v doctest::String}
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~String} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in, unsigned in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator+=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b operator+} (const {\b String} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b String} &&other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} ({\b String} &&other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b operator[]} (unsigned i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char & {\b operator[]} (unsigned i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b c_str} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b size} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b capacity} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const char *other, bool no_case=false) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const {\b String} &other, bool no_case=false) const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ()}}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~String\:doctest::String}
{\xe \v doctest::String\:~String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::~String ()}}
\par
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in}, unsigned  {\i in_size})}}
\par
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b String} &&  {\i other})}}
\par
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * doctest::String::c_str (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::String::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v capacity\:doctest::String}
{\xe \v doctest::String\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::String::capacity () const}}
\par
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const char *  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const {\b String} &  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+\:doctest::String}
{\xe \v doctest::String\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::operator+ (const {\b String} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+=\:doctest::String}
{\xe \v doctest::String\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator+= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= ({\b String} &&  {\i other})}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char & doctest::String::operator[] (unsigned  {\i i})}}
\par
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::operator[] (unsigned  {\i i}) const}}
\par
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:doctest::String}
{\xe \v doctest::String\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::String::size () const}}
\par
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v buf\:doctest::String}
{\xe \v doctest::String\:buf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::buf[len]}}
\par
{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v data\:doctest::String}
{\xe \v doctest::String\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
view doctest::String::data}}
\par
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::StringMaker< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::StringMaker< T >}
{\xe \v doctest::StringMaker< T >}
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::StringMaker< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_string_maker.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::StringMaker< R C::* > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::StringMaker< R C::* >}
{\xe \v doctest::StringMaker< R C::* >}
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b String} {\b convert} (R C::*p)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::StringMaker< R C::* >}
{\xe \v doctest::StringMaker< R C::* >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename R , typename C > static {\b String} {\b doctest::StringMaker}< R C::* >::convert (R C::*  {\i p}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::StringMaker< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::StringMaker< T * >}
{\xe \v doctest::StringMaker< T * >}
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename U > static {\b String} {\b convert} (U *p)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::StringMaker< T * >}
{\xe \v doctest::StringMaker< T * >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > template<typename U > static {\b String} {\b doctest::StringMaker}< T * >::convert (U *  {\i p}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringMakerBase< C > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >}
{\bkmkstart AAAAAAABJB}
{\bkmkend AAAAAAABJB}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< C >::convert (const   {\i DOCTEST_REF_WRAP}T){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABJC}
{\bkmkend AAAAAAABJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringMakerBase< true > Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >}
{\bkmkstart AAAAAAABJD}
{\bkmkend AAAAAAABJD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T) in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< true >::convert (const {\b DOCTEST_REF_WRAP}(T)  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABJE}
{\bkmkend AAAAAAABJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringStream< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringStream< T >}
{\xe \v doctest::detail::StringStream< T >}
{\bkmkstart AAAAAAABJF}
{\bkmkend AAAAAAABJF}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::StringStream< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_string_stream.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringStreamBase< C > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringStreamBase< C >}
{\xe \v doctest::detail::StringStreamBase< C >}
{\bkmkstart AAAAAAABJG}
{\bkmkend AAAAAAABJG}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static void {\b convert} ({\b std::ostream} *s, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b convert} ({\b std::ostream} *s, const char *in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringStreamBase< C >}
{\xe \v doctest::detail::StringStreamBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> static void {\b doctest::detail::StringStreamBase}< C >::convert ({\b std::ostream} *  {\i s}, const char *  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABJH}
{\bkmkend AAAAAAABJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v convert\:doctest::detail::StringStreamBase< C >}
{\xe \v doctest::detail::StringStreamBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> template<typename T > static void {\b doctest::detail::StringStreamBase}< C >::convert ({\b std::ostream} *  {\i s}, const T &  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABJI}
{\bkmkend AAAAAAABJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::StringStreamBase< true > Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringStreamBase< true >}
{\xe \v doctest::detail::StringStreamBase< true >}
{\bkmkstart AAAAAAABJJ}
{\bkmkend AAAAAAABJJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static void {\b convert} ({\b std::ostream} *s, const T &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringStreamBase< true >}
{\xe \v doctest::detail::StringStreamBase< true >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::StringStreamBase}< true >::convert ({\b std::ostream} *  {\i s}, const T &  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABJK}
{\bkmkend AAAAAAABJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::Subcase Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase}
{\bkmkstart AAAAAAABJL}
{\bkmkend AAAAAAABJL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b String} &name, const char *file, int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Subcase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SubcaseSignature} {\b m_signature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_entered} = false\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b String} &  {\i name}, const char *  {\i file}, int  {\i line})}}
\par
{\bkmkstart AAAAAAABJM}
{\bkmkend AAAAAAABJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:~Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::~Subcase ()}}
\par
{\bkmkstart AAAAAAABJN}
{\bkmkend AAAAAAABJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator bool\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::operator bool () const}}
\par
{\bkmkstart AAAAAAABJO}
{\bkmkend AAAAAAABJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_entered\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_entered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Subcase::m_entered = false}}
\par
{\bkmkstart AAAAAAABJP}
{\bkmkend AAAAAAABJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_signature\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_signature}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SubcaseSignature} doctest::detail::Subcase::m_signature}}
\par
{\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::SubcaseSignature Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature}
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b SubcaseSignature} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator<\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator< (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_file\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::SubcaseSignature::m_file}}
\par
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::SubcaseSignature::m_line}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::SubcaseSignature::m_name}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestCase Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase}
{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::detail::TestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_test_case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b funcType} test, const char *file, unsigned line, const {\b TestSuite} &test_suite, const char *type="", int template_id=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH} (26434) {\b TestCase} &operator\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestCase} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b TestCase} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b funcType} {\b m_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_template_id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_full_name}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b funcType}  {\i test}, const char *  {\i file}, unsigned  {\i line}, const {\b TestSuite} &  {\i test_suite}, const char *  {\i type} = {\f2 ""}, int  {\i template_id} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH (26434 ) &}}
\par
{\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & doctest::detail::TestCase::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestCase} & doctest::detail::TestCase::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestCase::operator< (const {\b TestCase} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_full_name\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_full_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::TestCase::m_full_name}}
\par
{\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_template_id\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_template_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestCase::m_template_id}}
\par
{\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b funcType} doctest::detail::TestCase::m_test}}
\par
{\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_type\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::detail::TestCase::m_type}}
\par
{\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseData Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseData}
{\xe \v doctest::TestCaseData}
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
\par
{
{\f2 #include <doctest.h>}}\par
Inheritance diagram for doctest::TestCaseData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_test_case_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_description\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_description}}
\par
{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestCaseData::m_expected_failures}}
\par
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseData::m_file}}
\par
{\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestCaseData::m_line}}
\par
{\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_may_fail}}
\par
{\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_name}}
\par
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_should_fail}}
\par
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_skip}}
\par
{\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::TestCaseData::m_test_suite}}
\par
{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::TestCaseData::m_timeout}}
\par
{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestCaseException Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseException}
{\xe \v doctest::TestCaseException}
{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b error_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_crash}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v error_string\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:error_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseException::error_string}}
\par
{\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v is_crash\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:is_crash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseException::is_crash}}
\par
{\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestFailureException Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestFailureException}
{\xe \v doctest::detail::TestFailureException}
{\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
\par
{
{\f2 #include <doctest.h>}}\par
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::TestRunStats Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::TestRunStats}
{\xe \v doctest::TestRunStats}
{\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestSuitesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesFailed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAsserts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailed}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v numAsserts\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAsserts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAsserts}}
\par
{\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAssertsFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAssertsFailed}}
\par
{\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCases\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCases}}
\par
{\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesFailed}}
\par
{\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesPassingFilters}}
\par
{\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestSuitesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestSuitesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestSuitesPassingFilters}}
\par
{\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest::detail::TestSuite Struct Reference\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite}
{\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestSuite} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestSuite} & {\b operator*} (const T &in)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestSuite} & doctest::detail::TestSuite::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestSuite} & doctest::detail::TestSuite::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v m_description\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::detail::TestSuite::m_description}}
\par
{\bkmkstart AAAAAAABKG}
{\bkmkend AAAAAAABKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestSuite::m_expected_failures}}
\par
{\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_may_fail}}
\par
{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_should_fail}}
\par
{\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_skip}}
\par
{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* doctest::detail::TestSuite::m_test_suite}}
\par
{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::detail::TestSuite::m_timeout}}
\par
{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tuple< Types > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v tuple< Types >}
{\xe \v tuple< Types >}
{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/AudioFile.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/AudioFile.h}
{\xe \v AudioFile/AudioFile.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <cassert>}\par
{\f2 #include <string>}\par
{\f2 #include <cstring>}\par
{\f2 #include <fstream>}\par
{\f2 #include <unordered_map>}\par
{\f2 #include <iterator>}\par
{\f2 #include <algorithm>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b AudioFile< T >}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b AudioFileFormat} \{ {\b Error}
, {\b NotLoaded}
, {\b Wave}
, {\b Aiff}
 \}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The different types of audio file, plus some other types to indicate a failure to load a file, or that one hasn't been loaded yet. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b WavAudioFormat} \{ {\b PCM} = 0x0001
, {\b IEEEFloat} = 0x0003
, {\b ALaw} = 0x0006
, {\b MULaw} = 0x0007
, {\b Extensible} = 0xFFFE
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b AIFFAudioFormat} \{ {\b Uncompressed}
, {\b Compressed}
, {\b Error}
, {\b Error}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Adam Stark \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (C) 2017 Adam Stark\par
}}This file is part of the '{\b AudioFile}' library\par
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\par
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\par
You should have received a copy of the GNU General Public License along with this program. If not, see {\f2 http://www.gnu.org/licenses/}. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumeration Type Documentation\par
\pard\plain 
{\xe \v AIFFAudioFormat\:AudioFile.h}
{\xe \v AudioFile.h\:AIFFAudioFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b AIFFAudioFormat}}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Uncompressed\:AudioFile.h}
{\xe \v AudioFile.h\:Uncompressed}
{\qr Uncompressed{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\cell }{\cell }{\row }
{\xe \v Compressed\:AudioFile.h}
{\xe \v AudioFile.h\:Compressed}
{\qr Compressed{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\cell }{\cell }{\row }
{\xe \v Error\:AudioFile.h}
{\xe \v AudioFile.h\:Error}
{\qr Error{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\cell }{\cell }{\row }
{\xe \v Error\:AudioFile.h}
{\xe \v AudioFile.h\:Error}
{\qr Error{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
\cell }{\cell }{\row }
}
}
{\xe \v AudioFileFormat\:AudioFile.h}
{\xe \v AudioFile.h\:AudioFileFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b AudioFileFormat}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The different types of audio file, plus some other types to indicate a failure to load a file, or that one hasn't been loaded yet. }}\par
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Error\:AudioFile.h}
{\xe \v AudioFile.h\:Error}
{\qr Error{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
\cell }{\cell }{\row }
{\xe \v NotLoaded\:AudioFile.h}
{\xe \v AudioFile.h\:NotLoaded}
{\qr NotLoaded{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\cell }{\cell }{\row }
{\xe \v Wave\:AudioFile.h}
{\xe \v AudioFile.h\:Wave}
{\qr Wave{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\cell }{\cell }{\row }
{\xe \v Aiff\:AudioFile.h}
{\xe \v AudioFile.h\:Aiff}
{\qr Aiff{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
\cell }{\cell }{\row }
}
}
{\xe \v WavAudioFormat\:AudioFile.h}
{\xe \v AudioFile.h\:WavAudioFormat}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b WavAudioFormat}}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumerator:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v PCM\:AudioFile.h}
{\xe \v AudioFile.h\:PCM}
{\qr PCM{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\cell }{\cell }{\row }
{\xe \v IEEEFloat\:AudioFile.h}
{\xe \v AudioFile.h\:IEEEFloat}
{\qr IEEEFloat{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\cell }{\cell }{\row }
{\xe \v ALaw\:AudioFile.h}
{\xe \v AudioFile.h\:ALaw}
{\qr ALaw{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\cell }{\cell }{\row }
{\xe \v MULaw\:AudioFile.h}
{\xe \v AudioFile.h\:MULaw}
{\qr MULaw{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
\cell }{\cell }{\row }
{\xe \v Extensible\:AudioFile.h}
{\xe \v AudioFile.h\:Extensible}
{\qr Extensible{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/AudioFile.h}
{\xe \v AudioFile/AudioFile.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //=======================================================================}\par
21 {\cf20 }{\cf20 //=======================================================================}\par
22 \par
23 {\cf21 #ifndef _AS_AudioFile_h}\par
24 {\cf21 #define _AS_AudioFile_h}\par
25 \par
26 {\cf21 #include <iostream>}\par
27 {\cf21 #include <vector>}\par
28 {\cf21 #include <cassert>}\par
29 {\cf21 #include <string>}\par
30 {\cf21 #include <cstring>}\par
31 {\cf21 #include <fstream>}\par
32 {\cf21 #include <unordered_map>}\par
33 {\cf21 #include <iterator>}\par
34 {\cf21 #include <algorithm>}\par
35 \par
36 {\cf20 // disable some warnings on Windows}\par
37 {\cf21 #if defined (_MSC_VER)}\par
38     __pragma(warning (push))\par
39     __pragma(warning (disable : 4244))\par
40     __pragma(warning (disable : 4457))\par
41     __pragma(warning (disable : 4458))\par
42     __pragma(warning (disable : 4389))\par
43     __pragma(warning (disable : 4996))\par
44 {\cf21 #elif defined (__GNUC__)}\par
45     _Pragma({\cf22 "GCC diagnostic push"})\par
46     _Pragma("GCC diagnostic ignored \\"-Wconversion\\"")\par
47     _Pragma("GCC diagnostic ignored \\"-Wsign-compare\\"")\par
48     _Pragma("GCC diagnostic ignored \\"-Wshadow\\"")\par
49 {\cf21 #endif}\par
50 \par
51 {\cf20 //=============================================================}\par
56 {\cf20 }{\cf17 enum class} AudioFileFormat\par
57 \{\par
58     Error,\par
59     NotLoaded,\par
60     Wave,\par
61     Aiff\par
62 \};\par
63 \par
64 {\cf20 //=============================================================}\par
65 {\cf17 template} <{\cf17 class} T>\par
66 {\cf17 class }AudioFile\par
67 \{\par
68 {\cf17 public}:\par
69     \par
70     {\cf20 //=============================================================}\par
71     {\cf17 typedef} std::vector<std::vector<T> > AudioBuffer;\par
72     \par
73     {\cf20 //=============================================================}\par
75 {\cf20 }    AudioFile();\par
76     \par
78     AudioFile (std::string filePath);\par
79         \par
80     {\cf20 //=============================================================}\par
84 {\cf20 }    {\cf18 bool} load (std::string filePath);\par
85     \par
89     {\cf18 bool} save (std::string filePath, AudioFileFormat format = AudioFileFormat::Wave);\par
90         \par
91     {\cf20 //=============================================================}\par
93 {\cf20 }    uint32_t getSampleRate() {\cf17 const};\par
94     \par
96     {\cf18 int} getNumChannels() {\cf17 const};\par
97 \par
99     {\cf18 bool} isMono() {\cf17 const};\par
100     \par
102     {\cf18 bool} isStereo() {\cf17 const};\par
103     \par
105     {\cf18 int} getBitDepth() {\cf17 const};\par
106     \par
108     {\cf18 int} getNumSamplesPerChannel() {\cf17 const};\par
109     \par
111     {\cf18 double} getLengthInSeconds() {\cf17 const};\par
112     \par
114     {\cf18 void} printSummary() {\cf17 const};\par
115     \par
116     {\cf20 //=============================================================}\par
117     \par
121     {\cf18 bool} setAudioBuffer (AudioBuffer& newBuffer);\par
122     \par
126     {\cf18 void} setAudioBufferSize ({\cf18 int} numChannels, {\cf18 int} numSamples);\par
127     \par
131     {\cf18 void} setNumSamplesPerChannel ({\cf18 int} numSamples);\par
132     \par
134     {\cf18 void} setNumChannels ({\cf18 int} numChannels);\par
135     \par
137     {\cf18 void} setBitDepth ({\cf18 int} numBitsPerSample);\par
138     \par
140     {\cf18 void} setSampleRate (uint32_t newSampleRate);\par
141     \par
142     {\cf20 //=============================================================}\par
144 {\cf20 }    {\cf18 void} shouldLogErrorsToConsole ({\cf18 bool} logErrors);\par
145     \par
146     {\cf20 //=============================================================}\par
152 {\cf20 }    AudioBuffer samples;\par
153     \par
154     {\cf20 //=============================================================}\par
157 {\cf20 }    std::string iXMLChunk;\par
158     \par
159 {\cf17 private}:\par
160     \par
161     {\cf20 //=============================================================}\par
162     {\cf17 enum class} Endianness\par
163     \{\par
164         LittleEndian,\par
165         BigEndian\par
166     \};\par
167     \par
168     {\cf20 //=============================================================}\par
169     AudioFileFormat determineAudioFileFormat (std::vector<uint8_t>& fileData);\par
170     {\cf18 bool} decodeWaveFile (std::vector<uint8_t>& fileData);\par
171     {\cf18 bool} decodeAiffFile (std::vector<uint8_t>& fileData);\par
172     \par
173     {\cf20 //=============================================================}\par
174     {\cf18 bool} saveToWaveFile (std::string filePath);\par
175     {\cf18 bool} saveToAiffFile (std::string filePath);\par
176     \par
177     {\cf20 //=============================================================}\par
178     {\cf18 void} clearAudioBuffer();\par
179     \par
180     {\cf20 //=============================================================}\par
181     int32_t fourBytesToInt (std::vector<uint8_t>& source, {\cf18 int} startIndex, Endianness endianness = Endianness::LittleEndian);\par
182     int16_t twoBytesToInt (std::vector<uint8_t>& source, {\cf18 int} startIndex, Endianness endianness = Endianness::LittleEndian);\par
183     {\cf18 int} getIndexOfString (std::vector<uint8_t>& source, std::string s);\par
184     {\cf18 int} getIndexOfChunk (std::vector<uint8_t>& source, {\cf17 const} std::string& chunkHeaderID, {\cf18 int} startIndex, Endianness endianness = Endianness::LittleEndian);\par
185     \par
186     {\cf20 //=============================================================}\par
187     T sixteenBitIntToSample (int16_t sample);\par
188     int16_t sampleToSixteenBitInt (T sample);\par
189     \par
190     {\cf20 //=============================================================}\par
191     uint8_t sampleToSingleByte (T sample);\par
192     T singleByteToSample (uint8_t sample);\par
193     \par
194     uint32_t getAiffSampleRate (std::vector<uint8_t>& fileData, {\cf18 int} sampleRateStartIndex);\par
195     {\cf18 bool} tenByteMatch (std::vector<uint8_t>& v1, {\cf18 int} startIndex1, std::vector<uint8_t>& v2, {\cf18 int} startIndex2);\par
196     {\cf18 void} addSampleRateToAiffData (std::vector<uint8_t>& fileData, uint32_t sampleRate);\par
197     T clamp (T v1, T minValue, T maxValue);\par
198     \par
199     {\cf20 //=============================================================}\par
200     {\cf18 void} addStringToFileData (std::vector<uint8_t>& fileData, std::string s);\par
201     {\cf18 void} addInt32ToFileData (std::vector<uint8_t>& fileData, int32_t i, Endianness endianness = Endianness::LittleEndian);\par
202     {\cf18 void} addInt16ToFileData (std::vector<uint8_t>& fileData, int16_t i, Endianness endianness = Endianness::LittleEndian);\par
203     \par
204     {\cf20 //=============================================================}\par
205     {\cf18 bool} writeDataToFile (std::vector<uint8_t>& fileData, std::string filePath);\par
206     \par
207     {\cf20 //=============================================================}\par
208     {\cf18 void} reportError (std::string errorMessage);\par
209     \par
210     {\cf20 //=============================================================}\par
211     AudioFileFormat audioFileFormat;\par
212     uint32_t sampleRate;\par
213     {\cf18 int} bitDepth;\par
214     {\cf18 bool} logErrorsToConsole \{{\cf17 true}\};\par
215 \};\par
216 \par
217 \par
218 {\cf20 //=============================================================}\par
219 {\cf20 // Pre-defined 10-byte representations of common sample rates}\par
220 {\cf17 static} std::unordered_map <uint32_t, std::vector<uint8_t>> aiffSampleRateTable = \{\par
221     \{8000, \{64, 11, 250, 0, 0, 0, 0, 0, 0, 0\}\},\par
222     \{11025, \{64, 12, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
223     \{16000, \{64, 12, 250, 0, 0, 0, 0, 0, 0, 0\}\},\par
224     \{22050, \{64, 13, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
225     \{32000, \{64, 13, 250, 0, 0, 0, 0, 0, 0, 0\}\},\par
226     \{37800, \{64, 14, 147, 168, 0, 0, 0, 0, 0, 0\}\},\par
227     \{44056, \{64, 14, 172, 24, 0, 0, 0, 0, 0, 0\}\},\par
228     \{44100, \{64, 14, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
229     \{47250, \{64, 14, 184, 146, 0, 0, 0, 0, 0, 0\}\},\par
230     \{48000, \{64, 14, 187, 128, 0, 0, 0, 0, 0, 0\}\},\par
231     \{50000, \{64, 14, 195, 80, 0, 0, 0, 0, 0, 0\}\},\par
232     \{50400, \{64, 14, 196, 224, 0, 0, 0, 0, 0, 0\}\},\par
233     \{88200, \{64, 15, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
234     \{96000, \{64, 15, 187, 128, 0, 0, 0, 0, 0, 0\}\},\par
235     \{176400, \{64, 16, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
236     \{192000, \{64, 16, 187, 128, 0, 0, 0, 0, 0, 0\}\},\par
237     \{352800, \{64, 17, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
238     \{2822400, \{64, 20, 172, 68, 0, 0, 0, 0, 0, 0\}\},\par
239     \{5644800, \{64, 21, 172, 68, 0, 0, 0, 0, 0, 0\}\}\par
240 \};\par
241 \par
242 {\cf20 //=============================================================}\par
243 {\cf17 enum} WavAudioFormat\par
244 \{\par
245     PCM = 0x0001,\par
246     IEEEFloat = 0x0003,\par
247     ALaw = 0x0006,\par
248     MULaw = 0x0007,\par
249     Extensible = 0xFFFE\par
250 \};\par
251 \par
252 {\cf20 //=============================================================}\par
253 {\cf17 enum} AIFFAudioFormat\par
254 \{\par
255     Uncompressed,\par
256     Compressed,\par
257     Error\par
258 \};\par
259 \par
260 {\cf20 //=============================================================}\par
261 {\cf20 /* IMPLEMENTATION */}\par
262 {\cf20 //=============================================================}\par
263 \par
264 {\cf20 //=============================================================}\par
265 {\cf17 template} <{\cf17 class} T>\par
266 AudioFile<T>::AudioFile()\par
267 \{\par
268     {\cf17 static_assert}(std::is_floating_point<T>::value, {\cf22 "ERROR: This version of AudioFile only supports floating point sample formats"});\par
269 \par
270     bitDepth = 16;\par
271     sampleRate = 44100;\par
272     samples.resize (1);\par
273     samples[0].resize (0);\par
274     audioFileFormat = AudioFileFormat::NotLoaded;\par
275 \}\par
276 \par
277 {\cf20 //=============================================================}\par
278 {\cf17 template} <{\cf17 class} T>\par
279 AudioFile<T>::AudioFile (std::string filePath)\par
280  :  AudioFile<T>()\par
281 \{\par
282     load (filePath);\par
283 \}\par
284 \par
285 {\cf20 //=============================================================}\par
286 {\cf17 template} <{\cf17 class} T>\par
287 uint32_t AudioFile<T>::getSampleRate(){\cf17  const}\par
288 {\cf17 }\{\par
289     {\cf19 return} sampleRate;\par
290 \}\par
291 \par
292 {\cf20 //=============================================================}\par
293 {\cf17 template} <{\cf17 class} T>\par
294 {\cf18 int} AudioFile<T>::getNumChannels(){\cf17  const}\par
295 {\cf17 }\{\par
296     {\cf19 return} ({\cf18 int})samples.size();\par
297 \}\par
298 \par
299 {\cf20 //=============================================================}\par
300 {\cf17 template} <{\cf17 class} T>\par
301 {\cf18 bool} AudioFile<T>::isMono(){\cf17  const}\par
302 {\cf17 }\{\par
303     {\cf19 return} getNumChannels() == 1;\par
304 \}\par
305 \par
306 {\cf20 //=============================================================}\par
307 {\cf17 template} <{\cf17 class} T>\par
308 {\cf18 bool} AudioFile<T>::isStereo(){\cf17  const}\par
309 {\cf17 }\{\par
310     {\cf19 return} getNumChannels() == 2;\par
311 \}\par
312 \par
313 {\cf20 //=============================================================}\par
314 {\cf17 template} <{\cf17 class} T>\par
315 {\cf18 int} AudioFile<T>::getBitDepth(){\cf17  const}\par
316 {\cf17 }\{\par
317     {\cf19 return} bitDepth;\par
318 \}\par
319 \par
320 {\cf20 //=============================================================}\par
321 {\cf17 template} <{\cf17 class} T>\par
322 {\cf18 int} AudioFile<T>::getNumSamplesPerChannel(){\cf17  const}\par
323 {\cf17 }\{\par
324     {\cf19 if} (samples.size() > 0)\par
325         {\cf19 return} ({\cf18 int}) samples[0].size();\par
326     {\cf19 else}\par
327         {\cf19 return} 0;\par
328 \}\par
329 \par
330 {\cf20 //=============================================================}\par
331 {\cf17 template} <{\cf17 class} T>\par
332 {\cf18 double} AudioFile<T>::getLengthInSeconds(){\cf17  const}\par
333 {\cf17 }\{\par
334     {\cf19 return} ({\cf18 double})getNumSamplesPerChannel() / (double)sampleRate;\par
335 \}\par
336 \par
337 {\cf20 //=============================================================}\par
338 {\cf17 template} <{\cf17 class} T>\par
339 {\cf18 void} AudioFile<T>::printSummary(){\cf17  const}\par
340 {\cf17 }\{\par
341     std::cout << {\cf22 "|======================================|"} << std::endl;\par
342     std::cout << {\cf22 "Num Channels: "} << getNumChannels() << std::endl;\par
343     std::cout << {\cf22 "Num Samples Per Channel: "} << getNumSamplesPerChannel() << std::endl;\par
344     std::cout << {\cf22 "Sample Rate: "} << sampleRate << std::endl;\par
345     std::cout << {\cf22 "Bit Depth: "} << bitDepth << std::endl;\par
346     std::cout << {\cf22 "Length in Seconds: "} << getLengthInSeconds() << std::endl;\par
347     std::cout << {\cf22 "|======================================|"} << std::endl;\par
348 \}\par
349 \par
350 {\cf20 //=============================================================}\par
351 {\cf17 template} <{\cf17 class} T>\par
352 {\cf18 bool} AudioFile<T>::setAudioBuffer (AudioBuffer& newBuffer)\par
353 \{\par
354     {\cf18 int} numChannels = (int)newBuffer.size();\par
355     \par
356     {\cf19 if} (numChannels <= 0)\par
357     \{\par
358         assert ({\cf17 false} && {\cf22 "The buffer your are trying to use has no channels"});\par
359         {\cf19 return} {\cf17 false};\par
360     \}\par
361     \par
362     {\cf18 size_t} numSamples = newBuffer[0].size();\par
363     \par
364     {\cf20 // set the number of channels}\par
365     samples.resize (newBuffer.size());\par
366     \par
367     {\cf19 for} ({\cf18 int} k = 0; k < getNumChannels(); k++)\par
368     \{\par
369         assert (newBuffer[k].size() == numSamples);\par
370         \par
371         samples[k].resize (numSamples);\par
372         \par
373         {\cf19 for} ({\cf18 size_t} i = 0; i < numSamples; i++)\par
374         \{\par
375             samples[k][i] = newBuffer[k][i];\par
376         \}\par
377     \}\par
378     \par
379     {\cf19 return} {\cf17 true};\par
380 \}\par
381 \par
382 {\cf20 //=============================================================}\par
383 {\cf17 template} <{\cf17 class} T>\par
384 {\cf18 void} AudioFile<T>::setAudioBufferSize ({\cf18 int} numChannels, {\cf18 int} numSamples)\par
385 \{\par
386     samples.resize (numChannels);\par
387     setNumSamplesPerChannel (numSamples);\par
388 \}\par
389 \par
390 {\cf20 //=============================================================}\par
391 {\cf17 template} <{\cf17 class} T>\par
392 {\cf18 void} AudioFile<T>::setNumSamplesPerChannel ({\cf18 int} numSamples)\par
393 \{\par
394     {\cf18 int} originalSize = getNumSamplesPerChannel();\par
395     \par
396     {\cf19 for} ({\cf18 int} i = 0; i < getNumChannels();i++)\par
397     \{\par
398         samples[i].resize (numSamples);\par
399         \par
400         {\cf20 // set any new samples to zero}\par
401         {\cf19 if} (numSamples > originalSize)\par
402             std::fill (samples[i].begin() + originalSize, samples[i].end(), (T)0.);\par
403     \}\par
404 \}\par
405 \par
406 {\cf20 //=============================================================}\par
407 {\cf17 template} <{\cf17 class} T>\par
408 {\cf18 void} AudioFile<T>::setNumChannels ({\cf18 int} numChannels)\par
409 \{\par
410     {\cf18 int} originalNumChannels = getNumChannels();\par
411     {\cf18 int} originalNumSamplesPerChannel = getNumSamplesPerChannel();\par
412     \par
413     samples.resize (numChannels);\par
414     \par
415     {\cf20 // make sure any new channels are set to the right size}\par
416     {\cf20 // and filled with zeros}\par
417     {\cf19 if} (numChannels > originalNumChannels)\par
418     \{\par
419         {\cf19 for} ({\cf18 int} i = originalNumChannels; i < numChannels; i++)\par
420         \{\par
421             samples[i].resize (originalNumSamplesPerChannel);\par
422             std::fill (samples[i].begin(), samples[i].end(), (T)0.);\par
423         \}\par
424     \}\par
425 \}\par
426 \par
427 {\cf20 //=============================================================}\par
428 {\cf17 template} <{\cf17 class} T>\par
429 {\cf18 void} AudioFile<T>::setBitDepth ({\cf18 int} numBitsPerSample)\par
430 \{\par
431     bitDepth = numBitsPerSample;\par
432 \}\par
433 \par
434 {\cf20 //=============================================================}\par
435 {\cf17 template} <{\cf17 class} T>\par
436 {\cf18 void} AudioFile<T>::setSampleRate (uint32_t newSampleRate)\par
437 \{\par
438     sampleRate = newSampleRate;\par
439 \}\par
440 \par
441 {\cf20 //=============================================================}\par
442 {\cf17 template} <{\cf17 class} T>\par
443 {\cf18 void} AudioFile<T>::shouldLogErrorsToConsole ({\cf18 bool} logErrors)\par
444 \{\par
445     logErrorsToConsole = logErrors;\par
446 \}\par
447 \par
448 {\cf20 //=============================================================}\par
449 {\cf17 template} <{\cf17 class} T>\par
450 {\cf18 bool} AudioFile<T>::load (std::string filePath)\par
451 \{\par
452     std::ifstream file (filePath, std::ios::binary);\par
453     \par
454     {\cf20 // check the file exists}\par
455     {\cf19 if} (! file.good())\par
456     \{\par
457         reportError ({\cf22 "ERROR: File doesn't exist or otherwise can't load file\\n"}  + filePath);\par
458         {\cf19 return} {\cf17 false};\par
459     \}\par
460     \par
461     std::vector<uint8_t> fileData;\par
462 \par
463     file.unsetf (std::ios::skipws);\par
464 \par
465     file.seekg (0, std::ios::end);\par
466     {\cf18 size_t} length = file.tellg();\par
467     file.seekg (0, std::ios::beg);\par
468 \par
469     {\cf20 // allocate}\par
470     fileData.resize (length);\par
471 \par
472     file.read({\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >} (fileData.data()), length);\par
473     file.close();\par
474 \par
475     {\cf19 if} (file.gcount() != length)\par
476     \{\par
477         reportError ({\cf22 "ERROR: Couldn't read entire file\\n"} + filePath);\par
478         {\cf19 return} {\cf17 false};\par
479     \}\par
480     \par
481     {\cf20 // get audio file format}\par
482     audioFileFormat = determineAudioFileFormat (fileData);\par
483     \par
484     {\cf19 if} (audioFileFormat == AudioFileFormat::Wave)\par
485     \{\par
486         {\cf19 return} decodeWaveFile (fileData);\par
487     \}\par
488     {\cf19 else} {\cf19 if} (audioFileFormat == AudioFileFormat::Aiff)\par
489     \{\par
490         {\cf19 return} decodeAiffFile (fileData);\par
491     \}\par
492     {\cf19 else}\par
493     \{\par
494         reportError ({\cf22 "Audio File Type: Error"});\par
495         {\cf19 return} {\cf17 false};\par
496     \}\par
497 \}\par
498 \par
499 {\cf20 //=============================================================}\par
500 {\cf17 template} <{\cf17 class} T>\par
501 {\cf18 bool} AudioFile<T>::decodeWaveFile (std::vector<uint8_t>& fileData)\par
502 \{\par
503     {\cf20 // -----------------------------------------------------------}\par
504     {\cf20 // HEADER CHUNK}\par
505     std::string headerChunkID (fileData.begin(), fileData.begin() + 4);\par
506     {\cf20 //int32_t fileSizeInBytes = fourBytesToInt (fileData, 4) + 8;}\par
507     std::string format (fileData.begin() + 8, fileData.begin() + 12);\par
508     \par
509     {\cf20 // -----------------------------------------------------------}\par
510     {\cf20 // try and find the start points of key chunks}\par
511     {\cf18 int} indexOfDataChunk = getIndexOfChunk (fileData, {\cf22 "data"}, 12);\par
512     {\cf18 int} indexOfFormatChunk = getIndexOfChunk (fileData, {\cf22 "fmt "}, 12);\par
513     {\cf18 int} indexOfXMLChunk = getIndexOfChunk (fileData, {\cf22 "iXML"}, 12);\par
514     \par
515     {\cf20 // if we can't find the data or format chunks, or the IDs/formats don't seem to be as expected}\par
516     {\cf20 // then it is unlikely we'll able to read this file, so abort}\par
517     {\cf19 if} (indexOfDataChunk == -1 || indexOfFormatChunk == -1 || headerChunkID != {\cf22 "RIFF"} || format != {\cf22 "WAVE"})\par
518     \{\par
519         reportError ({\cf22 "ERROR: this doesn't seem to be a valid .WAV file"});\par
520         {\cf19 return} {\cf17 false};\par
521     \}\par
522     \par
523     {\cf20 // -----------------------------------------------------------}\par
524     {\cf20 // FORMAT CHUNK}\par
525     {\cf18 int} f = indexOfFormatChunk;\par
526     std::string formatChunkID (fileData.begin() + f, fileData.begin() + f + 4);\par
527     {\cf20 //int32_t formatChunkSize = fourBytesToInt (fileData, f + 4);}\par
528     uint16_t audioFormat = twoBytesToInt (fileData, f + 8);\par
529     uint16_t numChannels = twoBytesToInt (fileData, f + 10);\par
530     sampleRate = (uint32_t) fourBytesToInt (fileData, f + 12);\par
531     uint32_t numBytesPerSecond = fourBytesToInt (fileData, f + 16);\par
532     uint16_t numBytesPerBlock = twoBytesToInt (fileData, f + 20);\par
533     bitDepth = (int) twoBytesToInt (fileData, f + 22);\par
534     \par
535     uint16_t numBytesPerSample = {\cf17 static_cast<}uint16_t{\cf17 >} (bitDepth) / 8;\par
536     \par
537     {\cf20 // check that the audio format is PCM or Float or extensible}\par
538     {\cf19 if} (audioFormat != WavAudioFormat::PCM && audioFormat != WavAudioFormat::IEEEFloat && audioFormat != WavAudioFormat::Extensible)\par
539     \{\par
540         reportError ({\cf22 "ERROR: this .WAV file is encoded in a format that this library does not support at present"});\par
541         {\cf19 return} {\cf17 false};\par
542     \}\par
543     \par
544     {\cf20 // check the number of channels is mono or stereo}\par
545     {\cf19 if} (numChannels < 1 || numChannels > 128)\par
546     \{\par
547         reportError ({\cf22 "ERROR: this WAV file seems to be an invalid number of channels (or corrupted?)"});\par
548         {\cf19 return} {\cf17 false};\par
549     \}\par
550     \par
551     {\cf20 // check header data is consistent}\par
552     {\cf19 if} (numBytesPerSecond != {\cf17 static_cast<}uint32_t{\cf17 >} ((numChannels * sampleRate * bitDepth) / 8) || numBytesPerBlock != (numChannels * numBytesPerSample))\par
553     \{\par
554         reportError ({\cf22 "ERROR: the header data in this WAV file seems to be inconsistent"});\par
555         {\cf19 return} {\cf17 false};\par
556     \}\par
557     \par
558     {\cf20 // check bit depth is either 8, 16, 24 or 32 bit}\par
559     {\cf19 if} (bitDepth != 8 && bitDepth != 16 && bitDepth != 24 && bitDepth != 32)\par
560     \{\par
561         reportError ({\cf22 "ERROR: this file has a bit depth that is not 8, 16, 24 or 32 bits"});\par
562         {\cf19 return} {\cf17 false};\par
563     \}\par
564     \par
565     {\cf20 // -----------------------------------------------------------}\par
566     {\cf20 // DATA CHUNK}\par
567     {\cf18 int} d = indexOfDataChunk;\par
568     std::string dataChunkID (fileData.begin() + d, fileData.begin() + d + 4);\par
569     int32_t dataChunkSize = fourBytesToInt (fileData, d + 4);\par
570     \par
571     {\cf18 int} numSamples = dataChunkSize / (numChannels * bitDepth / 8);\par
572     {\cf18 int} samplesStartIndex = indexOfDataChunk + 8;\par
573     \par
574     clearAudioBuffer();\par
575     samples.resize (numChannels);\par
576     \par
577     {\cf19 for} ({\cf18 int} i = 0; i < numSamples; i++)\par
578     \{\par
579         {\cf19 for} ({\cf18 int} channel = 0; channel < numChannels; channel++)\par
580         \{\par
581             {\cf18 int} sampleIndex = samplesStartIndex + (numBytesPerBlock * i) + channel * numBytesPerSample;\par
582             \par
583             {\cf19 if} ((sampleIndex + (bitDepth / 8) - 1) >= fileData.size())\par
584             \{\par
585                 reportError ({\cf22 "ERROR: read file error as the metadata indicates more samples than there are in the file data"});\par
586                 {\cf19 return} {\cf17 false};\par
587             \}\par
588             \par
589             {\cf19 if} (bitDepth == 8)\par
590             \{\par
591                 T sample = singleByteToSample (fileData[sampleIndex]);\par
592                 samples[channel].push_back (sample);\par
593             \}\par
594             {\cf19 else} {\cf19 if} (bitDepth == 16)\par
595             \{\par
596                 int16_t sampleAsInt = twoBytesToInt (fileData, sampleIndex);\par
597                 T sample = sixteenBitIntToSample (sampleAsInt);\par
598                 samples[channel].push_back (sample);\par
599             \}\par
600             {\cf19 else} {\cf19 if} (bitDepth == 24)\par
601             \{\par
602                 int32_t sampleAsInt = 0;\par
603                 sampleAsInt = (fileData[sampleIndex + 2] << 16) | (fileData[sampleIndex + 1] << 8) | fileData[sampleIndex];\par
604                 \par
605                 {\cf19 if} (sampleAsInt & 0x800000) {\cf20 //  if the 24th bit is set, this is a negative number in 24-bit world}\par
606                     sampleAsInt = sampleAsInt | ~0xFFFFFF; {\cf20 // so make sure sign is extended to the 32 bit float}\par
607 \par
608                 T sample = (T)sampleAsInt / (T)8388608.;\par
609                 samples[channel].push_back (sample);\par
610             \}\par
611             {\cf19 else} {\cf19 if} (bitDepth == 32)\par
612             \{\par
613                 int32_t sampleAsInt = fourBytesToInt (fileData, sampleIndex);\par
614                 T sample;\par
615                 \par
616                 {\cf19 if} (audioFormat == WavAudioFormat::IEEEFloat)\par
617                     sample = (T){\cf17 reinterpret_cast<}{\cf18 float}&{\cf17 >} (sampleAsInt);\par
618                 {\cf19 else} {\cf20 // assume PCM}\par
619                     sample = (T) sampleAsInt / {\cf17 static_cast<}{\cf18 float}{\cf17 >} (std::numeric_limits<std::int32_t>::max());\par
620                 \par
621                 samples[channel].push_back (sample);\par
622             \}\par
623             {\cf19 else}\par
624             \{\par
625                 assert ({\cf17 false});\par
626             \}\par
627         \}\par
628     \}\par
629 \par
630     {\cf20 // -----------------------------------------------------------}\par
631     {\cf20 // iXML CHUNK}\par
632     {\cf19 if} (indexOfXMLChunk != -1)\par
633     \{\par
634         int32_t chunkSize = fourBytesToInt (fileData, indexOfXMLChunk + 4);\par
635         iXMLChunk = std::string (({\cf17 const} {\cf18 char}*) &fileData[indexOfXMLChunk + 8], chunkSize);\par
636     \}\par
637 \par
638     {\cf19 return} {\cf17 true};\par
639 \}\par
640 \par
641 {\cf20 //=============================================================}\par
642 {\cf17 template} <{\cf17 class} T>\par
643 {\cf18 bool} AudioFile<T>::decodeAiffFile (std::vector<uint8_t>& fileData)\par
644 \{\par
645     {\cf20 // -----------------------------------------------------------}\par
646     {\cf20 // HEADER CHUNK}\par
647     std::string headerChunkID (fileData.begin(), fileData.begin() + 4);\par
648     {\cf20 //int32_t fileSizeInBytes = fourBytesToInt (fileData, 4, Endianness::BigEndian) + 8;}\par
649     std::string format (fileData.begin() + 8, fileData.begin() + 12);\par
650     \par
651     {\cf18 int} audioFormat = format == {\cf22 "AIFF"} ? AIFFAudioFormat::Uncompressed : format == {\cf22 "AIFC"} ? AIFFAudioFormat::Compressed : AIFFAudioFormat::Error;\par
652     \par
653     {\cf20 // -----------------------------------------------------------}\par
654     {\cf20 // try and find the start points of key chunks}\par
655     {\cf18 int} indexOfCommChunk = getIndexOfChunk (fileData, {\cf22 "COMM"}, 12, Endianness::BigEndian);\par
656     {\cf18 int} indexOfSoundDataChunk = getIndexOfChunk (fileData, {\cf22 "SSND"}, 12, Endianness::BigEndian);\par
657     {\cf18 int} indexOfXMLChunk = getIndexOfChunk (fileData, {\cf22 "iXML"}, 12, Endianness::BigEndian);\par
658     \par
659     {\cf20 // if we can't find the data or format chunks, or the IDs/formats don't seem to be as expected}\par
660     {\cf20 // then it is unlikely we'll able to read this file, so abort}\par
661     {\cf19 if} (indexOfSoundDataChunk == -1 || indexOfCommChunk == -1 || headerChunkID != {\cf22 "FORM"} || audioFormat == AIFFAudioFormat::Error)\par
662     \{\par
663         reportError ({\cf22 "ERROR: this doesn't seem to be a valid AIFF file"});\par
664         {\cf19 return} {\cf17 false};\par
665     \}\par
666 \par
667     {\cf20 // -----------------------------------------------------------}\par
668     {\cf20 // COMM CHUNK}\par
669     {\cf18 int} p = indexOfCommChunk;\par
670     std::string commChunkID (fileData.begin() + p, fileData.begin() + p + 4);\par
671     {\cf20 //int32_t commChunkSize = fourBytesToInt (fileData, p + 4, Endianness::BigEndian);}\par
672     int16_t numChannels = twoBytesToInt (fileData, p + 8, Endianness::BigEndian);\par
673     int32_t numSamplesPerChannel = fourBytesToInt (fileData, p + 10, Endianness::BigEndian);\par
674     bitDepth = (int) twoBytesToInt (fileData, p + 14, Endianness::BigEndian);\par
675     sampleRate = getAiffSampleRate (fileData, p + 16);\par
676     \par
677     {\cf20 // check the sample rate was properly decoded}\par
678     {\cf19 if} (sampleRate == 0)\par
679     \{\par
680         reportError ({\cf22 "ERROR: this AIFF file has an unsupported sample rate"});\par
681         {\cf19 return} {\cf17 false};\par
682     \}\par
683     \par
684     {\cf20 // check the number of channels is mono or stereo}\par
685     {\cf19 if} (numChannels < 1 ||numChannels > 2)\par
686     \{\par
687         reportError ({\cf22 "ERROR: this AIFF file seems to be neither mono nor stereo (perhaps multi-track, or corrupted?)"});\par
688         {\cf19 return} {\cf17 false};\par
689     \}\par
690     \par
691     {\cf20 // check bit depth is either 8, 16, 24 or 32-bit}\par
692     {\cf19 if} (bitDepth != 8 && bitDepth != 16 && bitDepth != 24 && bitDepth != 32)\par
693     \{\par
694         reportError ({\cf22 "ERROR: this file has a bit depth that is not 8, 16, 24 or 32 bits"});\par
695         {\cf19 return} {\cf17 false};\par
696     \}\par
697     \par
698     {\cf20 // -----------------------------------------------------------}\par
699     {\cf20 // SSND CHUNK}\par
700     {\cf18 int} s = indexOfSoundDataChunk;\par
701     std::string soundDataChunkID (fileData.begin() + s, fileData.begin() + s + 4);\par
702     int32_t soundDataChunkSize = fourBytesToInt (fileData, s + 4, Endianness::BigEndian);\par
703     int32_t offset = fourBytesToInt (fileData, s + 8, Endianness::BigEndian);\par
704     {\cf20 //int32_t blockSize = fourBytesToInt (fileData, s + 12, Endianness::BigEndian);}\par
705     \par
706     {\cf18 int} numBytesPerSample = bitDepth / 8;\par
707     {\cf18 int} numBytesPerFrame = numBytesPerSample * numChannels;\par
708     {\cf18 int} totalNumAudioSampleBytes = numSamplesPerChannel * numBytesPerFrame;\par
709     {\cf18 int} samplesStartIndex = s + 16 + (int)offset;\par
710         \par
711     {\cf20 // sanity check the data}\par
712     {\cf19 if} ((soundDataChunkSize - 8) != totalNumAudioSampleBytes || totalNumAudioSampleBytes > {\cf17 static_cast<}{\cf18 long}{\cf17 >}(fileData.size() - samplesStartIndex))\par
713     \{\par
714         reportError ({\cf22 "ERROR: the metadatafor this file doesn't seem right"});\par
715         {\cf19 return} {\cf17 false};\par
716     \}\par
717     \par
718     clearAudioBuffer();\par
719     samples.resize (numChannels);\par
720     \par
721     {\cf19 for} ({\cf18 int} i = 0; i < numSamplesPerChannel; i++)\par
722     \{\par
723         {\cf19 for} ({\cf18 int} channel = 0; channel < numChannels; channel++)\par
724         \{\par
725             {\cf18 int} sampleIndex = samplesStartIndex + (numBytesPerFrame * i) + channel * numBytesPerSample;\par
726             \par
727             {\cf19 if} ((sampleIndex + (bitDepth / 8) - 1) >= fileData.size())\par
728             \{\par
729                 reportError ({\cf22 "ERROR: read file error as the metadata indicates more samples than there are in the file data"});\par
730                 {\cf19 return} {\cf17 false};\par
731             \}\par
732             \par
733             {\cf19 if} (bitDepth == 8)\par
734             \{\par
735                 int8_t sampleAsSigned8Bit = (int8_t)fileData[sampleIndex];\par
736                 T sample = (T)sampleAsSigned8Bit / (T)128.;\par
737                 samples[channel].push_back (sample);\par
738             \}\par
739             {\cf19 else} {\cf19 if} (bitDepth == 16)\par
740             \{\par
741                 int16_t sampleAsInt = twoBytesToInt (fileData, sampleIndex, Endianness::BigEndian);\par
742                 T sample = sixteenBitIntToSample (sampleAsInt);\par
743                 samples[channel].push_back (sample);\par
744             \}\par
745             {\cf19 else} {\cf19 if} (bitDepth == 24)\par
746             \{\par
747                 int32_t sampleAsInt = 0;\par
748                 sampleAsInt = (fileData[sampleIndex] << 16) | (fileData[sampleIndex + 1] << 8) | fileData[sampleIndex + 2];\par
749                 \par
750                 {\cf19 if} (sampleAsInt & 0x800000) {\cf20 //  if the 24th bit is set, this is a negative number in 24-bit world}\par
751                     sampleAsInt = sampleAsInt | ~0xFFFFFF; {\cf20 // so make sure sign is extended to the 32 bit float}\par
752                 \par
753                 T sample = (T)sampleAsInt / (T)8388608.;\par
754                 samples[channel].push_back (sample);\par
755             \}\par
756             {\cf19 else} {\cf19 if} (bitDepth == 32)\par
757             \{\par
758                 int32_t sampleAsInt = fourBytesToInt (fileData, sampleIndex, Endianness::BigEndian);\par
759                 T sample;\par
760                 \par
761                 {\cf19 if} (audioFormat == AIFFAudioFormat::Compressed)\par
762                     sample = (T){\cf17 reinterpret_cast<}{\cf18 float}&{\cf17 >} (sampleAsInt);\par
763                 {\cf19 else} {\cf20 // assume uncompressed}\par
764                     sample = (T) sampleAsInt / {\cf17 static_cast<}{\cf18 float}{\cf17 >} (std::numeric_limits<std::int32_t>::max());\par
765                     \par
766                 samples[channel].push_back (sample);\par
767             \}\par
768             {\cf19 else}\par
769             \{\par
770                 assert ({\cf17 false});\par
771             \}\par
772         \}\par
773     \}\par
774 \par
775     {\cf20 // -----------------------------------------------------------}\par
776     {\cf20 // iXML CHUNK}\par
777     {\cf19 if} (indexOfXMLChunk != -1)\par
778     \{\par
779         int32_t chunkSize = fourBytesToInt (fileData, indexOfXMLChunk + 4);\par
780         iXMLChunk = std::string (({\cf17 const} {\cf18 char}*) &fileData[indexOfXMLChunk + 8], chunkSize);\par
781     \}\par
782     \par
783     {\cf19 return} {\cf17 true};\par
784 \}\par
785 \par
786 {\cf20 //=============================================================}\par
787 {\cf17 template} <{\cf17 class} T>\par
788 uint32_t AudioFile<T>::getAiffSampleRate (std::vector<uint8_t>& fileData, {\cf18 int} sampleRateStartIndex)\par
789 \{\par
790     {\cf19 for} ({\cf17 auto} it : aiffSampleRateTable)\par
791     \{\par
792         {\cf19 if} (tenByteMatch (fileData, sampleRateStartIndex, it.second, 0))\par
793             {\cf19 return} it.first;\par
794     \}\par
795     \par
796     {\cf19 return} 0;\par
797 \}\par
798 \par
799 {\cf20 //=============================================================}\par
800 {\cf17 template} <{\cf17 class} T>\par
801 {\cf18 bool} AudioFile<T>::tenByteMatch (std::vector<uint8_t>& v1, {\cf18 int} startIndex1, std::vector<uint8_t>& v2, {\cf18 int} startIndex2)\par
802 \{\par
803     {\cf19 for} ({\cf18 int} i = 0; i < 10; i++)\par
804     \{\par
805         {\cf19 if} (v1[startIndex1 + i] != v2[startIndex2 + i])\par
806             {\cf19 return} {\cf17 false};\par
807     \}\par
808     \par
809     {\cf19 return} {\cf17 true};\par
810 \}\par
811 \par
812 {\cf20 //=============================================================}\par
813 {\cf17 template} <{\cf17 class} T>\par
814 {\cf18 void} AudioFile<T>::addSampleRateToAiffData (std::vector<uint8_t>& fileData, uint32_t sampleRate)\par
815 \{\par
816     {\cf19 if} (aiffSampleRateTable.count (sampleRate) > 0)\par
817     \{\par
818         {\cf19 for} ({\cf18 int} i = 0; i < 10; i++)\par
819             fileData.push_back (aiffSampleRateTable[sampleRate][i]);\par
820     \}\par
821 \}\par
822 \par
823 {\cf20 //=============================================================}\par
824 {\cf17 template} <{\cf17 class} T>\par
825 {\cf18 bool} AudioFile<T>::save (std::string filePath, AudioFileFormat format)\par
826 \{\par
827     {\cf19 if} (format == AudioFileFormat::Wave)\par
828     \{\par
829         {\cf19 return} saveToWaveFile (filePath);\par
830     \}\par
831     {\cf19 else} {\cf19 if} (format == AudioFileFormat::Aiff)\par
832     \{\par
833         {\cf19 return} saveToAiffFile (filePath);\par
834     \}\par
835     \par
836     {\cf19 return} {\cf17 false};\par
837 \}\par
838 \par
839 {\cf20 //=============================================================}\par
840 {\cf17 template} <{\cf17 class} T>\par
841 {\cf18 bool} AudioFile<T>::saveToWaveFile (std::string filePath)\par
842 \{\par
843     std::vector<uint8_t> fileData;\par
844     \par
845     int32_t dataChunkSize = getNumSamplesPerChannel() * (getNumChannels() * bitDepth / 8);\par
846     int16_t audioFormat = bitDepth == 32 ? WavAudioFormat::IEEEFloat : WavAudioFormat::PCM;\par
847     int32_t formatChunkSize = audioFormat == WavAudioFormat::PCM ? 16 : 18;\par
848     int32_t iXMLChunkSize = {\cf17 static_cast<}int32_t{\cf17 >} (iXMLChunk.size());\par
849     \par
850     {\cf20 // -----------------------------------------------------------}\par
851     {\cf20 // HEADER CHUNK}\par
852     addStringToFileData (fileData, {\cf22 "RIFF"});\par
853     \par
854     {\cf20 // The file size in bytes is the header chunk size (4, not counting RIFF and WAVE) + the format}\par
855     {\cf20 // chunk size (24) + the metadata part of the data chunk plus the actual data chunk size}\par
856     int32_t fileSizeInBytes = 4 + formatChunkSize + 8 + 8 + dataChunkSize;\par
857     {\cf19 if} (iXMLChunkSize > 0)\par
858     \{\par
859         fileSizeInBytes += (8 + iXMLChunkSize);\par
860     \}\par
861 \par
862     addInt32ToFileData (fileData, fileSizeInBytes);\par
863     \par
864     addStringToFileData (fileData, {\cf22 "WAVE"});\par
865     \par
866     {\cf20 // -----------------------------------------------------------}\par
867     {\cf20 // FORMAT CHUNK}\par
868     addStringToFileData (fileData, {\cf22 "fmt "});\par
869     addInt32ToFileData (fileData, formatChunkSize); {\cf20 // format chunk size (16 for PCM)}\par
870     addInt16ToFileData (fileData, audioFormat); {\cf20 // audio format}\par
871     addInt16ToFileData (fileData, (int16_t)getNumChannels()); {\cf20 // num channels}\par
872     addInt32ToFileData (fileData, (int32_t)sampleRate); {\cf20 // sample rate}\par
873     \par
874     int32_t numBytesPerSecond = (int32_t) ((getNumChannels() * sampleRate * bitDepth) / 8);\par
875     addInt32ToFileData (fileData, numBytesPerSecond);\par
876     \par
877     int16_t numBytesPerBlock = getNumChannels() * (bitDepth / 8);\par
878     addInt16ToFileData (fileData, numBytesPerBlock);\par
879     \par
880     addInt16ToFileData (fileData, (int16_t)bitDepth);\par
881     \par
882     {\cf19 if} (audioFormat == WavAudioFormat::IEEEFloat)\par
883         addInt16ToFileData (fileData, 0); {\cf20 // extension size}\par
884     \par
885     {\cf20 // -----------------------------------------------------------}\par
886     {\cf20 // DATA CHUNK}\par
887     addStringToFileData (fileData, {\cf22 "data"});\par
888     addInt32ToFileData (fileData, dataChunkSize);\par
889     \par
890     {\cf19 for} ({\cf18 int} i = 0; i < getNumSamplesPerChannel(); i++)\par
891     \{\par
892         {\cf19 for} ({\cf18 int} channel = 0; channel < getNumChannels(); channel++)\par
893         \{\par
894             {\cf19 if} (bitDepth == 8)\par
895             \{\par
896                 uint8_t {\cf18 byte} = sampleToSingleByte (samples[channel][i]);\par
897                 fileData.push_back ({\cf18 byte});\par
898             \}\par
899             {\cf19 else} {\cf19 if} (bitDepth == 16)\par
900             \{\par
901                 int16_t sampleAsInt = sampleToSixteenBitInt (samples[channel][i]);\par
902                 addInt16ToFileData (fileData, sampleAsInt);\par
903             \}\par
904             {\cf19 else} {\cf19 if} (bitDepth == 24)\par
905             \{\par
906                 int32_t sampleAsIntAgain = (int32_t) (samples[channel][i] * (T)8388608.);\par
907                 \par
908                 uint8_t bytes[3];\par
909                 bytes[2] = (uint8_t) (sampleAsIntAgain >> 16) & 0xFF;\par
910                 bytes[1] = (uint8_t) (sampleAsIntAgain >>  8) & 0xFF;\par
911                 bytes[0] = (uint8_t) sampleAsIntAgain & 0xFF;\par
912                 \par
913                 fileData.push_back (bytes[0]);\par
914                 fileData.push_back (bytes[1]);\par
915                 fileData.push_back (bytes[2]);\par
916             \}\par
917             {\cf19 else} {\cf19 if} (bitDepth == 32)\par
918             \{\par
919                 int32_t sampleAsInt;\par
920                 \par
921                 {\cf19 if} (audioFormat == WavAudioFormat::IEEEFloat)\par
922                     sampleAsInt = (int32_t) {\cf17 reinterpret_cast<}int32_t&{\cf17 >} (samples[channel][i]);\par
923                 {\cf19 else} {\cf20 // assume PCM}\par
924                     sampleAsInt = (int32_t) (samples[channel][i] * std::numeric_limits<int32_t>::max());\par
925                 \par
926                 addInt32ToFileData (fileData, sampleAsInt, Endianness::LittleEndian);\par
927             \}\par
928             {\cf19 else}\par
929             \{\par
930                 assert ({\cf17 false} && {\cf22 "Trying to write a file with unsupported bit depth"});\par
931                 {\cf19 return} {\cf17 false};\par
932             \}\par
933         \}\par
934     \}\par
935     \par
936     {\cf20 // -----------------------------------------------------------}\par
937     {\cf20 // iXML CHUNK}\par
938     {\cf19 if} (iXMLChunkSize > 0) \par
939     \{\par
940         addStringToFileData (fileData, {\cf22 "iXML"});\par
941         addInt32ToFileData (fileData, iXMLChunkSize);\par
942         addStringToFileData (fileData, iXMLChunk);\par
943     \}\par
944     \par
945     {\cf20 // check that the various sizes we put in the metadata are correct}\par
946     {\cf19 if} (fileSizeInBytes != {\cf17 static_cast<}int32_t{\cf17 >} (fileData.size() - 8) || dataChunkSize != (getNumSamplesPerChannel() * getNumChannels() * (bitDepth / 8)))\par
947     \{\par
948         reportError ({\cf22 "ERROR: couldn't save file to "} + filePath);\par
949         {\cf19 return} {\cf17 false};\par
950     \}\par
951     \par
952     {\cf20 // try to write the file}\par
953     {\cf19 return} writeDataToFile (fileData, filePath);\par
954 \}\par
955 \par
956 {\cf20 //=============================================================}\par
957 {\cf17 template} <{\cf17 class} T>\par
958 {\cf18 bool} AudioFile<T>::saveToAiffFile (std::string filePath)\par
959 \{\par
960     std::vector<uint8_t> fileData;\par
961     \par
962     int32_t numBytesPerSample = bitDepth / 8;\par
963     int32_t numBytesPerFrame = numBytesPerSample * getNumChannels();\par
964     int32_t totalNumAudioSampleBytes = getNumSamplesPerChannel() * numBytesPerFrame;\par
965     int32_t soundDataChunkSize = totalNumAudioSampleBytes + 8;\par
966     int32_t iXMLChunkSize = {\cf17 static_cast<}int32_t{\cf17 >} (iXMLChunk.size());\par
967     \par
968     {\cf20 // -----------------------------------------------------------}\par
969     {\cf20 // HEADER CHUNK}\par
970     addStringToFileData (fileData, {\cf22 "FORM"});\par
971     \par
972     {\cf20 // The file size in bytes is the header chunk size (4, not counting FORM and AIFF) + the COMM}\par
973     {\cf20 // chunk size (26) + the metadata part of the SSND chunk plus the actual data chunk size}\par
974     int32_t fileSizeInBytes = 4 + 26 + 16 + totalNumAudioSampleBytes;\par
975     {\cf19 if} (iXMLChunkSize > 0)\par
976     \{\par
977         fileSizeInBytes += (8 + iXMLChunkSize);\par
978     \}\par
979 \par
980     addInt32ToFileData (fileData, fileSizeInBytes, Endianness::BigEndian);\par
981     \par
982     addStringToFileData (fileData, {\cf22 "AIFF"});\par
983     \par
984     {\cf20 // -----------------------------------------------------------}\par
985     {\cf20 // COMM CHUNK}\par
986     addStringToFileData (fileData, {\cf22 "COMM"});\par
987     addInt32ToFileData (fileData, 18, Endianness::BigEndian); {\cf20 // commChunkSize}\par
988     addInt16ToFileData (fileData, getNumChannels(), Endianness::BigEndian); {\cf20 // num channels}\par
989     addInt32ToFileData (fileData, getNumSamplesPerChannel(), Endianness::BigEndian); {\cf20 // num samples per channel}\par
990     addInt16ToFileData (fileData, bitDepth, Endianness::BigEndian); {\cf20 // bit depth}\par
991     addSampleRateToAiffData (fileData, sampleRate);\par
992     \par
993     {\cf20 // -----------------------------------------------------------}\par
994     {\cf20 // SSND CHUNK}\par
995     addStringToFileData (fileData, {\cf22 "SSND"});\par
996     addInt32ToFileData (fileData, soundDataChunkSize, Endianness::BigEndian);\par
997     addInt32ToFileData (fileData, 0, Endianness::BigEndian); {\cf20 // offset}\par
998     addInt32ToFileData (fileData, 0, Endianness::BigEndian); {\cf20 // block size}\par
999     \par
1000     {\cf19 for} ({\cf18 int} i = 0; i < getNumSamplesPerChannel(); i++)\par
1001     \{\par
1002         {\cf19 for} ({\cf18 int} channel = 0; channel < getNumChannels(); channel++)\par
1003         \{\par
1004             {\cf19 if} (bitDepth == 8)\par
1005             \{\par
1006                 uint8_t {\cf18 byte} = sampleToSingleByte (samples[channel][i]);\par
1007                 fileData.push_back ({\cf18 byte});\par
1008             \}\par
1009             {\cf19 else} {\cf19 if} (bitDepth == 16)\par
1010             \{\par
1011                 int16_t sampleAsInt = sampleToSixteenBitInt (samples[channel][i]);\par
1012                 addInt16ToFileData (fileData, sampleAsInt, Endianness::BigEndian);\par
1013             \}\par
1014             {\cf19 else} {\cf19 if} (bitDepth == 24)\par
1015             \{\par
1016                 int32_t sampleAsIntAgain = (int32_t) (samples[channel][i] * (T)8388608.);\par
1017                 \par
1018                 uint8_t bytes[3];\par
1019                 bytes[0] = (uint8_t) (sampleAsIntAgain >> 16) & 0xFF;\par
1020                 bytes[1] = (uint8_t) (sampleAsIntAgain >>  8) & 0xFF;\par
1021                 bytes[2] = (uint8_t) sampleAsIntAgain & 0xFF;\par
1022                 \par
1023                 fileData.push_back (bytes[0]);\par
1024                 fileData.push_back (bytes[1]);\par
1025                 fileData.push_back (bytes[2]);\par
1026             \}\par
1027             {\cf19 else} {\cf19 if} (bitDepth == 32)\par
1028             \{\par
1029                 {\cf20 // write samples as signed integers (no implementation yet for floating point, but looking at WAV implementation should help)}\par
1030                 int32_t sampleAsInt = (int32_t) (samples[channel][i] * std::numeric_limits<int32_t>::max());\par
1031                 addInt32ToFileData (fileData, sampleAsInt, Endianness::BigEndian);\par
1032             \}\par
1033             {\cf19 else}\par
1034             \{\par
1035                 assert ({\cf17 false} && {\cf22 "Trying to write a file with unsupported bit depth"});\par
1036                 {\cf19 return} {\cf17 false};\par
1037             \}\par
1038         \}\par
1039     \}\par
1040 \par
1041     {\cf20 // -----------------------------------------------------------}\par
1042     {\cf20 // iXML CHUNK}\par
1043     {\cf19 if} (iXMLChunkSize > 0)\par
1044     \{\par
1045         addStringToFileData (fileData, {\cf22 "iXML"});\par
1046         addInt32ToFileData (fileData, iXMLChunkSize, Endianness::BigEndian);\par
1047         addStringToFileData (fileData, iXMLChunk);\par
1048     \}\par
1049     \par
1050     {\cf20 // check that the various sizes we put in the metadata are correct}\par
1051     {\cf19 if} (fileSizeInBytes != {\cf17 static_cast<}int32_t{\cf17 >} (fileData.size() - 8) || soundDataChunkSize != getNumSamplesPerChannel() *  numBytesPerFrame + 8)\par
1052     \{\par
1053         reportError ({\cf22 "ERROR: couldn't save file to "} + filePath);\par
1054         {\cf19 return} {\cf17 false};\par
1055     \}\par
1056     \par
1057     {\cf20 // try to write the file}\par
1058     {\cf19 return} writeDataToFile (fileData, filePath);\par
1059 \}\par
1060 \par
1061 {\cf20 //=============================================================}\par
1062 {\cf17 template} <{\cf17 class} T>\par
1063 {\cf18 bool} AudioFile<T>::writeDataToFile (std::vector<uint8_t>& fileData, std::string filePath)\par
1064 \{\par
1065     std::ofstream outputFile (filePath, std::ios::binary);\par
1066     \par
1067     {\cf19 if} (outputFile.is_open())\par
1068     \{\par
1069         {\cf19 for} ({\cf18 size_t} i = 0; i < fileData.size(); i++)\par
1070         \{\par
1071             {\cf18 char} value = (char) fileData[i];\par
1072             outputFile.write (&value, {\cf17 sizeof} ({\cf18 char}));\par
1073         \}\par
1074         \par
1075         outputFile.close();\par
1076         \par
1077         {\cf19 return} {\cf17 true};\par
1078     \}\par
1079     \par
1080     {\cf19 return} {\cf17 false};\par
1081 \}\par
1082 \par
1083 {\cf20 //=============================================================}\par
1084 {\cf17 template} <{\cf17 class} T>\par
1085 {\cf18 void} AudioFile<T>::addStringToFileData (std::vector<uint8_t>& fileData, std::string s)\par
1086 \{\par
1087     {\cf19 for} ({\cf18 size_t} i = 0; i < s.length();i++)\par
1088         fileData.push_back ((uint8_t) s[i]);\par
1089 \}\par
1090 \par
1091 {\cf20 //=============================================================}\par
1092 {\cf17 template} <{\cf17 class} T>\par
1093 {\cf18 void} AudioFile<T>::addInt32ToFileData (std::vector<uint8_t>& fileData, int32_t i, Endianness endianness)\par
1094 \{\par
1095     uint8_t bytes[4];\par
1096     \par
1097     {\cf19 if} (endianness == Endianness::LittleEndian)\par
1098     \{\par
1099         bytes[3] = (i >> 24) & 0xFF;\par
1100         bytes[2] = (i >> 16) & 0xFF;\par
1101         bytes[1] = (i >> 8) & 0xFF;\par
1102         bytes[0] = i & 0xFF;\par
1103     \}\par
1104     {\cf19 else}\par
1105     \{\par
1106         bytes[0] = (i >> 24) & 0xFF;\par
1107         bytes[1] = (i >> 16) & 0xFF;\par
1108         bytes[2] = (i >> 8) & 0xFF;\par
1109         bytes[3] = i & 0xFF;\par
1110     \}\par
1111     \par
1112     {\cf19 for} ({\cf18 int} i = 0; i < 4; i++)\par
1113         fileData.push_back (bytes[i]);\par
1114 \}\par
1115 \par
1116 {\cf20 //=============================================================}\par
1117 {\cf17 template} <{\cf17 class} T>\par
1118 {\cf18 void} AudioFile<T>::addInt16ToFileData (std::vector<uint8_t>& fileData, int16_t i, Endianness endianness)\par
1119 \{\par
1120     uint8_t bytes[2];\par
1121     \par
1122     {\cf19 if} (endianness == Endianness::LittleEndian)\par
1123     \{\par
1124         bytes[1] = (i >> 8) & 0xFF;\par
1125         bytes[0] = i & 0xFF;\par
1126     \}\par
1127     {\cf19 else}\par
1128     \{\par
1129         bytes[0] = (i >> 8) & 0xFF;\par
1130         bytes[1] = i & 0xFF;\par
1131     \}\par
1132     \par
1133     fileData.push_back (bytes[0]);\par
1134     fileData.push_back (bytes[1]);\par
1135 \}\par
1136 \par
1137 {\cf20 //=============================================================}\par
1138 {\cf17 template} <{\cf17 class} T>\par
1139 {\cf18 void} AudioFile<T>::clearAudioBuffer()\par
1140 \{\par
1141     {\cf19 for} ({\cf18 size_t} i = 0; i < samples.size();i++)\par
1142     \{\par
1143         samples[i].clear();\par
1144     \}\par
1145     \par
1146     samples.clear();\par
1147 \}\par
1148 \par
1149 {\cf20 //=============================================================}\par
1150 {\cf17 template} <{\cf17 class} T>\par
1151 AudioFileFormat AudioFile<T>::determineAudioFileFormat (std::vector<uint8_t>& fileData)\par
1152 \{\par
1153     std::string header (fileData.begin(), fileData.begin() + 4);\par
1154     \par
1155     {\cf19 if} (header == {\cf22 "RIFF"})\par
1156         {\cf19 return} AudioFileFormat::Wave;\par
1157     {\cf19 else} {\cf19 if} (header == {\cf22 "FORM"})\par
1158         {\cf19 return} AudioFileFormat::Aiff;\par
1159     {\cf19 else}\par
1160         {\cf19 return} AudioFileFormat::Error;\par
1161 \}\par
1162 \par
1163 {\cf20 //=============================================================}\par
1164 {\cf17 template} <{\cf17 class} T>\par
1165 int32_t AudioFile<T>::fourBytesToInt (std::vector<uint8_t>& source, {\cf18 int} startIndex, Endianness endianness)\par
1166 \{\par
1167     int32_t result;\par
1168     \par
1169     {\cf19 if} (endianness == Endianness::LittleEndian)\par
1170         result = (source[startIndex + 3] << 24) | (source[startIndex + 2] << 16) | (source[startIndex + 1] << 8) | source[startIndex];\par
1171     {\cf19 else}\par
1172         result = (source[startIndex] << 24) | (source[startIndex + 1] << 16) | (source[startIndex + 2] << 8) | source[startIndex + 3];\par
1173     \par
1174     {\cf19 return} result;\par
1175 \}\par
1176 \par
1177 {\cf20 //=============================================================}\par
1178 {\cf17 template} <{\cf17 class} T>\par
1179 int16_t AudioFile<T>::twoBytesToInt (std::vector<uint8_t>& source, {\cf18 int} startIndex, Endianness endianness)\par
1180 \{\par
1181     int16_t result;\par
1182     \par
1183     {\cf19 if} (endianness == Endianness::LittleEndian)\par
1184         result = (source[startIndex + 1] << 8) | source[startIndex];\par
1185     {\cf19 else}\par
1186         result = (source[startIndex] << 8) | source[startIndex + 1];\par
1187     \par
1188     {\cf19 return} result;\par
1189 \}\par
1190 \par
1191 {\cf20 //=============================================================}\par
1192 {\cf17 template} <{\cf17 class} T>\par
1193 {\cf18 int} AudioFile<T>::getIndexOfString (std::vector<uint8_t>& source, std::string stringToSearchFor)\par
1194 \{\par
1195     {\cf18 int} index = -1;\par
1196     {\cf18 int} stringLength = (int)stringToSearchFor.length();\par
1197     \par
1198     {\cf19 for} ({\cf18 size_t} i = 0; i < source.size() - stringLength;i++)\par
1199     \{\par
1200         std::string section (source.begin() + i, source.begin() + i + stringLength);\par
1201         \par
1202         {\cf19 if} (section == stringToSearchFor)\par
1203         \{\par
1204             index = {\cf17 static_cast<}{\cf18 int}{\cf17 >} (i);\par
1205             {\cf19 break};\par
1206         \}\par
1207     \}\par
1208     \par
1209     {\cf19 return} index;\par
1210 \}\par
1211 \par
1212 {\cf20 //=============================================================}\par
1213 {\cf17 template} <{\cf17 class} T>\par
1214 {\cf18 int} AudioFile<T>::getIndexOfChunk (std::vector<uint8_t>& source, {\cf17 const} std::string& chunkHeaderID, {\cf18 int} startIndex, Endianness endianness)\par
1215 \{\par
1216     {\cf17 constexpr} {\cf18 int} dataLen = 4;\par
1217     {\cf19 if} (chunkHeaderID.size() != dataLen)\par
1218     \{\par
1219         assert ({\cf17 false} && {\cf22 "Invalid chunk header ID string"});\par
1220         {\cf19 return} -1;\par
1221     \}\par
1222 \par
1223     {\cf18 int} i = startIndex;\par
1224     {\cf19 while} (i < source.size() - dataLen)\par
1225     \{\par
1226         {\cf19 if} (memcmp (&source[i], chunkHeaderID.data(), dataLen) == 0)\par
1227         \{\par
1228             {\cf19 return} i;\par
1229         \}\par
1230 \par
1231         i += dataLen;\par
1232         {\cf17 auto} chunkSize = fourBytesToInt (source, i, endianness);\par
1233         i += (dataLen + chunkSize);\par
1234     \}\par
1235 \par
1236     {\cf19 return} -1;\par
1237 \}\par
1238 \par
1239 {\cf20 //=============================================================}\par
1240 {\cf17 template} <{\cf17 class} T>\par
1241 T AudioFile<T>::sixteenBitIntToSample (int16_t sample)\par
1242 \{\par
1243     {\cf19 return} {\cf17 static_cast<}T{\cf17 >} (sample) / {\cf17 static_cast<}T{\cf17 >} (32768.);\par
1244 \}\par
1245 \par
1246 {\cf20 //=============================================================}\par
1247 {\cf17 template} <{\cf17 class} T>\par
1248 int16_t AudioFile<T>::sampleToSixteenBitInt (T sample)\par
1249 \{\par
1250     sample = clamp (sample, -1., 1.);\par
1251     {\cf19 return} {\cf17 static_cast<}int16_t{\cf17 >} (sample * 32767.);\par
1252 \}\par
1253 \par
1254 {\cf20 //=============================================================}\par
1255 {\cf17 template} <{\cf17 class} T>\par
1256 uint8_t AudioFile<T>::sampleToSingleByte (T sample)\par
1257 \{\par
1258     sample = clamp (sample, -1., 1.);\par
1259     sample = (sample + 1.) / 2.;\par
1260     {\cf19 return} {\cf17 static_cast<}uint8_t{\cf17 >} (sample * 255.);\par
1261 \}\par
1262 \par
1263 {\cf20 //=============================================================}\par
1264 {\cf17 template} <{\cf17 class} T>\par
1265 T AudioFile<T>::singleByteToSample (uint8_t sample)\par
1266 \{\par
1267     {\cf19 return} {\cf17 static_cast<}T{\cf17 >} (sample - 128) / {\cf17 static_cast<}T{\cf17 >} (128.);\par
1268 \}\par
1269 \par
1270 {\cf20 //=============================================================}\par
1271 {\cf17 template} <{\cf17 class} T>\par
1272 T AudioFile<T>::clamp (T value, T minValue, T maxValue)\par
1273 \{\par
1274     value = std::min (value, maxValue);\par
1275     value = std::max (value, minValue);\par
1276     {\cf19 return} value;\par
1277 \}\par
1278 \par
1279 {\cf20 //=============================================================}\par
1280 {\cf17 template} <{\cf17 class} T>\par
1281 {\cf18 void} AudioFile<T>::reportError (std::string errorMessage)\par
1282 \{\par
1283     {\cf19 if} (logErrorsToConsole)\par
1284         std::cout << errorMessage << std::endl;\par
1285 \}\par
1286 \par
1287 {\cf21 #if defined (_MSC_VER)}\par
1288     __pragma(warning (pop))\par
1289 {\cf21 #elif defined (__GNUC__)}\par
1290     _Pragma({\cf22 "GCC diagnostic pop"})\par
1291 {\cf21 #endif}\par
1292 \par
1293 {\cf21 #endif }{\cf20 /* AudioFile_h */}{\cf21 }\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/examples/examples.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/examples/examples.cpp}
{\xe \v AudioFile/examples/examples.cpp}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <cmath>}\par
{\f2 #include <AudioFile.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b examples}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b _USE_MATH_DEFINES}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b examples::writeSineWaveToAudioFile} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b examples::loadAudioFileAndPrintSummary} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b examples::loadAudioFileAndProcessSamples} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v _USE_MATH_DEFINES\:examples.cpp}
{\xe \v examples.cpp\:_USE_MATH_DEFINES}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define _USE_MATH_DEFINES}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:examples.cpp}
{\xe \v examples.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Writes a sine wave to an audio file\par
Loads an audio file and prints key details to the console\par
Loads an audio file and processess the samples\par
}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/README.md File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/README.md}
{\xe \v AudioFile/README.md}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/AiffLoadingTests.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/AiffLoadingTests.cpp}
{\xe \v AudioFile/tests/AiffLoadingTests.cpp}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <AudioFile.h>}\par
{\f2 #include "test-headers/aiff_stereo_8bit_44100.h"}\par
{\f2 #include "test-headers/aiff_stereo_16bit_44100.h"}\par
{\f2 #include "test-headers/aiff_stereo_24bit_44100.h"}\par
{\f2 #include "test-headers/aiff_stereo_32bit_44100.h"}\par
{\f2 #include "test-headers/aiff_stereo_8bit_48000.h"}\par
{\f2 #include "test-headers/aiff_stereo_16bit_48000.h"}\par
{\f2 #include "test-headers/aiff_stereo_24bit_48000.h"}\par
{\f2 #include "test-headers/aiff_stereo_32bit_48000.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_SUITE} ("AiffLoadingTests")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b projectBuildDirectory} = PROJECT_BINARY_DIR\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_SUITE\:AiffLoadingTests.cpp}
{\xe \v AiffLoadingTests.cpp\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_SUITE ("AiffLoadingTests" )}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v projectBuildDirectory\:AiffLoadingTests.cpp}
{\xe \v AiffLoadingTests.cpp\:projectBuildDirectory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string projectBuildDirectory = PROJECT_BINARY_DIR}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/doctest/doctest.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/doctest/doctest.h}
{\xe \v AudioFile/tests/doctest/doctest.h}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::String}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::remove_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::remove_const< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::deferred_false< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator_impl::check< class, class >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator_impl::check< T, decltype(os()<< val< T >(), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< R C::* >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestSuite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::RelationalComparator< int, L, R >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ExceptionTranslator< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringStreamBase< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringStreamBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringStream< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ContextScopeBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ContextScope< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::CurrentTestCaseStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestRunStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IReporter}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::has_insertion_operator_impl}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest_detail_test_suite_ns}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MAJOR}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MINOR}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_PATCH}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_STR}\~ "2.4.0"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION}\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPILER}(MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_EXCEPTIONS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_EXPORT}\~ __attribute__((visibility("default")))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_IMPORT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EMPTY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOINLINE}\~ __attribute__((noinline))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNUSED}\~ __attribute__((unused))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ALIGNMENT}(x)\~ __attribute__((aligned(x)))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NORETURN}\~ [[noreturn]]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOEXCEPT}\~ noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT_IMPL}(s1,  s2)\~ s1##s2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT}(s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ANONYMOUS}(x)\~ {\b DOCTEST_CAT}(x, __LINE__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR}(x)\~ #x\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REF_WRAP}(x)\~ x&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_PLATFORM_LINUX}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GLOBAL_NO_WARNINGS}(var)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GLOBAL_NO_WARNINGS_END}()\~ {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BREAK_INTO_DEBUGGER}()\~ ((void)0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_STD_NAMESPACE_BEGIN}\~ namespace std \{\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_STD_NAMESPACE_END}\~ \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}(op,  op_str,  op_macro)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FORBIT_EXPRESSION}(rt,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPARISON_RETURN_TYPE}\~ bool\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_RELATIONAL_OP}(name,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_EQ}(l,  r)\~ l == r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_NE}(l,  r)\~ l != r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GT}(l,  r)\~ l > r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LT}(l,  r)\~ l < r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GE}(l,  r)\~ l >= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LE}(l,  r)\~ l <= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_RELATIONAL_OP}(n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_OUT_OF_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IN_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_DECORATOR}(name,  type,  def)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_LOG_AND_REACT}(b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WRAP_IN_TRY}(x)\~ x;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAST_TO_VOID}(...)\~ __VA_ARGS__;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_FUNCTION}(global_prefix,  f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_IMPLEMENT_FIXTURE}(der,  base,  func,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}(f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}(f,  proxy,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE}(decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_FUNC_), decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_CLASS}(...)\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_FIXTURE}(c,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING_IMPL}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}(dec,  T,  iter,  func)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(dec,  T,  id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}(id,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec,  T,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE}(dec,  T, ...)\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_TMP_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_IMPL}(decorators,  ns_name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE}(decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_SUITE_))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_BEGIN}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}(translatorName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_REPORTER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_LISTENER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO}(expression)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO_IMPL}(lambda_name,  mb_name,  s_name,  expression)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAPTURE}(x)\~ {\b DOCTEST_INFO}(#x " := " << x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_AT_IMPL}(type,  file,  line,  mb,  x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_MESSAGE_AT}(file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_CHECK_AT}(file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_AT}(file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MESSAGE}(x)\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL_CHECK}(x)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL}(x)\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TO_LVALUE}(...)\~ __VA_ARGS__\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_2}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_1}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_THROWS_AS}(expr,  assert_type,  message, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_THROWS_WITH}(expr,  expr_str,  assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_NOTHROW}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS}(...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS}(...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS}(...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS}(expr,  message, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr,  message, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr,  message, ...)\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW}(...)\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_WARN_NOTHROW, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW}(...)\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_CHECK_NOTHROW, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_REQUIRE_NOTHROW, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_AS}(expr, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_AS}(expr, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_WITH}(expr, with); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_WITH}(expr, with); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, with); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, ex); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_NOTHROW}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_NOTHROW}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_NOTHROW}(expr); \} while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_ASSERT}(assert_type,  comp, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNARY_ASSERT}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_EQ}\~ {\b DOCTEST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_EQ}\~ {\b DOCTEST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_EQ}\~ {\b DOCTEST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_NE}\~ {\b DOCTEST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_NE}\~ {\b DOCTEST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_NE}\~ {\b DOCTEST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GT}\~ {\b DOCTEST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GT}\~ {\b DOCTEST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GT}\~ {\b DOCTEST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LT}\~ {\b DOCTEST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LT}\~ {\b DOCTEST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LT}\~ {\b DOCTEST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GE}\~ {\b DOCTEST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GE}\~ {\b DOCTEST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GE}\~ {\b DOCTEST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LE}\~ {\b DOCTEST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LE}\~ {\b DOCTEST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LE}\~ {\b DOCTEST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY}\~ {\b DOCTEST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY}\~ {\b DOCTEST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY}\~ {\b DOCTEST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY_FALSE}\~ {\b DOCTEST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY_FALSE}\~ {\b DOCTEST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO}(name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GIVEN}(name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("    When: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("And when: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_THEN}(name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_THEN}(name)\~ {\b DOCTEST_SUBCASE}("     And: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE}\~ {\b DOCTEST_TEST_CASE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_CLASS}\~ {\b DOCTEST_TEST_CASE_CLASS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_FIXTURE}\~ {\b DOCTEST_TEST_CASE_FIXTURE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING}\~ {\b DOCTEST_TYPE_TO_STRING}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE}\~ {\b DOCTEST_TEST_CASE_TEMPLATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_DEFINE}\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INVOKE}\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_APPLY}\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SUBCASE}\~ {\b DOCTEST_SUBCASE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE}\~ {\b DOCTEST_TEST_SUITE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_BEGIN}\~ {\b DOCTEST_TEST_SUITE_BEGIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_END}\~ {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_EXCEPTION_TRANSLATOR}\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_REPORTER}\~ {\b DOCTEST_REGISTER_REPORTER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_LISTENER}\~ {\b DOCTEST_REGISTER_LISTENER}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INFO}\~ {\b DOCTEST_INFO}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CAPTURE}\~ {\b DOCTEST_CAPTURE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_MESSAGE_AT}\~ {\b DOCTEST_ADD_MESSAGE_AT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_CHECK_AT}\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_AT}\~ {\b DOCTEST_ADD_FAIL_AT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MESSAGE}\~ {\b DOCTEST_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL_CHECK}\~ {\b DOCTEST_FAIL_CHECK}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL}\~ {\b DOCTEST_FAIL}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TO_LVALUE}\~ {\b DOCTEST_TO_LVALUE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN}\~ {\b DOCTEST_WARN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE}\~ {\b DOCTEST_WARN_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS}\~ {\b DOCTEST_WARN_THROWS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS}\~ {\b DOCTEST_WARN_THROWS_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH}\~ {\b DOCTEST_WARN_THROWS_WITH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS}\~ {\b DOCTEST_WARN_THROWS_WITH_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW}\~ {\b DOCTEST_WARN_NOTHROW}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK}\~ {\b DOCTEST_CHECK}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE}\~ {\b DOCTEST_CHECK_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS}\~ {\b DOCTEST_CHECK_THROWS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS}\~ {\b DOCTEST_CHECK_THROWS_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH}\~ {\b DOCTEST_CHECK_THROWS_WITH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS}\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW}\~ {\b DOCTEST_CHECK_NOTHROW}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE}\~ {\b DOCTEST_REQUIRE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE}\~ {\b DOCTEST_REQUIRE_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS}\~ {\b DOCTEST_REQUIRE_THROWS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS}\~ {\b DOCTEST_REQUIRE_THROWS_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH}\~ {\b DOCTEST_REQUIRE_THROWS_WITH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS}\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW}\~ {\b DOCTEST_REQUIRE_NOTHROW}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_MESSAGE}\~ {\b DOCTEST_WARN_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE_MESSAGE}\~ {\b DOCTEST_WARN_FALSE_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_MESSAGE}\~ {\b DOCTEST_WARN_THROWS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS_MESSAGE}\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_MESSAGE}\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS_MESSAGE}\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW_MESSAGE}\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_MESSAGE}\~ {\b DOCTEST_CHECK_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE_MESSAGE}\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_MESSAGE}\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS_MESSAGE}\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_MESSAGE}\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS_MESSAGE}\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW_MESSAGE}\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_MESSAGE}\~ {\b DOCTEST_REQUIRE_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE_MESSAGE}\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_MESSAGE}\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS_MESSAGE}\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_MESSAGE}\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS_MESSAGE}\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW_MESSAGE}\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO}\~ {\b DOCTEST_SCENARIO}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_CLASS}\~ {\b DOCTEST_SCENARIO_CLASS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE}\~ {\b DOCTEST_SCENARIO_TEMPLATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE_DEFINE}\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GIVEN}\~ {\b DOCTEST_GIVEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WHEN}\~ {\b DOCTEST_WHEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_WHEN}\~ {\b DOCTEST_AND_WHEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b THEN}\~ {\b DOCTEST_THEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_THEN}\~ {\b DOCTEST_AND_THEN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_EQ}\~ {\b DOCTEST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_EQ}\~ {\b DOCTEST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_EQ}\~ {\b DOCTEST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NE}\~ {\b DOCTEST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NE}\~ {\b DOCTEST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NE}\~ {\b DOCTEST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GT}\~ {\b DOCTEST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GT}\~ {\b DOCTEST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GT}\~ {\b DOCTEST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LT}\~ {\b DOCTEST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LT}\~ {\b DOCTEST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LT}\~ {\b DOCTEST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GE}\~ {\b DOCTEST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GE}\~ {\b DOCTEST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GE}\~ {\b DOCTEST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LE}\~ {\b DOCTEST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LE}\~ {\b DOCTEST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LE}\~ {\b DOCTEST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY}\~ {\b DOCTEST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY}\~ {\b DOCTEST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY}\~ {\b DOCTEST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY_FALSE}\~ {\b DOCTEST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY_FALSE}\~ {\b DOCTEST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_EQ}\~ {\b DOCTEST_FAST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_EQ}\~ {\b DOCTEST_FAST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_EQ}\~ {\b DOCTEST_FAST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_NE}\~ {\b DOCTEST_FAST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_NE}\~ {\b DOCTEST_FAST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_NE}\~ {\b DOCTEST_FAST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GT}\~ {\b DOCTEST_FAST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GT}\~ {\b DOCTEST_FAST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GT}\~ {\b DOCTEST_FAST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LT}\~ {\b DOCTEST_FAST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LT}\~ {\b DOCTEST_FAST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LT}\~ {\b DOCTEST_FAST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GE}\~ {\b DOCTEST_FAST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GE}\~ {\b DOCTEST_FAST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GE}\~ {\b DOCTEST_FAST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LE}\~ {\b DOCTEST_FAST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LE}\~ {\b DOCTEST_FAST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LE}\~ {\b DOCTEST_FAST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY}\~ {\b DOCTEST_FAST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY}\~ {\b DOCTEST_FAST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY}\~ {\b DOCTEST_FAST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY_FALSE}\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY_FALSE}\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INSTANTIATE}\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SINGLE_HEADER}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedefs\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > using {\b doctest::detail::has_insertion_operator} = has_insertion_operator_impl::check< T >\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b doctest::detail::funcType}) ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef void(* {\b doctest::detail::assert_handler}) (const AssertData &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef IReporter *(* {\b doctest::detail::reporterCreatorFunc}) (const ContextOptions &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumerations\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::Color::Enum} \{ {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::assertType::Enum} \{ {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::binaryAssertComparison::Enum} \{ {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::assertAction::Enum} \{ {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::TestCaseFailureReason::Enum} \{ {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH} {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING} (4616) DOCTEST_MSVC_SUPPRESS_WARNING(4619) DOCTEST_MSVC_SUPPRESS_WARNING(4996) DOCTEST_MSVC_SUPPRESS_WARNING(4706) DOCTEST_MSVC_SUPPRESS_WARNING(4512) DOCTEST_MSVC_SUPPRESS_WARNING(4127) DOCTEST_MSVC_SUPPRESS_WARNING(4820) DOCTEST_MSVC_SUPPRESS_WARNING(4625) DOCTEST_MSVC_SUPPRESS_WARNING(4626) DOCTEST_MSVC_SUPPRESS_WARNING(5027) DOCTEST_MSVC_SUPPRESS_WARNING(5026) DOCTEST_MSVC_SUPPRESS_WARNING(4623) DOCTEST_MSVC_SUPPRESS_WARNING(4640) DOCTEST_MSVC_SUPPRESS_WARNING(26439) DOCTEST_MSVC_SUPPRESS_WARNING(26495) DOCTEST_MSVC_SUPPRESS_WARNING(26451) DOCTEST_MSVC_SUPPRESS_WARNING(26444) DOCTEST_MSVC_SUPPRESS_WARNING(26812) {\b DOCTEST_STD_NAMESPACE_BEGIN} typedef decltype(nullptr) nullptr_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<=} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>=} (const String &lhs, const String &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b doctest::operator<<} ({\b std::ostream} &s, const String &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b doctest::Color::operator<<} ({\b std::ostream} &s, Color::Enum code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::assertString} (assertType::Enum at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::failureString} (assertType::Enum at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} & {\b doctest::detail::has_insertion_operator_impl::os} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b doctest::detail::has_insertion_operator_impl::DOCTEST_REF_WRAP} (T) val()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::my_memcpy} (void *dest, const void *src, unsigned num)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b doctest::detail::getTlsOss} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::detail::getTlsOssResult} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::detail::rawMemoryToString} (const void *object, unsigned size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > String {\b doctest::detail::rawMemoryToString} (const {\b DOCTEST_REF_WRAP}(T) object)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > const char * {\b doctest::detail::type_to_string} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > String {\b doctest::toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (int long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (std::nullptr_t in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} String {\b doctest::toString} (const Approx &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const ContextOptions * {\b doctest::getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::checkIfShouldThrow} (assertType::Enum at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > String {\b doctest::detail::stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH} {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH} {\b doctest::detail::DOCTEST_MSVC_SUPPRESS_WARNING} (4388) DOCTEST_MSVC_SUPPRESS_WARNING(4389) DOCTEST_MSVC_SUPPRESS_WARNING(4018) template< typename L > struct Expression_lhs\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::regTest} (const TestCase &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::setTestSuite} (const TestSuite &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::detail::instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::failed_out_of_a_testing_context} (const AssertData &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::decomp_assert} (assertType::Enum at, const char *file, int line, const char *expr, Result result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} void {\b doctest::detail::binary_assert} (assertType::Enum at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} void {\b doctest::detail::unary_assert} (assertType::Enum at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerExceptionTranslatorImpl} (const IExceptionTranslator *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b doctest::detail::toStream} ({\b std::ostream} *s, const T &value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::toStream} ({\b std::ostream} *s, int long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > ContextScope< L > {\b doctest::detail::MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::registerExceptionTranslator} (String(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b doctest_detail_test_suite_ns::getCurrentTestSuite} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerReporterImpl} (const char *name, int prio, reporterCreatorFunc c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > IReporter * {\b doctest::detail::reporterCreator} (const ContextOptions &o)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b doctest::registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::is_running_in_test}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_AT\~ {\b DOCTEST_ADD_FAIL_AT}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_CHECK_AT\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_MESSAGE_AT\~ {\b DOCTEST_ADD_MESSAGE_AT}}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_THEN\:doctest.h}
{\xe \v doctest.h\:AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_THEN\~ {\b DOCTEST_AND_THEN}}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_WHEN\:doctest.h}
{\xe \v doctest.h\:AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_WHEN\~ {\b DOCTEST_AND_WHEN}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CAPTURE\:doctest.h}
{\xe \v doctest.h\:CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CAPTURE\~ {\b DOCTEST_CAPTURE}}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK\:doctest.h}
{\xe \v doctest.h\:CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK\~ {\b DOCTEST_CHECK}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_EQ\~ {\b DOCTEST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE\~ {\b DOCTEST_CHECK_FALSE}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE_MESSAGE\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GE\:doctest.h}
{\xe \v doctest.h\:CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GE\~ {\b DOCTEST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GT\:doctest.h}
{\xe \v doctest.h\:CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GT\~ {\b DOCTEST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LE\:doctest.h}
{\xe \v doctest.h\:CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LE\~ {\b DOCTEST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LT\:doctest.h}
{\xe \v doctest.h\:CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LT\~ {\b DOCTEST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_MESSAGE\~ {\b DOCTEST_CHECK_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NE\:doctest.h}
{\xe \v doctest.h\:CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NE\~ {\b DOCTEST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW\~ {\b DOCTEST_CHECK_NOTHROW}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW_MESSAGE\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS\~ {\b DOCTEST_CHECK_THROWS}}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS\~ {\b DOCTEST_CHECK_THROWS_AS}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS_MESSAGE\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_MESSAGE\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH\~ {\b DOCTEST_CHECK_THROWS_WITH}}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS_MESSAGE\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_MESSAGE\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY\~ {\b DOCTEST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY_FALSE\~ {\b DOCTEST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_AT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_AT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_AT_IMPL( type,  file,  line,  mb,  x)}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
        mb << x;                                                                                   \\\par
        DOCTEST_ASSERT_LOG_AND_REACT(mb);                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_AT( file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_CHECK_AT( file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_MESSAGE_AT( file,  line,  x)\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(_DOCTEST_MESSAGE_), x)}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ALIGNMENT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ALIGNMENT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ALIGNMENT( x)\~ __attribute__((aligned(x)))}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_THEN( name)\~ {\b DOCTEST_SUBCASE}("     And: " name)}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_WHEN( name)\~ {\b DOCTEST_SUBCASE}("And when: " name)}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ANONYMOUS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ANONYMOUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ANONYMOUS( x)\~ {\b DOCTEST_CAT}(x, __LINE__)}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_1\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_1( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_2\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_2( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Woverloaded-shift-op-parentheses"})                  \\\par
    doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,         \\\par
                                               __LINE__, #__VA_ARGS__);                            \\\par
    DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.setResult(                                                     \\\par
            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
            << __VA_ARGS__))                                                                       \\\par
    DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB)                                                      \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_ASSERT_IN_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IN_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IN_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     ResultBuilder rb(at, file, line, expr);                                                        \\\par
    rb.m_failed = failed;                                                                          \\\par
    if(rb.m_failed || getContextOptions()->success)                                                \\\par
        rb.m_decomp = decomp;                                                                      \\\par
    if(rb.log())                                                                                   \\\par
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\\par
    if(rb.m_failed && checkIfShouldThrow(at))                                                      \\\par
    throwException()\par
}
}
{\xe \v DOCTEST_ASSERT_LOG_AND_REACT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_LOG_AND_REACT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_LOG_AND_REACT( b)}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}(b.log())                                                                                    \\\par
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\\par
    b.react()\par
}
}
{\xe \v DOCTEST_ASSERT_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_NOTHROW( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        try \{                                                                                      \\\par
            DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \\\par
        \} {\cf19 catch}(...) \{ _DOCTEST_RB.translateException(); \}                                         \\\par
        DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_ASSERT_OUT_OF_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_OUT_OF_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_OUT_OF_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!is_running_in_test) \{                                                                  \\\par
            if(failed) \{                                                                           \\\par
                ResultBuilder rb(at, file, line, expr);                                            \\\par
                rb.m_failed = failed;                                                              \\\par
                rb.m_decomp = decomp;                                                              \\\par
                failed_out_of_a_testing_context(rb);                                               \\\par
                if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
                if(checkIfShouldThrow(at))                                                         \\\par
                    throwException();                                                              \\\par
            \}                                                                                      \\\par
            return;                                                                                \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_ASSERT_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_THROWS_AS( expr,  assert_type,  message,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!doctest::getContextOptions()->no_throw) \{                                              \\\par
            doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__, \\\par
                                                       __LINE__, #expr, #__VA_ARGS__, message);    \\\par
            try \{                                                                                  \\\par
                DOCTEST_CAST_TO_VOID(expr)                                                         \\\par
            \} {\cf19 catch}({\cf17 const} doctest::detail::remove_const<                                           \\\par
                    doctest::detail::remove_reference<__VA_ARGS__>::type>::type&) \{                \\\par
                _DOCTEST_RB.translateException();                                                  \\\par
                _DOCTEST_RB.m_threw_as = {\cf17 true};                                                     \\\par
            \} {\cf19 catch}(...) \{ _DOCTEST_RB.translateException(); \}                                     \\\par
            DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                             \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_ASSERT_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_THROWS_WITH( expr,  expr_str,  assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!doctest::getContextOptions()->no_throw) \{                                              \\\par
            doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__, \\\par
                                                       __LINE__, expr_str, {\cf22 ""}, __VA_ARGS__);       \\\par
            try \{                                                                                  \\\par
                DOCTEST_CAST_TO_VOID(expr)                                                         \\\par
            \} {\cf19 catch}(...) \{ _DOCTEST_RB.translateException(); \}                                     \\\par
            DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                             \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_BINARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_ASSERT( assert_type,  comp,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(                                                                       \\\par
                _DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(          \\\par
                        __VA_ARGS__))                                                              \\\par
        DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_BINARY_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_RELATIONAL_OP( n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_BREAK_INTO_DEBUGGER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BREAK_INTO_DEBUGGER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BREAK_INTO_DEBUGGER()\~ ((void)0)}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAPTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAPTURE( x)\~ {\b DOCTEST_INFO}(#x " := " << x)}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAST_TO_VOID\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAST_TO_VOID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAST_TO_VOID(  {\i ...})\~ __VA_ARGS__;}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT( s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT_IMPL( s1,  s2)\~ s1##s2}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_CHECK_NOTHROW, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_NOTHROW}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS_MESSAGE( expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_AS}(expr, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS( expr,  message,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_MESSAGE( expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_CHECK_THROWS_WITH}(expr, with); \} while(false)}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG\~ 0}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_EQ( l,  r)\~ l == r}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GE( l,  r)\~ l >= r}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GT( l,  r)\~ l > r}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LE( l,  r)\~ l <= r}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LT( l,  r)\~ l < r}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_NE( l,  r)\~ l != r}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPARISON_RETURN_TYPE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPARISON_RETURN_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPARISON_RETURN_TYPE\~ bool}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPILER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPILER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPILER( MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_EXCEPTIONS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_EXCEPTIONS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_EXCEPTIONS}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_POSIX_SIGNALS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION( f,  decorators)}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} {\cf18 void} f();                                                                               \\\par
    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\\par
    static {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS( f,  proxy,  decorators)}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} doctest::detail::funcType proxy() \{ {\cf19 return} f; \}                                         \\\par
    DOCTEST_REGISTER_FUNCTION({\cf17 inline} {\cf17 const}, proxy(), decorators)                                   \\\par
    static {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_DECORATOR( name,  type,  def)}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 struct }name                                                                                    \\\par
    \{                                                                                              \\\par
        type data;                                                                                 \\\par
        name(type in = def)                                                                        \\\par
                : data(in) \{\}                                                                      \\\par
        void fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
        void fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
    \}\par
}
}
{\xe \v DOCTEST_DO_BINARY_EXPRESSION_COMPARISON\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON( op,  op_str,  op_macro)}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    DOCTEST_NOINLINE Result {\cf17 operator} op({\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{                           \\\par
        bool res = op_macro(lhs, rhs);                                                             \\\par
        if(m_at & assertType::is_false)                                                            \\\par
            res = !res;                                                                            \\\par
        if(!res || doctest::getContextOptions()->success)                                          \\\par
            return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
        return Result(res);                                                                        \\\par
    \}\par
}
}
{\xe \v DOCTEST_EMPTY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EMPTY}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAIL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL( x)\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, x)}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL_CHECK( x)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, x)}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_EQ\~ {\b DOCTEST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GE\~ {\b DOCTEST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GT\~ {\b DOCTEST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LE\~ {\b DOCTEST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LT\~ {\b DOCTEST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_NE\~ {\b DOCTEST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY\~ {\b DOCTEST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY_FALSE\~ {\b DOCTEST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_EQ\~ {\b DOCTEST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GE\~ {\b DOCTEST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GT\~ {\b DOCTEST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LE\~ {\b DOCTEST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LT\~ {\b DOCTEST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_NE\~ {\b DOCTEST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY\~ {\b DOCTEST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_EQ\~ {\b DOCTEST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GE\~ {\b DOCTEST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GT\~ {\b DOCTEST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LE\~ {\b DOCTEST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LT\~ {\b DOCTEST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_NE\~ {\b DOCTEST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY\~ {\b DOCTEST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY_FALSE\~ {\b DOCTEST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FORBIT_EXPRESSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FORBIT_EXPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FORBIT_EXPRESSION( rt,  op)}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    rt& {\cf17 operator} op({\cf17 const} R&) \{                                                                    \\\par
        static_assert(deferred_false<R>::value,                                                    \\\par
                      {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
        return *{\cf17 this};                                                                              \\\par
    \}\par
}
}
{\xe \v DOCTEST_GCC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC\~ 0}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GIVEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GIVEN( name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GLOBAL_NO_WARNINGS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GLOBAL_NO_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GLOBAL_NO_WARNINGS( var)}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wglobal-constructors"})                              \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wunused-variable"})                                            \\\par
    static {\cf18 int} var DOCTEST_UNUSED\par
}
}
{\xe \v DOCTEST_GLOBAL_NO_WARNINGS_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GLOBAL_NO_WARNINGS_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GLOBAL_NO_WARNINGS_END()\~ {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_IMPLEMENT_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_IMPLEMENT_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_IMPLEMENT_FIXTURE( der,  base,  func,  decorators)}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }\{                                                                                    \\\par
        struct der : {\cf17 public} base                                                                   \\\par
        \{                                                                                          \\\par
            void f();                                                                              \\\par
        \};                                                                                         \\\par
        static {\cf18 void} func() \{                                                                       \\\par
            der v;                                                                                 \\\par
            v.f();                                                                                 \\\par
        \}                                                                                          \\\par
        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\\par
    \}                                                                                              \\\par
    inline DOCTEST_NOINLINE {\cf18 void} der::f()\par
}
}
{\xe \v DOCTEST_INFO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO( expression)}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_), DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_),  \\\par
                      DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_), expression)\par
}
}
{\xe \v DOCTEST_INFO_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO_IMPL( lambda_name,  mb_name,  s_name,  expression)}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4626)                                                  \\\par
    auto lambda_name = [&](std::ostream* s_name) \{                                                 \\\par
        doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
        mb_name.m_stream = s_name;                                                                 \\\par
        mb_name << expression;                                                                     \\\par
    \};                                                                                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                              \\\par
    auto DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(lambda_name)\par
}
}
{\xe \v DOCTEST_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4548)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4265)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4986)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4350)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4668)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4365)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4774)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4820)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4625)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4626)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5027)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5026)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4623)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5039)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5045)                                                            \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5105)\par
}
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MESSAGE( x)\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, x)}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC\~ 0}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOEXCEPT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOEXCEPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOEXCEPT\~ noexcept}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOINLINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOINLINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOINLINE\~ __attribute__((noinline))}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NORETURN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NORETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NORETURN\~ [[noreturn]]}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_PLATFORM_LINUX\:doctest.h}
{\xe \v doctest.h\:DOCTEST_PLATFORM_LINUX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_PLATFORM_LINUX}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REF_WRAP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REF_WRAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REF_WRAP( x)\~ x&}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR( signature)}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_),       \\\par
                                               signature)\par
}
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL( translatorName,  signature)}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 inline} doctest::String translatorName(signature);                                              \\\par
    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_)) =                     \\\par
            doctest::registerExceptionTranslator(translatorName);                                  \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\\par
    doctest::String translatorName(signature)\par
}
}
{\xe \v DOCTEST_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_FUNCTION( global_prefix,  f,  decorators)}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =              \\\par
            doctest::detail::regTest(                                                              \\\par
                    doctest::detail::TestCase(                                                     \\\par
                            f, __FILE__, __LINE__,                                                 \\\par
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\\par
                    decorators);                                                                   \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END()\par
}
}
{\xe \v DOCTEST_REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_LISTENER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_)) =                       \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 false});                            \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END() typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_REPORTER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_)) =                       \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 true});                             \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END() typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_RELATIONAL_OP( name,  op)}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>                                                              \\\par
    DOCTEST_COMPARISON_RETURN_TYPE name({\cf17 const} DOCTEST_REF_WRAP(L) lhs,                             \\\par
                                        {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{                           \\\par
        return lhs op rhs;                                                                         \\\par
    \}\par
}
}
{\xe \v DOCTEST_REQUIRE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_REQUIRE_NOTHROW, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_NOTHROW}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE( expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS( expr,  message,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE( expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, with); \} while(false)}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO( name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SINGLE_HEADER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SINGLE_HEADER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SINGLE_HEADER}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_STD_NAMESPACE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_STD_NAMESPACE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_STD_NAMESPACE_BEGIN\~ namespace std \{}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_STD_NAMESPACE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_STD_NAMESPACE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_STD_NAMESPACE_END\~ \}}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SUBCASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUBCASE( name)}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}({\cf17 const} doctest::detail::Subcase & DOCTEST_ANONYMOUS(_DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = \\\par
               doctest::detail::Subcase(name, __FILE__, __LINE__))\par
}
}
{\xe \v DOCTEST_SYMBOL_EXPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_EXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_EXPORT\~ __attribute__((visibility("default")))}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_IMPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_IMPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_IMPORT}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE( decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_FUNC_), decorators)}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_CLASS(  {\i ...})\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_FIXTURE( c,  decorators)}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(_DOCTEST_ANON_CLASS_), c,                          \\\par
                              DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), decorators)\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE( dec,  T,   {\i ...})\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_TMP_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_), __VA_ARGS__) \\\par
    typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE( dec,  T,  id)}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT({\cf18 id}, ITERATOR),                      \\\par
                                           DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL( dec,  T,  iter,  func)}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    static {\cf18 void} func();                                                                            \\\par
    namespace \{                                                                                    \\\par
        template <typename Tuple>                                                                  \\\par
        struct iter;                                                                               \\\par
        template <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
        struct iter<std::tuple<Type, Rest...>>                                                     \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
                doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
                                            doctest::detail::type_to_string<Type>(),               \\\par
                                            {\cf18 int}(line) * 1000 + index)                              \\\par
                                         * dec);                                                   \\\par
                iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
            \}                                                                                      \\\par
        \};                                                                                         \\\par
        template <>                                                                                \\\par
        struct iter<std::tuple<>>                                                                  \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
        \};                                                                                         \\\par
    \}                                                                                              \\\par
    template <typename T>                                                                          \\\par
    static {\cf18 void} func()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_IMPL( dec,  T,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\\par
    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\\par
    template <typename T>                                                                          \\\par
    static {\cf18 void} anon()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL( id,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY)) =                                         \\\par
        doctest::detail::instantiationHelper(DOCTEST_CAT({\cf18 id}, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0));\\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\\par
    typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE( decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(_DOCTEST_ANON_SUITE_))}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_BEGIN( decorators)}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =                            \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators);              \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\\par
    typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DOCTEST_TEST_SUITE_END}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =                            \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * {\cf22 ""});                      \\\par
    DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\\par
    typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_TEST_SUITE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_IMPL( decorators,  ns_name)}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }ns_name \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
            static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() \{            \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
                static doctest::detail::TestSuite data;                                            \\\par
                static {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
                if(!inited) \{                                                                      \\\par
                    data* decorators;                                                              \\\par
                    inited = {\cf17 true};                                                                 \\\par
                \}                                                                                  \\\par
                return data;                                                                       \\\par
            \}                                                                                      \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    namespace ns_name\par
}
}
{\xe \v DOCTEST_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_THEN( name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TO_LVALUE(  {\i ...})\~ __VA_ARGS__}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TOSTR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR( x)\~ #x}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING(  {\i ...})}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }doctest \{ {\cf17 namespace }detail \{                                                         \\\par
            DOCTEST_TYPE_TO_STRING_IMPL(__VA_ARGS__)                                               \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    typedef {\cf18 int} DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
}
}
{\xe \v DOCTEST_TYPE_TO_STRING_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING_IMPL(  {\i ...})}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <>                                                                                    \\\par
    inline {\cf17 const} {\cf18 char}* type_to_string<__VA_ARGS__>() \{                                             \\\par
        return {\cf22 "<"} #__VA_ARGS__ {\cf22 ">"};                                                               \\\par
    \}\par
}
}
{\xe \v DOCTEST_UNARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNARY_ASSERT( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.unary_assert(__VA_ARGS__))                                 \\\par
        DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\\par
    \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_UNUSED\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNUSED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNUSED\~ __attribute__((unused))}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MAJOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MAJOR\~ 2}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MINOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MINOR\~ 4}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_PATCH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_PATCH\~ 0}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_STR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_STR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_STR\~ "2.4.0"}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_MESSAGE( cond,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_ASSERT_NOTHROW}(DT_WARN_NOTHROW, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_NOTHROW}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS(  {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS_MESSAGE( expr,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_AS}(expr, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_MESSAGE( expr,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS}(expr); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_WITH}(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS( expr,  message,   {\i ...})\~ {\b DOCTEST_ASSERT_THROWS_AS}(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, ex); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_MESSAGE( expr,  with,  msg)\~ do \{ {\b DOCTEST_INFO}(msg); {\b DOCTEST_WARN_THROWS_WITH}(expr, with); \} while(false)}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WHEN( name)\~ {\b DOCTEST_SUBCASE}("    When: " name)}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WRAP_IN_TRY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WRAP_IN_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WRAP_IN_TRY( x)\~ x;}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL\:doctest.h}
{\xe \v doctest.h\:FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL\~ {\b DOCTEST_FAIL}}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL_CHECK\~ {\b DOCTEST_FAIL_CHECK}}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_EQ\~ {\b DOCTEST_FAST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GE\~ {\b DOCTEST_FAST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GT\~ {\b DOCTEST_FAST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LE\~ {\b DOCTEST_FAST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LT\~ {\b DOCTEST_FAST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_NE\~ {\b DOCTEST_FAST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY\~ {\b DOCTEST_FAST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY_FALSE\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_EQ\~ {\b DOCTEST_FAST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GE\~ {\b DOCTEST_FAST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GT\~ {\b DOCTEST_FAST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LE\~ {\b DOCTEST_FAST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LT\~ {\b DOCTEST_FAST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_NE\~ {\b DOCTEST_FAST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY\~ {\b DOCTEST_FAST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_EQ\~ {\b DOCTEST_FAST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GE\~ {\b DOCTEST_FAST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GT\~ {\b DOCTEST_FAST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LE\~ {\b DOCTEST_FAST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LT\~ {\b DOCTEST_FAST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_NE\~ {\b DOCTEST_FAST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY\~ {\b DOCTEST_FAST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY_FALSE\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GIVEN\:doctest.h}
{\xe \v doctest.h\:GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GIVEN\~ {\b DOCTEST_GIVEN}}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INFO\:doctest.h}
{\xe \v doctest.h\:INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INFO\~ {\b DOCTEST_INFO}}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MESSAGE\:doctest.h}
{\xe \v doctest.h\:MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MESSAGE\~ {\b DOCTEST_MESSAGE}}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_EXCEPTION_TRANSLATOR\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_LISTENER\~ {\b DOCTEST_REGISTER_LISTENER}}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_REPORTER\~ {\b DOCTEST_REGISTER_REPORTER}}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE\:doctest.h}
{\xe \v doctest.h\:REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE\~ {\b DOCTEST_REQUIRE}}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_EQ\~ {\b DOCTEST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE\~ {\b DOCTEST_REQUIRE_FALSE}}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE_MESSAGE\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GE\~ {\b DOCTEST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GT\~ {\b DOCTEST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LE\~ {\b DOCTEST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LT\~ {\b DOCTEST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_MESSAGE\~ {\b DOCTEST_REQUIRE_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NE\~ {\b DOCTEST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW\~ {\b DOCTEST_REQUIRE_NOTHROW}}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW_MESSAGE\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS\~ {\b DOCTEST_REQUIRE_THROWS}}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS\~ {\b DOCTEST_REQUIRE_THROWS_AS}}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS_MESSAGE\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_MESSAGE\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH\~ {\b DOCTEST_REQUIRE_THROWS_WITH}}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS_MESSAGE\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_MESSAGE\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY\~ {\b DOCTEST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY_FALSE\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO\:doctest.h}
{\xe \v doctest.h\:SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO\~ {\b DOCTEST_SCENARIO}}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_CLASS\~ {\b DOCTEST_SCENARIO_CLASS}}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE\~ {\b DOCTEST_SCENARIO_TEMPLATE}}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE_DEFINE\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SUBCASE\:doctest.h}
{\xe \v doctest.h\:SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SUBCASE\~ {\b DOCTEST_SUBCASE}}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE\~ {\b DOCTEST_TEST_CASE}}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_CLASS\~ {\b DOCTEST_TEST_CASE_CLASS}}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_FIXTURE\~ {\b DOCTEST_TEST_CASE_FIXTURE}}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE\~ {\b DOCTEST_TEST_CASE_TEMPLATE}}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_APPLY\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_DEFINE\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INSTANTIATE\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INVOKE\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE\~ {\b DOCTEST_TEST_SUITE}}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_BEGIN\~ {\b DOCTEST_TEST_SUITE_BEGIN}}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_END\~ {\b DOCTEST_TEST_SUITE_END}}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v THEN\:doctest.h}
{\xe \v doctest.h\:THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define THEN\~ {\b DOCTEST_THEN}}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TO_LVALUE\~ {\b DOCTEST_TO_LVALUE}}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING\~ {\b DOCTEST_TYPE_TO_STRING}}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN\:doctest.h}
{\xe \v doctest.h\:WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN\~ {\b DOCTEST_WARN}}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_EQ\:doctest.h}
{\xe \v doctest.h\:WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_EQ\~ {\b DOCTEST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE\~ {\b DOCTEST_WARN_FALSE}}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE_MESSAGE\~ {\b DOCTEST_WARN_FALSE_MESSAGE}}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GE\:doctest.h}
{\xe \v doctest.h\:WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GE\~ {\b DOCTEST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GT\:doctest.h}
{\xe \v doctest.h\:WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GT\~ {\b DOCTEST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LE\:doctest.h}
{\xe \v doctest.h\:WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LE\~ {\b DOCTEST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LT\:doctest.h}
{\xe \v doctest.h\:WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LT\~ {\b DOCTEST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_MESSAGE\~ {\b DOCTEST_WARN_MESSAGE}}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NE\:doctest.h}
{\xe \v doctest.h\:WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NE\~ {\b DOCTEST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW\~ {\b DOCTEST_WARN_NOTHROW}}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW_MESSAGE\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS\~ {\b DOCTEST_WARN_THROWS}}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS\~ {\b DOCTEST_WARN_THROWS_AS}}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS_MESSAGE\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_MESSAGE\~ {\b DOCTEST_WARN_THROWS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH\~ {\b DOCTEST_WARN_THROWS_WITH}}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS\~ {\b DOCTEST_WARN_THROWS_WITH_AS}}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS_MESSAGE\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_MESSAGE\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY\~ {\b DOCTEST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY_FALSE\~ {\b DOCTEST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WHEN\:doctest.h}
{\xe \v doctest.h\:WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WHEN\~ {\b DOCTEST_WHEN}}}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Typedef Documentation\par
\pard\plain 
{\xe \v ostream\:doctest.h}
{\xe \v doctest.h\:ostream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b basic_ostream}<char, {\b char_traits}<char> > {\b ostream}}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH} {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH} {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH} DOCTEST_MSVC_SUPPRESS_WARNING (4616 )}}
\par
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/doctest/doctest.h}
{\xe \v AudioFile/tests/doctest/doctest.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // ====================================================================== lgtm [cpp/missing-header-guard]}\par
2 {\cf20 // == DO NOT MODIFY THIS FILE BY HAND - IT IS AUTO GENERATED BY CMAKE! ==}\par
3 {\cf20 // ======================================================================}\par
4 {\cf20 //}\par
5 {\cf20 // doctest.h - the lightest feature-rich C++ single-header testing framework for unit tests and TDD}\par
6 {\cf20 //}\par
7 {\cf20 // Copyright (c) 2016-2019 Viktor Kirilov}\par
8 {\cf20 //}\par
9 {\cf20 // Distributed under the MIT Software License}\par
10 {\cf20 // See accompanying file LICENSE.txt or copy at}\par
11 {\cf20 // https://opensource.org/licenses/MIT}\par
12 {\cf20 //}\par
13 {\cf20 // The documentation can be found at the library's page:}\par
14 {\cf20 // https://github.com/onqtam/doctest/blob/master/doc/markdown/readme.md}\par
15 {\cf20 //}\par
16 {\cf20 // =================================================================================================}\par
17 {\cf20 // =================================================================================================}\par
18 {\cf20 // =================================================================================================}\par
19 {\cf20 //}\par
20 {\cf20 // The library is heavily influenced by Catch - https://github.com/catchorg/Catch2}\par
21 {\cf20 // which uses the Boost Software License - Version 1.0}\par
22 {\cf20 // see here - https://github.com/catchorg/Catch2/blob/master/LICENSE.txt}\par
23 {\cf20 //}\par
24 {\cf20 // The concept of subcases (sections in Catch) and expression decomposition are from there.}\par
25 {\cf20 // Some parts of the code are taken directly:}\par
26 {\cf20 // - stringification - the detection of "ostream& operator<<(ostream&, const T&)" and StringMaker<>}\par
27 {\cf20 // - the Approx() helper class for floating point comparison}\par
28 {\cf20 // - colors in the console}\par
29 {\cf20 // - breaking into a debugger}\par
30 {\cf20 // - signal / SEH handling}\par
31 {\cf20 // - timer}\par
32 {\cf20 // - XmlWriter class - thanks to Phil Nash for allowing the direct reuse (AKA copy/paste)}\par
33 {\cf20 //}\par
34 {\cf20 // The expression decomposing templates are taken from lest - https://github.com/martinmoene/lest}\par
35 {\cf20 // which uses the Boost Software License - Version 1.0}\par
36 {\cf20 // see here - https://github.com/martinmoene/lest/blob/master/LICENSE.txt}\par
37 {\cf20 //}\par
38 {\cf20 // =================================================================================================}\par
39 {\cf20 // =================================================================================================}\par
40 {\cf20 // =================================================================================================}\par
41 \par
42 {\cf21 #ifndef DOCTEST_LIBRARY_INCLUDED}\par
43 {\cf21 #define DOCTEST_LIBRARY_INCLUDED}\par
44 \par
45 {\cf20 // =================================================================================================}\par
46 {\cf20 // == VERSION ======================================================================================}\par
47 {\cf20 // =================================================================================================}\par
48 \par
49 {\cf21 #define DOCTEST_VERSION_MAJOR 2}\par
50 {\cf21 #define DOCTEST_VERSION_MINOR 4}\par
51 {\cf21 #define DOCTEST_VERSION_PATCH 0}\par
52 {\cf21 #define DOCTEST_VERSION_STR "2.4.0"}\par
53 \par
54 {\cf21 #define DOCTEST_VERSION                                                                            \\}\par
55 {\cf21     (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)}\par
56 \par
57 {\cf20 // =================================================================================================}\par
58 {\cf20 // == COMPILER VERSION =============================================================================}\par
59 {\cf20 // =================================================================================================}\par
60 \par
61 {\cf20 // ideas for the version stuff are taken from here: https://github.com/cxxstuff/cxx_detect}\par
62 \par
63 {\cf21 #define DOCTEST_COMPILER(MAJOR, MINOR, PATCH) ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}\par
64 \par
65 {\cf20 // GCC/Clang and GCC/MSVC are mutually exclusive, but Clang/MSVC are not because of clang-cl...}\par
66 {\cf21 #if defined(_MSC_VER) && defined(_MSC_FULL_VER)}\par
67 {\cf21 #if _MSC_VER == _MSC_FULL_VER / 10000}\par
68 {\cf21 #define DOCTEST_MSVC DOCTEST_COMPILER(_MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 10000)}\par
69 {\cf21 #else }{\cf20 // MSVC}\par
70 {\cf21 #define DOCTEST_MSVC                                                                               \\}\par
71 {\cf21     DOCTEST_COMPILER(_MSC_VER / 100, (_MSC_FULL_VER / 100000) % 100, _MSC_FULL_VER % 100000)}\par
72 {\cf21 #endif }{\cf20 // MSVC}\par
73 {\cf21 #endif }{\cf20 // MSVC}\par
74 {\cf21 #if defined(__clang__) && defined(__clang_minor__)}\par
75 {\cf21 #define DOCTEST_CLANG DOCTEST_COMPILER(__clang_major__, __clang_minor__, __clang_patchlevel__)}\par
76 {\cf21 #elif defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) &&              \\}\par
77 {\cf21         !defined(__INTEL_COMPILER)}\par
78 {\cf21 #define DOCTEST_GCC DOCTEST_COMPILER(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)}\par
79 {\cf21 #endif }{\cf20 // GCC}\par
80 \par
81 {\cf21 #ifndef DOCTEST_MSVC}\par
82 {\cf21 #define DOCTEST_MSVC 0}\par
83 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
84 {\cf21 #ifndef DOCTEST_CLANG}\par
85 {\cf21 #define DOCTEST_CLANG 0}\par
86 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
87 {\cf21 #ifndef DOCTEST_GCC}\par
88 {\cf21 #define DOCTEST_GCC 0}\par
89 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
90 \par
91 {\cf20 // =================================================================================================}\par
92 {\cf20 // == COMPILER WARNINGS HELPERS ====================================================================}\par
93 {\cf20 // =================================================================================================}\par
94 \par
95 {\cf21 #if DOCTEST_CLANG}\par
96 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
97 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH _Pragma("clang diagnostic push"})\par
98 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(clang diagnostic ignored w)}\par
99 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP _Pragma("clang diagnostic pop"})\par
100 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)                                                \\}\par
101 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
102 {\cf21 #else }{\cf20 // DOCTEST_CLANG}\par
103 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
104 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
105 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
106 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)}\par
107 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
108 \par
109 {\cf21 #if DOCTEST_GCC}\par
110 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
111 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH _Pragma("GCC diagnostic push"})\par
112 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(GCC diagnostic ignored w)}\par
113 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP _Pragma("GCC diagnostic pop"})\par
114 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)                                                  \\}\par
115 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
116 {\cf21 #else }{\cf20 // DOCTEST_GCC}\par
117 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
118 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
119 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
120 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
121 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
122 \par
123 {\cf21 #if DOCTEST_MSVC}\par
124 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH __pragma(warning(push))}\par
125 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w) __pragma(warning(disable : w))}\par
126 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP __pragma(warning(pop))}\par
127 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)                                                 \\}\par
128 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
129 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
130 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
131 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
132 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
133 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
134 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
135 \par
136 {\cf20 // =================================================================================================}\par
137 {\cf20 // == COMPILER WARNINGS ============================================================================}\par
138 {\cf20 // =================================================================================================}\par
139 \par
140 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
141 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wunknown-pragmas"})\par
142 DOCTEST_CLANG_SUPPRESS_WARNING("-Wnon-virtual-dtor")\par
143 DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")\par
144 DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")\par
145 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdeprecated")\par
146 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")\par
147 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-local-typedef")\par
148 DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")\par
149 DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")\par
150 \par
151 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
152 DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")\par
153 DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")\par
154 DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")\par
155 DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")\par
156 DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")\par
157 DOCTEST_GCC_SUPPRESS_WARNING("-Wctor-dtor-privacy")\par
158 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")\par
159 DOCTEST_GCC_SUPPRESS_WARNING("-Wnon-virtual-dtor")\par
160 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-local-typedefs")\par
161 DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")\par
162 DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")\par
163 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-promo")\par
164 \par
165 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
166 DOCTEST_MSVC_SUPPRESS_WARNING(4616) {\cf20 // invalid compiler warning}\par
167 DOCTEST_MSVC_SUPPRESS_WARNING(4619) {\cf20 // invalid compiler warning}\par
168 DOCTEST_MSVC_SUPPRESS_WARNING(4996) {\cf20 // The compiler encountered a deprecated declaration}\par
169 DOCTEST_MSVC_SUPPRESS_WARNING(4706) {\cf20 // assignment within conditional expression}\par
170 DOCTEST_MSVC_SUPPRESS_WARNING(4512) {\cf20 // 'class' : assignment operator could not be generated}\par
171 DOCTEST_MSVC_SUPPRESS_WARNING(4127) {\cf20 // conditional expression is constant}\par
172 DOCTEST_MSVC_SUPPRESS_WARNING(4820) {\cf20 // padding}\par
173 DOCTEST_MSVC_SUPPRESS_WARNING(4625) {\cf20 // copy constructor was implicitly defined as deleted}\par
174 DOCTEST_MSVC_SUPPRESS_WARNING(4626) {\cf20 // assignment operator was implicitly defined as deleted}\par
175 DOCTEST_MSVC_SUPPRESS_WARNING(5027) {\cf20 // move assignment operator was implicitly defined as deleted}\par
176 DOCTEST_MSVC_SUPPRESS_WARNING(5026) {\cf20 // move constructor was implicitly defined as deleted}\par
177 DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 // default constructor was implicitly defined as deleted}\par
178 DOCTEST_MSVC_SUPPRESS_WARNING(4640) {\cf20 // construction of local static object is not thread-safe}\par
179 {\cf20 // static analysis}\par
180 DOCTEST_MSVC_SUPPRESS_WARNING(26439) {\cf20 // This kind of function may not throw. Declare it 'noexcept'}\par
181 DOCTEST_MSVC_SUPPRESS_WARNING(26495) {\cf20 // Always initialize a member variable}\par
182 DOCTEST_MSVC_SUPPRESS_WARNING(26451) {\cf20 // Arithmetic overflow ...}\par
183 DOCTEST_MSVC_SUPPRESS_WARNING(26444) {\cf20 // Avoid unnamed objects with custom construction and dtr...}\par
184 DOCTEST_MSVC_SUPPRESS_WARNING(26812) {\cf20 // Prefer 'enum class' over 'enum'}\par
185 \par
186 {\cf20 // 4548 - expression before comma has no effect; expected expression with side - effect}\par
187 {\cf20 // 4265 - class has virtual functions, but destructor is not virtual}\par
188 {\cf20 // 4986 - exception specification does not match previous declaration}\par
189 {\cf20 // 4350 - behavior change: 'member1' called instead of 'member2'}\par
190 {\cf20 // 4668 - 'x' is not defined as a preprocessor macro, replacing with '0' for '#if/#elif'}\par
191 {\cf20 // 4365 - conversion from 'int' to 'unsigned long', signed/unsigned mismatch}\par
192 {\cf20 // 4774 - format string expected in argument 'x' is not a string literal}\par
193 {\cf20 // 4820 - padding in structs}\par
194 \par
195 {\cf20 // only 4 should be disabled globally:}\par
196 {\cf20 // - 4514 # unreferenced inline function has been removed}\par
197 {\cf20 // - 4571 # SEH related}\par
198 {\cf20 // - 4710 # function not inlined}\par
199 {\cf20 // - 4711 # function 'x' selected for automatic inline expansion}\par
200 \par
201 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN                                 \\}\par
202 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
203 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4548)                                                            \\}\par
204 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4265)                                                            \\}\par
205 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4986)                                                            \\}\par
206 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4350)                                                            \\}\par
207 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4668)                                                            \\}\par
208 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4365)                                                            \\}\par
209 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4774)                                                            \\}\par
210 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820)                                                            \\}\par
211 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625)                                                            \\}\par
212 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626)                                                            \\}\par
213 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027)                                                            \\}\par
214 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026)                                                            \\}\par
215 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4623)                                                            \\}\par
216 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5039)                                                            \\}\par
217 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045)                                                            \\}\par
218 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5105)}\par
219 \par
220 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
221 \par
222 {\cf20 // =================================================================================================}\par
223 {\cf20 // == FEATURE DETECTION ============================================================================}\par
224 {\cf20 // =================================================================================================}\par
225 \par
226 {\cf20 // general compiler feature support table: https://en.cppreference.com/w/cpp/compiler_support}\par
227 {\cf20 // MSVC C++11 feature support table: https://msdn.microsoft.com/en-us/library/hh567368.aspx}\par
228 {\cf20 // GCC C++11 feature support table: https://gcc.gnu.org/projects/cxx-status.html}\par
229 {\cf20 // MSVC version table:}\par
230 {\cf20 // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering}\par
231 {\cf20 // MSVC++ 14.2 (16) _MSC_VER == 1920 (Visual Studio 2019)}\par
232 {\cf20 // MSVC++ 14.1 (15) _MSC_VER == 1910 (Visual Studio 2017)}\par
233 {\cf20 // MSVC++ 14.0      _MSC_VER == 1900 (Visual Studio 2015)}\par
234 {\cf20 // MSVC++ 12.0      _MSC_VER == 1800 (Visual Studio 2013)}\par
235 {\cf20 // MSVC++ 11.0      _MSC_VER == 1700 (Visual Studio 2012)}\par
236 {\cf20 // MSVC++ 10.0      _MSC_VER == 1600 (Visual Studio 2010)}\par
237 {\cf20 // MSVC++ 9.0       _MSC_VER == 1500 (Visual Studio 2008)}\par
238 {\cf20 // MSVC++ 8.0       _MSC_VER == 1400 (Visual Studio 2005)}\par
239 \par
240 {\cf21 #if DOCTEST_MSVC && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
241 {\cf21 #define DOCTEST_CONFIG_WINDOWS_SEH}\par
242 {\cf21 #endif }{\cf20 // MSVC}\par
243 {\cf21 #if defined(DOCTEST_CONFIG_NO_WINDOWS_SEH) && defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
244 {\cf21 #undef DOCTEST_CONFIG_WINDOWS_SEH}\par
245 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
246 \par
247 {\cf21 #if !defined(_WIN32) && !defined(__QNX__) && !defined(DOCTEST_CONFIG_POSIX_SIGNALS) &&             \\}\par
248 {\cf21         !defined(__EMSCRIPTEN__)}\par
249 {\cf21 #define DOCTEST_CONFIG_POSIX_SIGNALS}\par
250 {\cf21 #endif }{\cf20 // _WIN32}\par
251 {\cf21 #if defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS) && defined(DOCTEST_CONFIG_POSIX_SIGNALS)}\par
252 {\cf21 #undef DOCTEST_CONFIG_POSIX_SIGNALS}\par
253 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_POSIX_SIGNALS}\par
254 \par
255 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
256 {\cf21 #if !defined(__cpp_exceptions) && !defined(__EXCEPTIONS) && !defined(_CPPUNWIND)}\par
257 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
258 {\cf21 #endif }{\cf20 // no exceptions}\par
259 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
260 \par
261 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
262 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
263 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
264 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
265 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
266 \par
267 {\cf21 #if defined(DOCTEST_CONFIG_NO_EXCEPTIONS) && !defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)}\par
268 {\cf21 #define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
269 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS && !DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
270 \par
271 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN) && !defined(DOCTEST_CONFIG_IMPLEMENT)}\par
272 {\cf21 #define DOCTEST_CONFIG_IMPLEMENT}\par
273 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
274 \par
275 {\cf21 #if defined(_WIN32) || defined(__CYGWIN__)}\par
276 {\cf21 #if DOCTEST_MSVC}\par
277 {\cf21 #define DOCTEST_SYMBOL_EXPORT __declspec(dllexport)}\par
278 {\cf21 #define DOCTEST_SYMBOL_IMPORT __declspec(dllimport)}\par
279 {\cf21 #else }{\cf20 // MSVC}\par
280 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((dllexport))}\par
281 {\cf21 #define DOCTEST_SYMBOL_IMPORT __attribute__((dllimport))}\par
282 {\cf21 #endif }{\cf20 // MSVC}\par
283 {\cf21 #else  }{\cf20 // _WIN32}\par
284 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((visibility("default"})))\par
285 {\cf21 #define DOCTEST_SYMBOL_IMPORT}\par
286 {\cf21 #endif }{\cf20 // _WIN32}\par
287 \par
288 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
289 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT}\par
290 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_EXPORT}\par
291 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
292 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_IMPORT}\par
293 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
294 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
295 {\cf21 #define DOCTEST_INTERFACE}\par
296 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
297 \par
298 {\cf21 #define DOCTEST_EMPTY}\par
299 \par
300 {\cf21 #if DOCTEST_MSVC}\par
301 {\cf21 #define DOCTEST_NOINLINE __declspec(noinline)}\par
302 {\cf21 #define DOCTEST_UNUSED}\par
303 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
304 {\cf21 #else }{\cf20 // MSVC}\par
305 {\cf21 #define DOCTEST_NOINLINE __attribute__((noinline))}\par
306 {\cf21 #define DOCTEST_UNUSED __attribute__((unused))}\par
307 {\cf21 #define DOCTEST_ALIGNMENT(x) __attribute__((aligned(x)))}\par
308 {\cf21 #endif }{\cf20 // MSVC}\par
309 \par
310 {\cf21 #ifndef DOCTEST_NORETURN}\par
311 {\cf21 #define DOCTEST_NORETURN [[noreturn]]}\par
312 {\cf21 #endif }{\cf20 // DOCTEST_NORETURN}\par
313 \par
314 {\cf21 #ifndef DOCTEST_NOEXCEPT}\par
315 {\cf21 #define DOCTEST_NOEXCEPT noexcept}\par
316 {\cf21 #endif }{\cf20 // DOCTEST_NOEXCEPT}\par
317 \par
318 {\cf20 // =================================================================================================}\par
319 {\cf20 // == FEATURE DETECTION END ========================================================================}\par
320 {\cf20 // =================================================================================================}\par
321 \par
322 {\cf20 // internal macros for string concatenation and anonymous variable name generation}\par
323 {\cf21 #define DOCTEST_CAT_IMPL(s1, s2) s1##s2}\par
324 {\cf21 #define DOCTEST_CAT(s1, s2) DOCTEST_CAT_IMPL(s1, s2)}\par
325 {\cf21 #ifdef __COUNTER__ }{\cf20 // not standard and may be missing for some compilers}\par
326 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)}\par
327 {\cf21 #else }{\cf20 // __COUNTER__}\par
328 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)}\par
329 {\cf21 #endif }{\cf20 // __COUNTER__}\par
330 \par
331 {\cf21 #define DOCTEST_TOSTR(x) #x}\par
332 \par
333 {\cf21 #ifndef DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
334 {\cf21 #define DOCTEST_REF_WRAP(x) x&}\par
335 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
336 {\cf21 #define DOCTEST_REF_WRAP(x) x}\par
337 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
338 \par
339 {\cf20 // not using __APPLE__ because... this is how Catch does it}\par
340 {\cf21 #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED}\par
341 {\cf21 #define DOCTEST_PLATFORM_MAC}\par
342 {\cf21 #elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)}\par
343 {\cf21 #define DOCTEST_PLATFORM_IPHONE}\par
344 {\cf21 #elif defined(_WIN32)}\par
345 {\cf21 #define DOCTEST_PLATFORM_WINDOWS}\par
346 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM}\par
347 {\cf21 #define DOCTEST_PLATFORM_LINUX}\par
348 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM}\par
349 \par
350 {\cf21 #define DOCTEST_GLOBAL_NO_WARNINGS(var)                                                            \\}\par
351 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wglobal-constructors"})                              \\\par
352     DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-variable")                                            \\\par
353     static int var DOCTEST_UNUSED {\cf20 // NOLINT(fuchsia-statically-constructed-objects,cert-err58-cpp)}\par
354 {\cf21 #define DOCTEST_GLOBAL_NO_WARNINGS_END() DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
355 \par
356 {\cf21 #ifndef DOCTEST_BREAK_INTO_DEBUGGER}\par
357 {\cf20 // should probably take a look at https://github.com/scottt/debugbreak}\par
358 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
359 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n"} : :)\par
360 {\cf21 #elif DOCTEST_MSVC}\par
361 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __debugbreak()}\par
362 {\cf21 #elif defined(__MINGW32__)}\par
363 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wredundant-decls"})\par
364 extern "C" __declspec(dllimport) {\cf18 void} __stdcall DebugBreak();\par
365 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
366 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() ::DebugBreak()}\par
367 {\cf21 #else }{\cf20 // linux}\par
368 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() ((void)0)}\par
369 {\cf21 #endif }{\cf20 // linux}\par
370 {\cf21 #endif }{\cf20 // DOCTEST_BREAK_INTO_DEBUGGER}\par
371 \par
372 {\cf20 // this is kept here for backwards compatibility since the config option was changed}\par
373 {\cf21 #ifdef DOCTEST_CONFIG_USE_IOSFWD}\par
374 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
375 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_IOSFWD}\par
376 \par
377 {\cf21 #ifdef DOCTEST_CONFIG_USE_STD_HEADERS}\par
378 {\cf21 #include <iosfwd>}\par
379 {\cf21 #include <cstddef>}\par
380 {\cf21 #include <ostream>}\par
381 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
382 \par
383 {\cf21 #if DOCTEST_CLANG}\par
384 {\cf20 // to detect if libc++ is being used with clang (the _LIBCPP_VERSION identifier)}\par
385 {\cf21 #include <ciso646>}\par
386 {\cf21 #endif }{\cf20 // clang}\par
387 \par
388 {\cf21 #ifdef _LIBCPP_VERSION}\par
389 {\cf21 #define DOCTEST_STD_NAMESPACE_BEGIN _LIBCPP_BEGIN_NAMESPACE_STD}\par
390 {\cf21 #define DOCTEST_STD_NAMESPACE_END _LIBCPP_END_NAMESPACE_STD}\par
391 {\cf21 #else }{\cf20 // _LIBCPP_VERSION}\par
392 {\cf21 #define DOCTEST_STD_NAMESPACE_BEGIN namespace std \{}\par
393 {\cf21 #define DOCTEST_STD_NAMESPACE_END \}}\par
394 {\cf21 #endif }{\cf20 // _LIBCPP_VERSION}\par
395 \par
396 {\cf20 // Forward declaring 'X' in namespace std is not permitted by the C++ Standard.}\par
397 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)\par
398 \par
399 DOCTEST_STD_NAMESPACE_BEGIN {\cf20 // NOLINT (cert-dcl58-cpp)}\par
400 typedef decltype({\cf18 nullptr}) nullptr_t;\par
401 template <class charT>\par
402 struct char_traits;\par
403 template <>\par
404 struct char_traits<{\cf18 char}>;\par
405 template <class charT, class traits>\par
406 class basic_ostream;\par
407 typedef basic_ostream<{\cf18 char}, char_traits<{\cf18 char}>> ostream;\par
408 template <class... Types>\par
409 class tuple;\par
410 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
411 {\cf20 // see this issue on why this is needed: https://github.com/onqtam/doctest/issues/183}\par
412 {\cf17 template} <{\cf17 class} _Ty>\par
413 {\cf17 class }allocator;\par
414 {\cf17 template} <{\cf17 class} _Elem, {\cf17 class} _Traits, {\cf17 class} _Alloc>\par
415 {\cf17 class }basic_string;\par
416 {\cf17 using} {\cf18 string} = basic_string<char, char_traits<char>, allocator<char>>;\par
417 {\cf21 #endif }{\cf20 // VS 2019}\par
418 DOCTEST_STD_NAMESPACE_END\par
419 \par
420 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
421 \par
422 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
423 \par
424 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
425 {\cf21 #include <type_traits>}\par
426 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
427 \par
428 {\cf17 namespace }doctest \{\par
429 \par
430 DOCTEST_INTERFACE {\cf17 extern} {\cf18 bool} is_running_in_test;\par
431 \par
432 {\cf20 // A 24 byte string class (can be as small as 17 for x64 and 13 for x86) that can hold strings with length}\par
433 {\cf20 // of up to 23 chars on the stack before going on the heap - the last byte of the buffer is used for:}\par
434 {\cf20 // - "is small" bit - the highest bit - if "0" then it is small - otherwise its "1" (128)}\par
435 {\cf20 // - if small - capacity left before going on the heap - using the lowest 5 bits}\par
436 {\cf20 // - if small - 2 bits are left unused - the second and third highest ones}\par
437 {\cf20 // - if small - acts as a null terminator if strlen() is 23 (24 including the null terminator)}\par
438 {\cf20 //              and the "is small" bit remains "0" ("as well as the capacity left") so its OK}\par
439 {\cf20 // Idea taken from this lecture about the string implementation of facebook/folly - fbstring}\par
440 {\cf20 // https://www.youtube.com/watch?v=kPR8h4-qZdk}\par
441 {\cf20 // TODO:}\par
442 {\cf20 // - optimizations - like not deleting memory unnecessarily in operator= and etc.}\par
443 {\cf20 // - resize/reserve/clear}\par
444 {\cf20 // - substr}\par
445 {\cf20 // - replace}\par
446 {\cf20 // - back/front}\par
447 {\cf20 // - iterator stuff}\par
448 {\cf20 // - find & friends}\par
449 {\cf20 // - push_back/pop_back}\par
450 {\cf20 // - assign/insert/erase}\par
451 {\cf20 // - relational operators as free functions - taking const char* as one of the params}\par
452 {\cf17 class }DOCTEST_INTERFACE String\par
453 \{\par
454     {\cf17 static} {\cf17 const} {\cf18 unsigned} len  = 24;      \par
455     {\cf17 static} {\cf17 const} {\cf18 unsigned} last = len - 1; \par
456 \par
457     {\cf17 struct }view {\cf20 // len should be more than sizeof(view) - because of the final byte for flags}\par
458     \{\par
459         {\cf18 char}*    ptr;\par
460         {\cf18 unsigned} size;\par
461         {\cf18 unsigned} capacity;\par
462     \};\par
463 \par
464     {\cf17 union}\par
465     \{\par
466         {\cf18 char} buf[len];\par
467         view data;\par
468     \};\par
469 \par
470     {\cf18 bool} isOnStack(){\cf17  const }\{ {\cf19 return} (buf[last] & 128) == 0; \}\par
471     {\cf18 void} setOnHeap();\par
472     {\cf18 void} setLast({\cf18 unsigned} in = last);\par
473 \par
474     {\cf18 void} copy({\cf17 const} String& other);\par
475 \par
476 {\cf17 public}:\par
477     String();\par
478     ~String();\par
479 \par
480     {\cf20 // cppcheck-suppress noExplicitConstructor}\par
481     String({\cf17 const} {\cf18 char}* in);\par
482     String({\cf17 const} {\cf18 char}* in, {\cf18 unsigned} in_size);\par
483 \par
484     String({\cf17 const} String& other);\par
485     String& operator=({\cf17 const} String& other);\par
486 \par
487     String& operator+=({\cf17 const} String& other);\par
488     String  operator+({\cf17 const} String& other) {\cf17 const};\par
489 \par
490     String(String&& other);\par
491     String& operator=(String&& other);\par
492 \par
493     {\cf18 char}  operator[]({\cf18 unsigned} i) {\cf17 const};\par
494     {\cf18 char}& operator[]({\cf18 unsigned} i);\par
495 \par
496     {\cf20 // the only functions I'm willing to leave in the interface - available for inlining}\par
497     {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
498     {\cf18 char}*       c_str() \{\par
499         {\cf19 if}(isOnStack())\par
500             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
501         {\cf19 return} data.ptr;\par
502     \}\par
503 \par
504     {\cf18 unsigned} size() {\cf17 const};\par
505     {\cf18 unsigned} capacity() {\cf17 const};\par
506 \par
507     {\cf18 int} compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
508     {\cf18 int} compare({\cf17 const} String& other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
509 \};\par
510 \par
511 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
512 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
513 DOCTEST_INTERFACE {\cf18 bool} operator<({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
514 DOCTEST_INTERFACE {\cf18 bool} operator>({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
515 DOCTEST_INTERFACE {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
516 DOCTEST_INTERFACE {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
517 \par
518 DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in);\par
519 \par
520 {\cf17 namespace }Color \{\par
521     {\cf17 enum} Enum\par
522     \{\par
523         None = 0,\par
524         White,\par
525         Red,\par
526         Green,\par
527         Blue,\par
528         Cyan,\par
529         Yellow,\par
530         Grey,\par
531 \par
532         Bright = 0x10,\par
533 \par
534         BrightRed   = Bright | Red,\par
535         BrightGreen = Bright | Green,\par
536         LightGrey   = Bright | Grey,\par
537         BrightWhite = Bright | White\par
538     \};\par
539 \par
540     DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, Color::Enum code);\par
541 \} {\cf20 // namespace Color}\par
542 \par
543 {\cf17 namespace }assertType \{\par
544     {\cf17 enum} Enum\par
545     \{\par
546         {\cf20 // macro traits}\par
547 \par
548         is_warn    = 1,\par
549         is_check   = 2 * is_warn,\par
550         is_require = 2 * is_check,\par
551 \par
552         is_normal      = 2 * is_require,\par
553         is_throws      = 2 * is_normal,\par
554         is_throws_as   = 2 * is_throws,\par
555         is_throws_with = 2 * is_throws_as,\par
556         is_nothrow     = 2 * is_throws_with,\par
557 \par
558         is_false = 2 * is_nothrow,\par
559         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
560 \par
561         is_eq = 2 * is_unary,\par
562         is_ne = 2 * is_eq,\par
563 \par
564         is_lt = 2 * is_ne,\par
565         is_gt = 2 * is_lt,\par
566 \par
567         is_ge = 2 * is_gt,\par
568         is_le = 2 * is_ge,\par
569 \par
570         {\cf20 // macro types}\par
571 \par
572         DT_WARN    = is_normal | is_warn,\par
573         DT_CHECK   = is_normal | is_check,\par
574         DT_REQUIRE = is_normal | is_require,\par
575 \par
576         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
577         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
578         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
579 \par
580         DT_WARN_THROWS    = is_throws | is_warn,\par
581         DT_CHECK_THROWS   = is_throws | is_check,\par
582         DT_REQUIRE_THROWS = is_throws | is_require,\par
583 \par
584         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
585         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
586         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
587 \par
588         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
589         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
590         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
591         \par
592         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
593         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
594         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
595 \par
596         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
597         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
598         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
599 \par
600         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
601         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
602         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
603 \par
604         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
605         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
606         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
607 \par
608         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
609         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
610         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
611 \par
612         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
613         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
614         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
615 \par
616         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
617         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
618         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
619 \par
620         DT_WARN_LE    = is_normal | is_le | is_warn,\par
621         DT_CHECK_LE   = is_normal | is_le | is_check,\par
622         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
623 \par
624         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
625         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
626         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
627 \par
628         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
629         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
630         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
631     \};\par
632 \} {\cf20 // namespace assertType}\par
633 \par
634 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* assertString(assertType::Enum at);\par
635 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* failureString(assertType::Enum at);\par
636 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file);\par
637 \par
638 {\cf17 struct }DOCTEST_INTERFACE TestCaseData\par
639 \{\par
640     String      m_file;       {\cf20 // the file in which the test was registered}\par
641     {\cf18 unsigned}    m_line;       {\cf20 // the line where the test was registered}\par
642     {\cf17 const} {\cf18 char}* m_name;       {\cf20 // name of the test case}\par
643     {\cf17 const} {\cf18 char}* m_test_suite; {\cf20 // the test suite in which the test was added}\par
644     {\cf17 const} {\cf18 char}* m_description;\par
645     {\cf18 bool}        m_skip;\par
646     {\cf18 bool}        m_may_fail;\par
647     {\cf18 bool}        m_should_fail;\par
648     {\cf18 int}         m_expected_failures;\par
649     {\cf18 double}      m_timeout;\par
650 \};\par
651 \par
652 {\cf17 struct }DOCTEST_INTERFACE AssertData\par
653 \{\par
654     {\cf20 // common - for all asserts}\par
655     {\cf17 const} TestCaseData* m_test_case;\par
656     assertType::Enum    m_at;\par
657     {\cf17 const} {\cf18 char}*         m_file;\par
658     {\cf18 int}                 m_line;\par
659     {\cf17 const} {\cf18 char}*         m_expr;\par
660     {\cf18 bool}                m_failed;\par
661 \par
662     {\cf20 // exception-related - for all asserts}\par
663     {\cf18 bool}   m_threw;\par
664     String m_exception;\par
665 \par
666     {\cf20 // for normal asserts}\par
667     String m_decomp;\par
668 \par
669     {\cf20 // for specific exception-related asserts}\par
670     {\cf18 bool}        m_threw_as;\par
671     {\cf17 const} {\cf18 char}* m_exception_type;\par
672     {\cf17 const} {\cf18 char}* m_exception_string;\par
673 \};\par
674 \par
675 {\cf17 struct }DOCTEST_INTERFACE MessageData\par
676 \{\par
677     String           m_string;\par
678     {\cf17 const} {\cf18 char}*      m_file;\par
679     {\cf18 int}              m_line;\par
680     assertType::Enum m_severity;\par
681 \};\par
682 \par
683 {\cf17 struct }DOCTEST_INTERFACE SubcaseSignature\par
684 \{\par
685     String      m_name;\par
686     {\cf17 const} {\cf18 char}* m_file;\par
687     {\cf18 int}         m_line;\par
688 \par
689     {\cf18 bool} operator<({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
690 \};\par
691 \par
692 {\cf17 struct }DOCTEST_INTERFACE IContextScope\par
693 \{\par
694     IContextScope();\par
695     {\cf17 virtual} ~IContextScope();\par
696     {\cf17 virtual} {\cf18 void} stringify(std::ostream*) {\cf17 const} = 0;\par
697 \};\par
698 \par
699 {\cf17 struct }ContextOptions \par
700 \{\par
701     std::ostream* cout;        {\cf20 // stdout stream - std::cout by default}\par
702     std::ostream* cerr;        {\cf20 // stderr stream - std::cerr by default}\par
703     String        binary_name; {\cf20 // the test binary name}\par
704 \par
705     {\cf20 // == parameters from the command line}\par
706     String   out;       {\cf20 // output filename}\par
707     String   order_by;  {\cf20 // how tests should be ordered}\par
708     {\cf18 unsigned} rand_seed; {\cf20 // the seed for rand ordering}\par
709 \par
710     {\cf18 unsigned} first; {\cf20 // the first (matching) test to be executed}\par
711     {\cf18 unsigned} last;  {\cf20 // the last (matching) test to be executed}\par
712 \par
713     {\cf18 int} abort_after;           {\cf20 // stop tests after this many failed assertions}\par
714     {\cf18 int} subcase_filter_levels; {\cf20 // apply the subcase filters for the first N levels}\par
715 \par
716     {\cf18 bool} success;              {\cf20 // include successful assertions in output}\par
717     {\cf18 bool} case_sensitive;       {\cf20 // if filtering should be case sensitive}\par
718     {\cf18 bool} exit;                 {\cf20 // if the program should be exited after the tests are ran/whatever}\par
719     {\cf18 bool} duration;             {\cf20 // print the time duration of each test case}\par
720     {\cf18 bool} no_throw;             {\cf20 // to skip exceptions-related assertion macros}\par
721     {\cf18 bool} no_exitcode;          {\cf20 // if the framework should return 0 as the exitcode}\par
722     {\cf18 bool} no_run;               {\cf20 // to not run the tests at all (can be done with an "*" exclude)}\par
723     {\cf18 bool} no_version;           {\cf20 // to not print the version of the framework}\par
724     {\cf18 bool} no_colors;            {\cf20 // if output to the console should be colorized}\par
725     {\cf18 bool} force_colors;         {\cf20 // forces the use of colors even when a tty cannot be detected}\par
726     {\cf18 bool} no_breaks;            {\cf20 // to not break into the debugger}\par
727     {\cf18 bool} no_skip;              {\cf20 // don't skip test cases which are marked to be skipped}\par
728     {\cf18 bool} gnu_file_line;        {\cf20 // if line numbers should be surrounded with :x: and not (x):}\par
729     {\cf18 bool} no_path_in_filenames; {\cf20 // if the path to files should be removed from the output}\par
730     {\cf18 bool} no_line_numbers;      {\cf20 // if source code line numbers should be omitted from the output}\par
731     {\cf18 bool} no_skipped_summary;   {\cf20 // don't print "skipped" in the summary !!! UNDOCUMENTED !!!}\par
732     {\cf18 bool} no_time_in_output;    {\cf20 // omit any time/timestamps from output !!! UNDOCUMENTED !!!}\par
733 \par
734     {\cf18 bool} help;             {\cf20 // to print the help}\par
735     {\cf18 bool} version;          {\cf20 // to print the version}\par
736     {\cf18 bool} count;            {\cf20 // if only the count of matching tests is to be retrieved}\par
737     {\cf18 bool} list_test_cases;  {\cf20 // to list all tests matching the filters}\par
738     {\cf18 bool} list_test_suites; {\cf20 // to list all suites matching the filters}\par
739     {\cf18 bool} list_reporters;   {\cf20 // lists all registered reporters}\par
740 \};\par
741 \par
742 {\cf17 namespace }detail \{\par
743 {\cf21 #if defined(DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING) || defined(DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS)}\par
744     {\cf17 template} <{\cf18 bool} CONDITION, {\cf17 typename} TYPE = {\cf18 void}>\par
745     {\cf17 struct }enable_if\par
746     \{\};\par
747 \par
748     {\cf17 template} <{\cf17 typename} TYPE>\par
749     {\cf17 struct }enable_if<true, TYPE>\par
750     \{ {\cf17 typedef} TYPE type; \};\par
751 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING) || DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
752 \par
753     {\cf20 // clang-format off}\par
754     {\cf17 template}<{\cf17 class} T> {\cf17 struct }remove_reference      \{ {\cf17 typedef} T type; \};\par
755     {\cf17 template}<{\cf17 class} T> {\cf17 struct }remove_reference<T&>  \{ {\cf17 typedef} T type; \};\par
756     {\cf17 template}<{\cf17 class} T> {\cf17 struct }remove_reference<T&&> \{ {\cf17 typedef} T type; \};\par
757 \par
758     {\cf17 template}<{\cf17 class} T> {\cf17 struct }remove_const          \{ {\cf17 typedef} T type; \};\par
759     {\cf17 template}<{\cf17 class} T> {\cf17 struct }remove_const<const T> \{ {\cf17 typedef} T type; \};\par
760     {\cf20 // clang-format on}\par
761 \par
762     {\cf17 template} <{\cf17 typename} T>\par
763     {\cf17 struct }deferred_false\par
764     {\cf20 // cppcheck-suppress unusedStructMember}\par
765     \{ {\cf17 static} {\cf17 const} {\cf18 bool} value = {\cf17 false}; \};\par
766 \par
767     {\cf17 namespace }has_insertion_operator_impl \{\par
768         std::ostream &os();\par
769         {\cf17 template}<{\cf17 class} T>\par
770         DOCTEST_REF_WRAP(T) val();\par
771 \par
772         {\cf17 template}<{\cf17 class}, {\cf17 class} = {\cf18 void}>\par
773         {\cf17 struct }check \{\par
774             {\cf17 static} {\cf17 constexpr} {\cf17 auto} value = {\cf17 false};\par
775         \};\par
776 \par
777         {\cf17 template}<{\cf17 class} T>\par
778         {\cf17 struct }check<T, decltype(os() << val<T>(), void())> \{\par
779             {\cf17 static} {\cf17 constexpr} {\cf17 auto} value = {\cf17 true};\par
780         \};\par
781     \} {\cf20 // namespace has_insertion_operator_impl}\par
782 \par
783     {\cf17 template}<{\cf17 class} T>\par
784     {\cf17 using} has_insertion_operator = has_insertion_operator_impl::check<T>;\par
785 \par
786     DOCTEST_INTERFACE {\cf18 void} my_memcpy({\cf18 void}* dest, {\cf17 const} {\cf18 void}* src, {\cf18 unsigned} num);\par
787 \par
788     DOCTEST_INTERFACE std::ostream* getTlsOss(); {\cf20 // returns a thread-local ostringstream}\par
789     DOCTEST_INTERFACE String getTlsOssResult();\par
790 \par
791     {\cf17 template} <{\cf18 bool} C>\par
792     {\cf17 struct }StringMakerBase\par
793     \{\par
794         {\cf17 template} <{\cf17 typename} T>\par
795         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T)) \{\par
796             {\cf19 return} {\cf22 "\{?\}"};\par
797         \}\par
798     \};\par
799 \par
800     {\cf17 template} <>\par
801     {\cf17 struct }StringMakerBase<true>\par
802     \{\par
803         {\cf17 template} <{\cf17 typename} T>\par
804         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T) in) \{\par
805             *getTlsOss() << in;\par
806             {\cf19 return} getTlsOssResult();\par
807         \}\par
808     \};\par
809 \par
810     DOCTEST_INTERFACE String rawMemoryToString({\cf17 const} {\cf18 void}* {\cf18 object}, {\cf18 unsigned} size);\par
811 \par
812     {\cf17 template} <{\cf17 typename} T>\par
813     String rawMemoryToString({\cf17 const} DOCTEST_REF_WRAP(T) {\cf18 object}) \{\par
814         {\cf19 return} rawMemoryToString(&{\cf18 object}, {\cf17 sizeof}({\cf18 object}));\par
815     \}\par
816 \par
817     {\cf17 template} <{\cf17 typename} T>\par
818     {\cf17 const} {\cf18 char}* type_to_string() \{\par
819         {\cf19 return} {\cf22 "<>"};\par
820     \}\par
821 \} {\cf20 // namespace detail}\par
822 \par
823 {\cf17 template} <{\cf17 typename} T>\par
824 {\cf17 struct }StringMaker : {\cf17 public} detail::StringMakerBase<detail::has_insertion_operator<T>::value>\par
825 \{\};\par
826 \par
827 {\cf17 template} <{\cf17 typename} T>\par
828 {\cf17 struct }StringMaker<T*>\par
829 \{\par
830     {\cf17 template} <{\cf17 typename} U>\par
831     {\cf17 static} String convert(U* p) \{\par
832         {\cf19 if}(p)\par
833             {\cf19 return} detail::rawMemoryToString(p);\par
834         {\cf19 return} {\cf22 "NULL"};\par
835     \}\par
836 \};\par
837 \par
838 {\cf17 template} <{\cf17 typename} R, {\cf17 typename} C>\par
839 {\cf17 struct }StringMaker<R C::*>\par
840 \{\par
841     {\cf17 static} String convert(R C::*p) \{\par
842         {\cf19 if}(p)\par
843             {\cf19 return} detail::rawMemoryToString(p);\par
844         {\cf19 return} {\cf22 "NULL"};\par
845     \}\par
846 \};\par
847 \par
848 {\cf17 template} <{\cf17 typename} T>\par
849 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
850     {\cf19 return} StringMaker<T>::convert(value);\par
851 \}\par
852 \par
853 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
854 DOCTEST_INTERFACE String toString({\cf18 char}* in);\par
855 DOCTEST_INTERFACE String toString({\cf17 const} {\cf18 char}* in);\par
856 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
857 DOCTEST_INTERFACE String toString({\cf18 bool} in);\par
858 DOCTEST_INTERFACE String toString({\cf18 float} in);\par
859 DOCTEST_INTERFACE String toString({\cf18 double} in);\par
860 DOCTEST_INTERFACE String toString({\cf18 double} {\cf18 long} in);\par
861 \par
862 DOCTEST_INTERFACE String toString({\cf18 char} in);\par
863 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 signed} in);\par
864 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 unsigned} in);\par
865 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 short} in);\par
866 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 short} {\cf18 unsigned} in);\par
867 DOCTEST_INTERFACE String toString({\cf18 int} in);\par
868 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 unsigned} in);\par
869 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 long} in);\par
870 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 long} {\cf18 unsigned} in);\par
871 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 long} {\cf18 long} in);\par
872 DOCTEST_INTERFACE String toString({\cf18 int} {\cf18 long} {\cf18 long} {\cf18 unsigned} in);\par
873 DOCTEST_INTERFACE String toString(std::nullptr_t in);\par
874 \par
875 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
876 {\cf20 // see this issue on why this is needed: https://github.com/onqtam/doctest/issues/183}\par
877 DOCTEST_INTERFACE String toString({\cf17 const} std::string& in);\par
878 {\cf21 #endif }{\cf20 // VS 2019}\par
879 \par
880 {\cf17 class }DOCTEST_INTERFACE Approx\par
881 \{\par
882 {\cf17 public}:\par
883     {\cf17 explicit} Approx({\cf18 double} value);\par
884 \par
885     Approx operator()({\cf18 double} value) {\cf17 const};\par
886 \par
887 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
888     {\cf17 template} <{\cf17 typename} T>\par
889     {\cf17 explicit} Approx({\cf17 const} T& value,\par
890                     {\cf17 typename} detail::enable_if<std::is_constructible<double, T>::value>::type* =\par
891                             {\cf17 static_cast<}T*{\cf17 >}({\cf17 nullptr})) \{\par
892         *{\cf17 this} = Approx({\cf17 static_cast<}{\cf18 double}{\cf17 >}(value));\par
893     \}\par
894 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
895 \par
896     Approx& epsilon({\cf18 double} newEpsilon);\par
897 \par
898 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
899     {\cf17 template} <{\cf17 typename} T>\par
900     {\cf17 typename} detail::enable_if<std::is_constructible<double, T>::value, Approx&>::type epsilon(\par
901             {\cf17 const} T& newEpsilon) \{\par
902         m_epsilon = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newEpsilon);\par
903         {\cf19 return} *{\cf17 this};\par
904     \}\par
905 {\cf21 #endif }{\cf20 //  DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
906 \par
907     Approx& scale({\cf18 double} newScale);\par
908 \par
909 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
910     {\cf17 template} <{\cf17 typename} T>\par
911     {\cf17 typename} detail::enable_if<std::is_constructible<double, T>::value, Approx&>::type scale(\par
912             {\cf17 const} T& newScale) \{\par
913         m_scale = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newScale);\par
914         {\cf19 return} *{\cf17 this};\par
915     \}\par
916 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
917 \par
918     {\cf20 // clang-format off}\par
919     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
920     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
921     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
922     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
923     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
924     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
925     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
926     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
927     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
928     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
929     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
930     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
931 \par
932     DOCTEST_INTERFACE {\cf17 friend} String toString({\cf17 const} Approx& in);\par
933 \par
934 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
935 {\cf21 #define DOCTEST_APPROX_PREFIX \\}\par
936 {\cf21     template <typename T> friend typename detail::enable_if<std::is_constructible<double, T>::value, bool>::type}\par
937 \par
938     DOCTEST_APPROX_PREFIX operator==({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} operator==({\cf18 double}(lhs), rhs); \}\par
939     DOCTEST_APPROX_PREFIX operator==({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
940     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
941     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
942     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} double(lhs) < rhs.m_value || lhs == rhs; \}\par
943     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < double(rhs) || lhs == rhs; \}\par
944     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} double(lhs) > rhs.m_value || lhs == rhs; \}\par
945     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > double(rhs) || lhs == rhs; \}\par
946     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} double(lhs) < rhs.m_value && lhs != rhs; \}\par
947     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < double(rhs) && lhs != rhs; \}\par
948     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} double(lhs) > rhs.m_value && lhs != rhs; \}\par
949     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > double(rhs) && lhs != rhs; \}\par
950 {\cf21 #undef DOCTEST_APPROX_PREFIX}\par
951 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
952 \par
953     {\cf20 // clang-format on}\par
954 \par
955 {\cf17 private}:\par
956     {\cf18 double} m_epsilon;\par
957     {\cf18 double} m_scale;\par
958     {\cf18 double} m_value;\par
959 \};\par
960 \par
961 DOCTEST_INTERFACE String toString({\cf17 const} Approx& in);\par
962 \par
963 DOCTEST_INTERFACE {\cf17 const} ContextOptions* getContextOptions();\par
964 \par
965 {\cf21 #if !defined(DOCTEST_CONFIG_DISABLE)}\par
966 \par
967 {\cf17 namespace }detail \{\par
968     {\cf20 // clang-format off}\par
969 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
970     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array       \{ {\cf17 typedef} T type; \};\par
971     {\cf17 template}<{\cf17 class} T, {\cf18 unsigned} N>   {\cf17 struct }decay_array<T[N]> \{ {\cf17 typedef} T* type; \};\par
972     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array<T[]>  \{ {\cf17 typedef} T* type; \};\par
973 \par
974     {\cf17 template}<{\cf17 class} T>   {\cf17 struct }not_char_pointer              \{ {\cf17 enum} \{ value = 1 \}; \};\par
975     {\cf17 template}<>          {\cf17 struct }not_char_pointer<char*>       \{ {\cf17 enum} \{ value = 0 \}; \};\par
976     {\cf17 template}<>          {\cf17 struct }not_char_pointer<const char*> \{ {\cf17 enum} \{ value = 0 \}; \};\par
977 \par
978     {\cf17 template}<{\cf17 class} T> {\cf17 struct }can_use_op : {\cf17 public} not_char_pointer<typename decay_array<T>::type> \{\};\par
979 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
980     {\cf20 // clang-format on}\par
981 \par
982     {\cf17 struct }DOCTEST_INTERFACE TestFailureException\par
983     \{\par
984     \};\par
985 \par
986     DOCTEST_INTERFACE {\cf18 bool} checkIfShouldThrow(assertType::Enum at);\par
987 \par
988 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
989     DOCTEST_NORETURN\par
990 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
991     DOCTEST_INTERFACE {\cf18 void} throwException();\par
992 \par
993     {\cf17 struct }DOCTEST_INTERFACE Subcase\par
994     \{\par
995         SubcaseSignature m_signature;\par
996         {\cf18 bool}             m_entered = {\cf17 false};\par
997 \par
998         Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
999         ~Subcase();\par
1000 \par
1001         {\cf17 operator} bool() {\cf17 const};\par
1002     \};\par
1003 \par
1004     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>\par
1005     String stringifyBinaryExpr({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} {\cf18 char}* op,\par
1006                                {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1007         {\cf19 return} toString(lhs) + op + toString(rhs);\par
1008     \}\par
1009 \par
1010 {\cf21 #define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op, op_str, op_macro)                              \\}\par
1011 {\cf21     template <typename R>                                                                          \\}\par
1012 {\cf21     DOCTEST_NOINLINE Result operator op(const DOCTEST_REF_WRAP(R) rhs) \{                           \\}\par
1013 {\cf21         bool res = op_macro(lhs, rhs);                                                             \\}\par
1014 {\cf21         if(m_at & assertType::is_false)                                                            \\}\par
1015 {\cf21             res = !res;                                                                            \\}\par
1016 {\cf21         if(!res || doctest::getContextOptions()->success)                                          \\}\par
1017 {\cf21             return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\}\par
1018 {\cf21         return Result(res);                                                                        \\}\par
1019 {\cf21     \}}\par
1020 \par
1021     {\cf20 // more checks could be added - like in Catch:}\par
1022     {\cf20 // https://github.com/catchorg/Catch2/pull/1480/files}\par
1023     {\cf20 // https://github.com/catchorg/Catch2/pull/1481/files}\par
1024 {\cf21 #define DOCTEST_FORBIT_EXPRESSION(rt, op)                                                          \\}\par
1025 {\cf21     template <typename R>                                                                          \\}\par
1026 {\cf21     rt& operator op(const R&) \{                                                                    \\}\par
1027 {\cf21         static_assert(deferred_false<R>::value,                                                    \\}\par
1028 {\cf21                       "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
1029         return *this;                                                                              \\\par
1030     \}\par
1031 \par
1032     {\cf17 struct }DOCTEST_INTERFACE Result\par
1033     \{\par
1034         {\cf18 bool}   m_passed;\par
1035         String m_decomp;\par
1036 \par
1037         Result({\cf18 bool} passed, {\cf17 const} String& decomposition = String());\par
1038 \par
1039         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1040         DOCTEST_FORBIT_EXPRESSION(Result, &)\par
1041         DOCTEST_FORBIT_EXPRESSION(Result, ^)\par
1042         DOCTEST_FORBIT_EXPRESSION(Result, |)\par
1043         DOCTEST_FORBIT_EXPRESSION(Result, &&)\par
1044         DOCTEST_FORBIT_EXPRESSION(Result, ||)\par
1045         DOCTEST_FORBIT_EXPRESSION(Result, ==)\par
1046         DOCTEST_FORBIT_EXPRESSION(Result, !=)\par
1047         DOCTEST_FORBIT_EXPRESSION(Result, <)\par
1048         DOCTEST_FORBIT_EXPRESSION(Result, >)\par
1049         DOCTEST_FORBIT_EXPRESSION(Result, <=)\par
1050         DOCTEST_FORBIT_EXPRESSION(Result, >=)\par
1051         DOCTEST_FORBIT_EXPRESSION(Result, =)\par
1052         DOCTEST_FORBIT_EXPRESSION(Result, +=)\par
1053         DOCTEST_FORBIT_EXPRESSION(Result, -=)\par
1054         DOCTEST_FORBIT_EXPRESSION(Result, *=)\par
1055         DOCTEST_FORBIT_EXPRESSION(Result, /=)\par
1056         DOCTEST_FORBIT_EXPRESSION(Result, %=)\par
1057         DOCTEST_FORBIT_EXPRESSION(Result, <<=)\par
1058         DOCTEST_FORBIT_EXPRESSION(Result, >>=)\par
1059         DOCTEST_FORBIT_EXPRESSION(Result, &=)\par
1060         DOCTEST_FORBIT_EXPRESSION(Result, ^=)\par
1061         DOCTEST_FORBIT_EXPRESSION(Result, |=)\par
1062     \};\par
1063 \par
1064 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1065 \par
1066     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
1067     DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wsign-conversion"})\par
1068     DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-compare")\par
1069     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1070     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wconversion")}\par
1071     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wfloat-equal")}\par
1072 \par
1073     DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
1074     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
1075     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-compare")\par
1076     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1077     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")}\par
1078     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wfloat-equal")}\par
1079 \par
1080     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
1081     {\cf20 // https://stackoverflow.com/questions/39479163 what's the difference between 4018 and 4389}\par
1082     DOCTEST_MSVC_SUPPRESS_WARNING(4388) {\cf20 // signed/unsigned mismatch}\par
1083     DOCTEST_MSVC_SUPPRESS_WARNING(4389) {\cf20 // 'operator' : signed/unsigned mismatch}\par
1084     DOCTEST_MSVC_SUPPRESS_WARNING(4018) {\cf20 // 'expression' : signed/unsigned mismatch}\par
1085     {\cf20 //DOCTEST_MSVC_SUPPRESS_WARNING(4805) // 'operation' : unsafe mix of type 'type' and type 'type' in operation}\par
1086 \par
1087 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1088 \par
1089     {\cf20 // clang-format off}\par
1090 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1091 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE bool}\par
1092 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1093 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE typename enable_if<can_use_op<L>::value || can_use_op<R>::value, bool>::type}\par
1094     {\cf17 inline} {\cf18 bool} eq({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) == String(rhs); \}\par
1095     {\cf17 inline} {\cf18 bool} ne({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) != String(rhs); \}\par
1096     {\cf17 inline} {\cf18 bool} lt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <  String(rhs); \}\par
1097     {\cf17 inline} {\cf18 bool} gt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >  String(rhs); \}\par
1098     {\cf17 inline} {\cf18 bool} le({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <= String(rhs); \}\par
1099     {\cf17 inline} {\cf18 bool} ge({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >= String(rhs); \}\par
1100 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1101     {\cf20 // clang-format on}\par
1102 \par
1103 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
1104 {\cf21     template <typename L, typename R>                                                              \\}\par
1105 {\cf21     DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \\}\par
1106 {\cf21                                         const DOCTEST_REF_WRAP(R) rhs) \{                           \\}\par
1107 {\cf21         return lhs op rhs;                                                                         \\}\par
1108 {\cf21     \}}\par
1109 \par
1110     DOCTEST_RELATIONAL_OP(eq, ==)\par
1111     DOCTEST_RELATIONAL_OP(ne, !=)\par
1112     DOCTEST_RELATIONAL_OP(lt, <)\par
1113     DOCTEST_RELATIONAL_OP(gt, >)\par
1114     DOCTEST_RELATIONAL_OP(le, <=)\par
1115     DOCTEST_RELATIONAL_OP(ge, >=)\par
1116 \par
1117 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1118 {\cf21 #define DOCTEST_CMP_EQ(l, r) l == r}\par
1119 {\cf21 #define DOCTEST_CMP_NE(l, r) l != r}\par
1120 {\cf21 #define DOCTEST_CMP_GT(l, r) l > r}\par
1121 {\cf21 #define DOCTEST_CMP_LT(l, r) l < r}\par
1122 {\cf21 #define DOCTEST_CMP_GE(l, r) l >= r}\par
1123 {\cf21 #define DOCTEST_CMP_LE(l, r) l <= r}\par
1124 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1125 {\cf21 #define DOCTEST_CMP_EQ(l, r) eq(l, r)}\par
1126 {\cf21 #define DOCTEST_CMP_NE(l, r) ne(l, r)}\par
1127 {\cf21 #define DOCTEST_CMP_GT(l, r) gt(l, r)}\par
1128 {\cf21 #define DOCTEST_CMP_LT(l, r) lt(l, r)}\par
1129 {\cf21 #define DOCTEST_CMP_GE(l, r) ge(l, r)}\par
1130 {\cf21 #define DOCTEST_CMP_LE(l, r) le(l, r)}\par
1131 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1132 \par
1133     {\cf17 template} <{\cf17 typename} L>\par
1134     {\cf20 // cppcheck-suppress copyCtorAndEqOperator}\par
1135     {\cf17 struct }Expression_lhs\par
1136     \{\par
1137         L                lhs;\par
1138         assertType::Enum m_at;\par
1139 \par
1140         {\cf17 explicit} Expression_lhs(L in, assertType::Enum at)\par
1141                 : lhs(in)\par
1142                 , m_at(at) \{\}\par
1143 \par
1144         DOCTEST_NOINLINE {\cf17 operator} Result() \{\par
1145             {\cf18 bool} res = !!lhs;\par
1146             {\cf19 if}(m_at & assertType::is_false) \par
1147                 res = !res;\par
1148 \par
1149             {\cf19 if}(!res || getContextOptions()->success)\par
1150                 {\cf19 return} Result(res, toString(lhs));\par
1151             {\cf19 return} Result(res);\par
1152         \}\par
1153 \par
1154         {\cf20 // clang-format off}\par
1155         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==, {\cf22 " == "}, DOCTEST_CMP_EQ) \par
1156         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=, {\cf22 " != "}, DOCTEST_CMP_NE) \par
1157         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>,  {\cf22 " >  "}, DOCTEST_CMP_GT) \par
1158         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<,  {\cf22 " <  "}, DOCTEST_CMP_LT) \par
1159         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>=, {\cf22 " >= "}, DOCTEST_CMP_GE) \par
1160         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<=, {\cf22 " <= "}, DOCTEST_CMP_LE) \par
1161         {\cf20 // clang-format on}\par
1162 \par
1163         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1164         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &)\par
1165         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^)\par
1166         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |)\par
1167         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &&)\par
1168         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ||)\par
1169         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, =)\par
1170         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, +=)\par
1171         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, -=)\par
1172         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, *=)\par
1173         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, /=)\par
1174         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, %=)\par
1175         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<=)\par
1176         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>=)\par
1177         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &=)\par
1178         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^=)\par
1179         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |=)\par
1180         {\cf20 // these 2 are unfortunate because they should be allowed - they have higher precedence over the comparisons, but the}\par
1181         {\cf20 // ExpressionDecomposer class uses the left shift operator to capture the left operand of the binary expression...}\par
1182         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<)\par
1183         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>)\par
1184     \};\par
1185 \par
1186 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1187 \par
1188     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1189     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1190     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
1191 \par
1192 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1193 \par
1194     {\cf17 struct }DOCTEST_INTERFACE ExpressionDecomposer\par
1195     \{\par
1196         assertType::Enum m_at;\par
1197 \par
1198         ExpressionDecomposer(assertType::Enum at);\par
1199 \par
1200         {\cf20 // The right operator for capturing expressions is "<=" instead of "<<" (based on the operator precedence table)}\par
1201         {\cf20 // but then there will be warnings from GCC about "-Wparentheses" and since "_Pragma()" is problematic this will stay for now...}\par
1202         {\cf20 // https://github.com/catchorg/Catch2/issues/870}\par
1203         {\cf20 // https://github.com/catchorg/Catch2/issues/565}\par
1204         {\cf17 template} <{\cf17 typename} L>\par
1205         Expression_lhs<{\cf17 const} DOCTEST_REF_WRAP(L)> operator<<({\cf17 const} DOCTEST_REF_WRAP(L) operand) \{\par
1206             {\cf19 return} Expression_lhs<const DOCTEST_REF_WRAP(L)>(operand, m_at);\par
1207         \}\par
1208     \};\par
1209 \par
1210     {\cf17 struct }DOCTEST_INTERFACE TestSuite\par
1211     \{\par
1212         {\cf17 const} {\cf18 char}* m_test_suite;\par
1213         {\cf17 const} {\cf18 char}* m_description;\par
1214         {\cf18 bool}        m_skip;\par
1215         {\cf18 bool}        m_may_fail;\par
1216         {\cf18 bool}        m_should_fail;\par
1217         {\cf18 int}         m_expected_failures;\par
1218         {\cf18 double}      m_timeout;\par
1219 \par
1220         TestSuite& operator*({\cf17 const} {\cf18 char}* in);\par
1221 \par
1222         {\cf17 template} <{\cf17 typename} T>\par
1223         TestSuite& operator*({\cf17 const} T& in) \{\par
1224             in.fill(*{\cf17 this});\par
1225             {\cf19 return} *{\cf17 this};\par
1226         \}\par
1227     \};\par
1228 \par
1229     {\cf17 typedef} void (*funcType)();\par
1230 \par
1231     {\cf17 struct }DOCTEST_INTERFACE TestCase : {\cf17 public} TestCaseData\par
1232     \{\par
1233         funcType m_test; {\cf20 // a function pointer to the test case}\par
1234 \par
1235         {\cf17 const} {\cf18 char}* m_type; {\cf20 // for templated test cases - gets appended to the real name}\par
1236         {\cf18 int} m_template_id; {\cf20 // an ID used to distinguish between the different versions of a templated test case}\par
1237         String m_full_name; {\cf20 // contains the name (only for templated test cases!) + the template type}\par
1238 \par
1239         TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
1240                  {\cf17 const} {\cf18 char}* type = {\cf22 ""}, {\cf18 int} template_id = -1);\par
1241 \par
1242         TestCase({\cf17 const} TestCase& other);\par
1243 \par
1244         DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
1245         TestCase& operator=(const TestCase& other);\par
1246         DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1247 \par
1248         TestCase& operator*(const {\cf18 char}* in);\par
1249 \par
1250         template <typename T>\par
1251         TestCase& operator*(const T& in) \{\par
1252             in.fill(*{\cf17 this});\par
1253             {\cf19 return} *{\cf17 this};\par
1254         \}\par
1255 \par
1256         {\cf18 bool} operator<({\cf17 const} TestCase& other) {\cf17 const};\par
1257     \};\par
1258 \par
1259     {\cf20 // forward declarations of functions used by the macros}\par
1260     DOCTEST_INTERFACE {\cf18 int}  regTest({\cf17 const} TestCase& tc);\par
1261     DOCTEST_INTERFACE {\cf18 int}  setTestSuite({\cf17 const} TestSuite& ts);\par
1262     DOCTEST_INTERFACE {\cf18 bool} isDebuggerActive();\par
1263 \par
1264     {\cf17 template}<{\cf17 typename} T>\par
1265     {\cf18 int} instantiationHelper({\cf17 const} T&) \{ {\cf19 return} 0; \}\par
1266 \par
1267     {\cf17 namespace }binaryAssertComparison \{\par
1268         {\cf17 enum} Enum\par
1269         \{\par
1270             eq = 0,\par
1271             ne,\par
1272             gt,\par
1273             lt,\par
1274             ge,\par
1275             le\par
1276         \};\par
1277     \} {\cf20 // namespace binaryAssertComparison}\par
1278 \par
1279     {\cf20 // clang-format off}\par
1280     {\cf17 template} <{\cf18 int}, {\cf17 class} L, {\cf17 class} R> {\cf17 struct }RelationalComparator     \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
1281 \par
1282 {\cf21 #define DOCTEST_BINARY_RELATIONAL_OP(n, op) \\}\par
1283 {\cf21     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const \{ return op(lhs, rhs); \} \};}\par
1284     {\cf20 // clang-format on}\par
1285 \par
1286     DOCTEST_BINARY_RELATIONAL_OP(0, eq)\par
1287     DOCTEST_BINARY_RELATIONAL_OP(1, ne)\par
1288     DOCTEST_BINARY_RELATIONAL_OP(2, gt)\par
1289     DOCTEST_BINARY_RELATIONAL_OP(3, lt)\par
1290     DOCTEST_BINARY_RELATIONAL_OP(4, ge)\par
1291     DOCTEST_BINARY_RELATIONAL_OP(5, le)\par
1292 \par
1293     struct DOCTEST_INTERFACE ResultBuilder : public AssertData\par
1294     \{\par
1295         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1296                       {\cf17 const} {\cf18 char}* exception_type = {\cf22 ""}, {\cf17 const} {\cf18 char}* exception_string = {\cf22 ""});\par
1297 \par
1298         {\cf18 void} setResult({\cf17 const} Result& res);\par
1299 \par
1300         {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1301         DOCTEST_NOINLINE {\cf18 void} binary_assert({\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1302                                             {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1303             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1304             {\cf19 if}(m_failed || getContextOptions()->success)\par
1305                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1306         \}\par
1307 \par
1308         {\cf17 template} <{\cf17 typename} L>\par
1309         DOCTEST_NOINLINE {\cf18 void} unary_assert({\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1310             m_failed = !val;\par
1311 \par
1312             {\cf19 if}(m_at & assertType::is_false) \par
1313                 m_failed = !m_failed;\par
1314 \par
1315             {\cf19 if}(m_failed || getContextOptions()->success)\par
1316                 m_decomp = toString(val);\par
1317         \}\par
1318 \par
1319         {\cf18 void} translateException();\par
1320 \par
1321         {\cf18 bool} log();\par
1322         {\cf18 void} react() {\cf17 const};\par
1323     \};\par
1324 \par
1325     {\cf17 namespace }assertAction \{\par
1326         {\cf17 enum} Enum\par
1327         \{\par
1328             nothing     = 0,\par
1329             dbgbreak    = 1,\par
1330             shouldthrow = 2\par
1331         \};\par
1332     \} {\cf20 // namespace assertAction}\par
1333 \par
1334     DOCTEST_INTERFACE {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad);\par
1335 \par
1336     DOCTEST_INTERFACE {\cf18 void} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1337                                          {\cf17 const} {\cf18 char}* expr, Result result);\par
1338 \par
1339 {\cf21 #define DOCTEST_ASSERT_OUT_OF_TESTS(decomp)                                                        \\}\par
1340 {\cf21     do \{                                                                                           \\}\par
1341 {\cf21         if(!is_running_in_test) \{                                                                  \\}\par
1342 {\cf21             if(failed) \{                                                                           \\}\par
1343 {\cf21                 ResultBuilder rb(at, file, line, expr);                                            \\}\par
1344 {\cf21                 rb.m_failed = failed;                                                              \\}\par
1345 {\cf21                 rb.m_decomp = decomp;                                                              \\}\par
1346 {\cf21                 failed_out_of_a_testing_context(rb);                                               \\}\par
1347 {\cf21                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\}\par
1348 {\cf21                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\}\par
1349 {\cf21                 if(checkIfShouldThrow(at))                                                         \\}\par
1350 {\cf21                     throwException();                                                              \\}\par
1351 {\cf21             \}                                                                                      \\}\par
1352 {\cf21             return;                                                                                \\}\par
1353 {\cf21         \}                                                                                          \\}\par
1354 {\cf21     \} while(false)}\par
1355 \par
1356 {\cf21 #define DOCTEST_ASSERT_IN_TESTS(decomp)                                                            \\}\par
1357 {\cf21     ResultBuilder rb(at, file, line, expr);                                                        \\}\par
1358 {\cf21     rb.m_failed = failed;                                                                          \\}\par
1359 {\cf21     if(rb.m_failed || getContextOptions()->success)                                                \\}\par
1360 {\cf21         rb.m_decomp = decomp;                                                                      \\}\par
1361 {\cf21     if(rb.log())                                                                                   \\}\par
1362 {\cf21         DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\}\par
1363 {\cf21     if(rb.m_failed && checkIfShouldThrow(at))                                                      \\}\par
1364 {\cf21     throwException()}\par
1365 \par
1366     {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1367     DOCTEST_NOINLINE {\cf18 void} binary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1368                                         {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1369                                         {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1370         {\cf18 bool} failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1371 \par
1372         {\cf20 // ###################################################################################}\par
1373         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1374         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1375         {\cf20 // ###################################################################################}\par
1376         DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1377         DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1378     \}\par
1379 \par
1380     {\cf17 template} <{\cf17 typename} L>\par
1381     DOCTEST_NOINLINE {\cf18 void} unary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1382                                        {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1383         {\cf18 bool} failed = !val;\par
1384 \par
1385         {\cf19 if}(at & assertType::is_false) \par
1386             failed = !failed;\par
1387 \par
1388         {\cf20 // ###################################################################################}\par
1389         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1390         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1391         {\cf20 // ###################################################################################}\par
1392         DOCTEST_ASSERT_OUT_OF_TESTS(toString(val));\par
1393         DOCTEST_ASSERT_IN_TESTS(toString(val));\par
1394     \}\par
1395 \par
1396     {\cf17 struct }DOCTEST_INTERFACE IExceptionTranslator\par
1397     \{\par
1398         IExceptionTranslator();\par
1399         {\cf17 virtual} ~IExceptionTranslator();\par
1400         {\cf17 virtual} {\cf18 bool} translate(String&) {\cf17 const} = 0;\par
1401     \};\par
1402 \par
1403     {\cf17 template} <{\cf17 typename} T>\par
1404     {\cf17 class }ExceptionTranslator : {\cf17 public} IExceptionTranslator \par
1405     \{\par
1406     {\cf17 public}:\par
1407         {\cf17 explicit} ExceptionTranslator(String (*translateFunction)(T))\par
1408                 : m_translateFunction(translateFunction) \{\}\par
1409 \par
1410         {\cf18 bool} translate(String& res){\cf17  const override }\{\par
1411 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1412             {\cf19 try} \{\par
1413                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1414                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1415             \} {\cf19 catch}(T ex) \{                    {\cf20 // NOLINT}\par
1416                 res = m_translateFunction(ex); \par
1417                 {\cf19 return} {\cf17 true};\par
1418             \} {\cf19 catch}(...) \{\} \par
1419 {\cf21 #endif                      }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1420             ((void)res);    {\cf20 // to silence -Wunused-parameter}\par
1421             {\cf19 return} {\cf17 false};\par
1422         \}\par
1423 \par
1424     {\cf17 private}:\par
1425         String (*m_translateFunction)(T);\par
1426     \};\par
1427 \par
1428     DOCTEST_INTERFACE {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et);\par
1429 \par
1430     {\cf17 template} <{\cf18 bool} C>\par
1431     {\cf17 struct }StringStreamBase\par
1432     \{\par
1433         {\cf17 template} <{\cf17 typename} T>\par
1434         {\cf17 static} {\cf18 void} convert(std::ostream* s, {\cf17 const} T& in) \{\par
1435             *s << toString(in);\par
1436         \}\par
1437 \par
1438         {\cf20 // always treat char* as a string in this context - no matter}\par
1439         {\cf20 // if DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING is defined}\par
1440         {\cf17 static} {\cf18 void} convert(std::ostream* s, {\cf17 const} {\cf18 char}* in) \{ *s << String(in); \}\par
1441     \};\par
1442 \par
1443     {\cf17 template} <>\par
1444     {\cf17 struct }StringStreamBase<true>\par
1445     \{\par
1446         {\cf17 template} <{\cf17 typename} T>\par
1447         {\cf17 static} {\cf18 void} convert(std::ostream* s, {\cf17 const} T& in) \{\par
1448             *s << in;\par
1449         \}\par
1450     \};\par
1451 \par
1452     {\cf17 template} <{\cf17 typename} T>\par
1453     {\cf17 struct }StringStream : {\cf17 public} StringStreamBase<has_insertion_operator<T>::value>\par
1454     \{\};\par
1455 \par
1456     {\cf17 template} <{\cf17 typename} T>\par
1457     {\cf18 void} toStream(std::ostream* s, {\cf17 const} T& value) \{\par
1458         StringStream<T>::convert(s, value);\par
1459     \}\par
1460 \par
1461 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1462     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 char}* in);\par
1463     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf17 const} {\cf18 char}* in);\par
1464 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1465     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 bool} in);\par
1466     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 float} in);\par
1467     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 double} in);\par
1468     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 double} {\cf18 long} in);\par
1469 \par
1470     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 char} in);\par
1471     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 char} {\cf18 signed} in);\par
1472     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 char} {\cf18 unsigned} in);\par
1473     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 short} in);\par
1474     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 short} {\cf18 unsigned} in);\par
1475     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} in);\par
1476     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 unsigned} in);\par
1477     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} in);\par
1478     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 unsigned} in);\par
1479     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 long} in);\par
1480     DOCTEST_INTERFACE {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 long} {\cf18 unsigned} in);\par
1481 \par
1482     {\cf20 // ContextScope base class used to allow implementing methods of ContextScope }\par
1483     {\cf20 // that don't depend on the template parameter in doctest.cpp.}\par
1484     {\cf17 class }DOCTEST_INTERFACE ContextScopeBase : {\cf17 public} IContextScope \{\par
1485     {\cf17 protected}:\par
1486         ContextScopeBase();\par
1487 \par
1488         {\cf18 void} destroy();\par
1489     \};\par
1490 \par
1491     {\cf17 template} <{\cf17 typename} L> {\cf17 class }ContextScope : {\cf17 public} ContextScopeBase\par
1492     \{\par
1493         {\cf17 const} L &lambda_;\par
1494 \par
1495     {\cf17 public}:\par
1496         {\cf17 explicit} ContextScope({\cf17 const} L &lambda) : lambda_(lambda) \{\}\par
1497 \par
1498         ContextScope(ContextScope &&other) : lambda_(other.lambda_) \{\}\par
1499 \par
1500         {\cf18 void} stringify(std::ostream* s){\cf17  const override }\{ lambda_(s); \}\par
1501 \par
1502         ~ContextScope(){\cf17  override }\{ destroy(); \}\par
1503     \};\par
1504 \par
1505     {\cf17 struct }DOCTEST_INTERFACE MessageBuilder : {\cf17 public} MessageData\par
1506     \{\par
1507         std::ostream* m_stream;\par
1508 \par
1509         MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity);\par
1510         MessageBuilder() = {\cf17 delete};\par
1511         ~MessageBuilder();\par
1512 \par
1513         {\cf17 template} <{\cf17 typename} T>\par
1514         MessageBuilder& operator<<({\cf17 const} T& in) \{\par
1515             toStream(m_stream, in);\par
1516             {\cf19 return} *{\cf17 this};\par
1517         \}\par
1518 \par
1519         {\cf18 bool} log();\par
1520         {\cf18 void} react();\par
1521     \};\par
1522     \par
1523     {\cf17 template} <{\cf17 typename} L>\par
1524     ContextScope<L> MakeContextScope({\cf17 const} L &lambda) \{\par
1525         {\cf19 return} ContextScope<L>(lambda);\par
1526     \}\par
1527 \} {\cf20 // namespace detail}\par
1528 \par
1529 {\cf21 #define DOCTEST_DEFINE_DECORATOR(name, type, def)                                                  \\}\par
1530 {\cf21     struct name                                                                                    \\}\par
1531 {\cf21     \{                                                                                              \\}\par
1532 {\cf21         type data;                                                                                 \\}\par
1533 {\cf21         name(type in = def)                                                                        \\}\par
1534 {\cf21                 : data(in) \{\}                                                                      \\}\par
1535 {\cf21         void fill(detail::TestCase& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}           \\}\par
1536 {\cf21         void fill(detail::TestSuite& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}          \\}\par
1537 {\cf21     \}}\par
1538 \par
1539 DOCTEST_DEFINE_DECORATOR(test_suite, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1540 DOCTEST_DEFINE_DECORATOR(description, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1541 DOCTEST_DEFINE_DECORATOR(skip, {\cf18 bool}, {\cf17 true});\par
1542 DOCTEST_DEFINE_DECORATOR(timeout, {\cf18 double}, 0);\par
1543 DOCTEST_DEFINE_DECORATOR(may_fail, {\cf18 bool}, {\cf17 true});\par
1544 DOCTEST_DEFINE_DECORATOR(should_fail, {\cf18 bool}, {\cf17 true});\par
1545 DOCTEST_DEFINE_DECORATOR(expected_failures, {\cf18 int}, 0);\par
1546 \par
1547 {\cf17 template} <{\cf17 typename} T>\par
1548 {\cf18 int} registerExceptionTranslator(String (*translateFunction)(T)) \{\par
1549     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})\par
1550     {\cf17 static} detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);\par
1551     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1552     detail::registerExceptionTranslatorImpl(&exceptionTranslator);\par
1553     {\cf19 return} 0;\par
1554 \}\par
1555 \par
1556 \} {\cf20 // namespace doctest}\par
1557 \par
1558 {\cf20 // in a separate namespace outside of doctest because the DOCTEST_TEST_SUITE macro}\par
1559 {\cf20 // introduces an anonymous namespace in which getCurrentTestSuite gets overridden}\par
1560 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
1561 DOCTEST_INTERFACE doctest::detail::TestSuite& getCurrentTestSuite();\par
1562 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
1563 \par
1564 {\cf17 namespace }doctest \{\par
1565 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1566 {\cf17 template} <{\cf17 typename} T>\par
1567 {\cf18 int} registerExceptionTranslator(String (*)(T)) \{\par
1568     {\cf19 return} 0;\par
1569 \}\par
1570 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1571 \par
1572 {\cf17 namespace }detail \{\par
1573     {\cf17 typedef} void (*assert_handler)({\cf17 const} AssertData&);\par
1574     {\cf17 struct }ContextState;\par
1575 \} {\cf20 // namespace detail}\par
1576 \par
1577 {\cf17 class }DOCTEST_INTERFACE Context\par
1578 \{\par
1579     detail::ContextState* p;\par
1580 \par
1581     {\cf18 void} parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults = {\cf17 false});\par
1582 \par
1583 {\cf17 public}:\par
1584     {\cf17 explicit} Context({\cf18 int} argc = 0, {\cf17 const} {\cf18 char}* {\cf17 const}* argv = {\cf17 nullptr});\par
1585 \par
1586     ~Context();\par
1587 \par
1588     {\cf18 void} applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv);\par
1589 \par
1590     {\cf18 void} addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value);\par
1591     {\cf18 void} clearFilters();\par
1592     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value);\par
1593     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value);\par
1594 \par
1595     {\cf18 bool} shouldExit();\par
1596 \par
1597     {\cf18 void} setAsDefaultForAssertsOutOfTestCases();\par
1598 \par
1599     {\cf18 void} setAssertHandler(detail::assert_handler ah);\par
1600 \par
1601     {\cf18 int} run();\par
1602 \};\par
1603 \par
1604 {\cf17 namespace }TestCaseFailureReason \{\par
1605     {\cf17 enum} Enum\par
1606     \{\par
1607         None                     = 0,\par
1608         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
1609         Exception                = 2,   {\cf20 // test case threw an exception}\par
1610         Crash                    = 4,   {\cf20 // a crash...}\par
1611         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
1612         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
1613         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
1614         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
1615         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
1616         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
1617         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
1618     \};\par
1619 \} {\cf20 // namespace TestCaseFailureReason}\par
1620 \par
1621 {\cf17 struct }DOCTEST_INTERFACE CurrentTestCaseStats\par
1622 \{\par
1623     {\cf18 int}    numAssertsCurrentTest;\par
1624     {\cf18 int}    numAssertsFailedCurrentTest;\par
1625     {\cf18 double} seconds;\par
1626     {\cf18 int}    failure_flags; {\cf20 // use TestCaseFailureReason::Enum}\par
1627 \};\par
1628 \par
1629 {\cf17 struct }DOCTEST_INTERFACE TestCaseException\par
1630 \{\par
1631     String error_string;\par
1632     {\cf18 bool}   is_crash;\par
1633 \};\par
1634 \par
1635 {\cf17 struct }DOCTEST_INTERFACE TestRunStats\par
1636 \{\par
1637     {\cf18 unsigned} numTestCases;\par
1638     {\cf18 unsigned} numTestCasesPassingFilters;\par
1639     {\cf18 unsigned} numTestSuitesPassingFilters;\par
1640     {\cf18 unsigned} numTestCasesFailed;\par
1641     {\cf18 int}      numAsserts;\par
1642     {\cf18 int}      numAssertsFailed;\par
1643 \};\par
1644 \par
1645 {\cf17 struct }QueryData\par
1646 \{\par
1647     {\cf17 const} TestRunStats*  run_stats = {\cf17 nullptr};\par
1648     {\cf17 const} TestCaseData** data      = {\cf17 nullptr};\par
1649     {\cf18 unsigned}             num_data  = 0;\par
1650 \};\par
1651 \par
1652 {\cf17 struct }DOCTEST_INTERFACE IReporter\par
1653 \{\par
1654     {\cf20 // The constructor has to accept "const ContextOptions&" as a single argument}\par
1655     {\cf20 // which has most of the options for the run + a pointer to the stdout stream}\par
1656     {\cf20 // Reporter(const ContextOptions& in)}\par
1657 \par
1658     {\cf20 // called when a query should be reported (listing test cases, printing the version, etc.)}\par
1659     {\cf17 virtual} {\cf18 void} report_query({\cf17 const} QueryData&) = 0;\par
1660 \par
1661     {\cf20 // called when the whole test run starts}\par
1662     {\cf17 virtual} {\cf18 void} test_run_start() = 0;\par
1663     {\cf20 // called when the whole test run ends (caching a pointer to the input doesn't make sense here)}\par
1664     {\cf17 virtual} {\cf18 void} test_run_end({\cf17 const} TestRunStats&) = 0;\par
1665 \par
1666     {\cf20 // called when a test case is started (safe to cache a pointer to the input)}\par
1667     {\cf17 virtual} {\cf18 void} test_case_start({\cf17 const} TestCaseData&) = 0;\par
1668     {\cf20 // called when a test case is reentered because of unfinished subcases (safe to cache a pointer to the input)}\par
1669     {\cf17 virtual} {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&) = 0;\par
1670     {\cf20 // called when a test case has ended}\par
1671     {\cf17 virtual} {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&) = 0;\par
1672 \par
1673     {\cf20 // called when an exception is thrown from the test case (or it crashes)}\par
1674     {\cf17 virtual} {\cf18 void} test_case_exception({\cf17 const} TestCaseException&) = 0;\par
1675 \par
1676     {\cf20 // called whenever a subcase is entered (don't cache pointers to the input)}\par
1677     {\cf17 virtual} {\cf18 void} subcase_start({\cf17 const} SubcaseSignature&) = 0;\par
1678     {\cf20 // called whenever a subcase is exited (don't cache pointers to the input)}\par
1679     {\cf17 virtual} {\cf18 void} subcase_end() = 0;\par
1680 \par
1681     {\cf20 // called for each assert (don't cache pointers to the input)}\par
1682     {\cf17 virtual} {\cf18 void} log_assert({\cf17 const} AssertData&) = 0;\par
1683     {\cf20 // called for each message (don't cache pointers to the input)}\par
1684     {\cf17 virtual} {\cf18 void} log_message({\cf17 const} MessageData&) = 0;\par
1685 \par
1686     {\cf20 // called when a test case is skipped either because it doesn't pass the filters, has a skip decorator}\par
1687     {\cf20 // or isn't in the execution range (between first and last) (safe to cache a pointer to the input)}\par
1688     {\cf17 virtual} {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&) = 0;\par
1689 \par
1690     {\cf20 // doctest will not be managing the lifetimes of reporters given to it but this would still be nice to have}\par
1691     {\cf17 virtual} ~IReporter();\par
1692 \par
1693     {\cf20 // can obtain all currently active contexts and stringify them if one wishes to do so}\par
1694     {\cf17 static} {\cf18 int}                         get_num_active_contexts();\par
1695     {\cf17 static} {\cf17 const} IContextScope* {\cf17 const}* get_active_contexts();\par
1696 \par
1697     {\cf20 // can iterate through contexts which have been stringified automatically in their destructors when an exception has been thrown}\par
1698     {\cf17 static} {\cf18 int}           get_num_stringified_contexts();\par
1699     {\cf17 static} {\cf17 const} String* get_stringified_contexts();\par
1700 \};\par
1701 \par
1702 {\cf17 namespace }detail \{\par
1703     {\cf17 typedef} IReporter* (*reporterCreatorFunc)({\cf17 const} ContextOptions&);\par
1704 \par
1705     DOCTEST_INTERFACE {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} prio, reporterCreatorFunc c, {\cf18 bool} isReporter);\par
1706 \par
1707     {\cf17 template} <{\cf17 typename} Reporter>\par
1708     IReporter* reporterCreator({\cf17 const} ContextOptions& o) \{\par
1709         {\cf19 return} {\cf17 new} Reporter(o);\par
1710     \}\par
1711 \} {\cf20 // namespace detail}\par
1712 \par
1713 {\cf17 template} <{\cf17 typename} Reporter>\par
1714 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, {\cf18 bool} isReporter) \{\par
1715     detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);\par
1716     {\cf19 return} 0;\par
1717 \}\par
1718 \} {\cf20 // namespace doctest}\par
1719 \par
1720 {\cf20 // if registering is not disabled}\par
1721 {\cf21 #if !defined(DOCTEST_CONFIG_DISABLE)}\par
1722 \par
1723 {\cf20 // common code in asserts - for convenience}\par
1724 {\cf21 #define DOCTEST_ASSERT_LOG_AND_REACT(b)                                                            \\}\par
1725 {\cf21     if(b.log())                                                                                    \\}\par
1726 {\cf21         DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\}\par
1727 {\cf21     b.react()}\par
1728 \par
1729 {\cf21 #ifdef DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
1730 {\cf21 #define DOCTEST_WRAP_IN_TRY(x) x;}\par
1731 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
1732 {\cf21 #define DOCTEST_WRAP_IN_TRY(x)                                                                     \\}\par
1733 {\cf21     try \{                                                                                          \\}\par
1734 {\cf21         x;                                                                                         \\}\par
1735 {\cf21     \} catch(...) \{ _DOCTEST_RB.translateException(); \}}\par
1736 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
1737 \par
1738 {\cf21 #ifdef DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
1739 {\cf21 #define DOCTEST_CAST_TO_VOID(...)                                                                  \\}\par
1740 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast"})                                       \\\par
1741     static_cast<void>(__VA_ARGS__);                                                                \\\par
1742     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
1743 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
1744 {\cf21 #define DOCTEST_CAST_TO_VOID(...) __VA_ARGS__;}\par
1745 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
1746 \par
1747 {\cf20 // registers the test by initializing a dummy var with a function}\par
1748 {\cf21 #define DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)                                    \\}\par
1749 {\cf21     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =              \\}\par
1750 {\cf21             doctest::detail::regTest(                                                              \\}\par
1751 {\cf21                     doctest::detail::TestCase(                                                     \\}\par
1752 {\cf21                             f, __FILE__, __LINE__,                                                 \\}\par
1753 {\cf21                             doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\}\par
1754 {\cf21                     decorators);                                                                   \\}\par
1755 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END()}\par
1756 \par
1757 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, decorators)                                     \\}\par
1758 {\cf21     namespace \{                                                                                    \\}\par
1759 {\cf21         struct der : public base                                                                   \\}\par
1760 {\cf21         \{                                                                                          \\}\par
1761 {\cf21             void f();                                                                              \\}\par
1762 {\cf21         \};                                                                                         \\}\par
1763 {\cf21         static void func() \{                                                                       \\}\par
1764 {\cf21             der v;                                                                                 \\}\par
1765 {\cf21             v.f();                                                                                 \\}\par
1766 {\cf21         \}                                                                                          \\}\par
1767 {\cf21         DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\}\par
1768 {\cf21     \}                                                                                              \\}\par
1769 {\cf21     inline DOCTEST_NOINLINE void der::f()}\par
1770 \par
1771 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)                                        \\}\par
1772 {\cf21     static void f();                                                                               \\}\par
1773 {\cf21     DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\}\par
1774 {\cf21     static void f()}\par
1775 \par
1776 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f, proxy, decorators)                        \\}\par
1777 {\cf21     static doctest::detail::funcType proxy() \{ return f; \}                                         \\}\par
1778 {\cf21     DOCTEST_REGISTER_FUNCTION(inline const, proxy(), decorators)                                   \\}\par
1779 {\cf21     static void f()}\par
1780 \par
1781 {\cf20 // for registering tests}\par
1782 {\cf21 #define DOCTEST_TEST_CASE(decorators)                                                              \\}\par
1783 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), decorators)}\par
1784 \par
1785 {\cf20 // for registering tests in classes - requires C++17 for inline variables!}\par
1786 {\cf21 #if __cplusplus >= 201703L || (DOCTEST_MSVC >= DOCTEST_COMPILER(19, 12, 0) && _MSVC_LANG >= 201703L)}\par
1787 {\cf21 #define DOCTEST_TEST_CASE_CLASS(decorators)                                                        \\}\par
1788 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_),          \\}\par
1789 {\cf21                                                   DOCTEST_ANONYMOUS(_DOCTEST_ANON_PROXY_),         \\}\par
1790 {\cf21                                                   decorators)}\par
1791 {\cf21 #else }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
1792 {\cf21 #define DOCTEST_TEST_CASE_CLASS(...)                                                               \\}\par
1793 {\cf21     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}\par
1794 {\cf21 #endif }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
1795 \par
1796 {\cf20 // for registering tests with a fixture}\par
1797 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(c, decorators)                                                   \\}\par
1798 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(_DOCTEST_ANON_CLASS_), c,                          \\}\par
1799 {\cf21                               DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), decorators)}\par
1800 \par
1801 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
1802 {\cf21 #define DOCTEST_TYPE_TO_STRING_IMPL(...)                                                           \\}\par
1803 {\cf21     template <>                                                                                    \\}\par
1804 {\cf21     inline const char* type_to_string<__VA_ARGS__>() \{                                             \\}\par
1805 {\cf21         return "<"} #__VA_ARGS__ ">";                                                               \\\par
1806     \}\par
1807 {\cf21 #define DOCTEST_TYPE_TO_STRING(...)                                                                \\}\par
1808 {\cf21     namespace doctest \{ namespace detail \{                                                         \\}\par
1809 {\cf21             DOCTEST_TYPE_TO_STRING_IMPL(__VA_ARGS__)                                               \\}\par
1810 {\cf21         \}                                                                                          \\}\par
1811 {\cf21     \}                                                                                              \\}\par
1812 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1813 \par
1814 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, iter, func)                                 \\}\par
1815 {\cf21     template <typename T>                                                                          \\}\par
1816 {\cf21     static void func();                                                                            \\}\par
1817 {\cf21     namespace \{                                                                                    \\}\par
1818 {\cf21         template <typename Tuple>                                                                  \\}\par
1819 {\cf21         struct iter;                                                                               \\}\par
1820 {\cf21         template <typename Type, typename... Rest>                                                 \\}\par
1821 {\cf21         struct iter<std::tuple<Type, Rest...>>                                                     \\}\par
1822 {\cf21         \{                                                                                          \\}\par
1823 {\cf21             iter(const char* file, unsigned line, int index) \{                                     \\}\par
1824 {\cf21                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\}\par
1825 {\cf21                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\}\par
1826 {\cf21                                             doctest::detail::type_to_string<Type>(),               \\}\par
1827 {\cf21                                             int(line) * 1000 + index)                              \\}\par
1828 {\cf21                                          * dec);                                                   \\}\par
1829 {\cf21                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\}\par
1830 {\cf21             \}                                                                                      \\}\par
1831 {\cf21         \};                                                                                         \\}\par
1832 {\cf21         template <>                                                                                \\}\par
1833 {\cf21         struct iter<std::tuple<>>                                                                  \\}\par
1834 {\cf21         \{                                                                                          \\}\par
1835 {\cf21             iter(const char*, unsigned, int) \{\}                                                    \\}\par
1836 {\cf21         \};                                                                                         \\}\par
1837 {\cf21     \}                                                                                              \\}\par
1838 {\cf21     template <typename T>                                                                          \\}\par
1839 {\cf21     static void func()}\par
1840 \par
1841 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec, T, id)                                              \\}\par
1842 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \\}\par
1843 {\cf21                                            DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_))}\par
1844 \par
1845 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, anon, ...)                                 \\}\par
1846 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY)) =                                         \\}\par
1847 {\cf21         doctest::detail::instantiationHelper(DOCTEST_CAT(id, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0));\\}\par
1848 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END()}\par
1849 \par
1850 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \\}\par
1851 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\}\par
1852 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1853 \par
1854 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \\}\par
1855 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_), __VA_ARGS__) \\}\par
1856 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1857 \par
1858 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, anon, ...)                                         \\}\par
1859 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\}\par
1860 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\}\par
1861 {\cf21     template <typename T>                                                                          \\}\par
1862 {\cf21     static void anon()}\par
1863 \par
1864 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(dec, T, ...)                                                    \\}\par
1865 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_), __VA_ARGS__)}\par
1866 \par
1867 {\cf20 // for subcases}\par
1868 {\cf21 #define DOCTEST_SUBCASE(name)                                                                      \\}\par
1869 {\cf21     if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(_DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = \\}\par
1870 {\cf21                doctest::detail::Subcase(name, __FILE__, __LINE__))}\par
1871 \par
1872 {\cf20 // for grouping tests in test suites by using code blocks}\par
1873 {\cf21 #define DOCTEST_TEST_SUITE_IMPL(decorators, ns_name)                                               \\}\par
1874 {\cf21     namespace ns_name \{ namespace doctest_detail_test_suite_ns \{                                   \\}\par
1875 {\cf21             static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() \{            \\}\par
1876 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\}\par
1877 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors"})                \\\par
1878                 static doctest::detail::TestSuite data;                                            \\\par
1879                 static bool                       inited = false;                                  \\\par
1880                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
1881                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
1882                 if(!inited) \{                                                                      \\\par
1883                     data* decorators;                                                              \\\par
1884                     inited = true;                                                                 \\\par
1885                 \}                                                                                  \\\par
1886                 return data;                                                                       \\\par
1887             \}                                                                                      \\\par
1888         \}                                                                                          \\\par
1889     \}                                                                                              \\\par
1890     namespace ns_name\par
1891 \par
1892 {\cf21 #define DOCTEST_TEST_SUITE(decorators)                                                             \\}\par
1893 {\cf21     DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(_DOCTEST_ANON_SUITE_))}\par
1894 \par
1895 {\cf20 // for starting a testsuite block}\par
1896 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(decorators)                                                       \\}\par
1897 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =                            \\}\par
1898 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators);              \\}\par
1899 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\}\par
1900 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1901 \par
1902 {\cf20 // for ending a testsuite block}\par
1903 {\cf21 #define DOCTEST_TEST_SUITE_END                                                                     \\}\par
1904 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_VAR_)) =                            \\}\par
1905 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * ""});                      \\\par
1906     DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\\par
1907     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)\par
1908 \par
1909 {\cf20 // for registering exception translators}\par
1910 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName, signature)                      \\}\par
1911 {\cf21     inline doctest::String translatorName(signature);                                              \\}\par
1912 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_)) =                     \\}\par
1913 {\cf21             doctest::registerExceptionTranslator(translatorName);                                  \\}\par
1914 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END()                                                               \\}\par
1915 {\cf21     doctest::String translatorName(signature)}\par
1916 \par
1917 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
1918 {\cf21     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_),       \\}\par
1919 {\cf21                                                signature)}\par
1920 \par
1921 {\cf20 // for registering reporters}\par
1922 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)                                        \\}\par
1923 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_)) =                       \\}\par
1924 {\cf21             doctest::registerReporter<reporter>(name, priority, true);                             \\}\par
1925 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END() typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1926 \par
1927 {\cf20 // for registering listeners}\par
1928 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)                                        \\}\par
1929 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(_DOCTEST_ANON_REPORTER_)) =                       \\}\par
1930 {\cf21             doctest::registerReporter<reporter>(name, priority, false);                            \\}\par
1931 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS_END() typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
1932 \par
1933 {\cf20 // for logging}\par
1934 {\cf21 #define DOCTEST_INFO(expression)                                                                   \\}\par
1935 {\cf21     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_), DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_),  \\}\par
1936 {\cf21                       DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_), expression)}\par
1937 \par
1938 {\cf21 #define DOCTEST_INFO_IMPL(lambda_name, mb_name, s_name, expression)                                \\}\par
1939 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4626)                                                  \\}\par
1940 {\cf21     auto lambda_name = [&](std::ostream* s_name) \{                                                 \\}\par
1941 {\cf21         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\}\par
1942 {\cf21         mb_name.m_stream = s_name;                                                                 \\}\par
1943 {\cf21         mb_name << expression;                                                                     \\}\par
1944 {\cf21     \};                                                                                             \\}\par
1945 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                              \\}\par
1946 {\cf21     auto DOCTEST_ANONYMOUS(_DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(lambda_name)}\par
1947 \par
1948 {\cf21 #define DOCTEST_CAPTURE(x) DOCTEST_INFO(#x " := "} << x)\par
1949 \par
1950 {\cf21 #define DOCTEST_ADD_AT_IMPL(type, file, line, mb, x)                                               \\}\par
1951 {\cf21     do \{                                                                                           \\}\par
1952 {\cf21         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\}\par
1953 {\cf21         mb << x;                                                                                   \\}\par
1954 {\cf21         DOCTEST_ASSERT_LOG_AND_REACT(mb);                                                          \\}\par
1955 {\cf21     \} while(false)}\par
1956 \par
1957 {\cf20 // clang-format off}\par
1958 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, x) DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_), x)}\par
1959 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, x) DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_), x)}\par
1960 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, x) DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(_DOCTEST_MESSAGE_), x)}\par
1961 {\cf20 // clang-format on}\par
1962 \par
1963 {\cf21 #define DOCTEST_MESSAGE(x) DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, x)}\par
1964 {\cf21 #define DOCTEST_FAIL_CHECK(x) DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, x)}\par
1965 {\cf21 #define DOCTEST_FAIL(x) DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, x)}\par
1966 \par
1967 {\cf21 #define DOCTEST_TO_LVALUE(...) __VA_ARGS__ }{\cf20 // Not removed to keep backwards compatibility.}\par
1968 \par
1969 {\cf21 #ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
1970 \par
1971 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2(assert_type, ...)                                               \\}\par
1972 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses"})                  \\\par
1973     doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,         \\\par
1974                                                __LINE__, #__VA_ARGS__);                            \\\par
1975     DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.setResult(                                                     \\\par
1976             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
1977             << __VA_ARGS__))                                                                       \\\par
1978     DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB)                                                      \\\par
1979     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1980 \par
1981 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
1982 {\cf21     do \{                                                                                           \\}\par
1983 {\cf21         DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\}\par
1984 {\cf21     \} while(false)}\par
1985 \par
1986 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
1987 \par
1988 {\cf20 // necessary for <ASSERT>_MESSAGE}\par
1989 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2 DOCTEST_ASSERT_IMPLEMENT_1}\par
1990 \par
1991 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
1992 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses"})                  \\\par
1993     doctest::detail::decomp_assert(                                                                \\\par
1994             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__,                    \\\par
1995             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
1996                     << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1997 \par
1998 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
1999 \par
2000 {\cf21 #define DOCTEST_WARN(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)}\par
2001 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)}\par
2002 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)}\par
2003 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)}\par
2004 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)}\par
2005 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)}\par
2006 \par
2007 {\cf20 // clang-format off}\par
2008 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); \} while(false)}\par
2009 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); \} while(false)}\par
2010 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); \} while(false)}\par
2011 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); \} while(false)}\par
2012 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); \} while(false)}\par
2013 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, msg) do \{ DOCTEST_INFO(msg); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); \} while(false)}\par
2014 {\cf20 // clang-format on}\par
2015 \par
2016 {\cf21 #define DOCTEST_ASSERT_THROWS_AS(expr, assert_type, message, ...)                                  \\}\par
2017 {\cf21     do \{                                                                                           \\}\par
2018 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2019 {\cf21             doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__, \\}\par
2020 {\cf21                                                        __LINE__, #expr, #__VA_ARGS__, message);    \\}\par
2021 {\cf21             try \{                                                                                  \\}\par
2022 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2023 {\cf21             \} catch(const doctest::detail::remove_const<                                           \\}\par
2024 {\cf21                     doctest::detail::remove_reference<__VA_ARGS__>::type>::type&) \{                \\}\par
2025 {\cf21                 _DOCTEST_RB.translateException();                                                  \\}\par
2026 {\cf21                 _DOCTEST_RB.m_threw_as = true;                                                     \\}\par
2027 {\cf21             \} catch(...) \{ _DOCTEST_RB.translateException(); \}                                     \\}\par
2028 {\cf21             DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                             \\}\par
2029 {\cf21         \}                                                                                          \\}\par
2030 {\cf21     \} while(false)}\par
2031 \par
2032 {\cf21 #define DOCTEST_ASSERT_THROWS_WITH(expr, expr_str, assert_type, ...)                               \\}\par
2033 {\cf21     do \{                                                                                           \\}\par
2034 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2035 {\cf21             doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__, \\}\par
2036 {\cf21                                                        __LINE__, expr_str, ""}, __VA_ARGS__);       \\\par
2037             try \{                                                                                  \\\par
2038                 DOCTEST_CAST_TO_VOID(expr)                                                         \\\par
2039             \} catch(...) \{ _DOCTEST_RB.translateException(); \}                                     \\\par
2040             DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                             \\\par
2041         \}                                                                                          \\\par
2042     \} while(false)\par
2043 \par
2044 {\cf21 #define DOCTEST_ASSERT_NOTHROW(assert_type, ...)                                                   \\}\par
2045 {\cf21     do \{                                                                                           \\}\par
2046 {\cf21         doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\}\par
2047 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2048 {\cf21         try \{                                                                                      \\}\par
2049 {\cf21             DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \\}\par
2050 {\cf21         \} catch(...) \{ _DOCTEST_RB.translateException(); \}                                         \\}\par
2051 {\cf21         DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\}\par
2052 {\cf21     \} while(false)}\par
2053 \par
2054 {\cf20 // clang-format off}\par
2055 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, ""})\par
2056 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, ""})\par
2057 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, ""})\par
2058 \par
2059 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_AS, ""}, __VA_ARGS__)\par
2060 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_AS, ""}, __VA_ARGS__)\par
2061 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_AS, ""}, __VA_ARGS__)\par
2062 \par
2063 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)}\par
2064 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)}\par
2065 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)}\par
2066 \par
2067 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2068 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2069 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2070 \par
2071 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW, __VA_ARGS__)}\par
2072 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW, __VA_ARGS__)}\par
2073 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW, __VA_ARGS__)}\par
2074 \par
2075 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_WARN_THROWS(expr); \} while(false)}\par
2076 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_CHECK_THROWS(expr); \} while(false)}\par
2077 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_REQUIRE_THROWS(expr); \} while(false)}\par
2078 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_WARN_THROWS_AS(expr, ex); \} while(false)}\par
2079 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_CHECK_THROWS_AS(expr, ex); \} while(false)}\par
2080 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_REQUIRE_THROWS_AS(expr, ex); \} while(false)}\par
2081 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, msg) do \{ DOCTEST_INFO(msg); DOCTEST_WARN_THROWS_WITH(expr, with); \} while(false)}\par
2082 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, msg) do \{ DOCTEST_INFO(msg); DOCTEST_CHECK_THROWS_WITH(expr, with); \} while(false)}\par
2083 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, msg) do \{ DOCTEST_INFO(msg); DOCTEST_REQUIRE_THROWS_WITH(expr, with); \} while(false)}\par
2084 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex); \} while(false)}\par
2085 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex); \} while(false)}\par
2086 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) do \{ DOCTEST_INFO(msg); DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex); \} while(false)}\par
2087 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_WARN_NOTHROW(expr); \} while(false)}\par
2088 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_CHECK_NOTHROW(expr); \} while(false)}\par
2089 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, msg) do \{ DOCTEST_INFO(msg); DOCTEST_REQUIRE_NOTHROW(expr); \} while(false)}\par
2090 {\cf20 // clang-format on}\par
2091 \par
2092 {\cf21 #ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2093 \par
2094 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comp, ...)                                              \\}\par
2095 {\cf21     do \{                                                                                           \\}\par
2096 {\cf21         doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\}\par
2097 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2098 {\cf21         DOCTEST_WRAP_IN_TRY(                                                                       \\}\par
2099 {\cf21                 _DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(          \\}\par
2100 {\cf21                         __VA_ARGS__))                                                              \\}\par
2101 {\cf21         DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\}\par
2102 {\cf21     \} while(false)}\par
2103 \par
2104 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2105 {\cf21     do \{                                                                                           \\}\par
2106 {\cf21         doctest::detail::ResultBuilder _DOCTEST_RB(doctest::assertType::assert_type, __FILE__,     \\}\par
2107 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2108 {\cf21         DOCTEST_WRAP_IN_TRY(_DOCTEST_RB.unary_assert(__VA_ARGS__))                                 \\}\par
2109 {\cf21         DOCTEST_ASSERT_LOG_AND_REACT(_DOCTEST_RB);                                                 \\}\par
2110 {\cf21     \} while(false)}\par
2111 \par
2112 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2113 \par
2114 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comparison, ...)                                        \\}\par
2115 {\cf21     doctest::detail::binary_assert<doctest::detail::binaryAssertComparison::comparison>(           \\}\par
2116 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__, __VA_ARGS__)}\par
2117 \par
2118 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2119 {\cf21     doctest::detail::unary_assert(doctest::assertType::assert_type, __FILE__, __LINE__,            \\}\par
2120 {\cf21                                   #__VA_ARGS__, __VA_ARGS__)}\par
2121 \par
2122 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2123 \par
2124 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)}\par
2125 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)}\par
2126 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)}\par
2127 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)}\par
2128 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)}\par
2129 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)}\par
2130 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)}\par
2131 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)}\par
2132 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)}\par
2133 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)}\par
2134 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)}\par
2135 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)}\par
2136 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)}\par
2137 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)}\par
2138 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)}\par
2139 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)}\par
2140 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)}\par
2141 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)}\par
2142 \par
2143 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)}\par
2144 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)}\par
2145 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)}\par
2146 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)}\par
2147 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}\par
2148 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}\par
2149 \par
2150 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2151 \par
2152 {\cf21 #undef DOCTEST_WARN_THROWS}\par
2153 {\cf21 #undef DOCTEST_CHECK_THROWS}\par
2154 {\cf21 #undef DOCTEST_REQUIRE_THROWS}\par
2155 {\cf21 #undef DOCTEST_WARN_THROWS_AS}\par
2156 {\cf21 #undef DOCTEST_CHECK_THROWS_AS}\par
2157 {\cf21 #undef DOCTEST_REQUIRE_THROWS_AS}\par
2158 {\cf21 #undef DOCTEST_WARN_THROWS_WITH}\par
2159 {\cf21 #undef DOCTEST_CHECK_THROWS_WITH}\par
2160 {\cf21 #undef DOCTEST_REQUIRE_THROWS_WITH}\par
2161 {\cf21 #undef DOCTEST_WARN_THROWS_WITH_AS}\par
2162 {\cf21 #undef DOCTEST_CHECK_THROWS_WITH_AS}\par
2163 {\cf21 #undef DOCTEST_REQUIRE_THROWS_WITH_AS}\par
2164 {\cf21 #undef DOCTEST_WARN_NOTHROW}\par
2165 {\cf21 #undef DOCTEST_CHECK_NOTHROW}\par
2166 {\cf21 #undef DOCTEST_REQUIRE_NOTHROW}\par
2167 \par
2168 {\cf21 #undef DOCTEST_WARN_THROWS_MESSAGE}\par
2169 {\cf21 #undef DOCTEST_CHECK_THROWS_MESSAGE}\par
2170 {\cf21 #undef DOCTEST_REQUIRE_THROWS_MESSAGE}\par
2171 {\cf21 #undef DOCTEST_WARN_THROWS_AS_MESSAGE}\par
2172 {\cf21 #undef DOCTEST_CHECK_THROWS_AS_MESSAGE}\par
2173 {\cf21 #undef DOCTEST_REQUIRE_THROWS_AS_MESSAGE}\par
2174 {\cf21 #undef DOCTEST_WARN_THROWS_WITH_MESSAGE}\par
2175 {\cf21 #undef DOCTEST_CHECK_THROWS_WITH_MESSAGE}\par
2176 {\cf21 #undef DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}\par
2177 {\cf21 #undef DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}\par
2178 {\cf21 #undef DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}\par
2179 {\cf21 #undef DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}\par
2180 {\cf21 #undef DOCTEST_WARN_NOTHROW_MESSAGE}\par
2181 {\cf21 #undef DOCTEST_CHECK_NOTHROW_MESSAGE}\par
2182 {\cf21 #undef DOCTEST_REQUIRE_NOTHROW_MESSAGE}\par
2183 \par
2184 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2185 \par
2186 {\cf21 #define DOCTEST_WARN_THROWS(...) ((void)0)}\par
2187 {\cf21 #define DOCTEST_CHECK_THROWS(...) ((void)0)}\par
2188 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) ((void)0)}\par
2189 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) ((void)0)}\par
2190 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) ((void)0)}\par
2191 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) ((void)0)}\par
2192 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) ((void)0)}\par
2193 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) ((void)0)}\par
2194 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) ((void)0)}\par
2195 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2196 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2197 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2198 {\cf21 #define DOCTEST_WARN_NOTHROW(...) ((void)0)}\par
2199 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) ((void)0)}\par
2200 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) ((void)0)}\par
2201 \par
2202 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2203 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2204 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2205 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2206 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2207 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2208 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2209 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2210 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2211 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2212 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2213 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2214 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2215 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2216 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2217 \par
2218 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2219 \par
2220 {\cf21 #undef DOCTEST_REQUIRE}\par
2221 {\cf21 #undef DOCTEST_REQUIRE_FALSE}\par
2222 {\cf21 #undef DOCTEST_REQUIRE_MESSAGE}\par
2223 {\cf21 #undef DOCTEST_REQUIRE_FALSE_MESSAGE}\par
2224 {\cf21 #undef DOCTEST_REQUIRE_EQ}\par
2225 {\cf21 #undef DOCTEST_REQUIRE_NE}\par
2226 {\cf21 #undef DOCTEST_REQUIRE_GT}\par
2227 {\cf21 #undef DOCTEST_REQUIRE_LT}\par
2228 {\cf21 #undef DOCTEST_REQUIRE_GE}\par
2229 {\cf21 #undef DOCTEST_REQUIRE_LE}\par
2230 {\cf21 #undef DOCTEST_REQUIRE_UNARY}\par
2231 {\cf21 #undef DOCTEST_REQUIRE_UNARY_FALSE}\par
2232 \par
2233 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2234 \par
2235 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2236 \par
2237 {\cf20 // =================================================================================================}\par
2238 {\cf20 // == WHAT FOLLOWS IS VERSIONS OF THE MACROS THAT DO NOT DO ANY REGISTERING!                      ==}\par
2239 {\cf20 // == THIS CAN BE ENABLED BY DEFINING DOCTEST_CONFIG_DISABLE GLOBALLY!                            ==}\par
2240 {\cf20 // =================================================================================================}\par
2241 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2242 \par
2243 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, name)                                           \\}\par
2244 {\cf21     namespace \{                                                                                    \\}\par
2245 {\cf21         template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                           \\}\par
2246 {\cf21         struct der : public base                                                                   \\}\par
2247 {\cf21         \{ void f(); \};                                                                             \\}\par
2248 {\cf21     \}                                                                                              \\}\par
2249 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2250 {\cf21     inline void der<DOCTEST_UNUSED_TEMPLATE_TYPE>::f()}\par
2251 \par
2252 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, name)                                              \\}\par
2253 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2254 {\cf21     static inline void f()}\par
2255 \par
2256 {\cf20 // for registering tests}\par
2257 {\cf21 #define DOCTEST_TEST_CASE(name)                                                                    \\}\par
2258 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), name)}\par
2259 \par
2260 {\cf20 // for registering tests in classes}\par
2261 {\cf21 #define DOCTEST_TEST_CASE_CLASS(name)                                                              \\}\par
2262 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), name)}\par
2263 \par
2264 {\cf20 // for registering tests with a fixture}\par
2265 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(x, name)                                                         \\}\par
2266 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(_DOCTEST_ANON_CLASS_), x,                          \\}\par
2267 {\cf21                               DOCTEST_ANONYMOUS(_DOCTEST_ANON_FUNC_), name)}\par
2268 \par
2269 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2270 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
2271 {\cf21 #define DOCTEST_TYPE_TO_STRING_IMPL(...)}\par
2272 \par
2273 {\cf20 // for typed tests}\par
2274 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(name, type, ...)                                                \\}\par
2275 {\cf21     template <typename type>                                                                       \\}\par
2276 {\cf21     inline void DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_)()}\par
2277 \par
2278 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, type, id)                                          \\}\par
2279 {\cf21     template <typename type>                                                                       \\}\par
2280 {\cf21     inline void DOCTEST_ANONYMOUS(_DOCTEST_ANON_TMP_)()}\par
2281 \par
2282 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \\}\par
2283 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
2284 \par
2285 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \\}\par
2286 {\cf21     typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
2287 \par
2288 {\cf20 // for subcases}\par
2289 {\cf21 #define DOCTEST_SUBCASE(name)}\par
2290 \par
2291 {\cf20 // for a testsuite block}\par
2292 {\cf21 #define DOCTEST_TEST_SUITE(name) namespace}\par
2293 \par
2294 {\cf20 // for starting a testsuite block}\par
2295 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(name) typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
2296 \par
2297 {\cf20 // for ending a testsuite block}\par
2298 {\cf21 #define DOCTEST_TEST_SUITE_END typedef int DOCTEST_ANONYMOUS(_DOCTEST_ANON_FOR_SEMICOLON_)}\par
2299 \par
2300 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2301 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2302 {\cf21     static inline doctest::String DOCTEST_ANONYMOUS(_DOCTEST_ANON_TRANSLATOR_)(signature)}\par
2303 \par
2304 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2305 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2306 \par
2307 {\cf21 #define DOCTEST_INFO(x) ((void)0)}\par
2308 {\cf21 #define DOCTEST_CAPTURE(x) ((void)0)}\par
2309 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, x) ((void)0)}\par
2310 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, x) ((void)0)}\par
2311 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, x) ((void)0)}\par
2312 {\cf21 #define DOCTEST_MESSAGE(x) ((void)0)}\par
2313 {\cf21 #define DOCTEST_FAIL_CHECK(x) ((void)0)}\par
2314 {\cf21 #define DOCTEST_FAIL(x) ((void)0)}\par
2315 \par
2316 {\cf21 #define DOCTEST_WARN(...) ((void)0)}\par
2317 {\cf21 #define DOCTEST_CHECK(...) ((void)0)}\par
2318 {\cf21 #define DOCTEST_REQUIRE(...) ((void)0)}\par
2319 {\cf21 #define DOCTEST_WARN_FALSE(...) ((void)0)}\par
2320 {\cf21 #define DOCTEST_CHECK_FALSE(...) ((void)0)}\par
2321 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) ((void)0)}\par
2322 \par
2323 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, msg) ((void)0)}\par
2324 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, msg) ((void)0)}\par
2325 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, msg) ((void)0)}\par
2326 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, msg) ((void)0)}\par
2327 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, msg) ((void)0)}\par
2328 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, msg) ((void)0)}\par
2329 \par
2330 {\cf21 #define DOCTEST_WARN_THROWS(...) ((void)0)}\par
2331 {\cf21 #define DOCTEST_CHECK_THROWS(...) ((void)0)}\par
2332 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) ((void)0)}\par
2333 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) ((void)0)}\par
2334 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) ((void)0)}\par
2335 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) ((void)0)}\par
2336 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) ((void)0)}\par
2337 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) ((void)0)}\par
2338 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) ((void)0)}\par
2339 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2340 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2341 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) ((void)0)}\par
2342 {\cf21 #define DOCTEST_WARN_NOTHROW(...) ((void)0)}\par
2343 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) ((void)0)}\par
2344 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) ((void)0)}\par
2345 \par
2346 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2347 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2348 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, msg) ((void)0)}\par
2349 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2350 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2351 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, msg) ((void)0)}\par
2352 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2353 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2354 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, msg) ((void)0)}\par
2355 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2356 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2357 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, msg) ((void)0)}\par
2358 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2359 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2360 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, msg) ((void)0)}\par
2361 \par
2362 {\cf21 #define DOCTEST_WARN_EQ(...) ((void)0)}\par
2363 {\cf21 #define DOCTEST_CHECK_EQ(...) ((void)0)}\par
2364 {\cf21 #define DOCTEST_REQUIRE_EQ(...) ((void)0)}\par
2365 {\cf21 #define DOCTEST_WARN_NE(...) ((void)0)}\par
2366 {\cf21 #define DOCTEST_CHECK_NE(...) ((void)0)}\par
2367 {\cf21 #define DOCTEST_REQUIRE_NE(...) ((void)0)}\par
2368 {\cf21 #define DOCTEST_WARN_GT(...) ((void)0)}\par
2369 {\cf21 #define DOCTEST_CHECK_GT(...) ((void)0)}\par
2370 {\cf21 #define DOCTEST_REQUIRE_GT(...) ((void)0)}\par
2371 {\cf21 #define DOCTEST_WARN_LT(...) ((void)0)}\par
2372 {\cf21 #define DOCTEST_CHECK_LT(...) ((void)0)}\par
2373 {\cf21 #define DOCTEST_REQUIRE_LT(...) ((void)0)}\par
2374 {\cf21 #define DOCTEST_WARN_GE(...) ((void)0)}\par
2375 {\cf21 #define DOCTEST_CHECK_GE(...) ((void)0)}\par
2376 {\cf21 #define DOCTEST_REQUIRE_GE(...) ((void)0)}\par
2377 {\cf21 #define DOCTEST_WARN_LE(...) ((void)0)}\par
2378 {\cf21 #define DOCTEST_CHECK_LE(...) ((void)0)}\par
2379 {\cf21 #define DOCTEST_REQUIRE_LE(...) ((void)0)}\par
2380 \par
2381 {\cf21 #define DOCTEST_WARN_UNARY(...) ((void)0)}\par
2382 {\cf21 #define DOCTEST_CHECK_UNARY(...) ((void)0)}\par
2383 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) ((void)0)}\par
2384 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) ((void)0)}\par
2385 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) ((void)0)}\par
2386 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) ((void)0)}\par
2387 \par
2388 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2389 \par
2390 {\cf20 // clang-format off}\par
2391 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY - FORWARDING TO THE RIGHT MACROS}\par
2392 {\cf21 #define DOCTEST_FAST_WARN_EQ             DOCTEST_WARN_EQ}\par
2393 {\cf21 #define DOCTEST_FAST_CHECK_EQ            DOCTEST_CHECK_EQ}\par
2394 {\cf21 #define DOCTEST_FAST_REQUIRE_EQ          DOCTEST_REQUIRE_EQ}\par
2395 {\cf21 #define DOCTEST_FAST_WARN_NE             DOCTEST_WARN_NE}\par
2396 {\cf21 #define DOCTEST_FAST_CHECK_NE            DOCTEST_CHECK_NE}\par
2397 {\cf21 #define DOCTEST_FAST_REQUIRE_NE          DOCTEST_REQUIRE_NE}\par
2398 {\cf21 #define DOCTEST_FAST_WARN_GT             DOCTEST_WARN_GT}\par
2399 {\cf21 #define DOCTEST_FAST_CHECK_GT            DOCTEST_CHECK_GT}\par
2400 {\cf21 #define DOCTEST_FAST_REQUIRE_GT          DOCTEST_REQUIRE_GT}\par
2401 {\cf21 #define DOCTEST_FAST_WARN_LT             DOCTEST_WARN_LT}\par
2402 {\cf21 #define DOCTEST_FAST_CHECK_LT            DOCTEST_CHECK_LT}\par
2403 {\cf21 #define DOCTEST_FAST_REQUIRE_LT          DOCTEST_REQUIRE_LT}\par
2404 {\cf21 #define DOCTEST_FAST_WARN_GE             DOCTEST_WARN_GE}\par
2405 {\cf21 #define DOCTEST_FAST_CHECK_GE            DOCTEST_CHECK_GE}\par
2406 {\cf21 #define DOCTEST_FAST_REQUIRE_GE          DOCTEST_REQUIRE_GE}\par
2407 {\cf21 #define DOCTEST_FAST_WARN_LE             DOCTEST_WARN_LE}\par
2408 {\cf21 #define DOCTEST_FAST_CHECK_LE            DOCTEST_CHECK_LE}\par
2409 {\cf21 #define DOCTEST_FAST_REQUIRE_LE          DOCTEST_REQUIRE_LE}\par
2410 \par
2411 {\cf21 #define DOCTEST_FAST_WARN_UNARY          DOCTEST_WARN_UNARY}\par
2412 {\cf21 #define DOCTEST_FAST_CHECK_UNARY         DOCTEST_CHECK_UNARY}\par
2413 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY       DOCTEST_REQUIRE_UNARY}\par
2414 {\cf21 #define DOCTEST_FAST_WARN_UNARY_FALSE    DOCTEST_WARN_UNARY_FALSE}\par
2415 {\cf21 #define DOCTEST_FAST_CHECK_UNARY_FALSE   DOCTEST_CHECK_UNARY_FALSE}\par
2416 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE}\par
2417 \par
2418 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE DOCTEST_TEST_CASE_TEMPLATE_INVOKE}\par
2419 {\cf20 // clang-format on}\par
2420 \par
2421 {\cf20 // BDD style macros}\par
2422 {\cf20 // clang-format off}\par
2423 {\cf21 #define DOCTEST_SCENARIO(name) DOCTEST_TEST_CASE("  Scenario: "} name)\par
2424 {\cf21 #define DOCTEST_SCENARIO_CLASS(name) DOCTEST_TEST_CASE_CLASS("  Scenario: "} name)\par
2425 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE(name, T, ...)  DOCTEST_TEST_CASE_TEMPLATE("  Scenario: "} name, T, __VA_ARGS__)\par
2426 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE("  Scenario: "} name, T, id)\par
2427 \par
2428 {\cf21 #define DOCTEST_GIVEN(name)     DOCTEST_SUBCASE("   Given: "} name)\par
2429 {\cf21 #define DOCTEST_WHEN(name)      DOCTEST_SUBCASE("    When: "} name)\par
2430 {\cf21 #define DOCTEST_AND_WHEN(name)  DOCTEST_SUBCASE("And when: "} name)\par
2431 {\cf21 #define DOCTEST_THEN(name)      DOCTEST_SUBCASE("    Then: "} name)\par
2432 {\cf21 #define DOCTEST_AND_THEN(name)  DOCTEST_SUBCASE("     And: "} name)\par
2433 {\cf20 // clang-format on}\par
2434 \par
2435 {\cf20 // == SHORT VERSIONS OF THE MACROS}\par
2436 {\cf21 #if !defined(DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES)}\par
2437 \par
2438 {\cf21 #define TEST_CASE DOCTEST_TEST_CASE}\par
2439 {\cf21 #define TEST_CASE_CLASS DOCTEST_TEST_CASE_CLASS}\par
2440 {\cf21 #define TEST_CASE_FIXTURE DOCTEST_TEST_CASE_FIXTURE}\par
2441 {\cf21 #define TYPE_TO_STRING DOCTEST_TYPE_TO_STRING}\par
2442 {\cf21 #define TEST_CASE_TEMPLATE DOCTEST_TEST_CASE_TEMPLATE}\par
2443 {\cf21 #define TEST_CASE_TEMPLATE_DEFINE DOCTEST_TEST_CASE_TEMPLATE_DEFINE}\par
2444 {\cf21 #define TEST_CASE_TEMPLATE_INVOKE DOCTEST_TEST_CASE_TEMPLATE_INVOKE}\par
2445 {\cf21 #define TEST_CASE_TEMPLATE_APPLY DOCTEST_TEST_CASE_TEMPLATE_APPLY}\par
2446 {\cf21 #define SUBCASE DOCTEST_SUBCASE}\par
2447 {\cf21 #define TEST_SUITE DOCTEST_TEST_SUITE}\par
2448 {\cf21 #define TEST_SUITE_BEGIN DOCTEST_TEST_SUITE_BEGIN}\par
2449 {\cf21 #define TEST_SUITE_END DOCTEST_TEST_SUITE_END}\par
2450 {\cf21 #define REGISTER_EXCEPTION_TRANSLATOR DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}\par
2451 {\cf21 #define REGISTER_REPORTER DOCTEST_REGISTER_REPORTER}\par
2452 {\cf21 #define REGISTER_LISTENER DOCTEST_REGISTER_LISTENER}\par
2453 {\cf21 #define INFO DOCTEST_INFO}\par
2454 {\cf21 #define CAPTURE DOCTEST_CAPTURE}\par
2455 {\cf21 #define ADD_MESSAGE_AT DOCTEST_ADD_MESSAGE_AT}\par
2456 {\cf21 #define ADD_FAIL_CHECK_AT DOCTEST_ADD_FAIL_CHECK_AT}\par
2457 {\cf21 #define ADD_FAIL_AT DOCTEST_ADD_FAIL_AT}\par
2458 {\cf21 #define MESSAGE DOCTEST_MESSAGE}\par
2459 {\cf21 #define FAIL_CHECK DOCTEST_FAIL_CHECK}\par
2460 {\cf21 #define FAIL DOCTEST_FAIL}\par
2461 {\cf21 #define TO_LVALUE DOCTEST_TO_LVALUE}\par
2462 \par
2463 {\cf21 #define WARN DOCTEST_WARN}\par
2464 {\cf21 #define WARN_FALSE DOCTEST_WARN_FALSE}\par
2465 {\cf21 #define WARN_THROWS DOCTEST_WARN_THROWS}\par
2466 {\cf21 #define WARN_THROWS_AS DOCTEST_WARN_THROWS_AS}\par
2467 {\cf21 #define WARN_THROWS_WITH DOCTEST_WARN_THROWS_WITH}\par
2468 {\cf21 #define WARN_THROWS_WITH_AS DOCTEST_WARN_THROWS_WITH_AS}\par
2469 {\cf21 #define WARN_NOTHROW DOCTEST_WARN_NOTHROW}\par
2470 {\cf21 #define CHECK DOCTEST_CHECK}\par
2471 {\cf21 #define CHECK_FALSE DOCTEST_CHECK_FALSE}\par
2472 {\cf21 #define CHECK_THROWS DOCTEST_CHECK_THROWS}\par
2473 {\cf21 #define CHECK_THROWS_AS DOCTEST_CHECK_THROWS_AS}\par
2474 {\cf21 #define CHECK_THROWS_WITH DOCTEST_CHECK_THROWS_WITH}\par
2475 {\cf21 #define CHECK_THROWS_WITH_AS DOCTEST_CHECK_THROWS_WITH_AS}\par
2476 {\cf21 #define CHECK_NOTHROW DOCTEST_CHECK_NOTHROW}\par
2477 {\cf21 #define REQUIRE DOCTEST_REQUIRE}\par
2478 {\cf21 #define REQUIRE_FALSE DOCTEST_REQUIRE_FALSE}\par
2479 {\cf21 #define REQUIRE_THROWS DOCTEST_REQUIRE_THROWS}\par
2480 {\cf21 #define REQUIRE_THROWS_AS DOCTEST_REQUIRE_THROWS_AS}\par
2481 {\cf21 #define REQUIRE_THROWS_WITH DOCTEST_REQUIRE_THROWS_WITH}\par
2482 {\cf21 #define REQUIRE_THROWS_WITH_AS DOCTEST_REQUIRE_THROWS_WITH_AS}\par
2483 {\cf21 #define REQUIRE_NOTHROW DOCTEST_REQUIRE_NOTHROW}\par
2484 \par
2485 {\cf21 #define WARN_MESSAGE DOCTEST_WARN_MESSAGE}\par
2486 {\cf21 #define WARN_FALSE_MESSAGE DOCTEST_WARN_FALSE_MESSAGE}\par
2487 {\cf21 #define WARN_THROWS_MESSAGE DOCTEST_WARN_THROWS_MESSAGE}\par
2488 {\cf21 #define WARN_THROWS_AS_MESSAGE DOCTEST_WARN_THROWS_AS_MESSAGE}\par
2489 {\cf21 #define WARN_THROWS_WITH_MESSAGE DOCTEST_WARN_THROWS_WITH_MESSAGE}\par
2490 {\cf21 #define WARN_THROWS_WITH_AS_MESSAGE DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}\par
2491 {\cf21 #define WARN_NOTHROW_MESSAGE DOCTEST_WARN_NOTHROW_MESSAGE}\par
2492 {\cf21 #define CHECK_MESSAGE DOCTEST_CHECK_MESSAGE}\par
2493 {\cf21 #define CHECK_FALSE_MESSAGE DOCTEST_CHECK_FALSE_MESSAGE}\par
2494 {\cf21 #define CHECK_THROWS_MESSAGE DOCTEST_CHECK_THROWS_MESSAGE}\par
2495 {\cf21 #define CHECK_THROWS_AS_MESSAGE DOCTEST_CHECK_THROWS_AS_MESSAGE}\par
2496 {\cf21 #define CHECK_THROWS_WITH_MESSAGE DOCTEST_CHECK_THROWS_WITH_MESSAGE}\par
2497 {\cf21 #define CHECK_THROWS_WITH_AS_MESSAGE DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}\par
2498 {\cf21 #define CHECK_NOTHROW_MESSAGE DOCTEST_CHECK_NOTHROW_MESSAGE}\par
2499 {\cf21 #define REQUIRE_MESSAGE DOCTEST_REQUIRE_MESSAGE}\par
2500 {\cf21 #define REQUIRE_FALSE_MESSAGE DOCTEST_REQUIRE_FALSE_MESSAGE}\par
2501 {\cf21 #define REQUIRE_THROWS_MESSAGE DOCTEST_REQUIRE_THROWS_MESSAGE}\par
2502 {\cf21 #define REQUIRE_THROWS_AS_MESSAGE DOCTEST_REQUIRE_THROWS_AS_MESSAGE}\par
2503 {\cf21 #define REQUIRE_THROWS_WITH_MESSAGE DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}\par
2504 {\cf21 #define REQUIRE_THROWS_WITH_AS_MESSAGE DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}\par
2505 {\cf21 #define REQUIRE_NOTHROW_MESSAGE DOCTEST_REQUIRE_NOTHROW_MESSAGE}\par
2506 \par
2507 {\cf21 #define SCENARIO DOCTEST_SCENARIO}\par
2508 {\cf21 #define SCENARIO_CLASS DOCTEST_SCENARIO_CLASS}\par
2509 {\cf21 #define SCENARIO_TEMPLATE DOCTEST_SCENARIO_TEMPLATE}\par
2510 {\cf21 #define SCENARIO_TEMPLATE_DEFINE DOCTEST_SCENARIO_TEMPLATE_DEFINE}\par
2511 {\cf21 #define GIVEN DOCTEST_GIVEN}\par
2512 {\cf21 #define WHEN DOCTEST_WHEN}\par
2513 {\cf21 #define AND_WHEN DOCTEST_AND_WHEN}\par
2514 {\cf21 #define THEN DOCTEST_THEN}\par
2515 {\cf21 #define AND_THEN DOCTEST_AND_THEN}\par
2516 \par
2517 {\cf21 #define WARN_EQ DOCTEST_WARN_EQ}\par
2518 {\cf21 #define CHECK_EQ DOCTEST_CHECK_EQ}\par
2519 {\cf21 #define REQUIRE_EQ DOCTEST_REQUIRE_EQ}\par
2520 {\cf21 #define WARN_NE DOCTEST_WARN_NE}\par
2521 {\cf21 #define CHECK_NE DOCTEST_CHECK_NE}\par
2522 {\cf21 #define REQUIRE_NE DOCTEST_REQUIRE_NE}\par
2523 {\cf21 #define WARN_GT DOCTEST_WARN_GT}\par
2524 {\cf21 #define CHECK_GT DOCTEST_CHECK_GT}\par
2525 {\cf21 #define REQUIRE_GT DOCTEST_REQUIRE_GT}\par
2526 {\cf21 #define WARN_LT DOCTEST_WARN_LT}\par
2527 {\cf21 #define CHECK_LT DOCTEST_CHECK_LT}\par
2528 {\cf21 #define REQUIRE_LT DOCTEST_REQUIRE_LT}\par
2529 {\cf21 #define WARN_GE DOCTEST_WARN_GE}\par
2530 {\cf21 #define CHECK_GE DOCTEST_CHECK_GE}\par
2531 {\cf21 #define REQUIRE_GE DOCTEST_REQUIRE_GE}\par
2532 {\cf21 #define WARN_LE DOCTEST_WARN_LE}\par
2533 {\cf21 #define CHECK_LE DOCTEST_CHECK_LE}\par
2534 {\cf21 #define REQUIRE_LE DOCTEST_REQUIRE_LE}\par
2535 {\cf21 #define WARN_UNARY DOCTEST_WARN_UNARY}\par
2536 {\cf21 #define CHECK_UNARY DOCTEST_CHECK_UNARY}\par
2537 {\cf21 #define REQUIRE_UNARY DOCTEST_REQUIRE_UNARY}\par
2538 {\cf21 #define WARN_UNARY_FALSE DOCTEST_WARN_UNARY_FALSE}\par
2539 {\cf21 #define CHECK_UNARY_FALSE DOCTEST_CHECK_UNARY_FALSE}\par
2540 {\cf21 #define REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE}\par
2541 \par
2542 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY}\par
2543 {\cf21 #define FAST_WARN_EQ DOCTEST_FAST_WARN_EQ}\par
2544 {\cf21 #define FAST_CHECK_EQ DOCTEST_FAST_CHECK_EQ}\par
2545 {\cf21 #define FAST_REQUIRE_EQ DOCTEST_FAST_REQUIRE_EQ}\par
2546 {\cf21 #define FAST_WARN_NE DOCTEST_FAST_WARN_NE}\par
2547 {\cf21 #define FAST_CHECK_NE DOCTEST_FAST_CHECK_NE}\par
2548 {\cf21 #define FAST_REQUIRE_NE DOCTEST_FAST_REQUIRE_NE}\par
2549 {\cf21 #define FAST_WARN_GT DOCTEST_FAST_WARN_GT}\par
2550 {\cf21 #define FAST_CHECK_GT DOCTEST_FAST_CHECK_GT}\par
2551 {\cf21 #define FAST_REQUIRE_GT DOCTEST_FAST_REQUIRE_GT}\par
2552 {\cf21 #define FAST_WARN_LT DOCTEST_FAST_WARN_LT}\par
2553 {\cf21 #define FAST_CHECK_LT DOCTEST_FAST_CHECK_LT}\par
2554 {\cf21 #define FAST_REQUIRE_LT DOCTEST_FAST_REQUIRE_LT}\par
2555 {\cf21 #define FAST_WARN_GE DOCTEST_FAST_WARN_GE}\par
2556 {\cf21 #define FAST_CHECK_GE DOCTEST_FAST_CHECK_GE}\par
2557 {\cf21 #define FAST_REQUIRE_GE DOCTEST_FAST_REQUIRE_GE}\par
2558 {\cf21 #define FAST_WARN_LE DOCTEST_FAST_WARN_LE}\par
2559 {\cf21 #define FAST_CHECK_LE DOCTEST_FAST_CHECK_LE}\par
2560 {\cf21 #define FAST_REQUIRE_LE DOCTEST_FAST_REQUIRE_LE}\par
2561 \par
2562 {\cf21 #define FAST_WARN_UNARY DOCTEST_FAST_WARN_UNARY}\par
2563 {\cf21 #define FAST_CHECK_UNARY DOCTEST_FAST_CHECK_UNARY}\par
2564 {\cf21 #define FAST_REQUIRE_UNARY DOCTEST_FAST_REQUIRE_UNARY}\par
2565 {\cf21 #define FAST_WARN_UNARY_FALSE DOCTEST_FAST_WARN_UNARY_FALSE}\par
2566 {\cf21 #define FAST_CHECK_UNARY_FALSE DOCTEST_FAST_CHECK_UNARY_FALSE}\par
2567 {\cf21 #define FAST_REQUIRE_UNARY_FALSE DOCTEST_FAST_REQUIRE_UNARY_FALSE}\par
2568 \par
2569 {\cf21 #define TEST_CASE_TEMPLATE_INSTANTIATE DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}\par
2570 \par
2571 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
2572 \par
2573 {\cf21 #if !defined(DOCTEST_CONFIG_DISABLE)}\par
2574 \par
2575 {\cf20 // this is here to clear the 'current test suite' for the current translation unit - at the top}\par
2576 DOCTEST_TEST_SUITE_END();\par
2577 \par
2578 {\cf20 // add stringification for primitive/fundamental types}\par
2579 {\cf17 namespace }doctest \{ {\cf17 namespace }detail \{\par
2580     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 bool})\par
2581     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 float})\par
2582     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 double})\par
2583     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 long} {\cf18 double})\par
2584     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 char})\par
2585     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 signed} {\cf18 char})\par
2586     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 unsigned} {\cf18 char})\par
2587 {\cf21 #if !DOCTEST_MSVC || defined(_NATIVE_WCHAR_T_DEFINED)}\par
2588     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 wchar_t})\par
2589 {\cf21 #endif }{\cf20 // not MSVC or wchar_t support enabled}\par
2590     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 short} {\cf18 int})\par
2591     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 unsigned} {\cf18 short} {\cf18 int})\par
2592     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 int})\par
2593     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 unsigned} {\cf18 int})\par
2594     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 long} {\cf18 int})\par
2595     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 unsigned} {\cf18 long} {\cf18 int})\par
2596     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 long} {\cf18 long} {\cf18 int})\par
2597     DOCTEST_TYPE_TO_STRING_IMPL({\cf18 unsigned} {\cf18 long} {\cf18 long} {\cf18 int})\par
2598 \}\} {\cf20 // namespace doctest::detail}\par
2599 \par
2600 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2601 \par
2602 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
2603 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
2604 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
2605 \par
2606 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_INCLUDED}\par
2607 \par
2608 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
2609 {\cf21 #define DOCTEST_SINGLE_HEADER}\par
2610 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
2611 \par
2612 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT) || !defined(DOCTEST_SINGLE_HEADER)}\par
2613 \par
2614 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
2615 {\cf21 #include "doctest_fwd.h"}\par
2616 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
2617 \par
2618 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-macros"})\par
2619 \par
2620 {\cf21 #ifndef DOCTEST_LIBRARY_IMPLEMENTATION}\par
2621 {\cf21 #define DOCTEST_LIBRARY_IMPLEMENTATION}\par
2622 \par
2623 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
2624 \par
2625 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
2626 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wunknown-pragmas"})\par
2627 DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")\par
2628 DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")\par
2629 DOCTEST_CLANG_SUPPRESS_WARNING("-Wglobal-constructors")\par
2630 DOCTEST_CLANG_SUPPRESS_WARNING("-Wexit-time-destructors")\par
2631 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")\par
2632 DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")\par
2633 DOCTEST_CLANG_SUPPRESS_WARNING("-Wshorten-64-to-32")\par
2634 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-variable-declarations")\par
2635 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch")\par
2636 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch-enum")\par
2637 DOCTEST_CLANG_SUPPRESS_WARNING("-Wcovered-switch-default")\par
2638 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-noreturn")\par
2639 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-local-typedef")\par
2640 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdisabled-macro-expansion")\par
2641 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-braces")\par
2642 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
2643 DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")\par
2644 DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")\par
2645 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-member-function")\par
2646 \par
2647 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
2648 DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")\par
2649 DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")\par
2650 DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")\par
2651 DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")\par
2652 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
2653 DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")\par
2654 DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")\par
2655 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
2656 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-braces")\par
2657 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")\par
2658 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch")\par
2659 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-enum")\par
2660 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-default")\par
2661 DOCTEST_GCC_SUPPRESS_WARNING("-Wunsafe-loop-optimizations")\par
2662 DOCTEST_GCC_SUPPRESS_WARNING("-Wold-style-cast")\par
2663 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-local-typedefs")\par
2664 DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")\par
2665 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-function")\par
2666 DOCTEST_GCC_SUPPRESS_WARNING("-Wmultiple-inheritance")\par
2667 DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")\par
2668 DOCTEST_GCC_SUPPRESS_WARNING("-Wsuggest-attribute")\par
2669 \par
2670 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
2671 DOCTEST_MSVC_SUPPRESS_WARNING(4616) {\cf20 // invalid compiler warning}\par
2672 DOCTEST_MSVC_SUPPRESS_WARNING(4619) {\cf20 // invalid compiler warning}\par
2673 DOCTEST_MSVC_SUPPRESS_WARNING(4996) {\cf20 // The compiler encountered a deprecated declaration}\par
2674 DOCTEST_MSVC_SUPPRESS_WARNING(4267) {\cf20 // 'var' : conversion from 'x' to 'y', possible loss of data}\par
2675 DOCTEST_MSVC_SUPPRESS_WARNING(4706) {\cf20 // assignment within conditional expression}\par
2676 DOCTEST_MSVC_SUPPRESS_WARNING(4512) {\cf20 // 'class' : assignment operator could not be generated}\par
2677 DOCTEST_MSVC_SUPPRESS_WARNING(4127) {\cf20 // conditional expression is constant}\par
2678 DOCTEST_MSVC_SUPPRESS_WARNING(4530) {\cf20 // C++ exception handler used, but unwind semantics not enabled}\par
2679 DOCTEST_MSVC_SUPPRESS_WARNING(4577) {\cf20 // 'noexcept' used with no exception handling mode specified}\par
2680 DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 // format string expected in argument is not a string literal}\par
2681 DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 // conversion from 'int' to 'unsigned', signed/unsigned mismatch}\par
2682 DOCTEST_MSVC_SUPPRESS_WARNING(4820) {\cf20 // padding in structs}\par
2683 DOCTEST_MSVC_SUPPRESS_WARNING(4640) {\cf20 // construction of local static object is not thread-safe}\par
2684 DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 // pointer to potentially throwing function passed to extern C}\par
2685 DOCTEST_MSVC_SUPPRESS_WARNING(5045) {\cf20 // Spectre mitigation stuff}\par
2686 DOCTEST_MSVC_SUPPRESS_WARNING(4626) {\cf20 // assignment operator was implicitly defined as deleted}\par
2687 DOCTEST_MSVC_SUPPRESS_WARNING(5027) {\cf20 // move assignment operator was implicitly defined as deleted}\par
2688 DOCTEST_MSVC_SUPPRESS_WARNING(5026) {\cf20 // move constructor was implicitly defined as deleted}\par
2689 DOCTEST_MSVC_SUPPRESS_WARNING(4625) {\cf20 // copy constructor was implicitly defined as deleted}\par
2690 DOCTEST_MSVC_SUPPRESS_WARNING(4800) {\cf20 // forcing value to bool 'true' or 'false' (performance warning)}\par
2691 {\cf20 // static analysis}\par
2692 DOCTEST_MSVC_SUPPRESS_WARNING(26439) {\cf20 // This kind of function may not throw. Declare it 'noexcept'}\par
2693 DOCTEST_MSVC_SUPPRESS_WARNING(26495) {\cf20 // Always initialize a member variable}\par
2694 DOCTEST_MSVC_SUPPRESS_WARNING(26451) {\cf20 // Arithmetic overflow ...}\par
2695 DOCTEST_MSVC_SUPPRESS_WARNING(26444) {\cf20 // Avoid unnamed objects with custom construction and dtor...}\par
2696 DOCTEST_MSVC_SUPPRESS_WARNING(26812) {\cf20 // Prefer 'enum class' over 'enum'}\par
2697 \par
2698 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
2699 \par
2700 {\cf20 // required includes - will go only in one translation unit!}\par
2701 {\cf21 #include <ctime>}\par
2702 {\cf21 #include <cmath>}\par
2703 {\cf21 #include <climits>}\par
2704 {\cf20 // borland (Embarcadero) compiler requires math.h and not cmath - https://github.com/onqtam/doctest/pull/37}\par
2705 {\cf21 #ifdef __BORLANDC__}\par
2706 {\cf21 #include <math.h>}\par
2707 {\cf21 #endif }{\cf20 // __BORLANDC__}\par
2708 {\cf21 #include <new>}\par
2709 {\cf21 #include <cstdio>}\par
2710 {\cf21 #include <cstdlib>}\par
2711 {\cf21 #include <cstring>}\par
2712 {\cf21 #include <limits>}\par
2713 {\cf21 #include <utility>}\par
2714 {\cf21 #include <fstream>}\par
2715 {\cf21 #include <sstream>}\par
2716 {\cf21 #include <iostream>}\par
2717 {\cf21 #include <algorithm>}\par
2718 {\cf21 #include <iomanip>}\par
2719 {\cf21 #include <vector>}\par
2720 {\cf21 #include <atomic>}\par
2721 {\cf21 #include <mutex>}\par
2722 {\cf21 #include <set>}\par
2723 {\cf21 #include <map>}\par
2724 {\cf21 #include <exception>}\par
2725 {\cf21 #include <stdexcept>}\par
2726 {\cf21 #ifdef DOCTEST_CONFIG_POSIX_SIGNALS}\par
2727 {\cf21 #include <csignal>}\par
2728 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS}\par
2729 {\cf21 #include <cfloat>}\par
2730 {\cf21 #include <cctype>}\par
2731 {\cf21 #include <cstdint>}\par
2732 \par
2733 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
2734 {\cf21 #include <sys/types.h>}\par
2735 {\cf21 #include <unistd.h>}\par
2736 {\cf21 #include <sys/sysctl.h>}\par
2737 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_MAC}\par
2738 \par
2739 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
2740 \par
2741 {\cf20 // defines for a leaner windows.h}\par
2742 {\cf21 #ifndef WIN32_LEAN_AND_MEAN}\par
2743 {\cf21 #define WIN32_LEAN_AND_MEAN}\par
2744 {\cf21 #endif }{\cf20 // WIN32_LEAN_AND_MEAN}\par
2745 {\cf21 #ifndef NOMINMAX}\par
2746 {\cf21 #define NOMINMAX}\par
2747 {\cf21 #endif }{\cf20 // NOMINMAX}\par
2748 \par
2749 {\cf20 // not sure what AfxWin.h is for - here I do what Catch does}\par
2750 {\cf21 #ifdef __AFXDLL}\par
2751 {\cf21 #include <AfxWin.h>}\par
2752 {\cf21 #else}\par
2753 {\cf21 #if defined(__MINGW32__) || defined(__MINGW64__)}\par
2754 {\cf21 #include <windows.h>}\par
2755 {\cf21 #else }{\cf20 // MINGW}\par
2756 {\cf21 #include <Windows.h>}\par
2757 {\cf21 #endif }{\cf20 // MINGW}\par
2758 {\cf21 #endif}\par
2759 {\cf21 #include <io.h>}\par
2760 \par
2761 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2762 \par
2763 {\cf21 #include <sys/time.h>}\par
2764 {\cf21 #include <unistd.h>}\par
2765 \par
2766 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2767 \par
2768 {\cf20 // this is a fix for https://github.com/onqtam/doctest/issues/348}\par
2769 {\cf20 // https://mail.gnome.org/archives/xml/2012-January/msg00000.html}\par
2770 {\cf21 #if !defined(HAVE_UNISTD_H) && !defined(STDOUT_FILENO)}\par
2771 {\cf21 #define STDOUT_FILENO fileno(stdout)}\par
2772 {\cf21 #endif }{\cf20 // HAVE_UNISTD_H}\par
2773 \par
2774 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
2775 \par
2776 {\cf20 // counts the number of elements in a C array}\par
2777 {\cf21 #define DOCTEST_COUNTOF(x) (sizeof(x) / sizeof(x[0]))}\par
2778 \par
2779 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
2780 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_disabled}\par
2781 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2782 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_not_disabled}\par
2783 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2784 \par
2785 {\cf21 #ifndef DOCTEST_CONFIG_OPTIONS_PREFIX}\par
2786 {\cf21 #define DOCTEST_CONFIG_OPTIONS_PREFIX "dt-"}\par
2787 {\cf21 #endif}\par
2788 \par
2789 {\cf21 #ifndef DOCTEST_THREAD_LOCAL}\par
2790 {\cf21 #define DOCTEST_THREAD_LOCAL thread_local}\par
2791 {\cf21 #endif}\par
2792 \par
2793 {\cf21 #ifdef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
2794 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY DOCTEST_CONFIG_OPTIONS_PREFIX}\par
2795 {\cf21 #else}\par
2796 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY ""}\par
2797 {\cf21 #endif}\par
2798 \par
2799 {\cf17 namespace }doctest \{\par
2800 \par
2801 {\cf18 bool} is_running_in_test = {\cf17 false};\par
2802 \par
2803 {\cf17 namespace }\{\par
2804     {\cf17 using namespace }detail;\par
2805     {\cf20 // case insensitive strcmp}\par
2806     {\cf18 int} stricmp({\cf17 const} {\cf18 char}* a, {\cf17 const} {\cf18 char}* b) \{\par
2807         {\cf19 for}(;; a++, b++) \{\par
2808             {\cf17 const} {\cf18 int} d = tolower(*a) - tolower(*b);\par
2809             {\cf19 if}(d != 0 || !*a)\par
2810                 {\cf19 return} d;\par
2811         \}\par
2812     \}\par
2813 \par
2814     {\cf17 template} <{\cf17 typename} T>\par
2815     String fpToString(T value, {\cf18 int} precision) \{\par
2816         std::ostringstream oss;\par
2817         oss << std::setprecision(precision) << std::fixed << value;\par
2818         std::string d = oss.str();\par
2819         {\cf18 size_t}      i = d.find_last_not_of({\cf23 '0'});\par
2820         {\cf19 if}(i != std::string::npos && i != d.size() - 1) \{\par
2821             {\cf19 if}(d[i] == {\cf23 '.'})\par
2822                 i++;\par
2823             d = d.substr(0, i + 1);\par
2824         \}\par
2825         {\cf19 return} d.c_str();\par
2826     \}\par
2827 \par
2828     {\cf17 struct }Endianness\par
2829     \{\par
2830         {\cf17 enum} Arch\par
2831         \{\par
2832             Big,\par
2833             Little\par
2834         \};\par
2835 \par
2836         {\cf17 static} Arch which() \{\par
2837             {\cf18 int} x = 1;\par
2838             {\cf20 // casting any data pointer to char* is allowed}\par
2839             {\cf17 auto} ptr = {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&x);\par
2840             {\cf19 if}(*ptr)\par
2841                 {\cf19 return} Little;\par
2842             {\cf19 return} Big;\par
2843         \}\par
2844     \};\par
2845 \} {\cf20 // namespace}\par
2846 \par
2847 {\cf17 namespace }detail \{\par
2848     {\cf18 void} my_memcpy({\cf18 void}* dest, {\cf17 const} {\cf18 void}* src, {\cf18 unsigned} num) \{ memcpy(dest, src, num); \}\par
2849 \par
2850     String rawMemoryToString({\cf17 const} {\cf18 void}* {\cf18 object}, {\cf18 unsigned} size) \{\par
2851         {\cf20 // Reverse order for little endian architectures}\par
2852         {\cf18 int} i = 0, end = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(size), inc = 1;\par
2853         {\cf19 if}(Endianness::which() == Endianness::Little) \{\par
2854             i   = end - 1;\par
2855             end = inc = -1;\par
2856         \}\par
2857 \par
2858         {\cf18 unsigned} {\cf17 const} {\cf18 char}* bytes = {\cf17 static_cast<}{\cf18 unsigned} {\cf17 const }{\cf18 char}*{\cf17 >}(object);\par
2859         std::ostringstream   oss;\par
2860         oss << {\cf22 "0x"} << std::setfill({\cf23 '0'}) << std::hex;\par
2861         {\cf19 for}(; i != end; i += inc)\par
2862             oss << std::setw(2) << {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(bytes[i]);\par
2863         {\cf19 return} oss.str().c_str();\par
2864     \}\par
2865 \par
2866     DOCTEST_THREAD_LOCAL std::ostringstream g_oss; {\cf20 // NOLINT(cert-err58-cpp)}\par
2867 \par
2868     std::ostream* getTlsOss() \{\par
2869         g_oss.clear(); {\cf20 // there shouldn't be anything worth clearing in the flags}\par
2870         g_oss.str({\cf22 ""}); {\cf20 // the slow way of resetting a string stream}\par
2871         {\cf20 //g_oss.seekp(0); // optimal reset - as seen here: https://stackoverflow.com/a/624291/3162383}\par
2872         {\cf19 return} &g_oss;\par
2873     \}\par
2874 \par
2875     String getTlsOssResult() \{\par
2876         {\cf20 //g_oss << std::ends; // needed - as shown here: https://stackoverflow.com/a/624291/3162383}\par
2877         {\cf19 return} g_oss.str().c_str();\par
2878     \}\par
2879 \par
2880 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
2881 \par
2882 {\cf17 namespace }timer_large_integer\par
2883 \{\par
2884     \par
2885 {\cf21 #if defined(DOCTEST_PLATFORM_WINDOWS)}\par
2886     {\cf17 typedef} ULONGLONG type;\par
2887 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2888     {\cf17 using namespace }std;\par
2889     {\cf17 typedef} uint64_t type;\par
2890 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2891 \}\par
2892 \par
2893 {\cf17 typedef} timer_large_integer::type ticks_t;\par
2894 \par
2895 {\cf21 #ifdef DOCTEST_CONFIG_GETCURRENTTICKS}\par
2896     ticks_t getCurrentTicks() \{ {\cf19 return} DOCTEST_CONFIG_GETCURRENTTICKS(); \}\par
2897 {\cf21 #elif defined(DOCTEST_PLATFORM_WINDOWS)}\par
2898     ticks_t getCurrentTicks() \{\par
2899         {\cf17 static} LARGE_INTEGER hz = \{0\}, hzo = \{0\};\par
2900         {\cf19 if}(!hz.QuadPart) \{\par
2901             QueryPerformanceFrequency(&hz);\par
2902             QueryPerformanceCounter(&hzo);\par
2903         \}\par
2904         LARGE_INTEGER t;\par
2905         QueryPerformanceCounter(&t);\par
2906         {\cf19 return} ((t.QuadPart - hzo.QuadPart) * LONGLONG(1000000)) / hz.QuadPart;\par
2907     \}\par
2908 {\cf21 #else  }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2909     ticks_t getCurrentTicks() \{\par
2910         timeval t;\par
2911         gettimeofday(&t, {\cf17 nullptr});\par
2912         {\cf19 return} {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_sec) * 1000000 + {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_usec);\par
2913     \}\par
2914 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
2915 \par
2916     {\cf17 struct }Timer\par
2917     \{\par
2918         {\cf18 void}         start() \{ m_ticks = getCurrentTicks(); \}\par
2919         {\cf18 unsigned} {\cf18 int} getElapsedMicroseconds(){\cf17  const }\{\par
2920             {\cf19 return} {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(getCurrentTicks() - m_ticks);\par
2921         \}\par
2922         {\cf20 //unsigned int getElapsedMilliseconds() const \{}\par
2923         {\cf20 //    return static_cast<unsigned int>(getElapsedMicroseconds() / 1000);}\par
2924         {\cf20 //\}}\par
2925         {\cf18 double} getElapsedSeconds(){\cf17  const }\{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(getCurrentTicks() - m_ticks) / 1000000.0; \}\par
2926 \par
2927     {\cf17 private}:\par
2928         ticks_t m_ticks = 0;\par
2929     \};\par
2930 \par
2931     {\cf20 // this holds both parameters from the command line and runtime data for tests}\par
2932     {\cf17 struct }ContextState : ContextOptions, TestRunStats, CurrentTestCaseStats\par
2933     \{\par
2934         std::atomic<int> numAssertsCurrentTest_atomic;\par
2935         std::atomic<int> numAssertsFailedCurrentTest_atomic;\par
2936 \par
2937         std::vector<std::vector<String>> filters = {\cf17 decltype}(filters)(9); {\cf20 // 9 different filters}\par
2938 \par
2939         std::vector<IReporter*> reporters_currently_used;\par
2940 \par
2941         {\cf17 const} TestCase* currentTest = {\cf17 nullptr};\par
2942 \par
2943         assert_handler ah = {\cf17 nullptr};\par
2944 \par
2945         Timer timer;\par
2946 \par
2947         std::vector<String> stringifiedContexts; {\cf20 // logging from INFO() due to an exception}\par
2948 \par
2949         {\cf20 // stuff for subcases}\par
2950         std::vector<SubcaseSignature>     subcasesStack;\par
2951         std::set<{\cf17 decltype}(subcasesStack)> subcasesPassed;\par
2952         {\cf18 int}                               subcasesCurrentMaxLevel;\par
2953         {\cf18 bool}                              should_reenter;\par
2954         std::atomic<bool>                 shouldLogCurrentException;\par
2955 \par
2956         {\cf18 void} resetRunData() \{\par
2957             numTestCases                = 0;\par
2958             numTestCasesPassingFilters  = 0;\par
2959             numTestSuitesPassingFilters = 0;\par
2960             numTestCasesFailed          = 0;\par
2961             numAsserts                  = 0;\par
2962             numAssertsFailed            = 0;\par
2963             numAssertsCurrentTest       = 0;\par
2964             numAssertsFailedCurrentTest = 0;\par
2965         \}\par
2966 \par
2967         {\cf18 void} finalizeTestCaseData() \{\par
2968             seconds = timer.getElapsedSeconds();\par
2969 \par
2970             {\cf20 // update the non-atomic counters}\par
2971             numAsserts += numAssertsCurrentTest_atomic;\par
2972             numAssertsFailed += numAssertsFailedCurrentTest_atomic;\par
2973             numAssertsCurrentTest       = numAssertsCurrentTest_atomic;\par
2974             numAssertsFailedCurrentTest = numAssertsFailedCurrentTest_atomic;\par
2975 \par
2976             {\cf19 if}(numAssertsFailedCurrentTest)\par
2977                 failure_flags |= TestCaseFailureReason::AssertFailure;\par
2978 \par
2979             {\cf19 if}(Approx(currentTest->m_timeout).epsilon(DBL_EPSILON) != 0 &&\par
2980                Approx(seconds).epsilon(DBL_EPSILON) > currentTest->m_timeout)\par
2981                 failure_flags |= TestCaseFailureReason::Timeout;\par
2982 \par
2983             {\cf19 if}(currentTest->m_should_fail) \{\par
2984                 {\cf19 if}(failure_flags) \{\par
2985                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedAndDid;\par
2986                 \} {\cf19 else} \{\par
2987                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedButDidnt;\par
2988                 \}\par
2989             \} {\cf19 else} {\cf19 if}(failure_flags && currentTest->m_may_fail) \{\par
2990                 failure_flags |= TestCaseFailureReason::CouldHaveFailedAndDid;\par
2991             \} {\cf19 else} {\cf19 if}(currentTest->m_expected_failures > 0) \{\par
2992                 {\cf19 if}(numAssertsFailedCurrentTest == currentTest->m_expected_failures) \{\par
2993                     failure_flags |= TestCaseFailureReason::FailedExactlyNumTimes;\par
2994                 \} {\cf19 else} \{\par
2995                     failure_flags |= TestCaseFailureReason::DidntFailExactlyNumTimes;\par
2996                 \}\par
2997             \}\par
2998 \par
2999             {\cf18 bool} ok_to_fail = (TestCaseFailureReason::ShouldHaveFailedAndDid & failure_flags) ||\par
3000                               (TestCaseFailureReason::CouldHaveFailedAndDid & failure_flags) ||\par
3001                               (TestCaseFailureReason::FailedExactlyNumTimes & failure_flags);\par
3002 \par
3003             {\cf20 // if any subcase has failed - the whole test case has failed}\par
3004             {\cf19 if}(failure_flags && !ok_to_fail)\par
3005                 numTestCasesFailed++;\par
3006         \}\par
3007     \};\par
3008 \par
3009     ContextState* g_cs = {\cf17 nullptr};\par
3010 \par
3011     {\cf20 // used to avoid locks for the debug output}\par
3012     {\cf20 // TODO: figure out if this is indeed necessary/correct - seems like either there still}\par
3013     {\cf20 // could be a race or that there wouldn't be a race even if using the context directly}\par
3014     DOCTEST_THREAD_LOCAL {\cf18 bool} g_no_colors;\par
3015 \par
3016 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3017 \} {\cf20 // namespace detail}\par
3018 \par
3019 {\cf18 void} String::setOnHeap() \{ *{\cf17 reinterpret_cast<}{\cf18 unsigned} {\cf18 char}*{\cf17 >}(&buf[last]) = 128; \}\par
3020 {\cf18 void} String::setLast({\cf18 unsigned} in) \{ buf[last] = char(in); \}\par
3021 \par
3022 {\cf18 void} String::copy({\cf17 const} String& other) \{\par
3023     {\cf17 using namespace }std;\par
3024     {\cf19 if}(other.isOnStack()) \{\par
3025         memcpy(buf, other.buf, len);\par
3026     \} {\cf19 else} \{\par
3027         setOnHeap();\par
3028         data.size     = other.data.size;\par
3029         data.capacity = data.size + 1;\par
3030         data.ptr      = {\cf17 new} {\cf18 char}[data.capacity];\par
3031         memcpy(data.ptr, other.data.ptr, data.size + 1);\par
3032     \}\par
3033 \}\par
3034 \par
3035 String::String() \{\par
3036     buf[0] = {\cf23 '\\0'};\par
3037     setLast();\par
3038 \}\par
3039 \par
3040 String::~String() \{\par
3041     {\cf19 if}(!isOnStack())\par
3042         {\cf17 delete}[] data.ptr;\par
3043 \}\par
3044 \par
3045 String::String({\cf17 const} {\cf18 char}* in)\par
3046         : String(in, strlen(in)) \{\}\par
3047 \par
3048 String::String({\cf17 const} {\cf18 char}* in, {\cf18 unsigned} in_size) \{\par
3049     {\cf17 using namespace }std;\par
3050     {\cf19 if}(in_size <= last) \{\par
3051         memcpy(buf, in, in_size + 1);\par
3052         setLast(last - in_size);\par
3053     \} {\cf19 else} \{\par
3054         setOnHeap();\par
3055         data.size     = in_size;\par
3056         data.capacity = data.size + 1;\par
3057         data.ptr      = {\cf17 new} {\cf18 char}[data.capacity];\par
3058         memcpy(data.ptr, in, in_size + 1);\par
3059     \}\par
3060 \}\par
3061 \par
3062 String::String({\cf17 const} String& other) \{ copy(other); \}\par
3063 \par
3064 String& String::operator=({\cf17 const} String& other) \{\par
3065     {\cf19 if}({\cf17 this} != &other) \{\par
3066         {\cf19 if}(!isOnStack())\par
3067             {\cf17 delete}[] data.ptr;\par
3068 \par
3069         copy(other);\par
3070     \}\par
3071 \par
3072     {\cf19 return} *{\cf17 this};\par
3073 \}\par
3074 \par
3075 String& String::operator+=({\cf17 const} String& other) \{\par
3076     {\cf17 const} {\cf18 unsigned} my_old_size = size();\par
3077     {\cf17 const} {\cf18 unsigned} other_size  = other.size();\par
3078     {\cf17 const} {\cf18 unsigned} total_size  = my_old_size + other_size;\par
3079     {\cf17 using namespace }std;\par
3080     {\cf19 if}(isOnStack()) \{\par
3081         {\cf19 if}(total_size < len) \{\par
3082             {\cf20 // append to the current stack space}\par
3083             memcpy(buf + my_old_size, other.c_str(), other_size + 1);\par
3084             setLast(last - total_size);\par
3085         \} {\cf19 else} \{\par
3086             {\cf20 // alloc new chunk}\par
3087             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[total_size + 1];\par
3088             {\cf20 // copy current data to new location before writing in the union}\par
3089             memcpy(temp, buf, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3090             {\cf20 // update data in union}\par
3091             setOnHeap();\par
3092             data.size     = total_size;\par
3093             data.capacity = data.size + 1;\par
3094             data.ptr      = temp;\par
3095             {\cf20 // transfer the rest of the data}\par
3096             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3097         \}\par
3098     \} {\cf19 else} \{\par
3099         {\cf19 if}(data.capacity > total_size) \{\par
3100             {\cf20 // append to the current heap block}\par
3101             data.size = total_size;\par
3102             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3103         \} {\cf19 else} \{\par
3104             {\cf20 // resize}\par
3105             data.capacity *= 2;\par
3106             {\cf19 if}(data.capacity <= total_size)\par
3107                 data.capacity = total_size + 1;\par
3108             {\cf20 // alloc new chunk}\par
3109             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[data.capacity];\par
3110             {\cf20 // copy current data to new location before releasing it}\par
3111             memcpy(temp, data.ptr, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3112             {\cf20 // release old chunk}\par
3113             {\cf17 delete}[] data.ptr;\par
3114             {\cf20 // update the rest of the union members}\par
3115             data.size = total_size;\par
3116             data.ptr  = temp;\par
3117             {\cf20 // transfer the rest of the data}\par
3118             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3119         \}\par
3120     \}\par
3121 \par
3122     {\cf19 return} *{\cf17 this};\par
3123 \}\par
3124 \par
3125 String String::operator+({\cf17 const} String& other){\cf17  const }\{ {\cf19 return} String(*{\cf17 this}) += other; \}\par
3126 \par
3127 String::String(String&& other) \{\par
3128     {\cf17 using namespace }std;\par
3129     memcpy(buf, other.buf, len);\par
3130     other.buf[0] = {\cf23 '\\0'};\par
3131     other.setLast();\par
3132 \}\par
3133 \par
3134 String& String::operator=(String&& other) \{\par
3135     {\cf17 using namespace }std;\par
3136     {\cf19 if}({\cf17 this} != &other) \{\par
3137         {\cf19 if}(!isOnStack())\par
3138             {\cf17 delete}[] data.ptr;\par
3139         memcpy(buf, other.buf, len);\par
3140         other.buf[0] = {\cf23 '\\0'};\par
3141         other.setLast();\par
3142     \}\par
3143     {\cf19 return} *{\cf17 this};\par
3144 \}\par
3145 \par
3146 {\cf18 char} String::operator[]({\cf18 unsigned} i){\cf17  const }\{\par
3147     {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->{\cf17 operator}[](i); {\cf20 // NOLINT}\par
3148 \}\par
3149 \par
3150 {\cf18 char}& String::operator[]({\cf18 unsigned} i) \{\par
3151     {\cf19 if}(isOnStack())\par
3152         {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf)[i];\par
3153     {\cf19 return} data.ptr[i];\par
3154 \}\par
3155 \par
3156 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmaybe-uninitialized"})\par
3157 {\cf18 unsigned} String::size(){\cf17  const }\{\par
3158     {\cf19 if}(isOnStack())\par
3159         {\cf19 return} last - (unsigned(buf[last]) & 31); {\cf20 // using "last" would work only if "len" is 32}\par
3160     {\cf19 return} data.size;\par
3161 \}\par
3162 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3163 \par
3164 {\cf18 unsigned} String::capacity(){\cf17  const }\{\par
3165     {\cf19 if}(isOnStack())\par
3166         {\cf19 return} len;\par
3167     {\cf19 return} data.capacity;\par
3168 \}\par
3169 \par
3170 {\cf18 int} String::compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case){\cf17  const }\{\par
3171     {\cf19 if}(no_case)\par
3172         {\cf19 return} doctest::stricmp(c_str(), other);\par
3173     {\cf19 return} std::strcmp(c_str(), other);\par
3174 \}\par
3175 \par
3176 {\cf18 int} String::compare({\cf17 const} String& other, {\cf18 bool} no_case){\cf17  const }\{\par
3177     {\cf19 return} compare(other.c_str(), no_case);\par
3178 \}\par
3179 \par
3180 {\cf20 // clang-format off}\par
3181 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) == 0; \}\par
3182 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) != 0; \}\par
3183 {\cf18 bool} operator< ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) < 0; \}\par
3184 {\cf18 bool} operator> ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) > 0; \}\par
3185 {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) < 0 : {\cf17 true}; \}\par
3186 {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) > 0 : {\cf17 true}; \}\par
3187 {\cf20 // clang-format on}\par
3188 \par
3189 std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in) \{ {\cf19 return} s << in.c_str(); \}\par
3190 \par
3191 {\cf17 namespace }\{\par
3192     {\cf18 void} color_to_stream(std::ostream&, Color::Enum) DOCTEST_BRANCH_ON_DISABLED(\{\}, ;)\par
3193 \} {\cf20 // namespace}\par
3194 \par
3195 {\cf17 namespace }Color \{\par
3196     std::ostream& operator<<(std::ostream& s, Color::Enum code) \{\par
3197         color_to_stream(s, code);\par
3198         {\cf19 return} s;\par
3199     \}\par
3200 \} {\cf20 // namespace Color}\par
3201 \par
3202 {\cf20 // clang-format off}\par
3203 {\cf17 const} {\cf18 char}* assertString(assertType::Enum at) \{\par
3204     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4062) {\cf20 // enum 'x' in switch of enum 'y' is not handled}\par
3205     {\cf19 switch}(at) \{  \par
3206         {\cf19 case} assertType::DT_WARN                    : {\cf19 return} {\cf22 "WARN"};\par
3207         {\cf19 case} assertType::DT_CHECK                   : {\cf19 return} {\cf22 "CHECK"};\par
3208         {\cf19 case} assertType::DT_REQUIRE                 : {\cf19 return} {\cf22 "REQUIRE"};\par
3209 \par
3210         {\cf19 case} assertType::DT_WARN_FALSE              : {\cf19 return} {\cf22 "WARN_FALSE"};\par
3211         {\cf19 case} assertType::DT_CHECK_FALSE             : {\cf19 return} {\cf22 "CHECK_FALSE"};\par
3212         {\cf19 case} assertType::DT_REQUIRE_FALSE           : {\cf19 return} {\cf22 "REQUIRE_FALSE"};\par
3213 \par
3214         {\cf19 case} assertType::DT_WARN_THROWS             : {\cf19 return} {\cf22 "WARN_THROWS"};\par
3215         {\cf19 case} assertType::DT_CHECK_THROWS            : {\cf19 return} {\cf22 "CHECK_THROWS"};\par
3216         {\cf19 case} assertType::DT_REQUIRE_THROWS          : {\cf19 return} {\cf22 "REQUIRE_THROWS"};\par
3217 \par
3218         {\cf19 case} assertType::DT_WARN_THROWS_AS          : {\cf19 return} {\cf22 "WARN_THROWS_AS"};\par
3219         {\cf19 case} assertType::DT_CHECK_THROWS_AS         : {\cf19 return} {\cf22 "CHECK_THROWS_AS"};\par
3220         {\cf19 case} assertType::DT_REQUIRE_THROWS_AS       : {\cf19 return} {\cf22 "REQUIRE_THROWS_AS"};\par
3221 \par
3222         {\cf19 case} assertType::DT_WARN_THROWS_WITH        : {\cf19 return} {\cf22 "WARN_THROWS_WITH"};\par
3223         {\cf19 case} assertType::DT_CHECK_THROWS_WITH       : {\cf19 return} {\cf22 "CHECK_THROWS_WITH"};\par
3224         {\cf19 case} assertType::DT_REQUIRE_THROWS_WITH     : {\cf19 return} {\cf22 "REQUIRE_THROWS_WITH"};\par
3225 \par
3226         {\cf19 case} assertType::DT_WARN_THROWS_WITH_AS     : {\cf19 return} {\cf22 "WARN_THROWS_WITH_AS"};\par
3227         {\cf19 case} assertType::DT_CHECK_THROWS_WITH_AS    : {\cf19 return} {\cf22 "CHECK_THROWS_WITH_AS"};\par
3228         {\cf19 case} assertType::DT_REQUIRE_THROWS_WITH_AS  : {\cf19 return} {\cf22 "REQUIRE_THROWS_WITH_AS"};\par
3229 \par
3230         {\cf19 case} assertType::DT_WARN_NOTHROW            : {\cf19 return} {\cf22 "WARN_NOTHROW"};\par
3231         {\cf19 case} assertType::DT_CHECK_NOTHROW           : {\cf19 return} {\cf22 "CHECK_NOTHROW"};\par
3232         {\cf19 case} assertType::DT_REQUIRE_NOTHROW         : {\cf19 return} {\cf22 "REQUIRE_NOTHROW"};\par
3233 \par
3234         {\cf19 case} assertType::DT_WARN_EQ                 : {\cf19 return} {\cf22 "WARN_EQ"};\par
3235         {\cf19 case} assertType::DT_CHECK_EQ                : {\cf19 return} {\cf22 "CHECK_EQ"};\par
3236         {\cf19 case} assertType::DT_REQUIRE_EQ              : {\cf19 return} {\cf22 "REQUIRE_EQ"};\par
3237         {\cf19 case} assertType::DT_WARN_NE                 : {\cf19 return} {\cf22 "WARN_NE"};\par
3238         {\cf19 case} assertType::DT_CHECK_NE                : {\cf19 return} {\cf22 "CHECK_NE"};\par
3239         {\cf19 case} assertType::DT_REQUIRE_NE              : {\cf19 return} {\cf22 "REQUIRE_NE"};\par
3240         {\cf19 case} assertType::DT_WARN_GT                 : {\cf19 return} {\cf22 "WARN_GT"};\par
3241         {\cf19 case} assertType::DT_CHECK_GT                : {\cf19 return} {\cf22 "CHECK_GT"};\par
3242         {\cf19 case} assertType::DT_REQUIRE_GT              : {\cf19 return} {\cf22 "REQUIRE_GT"};\par
3243         {\cf19 case} assertType::DT_WARN_LT                 : {\cf19 return} {\cf22 "WARN_LT"};\par
3244         {\cf19 case} assertType::DT_CHECK_LT                : {\cf19 return} {\cf22 "CHECK_LT"};\par
3245         {\cf19 case} assertType::DT_REQUIRE_LT              : {\cf19 return} {\cf22 "REQUIRE_LT"};\par
3246         {\cf19 case} assertType::DT_WARN_GE                 : {\cf19 return} {\cf22 "WARN_GE"};\par
3247         {\cf19 case} assertType::DT_CHECK_GE                : {\cf19 return} {\cf22 "CHECK_GE"};\par
3248         {\cf19 case} assertType::DT_REQUIRE_GE              : {\cf19 return} {\cf22 "REQUIRE_GE"};\par
3249         {\cf19 case} assertType::DT_WARN_LE                 : {\cf19 return} {\cf22 "WARN_LE"};\par
3250         {\cf19 case} assertType::DT_CHECK_LE                : {\cf19 return} {\cf22 "CHECK_LE"};\par
3251         {\cf19 case} assertType::DT_REQUIRE_LE              : {\cf19 return} {\cf22 "REQUIRE_LE"};\par
3252 \par
3253         {\cf19 case} assertType::DT_WARN_UNARY              : {\cf19 return} {\cf22 "WARN_UNARY"};\par
3254         {\cf19 case} assertType::DT_CHECK_UNARY             : {\cf19 return} {\cf22 "CHECK_UNARY"};\par
3255         {\cf19 case} assertType::DT_REQUIRE_UNARY           : {\cf19 return} {\cf22 "REQUIRE_UNARY"};\par
3256         {\cf19 case} assertType::DT_WARN_UNARY_FALSE        : {\cf19 return} {\cf22 "WARN_UNARY_FALSE"};\par
3257         {\cf19 case} assertType::DT_CHECK_UNARY_FALSE       : {\cf19 return} {\cf22 "CHECK_UNARY_FALSE"};\par
3258         {\cf19 case} assertType::DT_REQUIRE_UNARY_FALSE     : {\cf19 return} {\cf22 "REQUIRE_UNARY_FALSE"};\par
3259     \}\par
3260     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3261     {\cf19 return} {\cf22 ""};\par
3262 \}\par
3263 {\cf20 // clang-format on}\par
3264 \par
3265 {\cf17 const} {\cf18 char}* failureString(assertType::Enum at) \{\par
3266     {\cf19 if}(at & assertType::is_warn) \par
3267         {\cf19 return} {\cf22 "WARNING"};\par
3268     {\cf19 if}(at & assertType::is_check) \par
3269         {\cf19 return} {\cf22 "ERROR"};\par
3270     {\cf19 if}(at & assertType::is_require) \par
3271         {\cf19 return} {\cf22 "FATAL ERROR"};\par
3272     {\cf19 return} {\cf22 ""};\par
3273 \}\par
3274 \par
3275 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3276 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3277 {\cf20 // depending on the current options this will remove the path of filenames}\par
3278 {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file) \{\par
3279     {\cf19 if}(getContextOptions()->no_path_in_filenames) \{\par
3280         {\cf17 auto} back    = std::strrchr(file, {\cf23 '\\\\'});\par
3281         {\cf17 auto} forward = std::strrchr(file, {\cf23 '/'});\par
3282         {\cf19 if}(back || forward) \{\par
3283             {\cf19 if}(back > forward)\par
3284                 forward = back;\par
3285             {\cf19 return} forward + 1;\par
3286         \}\par
3287     \}\par
3288     {\cf19 return} file;\par
3289 \}\par
3290 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3291 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3292 \par
3293 {\cf18 bool} SubcaseSignature::operator<({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3294     {\cf19 if}(m_line != other.m_line)\par
3295         {\cf19 return} m_line < other.m_line;\par
3296     {\cf19 if}(std::strcmp(m_file, other.m_file) != 0)\par
3297         {\cf19 return} std::strcmp(m_file, other.m_file) < 0;\par
3298     {\cf19 return} m_name.compare(other.m_name) < 0;\par
3299 \}\par
3300 \par
3301 IContextScope::IContextScope()  = {\cf19 default};\par
3302 IContextScope::~IContextScope() = {\cf19 default};\par
3303 \par
3304 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3305 String toString({\cf18 char}* in) \{ {\cf19 return} toString({\cf17 static_cast<}{\cf17 const }{\cf18 char}*{\cf17 >}(in)); \}\par
3306 String toString({\cf17 const} {\cf18 char}* in) \{ {\cf19 return} String({\cf22 "\\""}) + (in ? in : {\cf22 "\{null string\}"}) + {\cf22 "\\""}; \}\par
3307 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3308 String toString({\cf18 bool} in) \{ {\cf19 return} in ? {\cf22 "true"} : {\cf22 "false"}; \}\par
3309 String toString({\cf18 float} in) \{ {\cf19 return} fpToString(in, 5) + {\cf22 "f"}; \}\par
3310 String toString({\cf18 double} in) \{ {\cf19 return} fpToString(in, 10); \}\par
3311 String toString({\cf18 double} {\cf18 long} in) \{ {\cf19 return} fpToString(in, 15); \}\par
3312 \par
3313 {\cf21 #define DOCTEST_TO_STRING_OVERLOAD(type, fmt)                                                      \\}\par
3314 {\cf21     String toString(type in) \{                                                                     \\}\par
3315 {\cf21         char buf[64];                                                                              \\}\par
3316 {\cf21         std::sprintf(buf, fmt, in);                                                                \\}\par
3317 {\cf21         return buf;                                                                                \\}\par
3318 {\cf21     \}}\par
3319 \par
3320 DOCTEST_TO_STRING_OVERLOAD({\cf18 char}, {\cf22 "%d"})\par
3321 DOCTEST_TO_STRING_OVERLOAD({\cf18 char} {\cf18 signed}, {\cf22 "%d"})\par
3322 DOCTEST_TO_STRING_OVERLOAD({\cf18 char} {\cf18 unsigned}, {\cf22 "%u"})\par
3323 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 short}, {\cf22 "%d"})\par
3324 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 short} {\cf18 unsigned}, {\cf22 "%u"})\par
3325 DOCTEST_TO_STRING_OVERLOAD({\cf18 int}, {\cf22 "%d"})\par
3326 DOCTEST_TO_STRING_OVERLOAD({\cf18 unsigned}, {\cf22 "%u"})\par
3327 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 long}, {\cf22 "%ld"})\par
3328 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 long} {\cf18 unsigned}, {\cf22 "%lu"})\par
3329 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 long} {\cf18 long}, {\cf22 "%lld"})\par
3330 DOCTEST_TO_STRING_OVERLOAD({\cf18 int} {\cf18 long} {\cf18 long} {\cf18 unsigned}, {\cf22 "%llu"})\par
3331 \par
3332 String toString(std::nullptr_t) \{ {\cf19 return} {\cf22 "NULL"}; \}\par
3333 \par
3334 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
3335 {\cf20 // see this issue on why this is needed: https://github.com/onqtam/doctest/issues/183}\par
3336 String toString({\cf17 const} std::string& in) \{ {\cf19 return} in.c_str(); \}\par
3337 {\cf21 #endif }{\cf20 // VS 2019}\par
3338 \par
3339 Approx::Approx({\cf18 double} value)\par
3340         : m_epsilon({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::numeric_limits<float>::epsilon()) * 100)\par
3341         , m_scale(1.0)\par
3342         , m_value(value) \{\}\par
3343 \par
3344 Approx Approx::operator()({\cf18 double} value){\cf17  const }\{\par
3345     Approx approx(value);\par
3346     approx.epsilon(m_epsilon);\par
3347     approx.scale(m_scale);\par
3348     {\cf19 return} approx;\par
3349 \}\par
3350 \par
3351 Approx& Approx::epsilon({\cf18 double} newEpsilon) \{\par
3352     m_epsilon = newEpsilon;\par
3353     {\cf19 return} *{\cf17 this};\par
3354 \}\par
3355 Approx& Approx::scale({\cf18 double} newScale) \{\par
3356     m_scale = newScale;\par
3357     {\cf19 return} *{\cf17 this};\par
3358 \}\par
3359 \par
3360 {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{\par
3361     {\cf20 // Thanks to Richard Harris for his help refining this formula}\par
3362     {\cf19 return} std::fabs(lhs - rhs.m_value) <\par
3363            rhs.m_epsilon * (rhs.m_scale + std::max<double>(std::fabs(lhs), std::fabs(rhs.m_value)));\par
3364 \}\par
3365 {\cf18 bool} operator==({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
3366 {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
3367 {\cf18 bool} operator!=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
3368 {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value || lhs == rhs; \}\par
3369 {\cf18 bool} operator<=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs || lhs == rhs; \}\par
3370 {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value || lhs == rhs; \}\par
3371 {\cf18 bool} operator>=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs || lhs == rhs; \}\par
3372 {\cf18 bool} operator<({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value && lhs != rhs; \}\par
3373 {\cf18 bool} operator<({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs && lhs != rhs; \}\par
3374 {\cf18 bool} operator>({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value && lhs != rhs; \}\par
3375 {\cf18 bool} operator>({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs && lhs != rhs; \}\par
3376 \par
3377 String toString({\cf17 const} Approx& in) \{\par
3378     {\cf19 return} String({\cf22 "Approx( "}) + doctest::toString(in.m_value) + {\cf22 " )"};\par
3379 \}\par
3380 {\cf17 const} ContextOptions* getContextOptions() \{ {\cf19 return} DOCTEST_BRANCH_ON_DISABLED({\cf17 nullptr}, g_cs); \}\par
3381 \par
3382 \} {\cf20 // namespace doctest}\par
3383 \par
3384 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3385 {\cf17 namespace }doctest \{\par
3386 Context::Context({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3387 Context::~Context() = {\cf19 default};\par
3388 {\cf18 void} Context::applyCommandLine({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3389 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3390 {\cf18 void} Context::clearFilters() \{\}\par
3391 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 int}) \{\}\par
3392 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3393 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} {\cf17 false}; \}\par
3394 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{\}\par
3395 {\cf18 void} Context::setAssertHandler(detail::assert_handler) \{\}\par
3396 {\cf18 int}  Context::run() \{ {\cf19 return} 0; \}\par
3397 \par
3398 IReporter::~IReporter() = {\cf19 default};\par
3399 \par
3400 {\cf18 int}                         IReporter::get_num_active_contexts() \{ {\cf19 return} 0; \}\par
3401 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3402 {\cf18 int}                         IReporter::get_num_stringified_contexts() \{ {\cf19 return} 0; \}\par
3403 {\cf17 const} String*               IReporter::get_stringified_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3404 \par
3405 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}*, {\cf18 int}, IReporter*) \{ {\cf19 return} 0; \}\par
3406 \par
3407 \} {\cf20 // namespace doctest}\par
3408 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3409 \par
3410 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_NONE)}\par
3411 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_WINDOWS) && !defined(DOCTEST_CONFIG_COLORS_ANSI)}\par
3412 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3413 {\cf21 #define DOCTEST_CONFIG_COLORS_WINDOWS}\par
3414 {\cf21 #else }{\cf20 // linux}\par
3415 {\cf21 #define DOCTEST_CONFIG_COLORS_ANSI}\par
3416 {\cf21 #endif }{\cf20 // platform}\par
3417 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS && DOCTEST_CONFIG_COLORS_ANSI}\par
3418 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_NONE}\par
3419 \par
3420 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
3421 {\cf20 // holds the current test suite}\par
3422 doctest::detail::TestSuite& getCurrentTestSuite() \{\par
3423     {\cf17 static} doctest::detail::TestSuite data;\par
3424     {\cf19 return} data;\par
3425 \}\par
3426 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
3427 \par
3428 {\cf17 namespace }doctest \{\par
3429 {\cf17 namespace }\{\par
3430     {\cf20 // the int (priority) is part of the key for automatic sorting - sadly one can register a}\par
3431     {\cf20 // reporter with a duplicate name and a different priority but hopefully that won't happen often :|}\par
3432     {\cf17 typedef} std::map<std::pair<int, String>, reporterCreatorFunc> reporterMap;\par
3433 \par
3434     reporterMap& getReporters() \{\par
3435         {\cf17 static} reporterMap data;\par
3436         {\cf19 return} data;\par
3437     \}\par
3438     reporterMap& getListeners() \{\par
3439         {\cf17 static} reporterMap data;\par
3440         {\cf19 return} data;\par
3441     \}\par
3442 \} {\cf20 // namespace}\par
3443 {\cf17 namespace }detail \{\par
3444 {\cf21 #define DOCTEST_ITERATE_THROUGH_REPORTERS(function, ...)                                           \\}\par
3445 {\cf21     for(auto& curr_rep : g_cs->reporters_currently_used)                                           \\}\par
3446 {\cf21     curr_rep->function(__VA_ARGS__)}\par
3447 \par
3448     {\cf18 bool} checkIfShouldThrow(assertType::Enum at) \{\par
3449         {\cf19 if}(at & assertType::is_require) \par
3450             {\cf19 return} {\cf17 true};\par
3451 \par
3452         {\cf19 if}((at & assertType::is_check) \par
3453            && getContextOptions()->abort_after > 0 &&\par
3454            (g_cs->numAssertsFailed + g_cs->numAssertsFailedCurrentTest_atomic) >=\par
3455                    getContextOptions()->abort_after)\par
3456             {\cf19 return} {\cf17 true};\par
3457 \par
3458         {\cf19 return} {\cf17 false};\par
3459     \}\par
3460 \par
3461 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3462     DOCTEST_NORETURN {\cf18 void} throwException() \{\par
3463         g_cs->shouldLogCurrentException = {\cf17 false};\par
3464         {\cf19 throw} TestFailureException();\par
3465     \} {\cf20 // NOLINT(cert-err60-cpp)}\par
3466 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3467     {\cf18 void} throwException() \{\}\par
3468 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3469 \} {\cf20 // namespace detail}\par
3470 \par
3471 {\cf17 namespace }\{\par
3472     {\cf17 using namespace }detail;\par
3473     {\cf20 // matching of a string against a wildcard mask (case sensitivity configurable) taken from}\par
3474     {\cf20 // https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing}\par
3475     {\cf18 int} wildcmp({\cf17 const} {\cf18 char}* str, {\cf17 const} {\cf18 char}* wild, {\cf18 bool} caseSensitive) \{\par
3476         {\cf17 const} {\cf18 char}* cp = str;\par
3477         {\cf17 const} {\cf18 char}* mp = wild;\par
3478 \par
3479         {\cf19 while}((*str) && (*wild != {\cf23 '*'})) \{\par
3480             {\cf19 if}((caseSensitive ? (*wild != *str) : (tolower(*wild) != tolower(*str))) &&\par
3481                (*wild != {\cf23 '?'})) \{\par
3482                 {\cf19 return} 0;\par
3483             \}\par
3484             wild++;\par
3485             str++;\par
3486         \}\par
3487 \par
3488         {\cf19 while}(*str) \{\par
3489             {\cf19 if}(*wild == {\cf23 '*'}) \{\par
3490                 {\cf19 if}(!*++wild) \{\par
3491                     {\cf19 return} 1;\par
3492                 \}\par
3493                 mp = wild;\par
3494                 cp = str + 1;\par
3495             \} {\cf19 else} {\cf19 if}((caseSensitive ? (*wild == *str) : (tolower(*wild) == tolower(*str))) ||\par
3496                       (*wild == {\cf23 '?'})) \{\par
3497                 wild++;\par
3498                 str++;\par
3499             \} {\cf19 else} \{\par
3500                 wild = mp;   \par
3501                 str  = cp++; \par
3502             \}\par
3503         \}\par
3504 \par
3505         {\cf19 while}(*wild == {\cf23 '*'}) \{\par
3506             wild++;\par
3507         \}\par
3508         {\cf19 return} !*wild;\par
3509     \}\par
3510 \par
3512     {\cf20 //unsigned hashStr(unsigned const char* str) \{}\par
3513     {\cf20 //    unsigned long hash = 5381;}\par
3514     {\cf20 //    char          c;}\par
3515     {\cf20 //    while((c = *str++))}\par
3516     {\cf20 //        hash = ((hash << 5) + hash) + c; // hash * 33 + c}\par
3517     {\cf20 //    return hash;}\par
3518     {\cf20 //\}}\par
3519 \par
3520     {\cf20 // checks if the name matches any of the filters (and can be configured what to do when empty)}\par
3521     {\cf18 bool} matchesAny({\cf17 const} {\cf18 char}* name, {\cf17 const} std::vector<String>& filters, {\cf18 bool} matchEmpty,\par
3522                     {\cf18 bool} caseSensitive) \{\par
3523         {\cf19 if}(filters.empty() && matchEmpty)\par
3524             {\cf19 return} {\cf17 true};\par
3525         {\cf19 for}({\cf17 auto}& curr : filters)\par
3526             {\cf19 if}(wildcmp(name, curr.c_str(), caseSensitive))\par
3527                 {\cf19 return} {\cf17 true};\par
3528         {\cf19 return} {\cf17 false};\par
3529     \}\par
3530 \} {\cf20 // namespace}\par
3531 {\cf17 namespace }detail \{\par
3532 \par
3533     Subcase::Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line)\par
3534             : m_signature(\{name, file, line\}) \{\par
3535         ContextState* s = g_cs;\par
3536 \par
3537         {\cf20 // check subcase filters}\par
3538         {\cf19 if}(s->subcasesStack.size() < size_t(s->subcase_filter_levels)) \{\par
3539             {\cf19 if}(!matchesAny(m_signature.m_name.c_str(), s->filters[6], {\cf17 true}, s->case_sensitive))\par
3540                 {\cf19 return};\par
3541             {\cf19 if}(matchesAny(m_signature.m_name.c_str(), s->filters[7], {\cf17 false}, s->case_sensitive))\par
3542                 {\cf19 return};\par
3543         \}\par
3544         \par
3545         {\cf20 // if a Subcase on the same level has already been entered}\par
3546         {\cf19 if}(s->subcasesStack.size() < size_t(s->subcasesCurrentMaxLevel)) \{\par
3547             s->should_reenter = {\cf17 true};\par
3548             {\cf19 return};\par
3549         \}\par
3550 \par
3551         {\cf20 // push the current signature to the stack so we can check if the}\par
3552         {\cf20 // current stack + the current new subcase have been traversed}\par
3553         s->subcasesStack.push_back(m_signature);\par
3554         {\cf19 if}(s->subcasesPassed.count(s->subcasesStack) != 0) \{\par
3555             {\cf20 // pop - revert to previous stack since we've already passed this}\par
3556             s->subcasesStack.pop_back();\par
3557             {\cf19 return};\par
3558         \}\par
3559 \par
3560         s->subcasesCurrentMaxLevel = s->subcasesStack.size();\par
3561         m_entered = {\cf17 true};\par
3562 \par
3563         DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
3564     \}\par
3565 \par
3566     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17 }\par
3567     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations") \par
3568     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
3569 \par
3570     Subcase::~Subcase() \{\par
3571         {\cf19 if}(m_entered) \{\par
3572             {\cf20 // only mark the subcase stack as passed if no subcases have been skipped}\par
3573             {\cf19 if}(g_cs->should_reenter == {\cf17 false})\par
3574                 g_cs->subcasesPassed.insert(g_cs->subcasesStack);\par
3575             g_cs->subcasesStack.pop_back();\par
3576 \par
3577 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L}\par
3578             {\cf19 if}(std::uncaught_exceptions() > 0\par
3579 #{\cf19 else}\par
3580             {\cf19 if}(std::uncaught_exception()\par
3581 #endif\par
3582             && g_cs->shouldLogCurrentException) \{\par
3583                 DOCTEST_ITERATE_THROUGH_REPORTERS(\par
3584                         test_case_exception, \{{\cf22 "exception thrown in subcase - will translate later "}\par
3585                                               {\cf22 "when the whole test case has been exited (cannot "}\par
3586                                               {\cf22 "translate while there is an active exception)"},\par
3587                                               false\});\par
3588                 g_cs->shouldLogCurrentException = {\cf17 false};\par
3589             \}\par
3590             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
3591         \}\par
3592     \}\par
3593 \par
3594     DOCTEST_CLANG_SUPPRESS_WARNING_POP  \par
3595     DOCTEST_GCC_SUPPRESS_WARNING_POP    \par
3596     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3597 \par
3598     Subcase::operator bool(){\cf17  const }\{ {\cf19 return} m_entered; \}\par
3599 \par
3600     Result::Result({\cf18 bool} passed, {\cf17 const} String& decomposition)\par
3601             : m_passed(passed)\par
3602             , m_decomp(decomposition) \{\}\par
3603 \par
3604     ExpressionDecomposer::ExpressionDecomposer(assertType::Enum at)\par
3605             : m_at(at) \{\}\par
3606 \par
3607     TestSuite& TestSuite::operator*({\cf17 const} {\cf18 char}* in) \{\par
3608         m_test_suite = in;\par
3609         {\cf20 // clear state}\par
3610         m_description       = {\cf17 nullptr};\par
3611         m_skip              = {\cf17 false};\par
3612         m_may_fail          = {\cf17 false};\par
3613         m_should_fail       = {\cf17 false};\par
3614         m_expected_failures = 0;\par
3615         m_timeout           = 0;\par
3616         {\cf19 return} *{\cf17 this};\par
3617     \}\par
3618 \par
3619     TestCase::TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
3620                        {\cf17 const} {\cf18 char}* type, {\cf18 int} template_id) \{\par
3621         m_file              = file;\par
3622         m_line              = line;\par
3623         m_name              = {\cf17 nullptr}; {\cf20 // will be later overridden in operator*}\par
3624         m_test_suite        = test_suite.m_test_suite;\par
3625         m_description       = test_suite.m_description;\par
3626         m_skip              = test_suite.m_skip;\par
3627         m_may_fail          = test_suite.m_may_fail;\par
3628         m_should_fail       = test_suite.m_should_fail;\par
3629         m_expected_failures = test_suite.m_expected_failures;\par
3630         m_timeout           = test_suite.m_timeout;\par
3631 \par
3632         m_test        = test;\par
3633         m_type        = type;\par
3634         m_template_id = template_id;\par
3635     \}\par
3636 \par
3637     TestCase::TestCase({\cf17 const} TestCase& other)\par
3638             : TestCaseData() \{\par
3639         *{\cf17 this} = other;\par
3640     \}\par
3641 \par
3642     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
3643     DOCTEST_MSVC_SUPPRESS_WARNING(26437)           {\cf20 // Do not slice}\par
3644     TestCase& TestCase::operator=(const TestCase& other) \{\par
3645         {\cf17 static_cast<}TestCaseData&{\cf17 >}(*this) = {\cf17 static_cast<}{\cf17 const }TestCaseData&{\cf17 >}(other);\par
3646 \par
3647         m_test        = other.m_test;\par
3648         m_type        = other.m_type;\par
3649         m_template_id = other.m_template_id;\par
3650         m_full_name   = other.m_full_name;\par
3651 \par
3652         {\cf19 if}(m_template_id != -1)\par
3653             m_name = m_full_name.c_str();\par
3654         {\cf19 return} *{\cf17 this};\par
3655     \}\par
3656     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3657 \par
3658     TestCase& TestCase::operator*({\cf17 const} {\cf18 char}* in) \{\par
3659         m_name = in;\par
3660         {\cf20 // make a new name with an appended type for templated test case}\par
3661         {\cf19 if}(m_template_id != -1) \{\par
3662             m_full_name = String(m_name) + m_type;\par
3663             {\cf20 // redirect the name to point to the newly constructed full name}\par
3664             m_name = m_full_name.c_str();\par
3665         \}\par
3666         {\cf19 return} *{\cf17 this};\par
3667     \}\par
3668 \par
3669     {\cf18 bool} TestCase::operator<({\cf17 const} TestCase& other){\cf17  const }\{\par
3670         {\cf19 if}(m_line != other.m_line)\par
3671             {\cf19 return} m_line < other.m_line;\par
3672         {\cf17 const} {\cf18 int} file_cmp = m_file.compare(other.m_file);\par
3673         {\cf19 if}(file_cmp != 0)\par
3674             {\cf19 return} file_cmp < 0;\par
3675         {\cf19 return} m_template_id < other.m_template_id;\par
3676     \}\par
3677 \} {\cf20 // namespace detail}\par
3678 {\cf17 namespace }\{\par
3679     {\cf17 using namespace }detail;\par
3680     {\cf20 // for sorting tests by file/line}\par
3681     {\cf18 bool} fileOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
3682         {\cf20 // this is needed because MSVC gives different case for drive letters}\par
3683         {\cf20 // for __FILE__ when evaluated in a header and a source file}\par
3684         {\cf17 const} {\cf18 int} res = lhs->m_file.compare(rhs->m_file, {\cf18 bool}(DOCTEST_MSVC));\par
3685         {\cf19 if}(res != 0)\par
3686             {\cf19 return} res < 0;\par
3687         {\cf19 if}(lhs->m_line != rhs->m_line)\par
3688             {\cf19 return} lhs->m_line < rhs->m_line;\par
3689         {\cf19 return} lhs->m_template_id < rhs->m_template_id;\par
3690     \}\par
3691 \par
3692     {\cf20 // for sorting tests by suite/file/line}\par
3693     {\cf18 bool} suiteOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
3694         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_test_suite, rhs->m_test_suite);\par
3695         {\cf19 if}(res != 0)\par
3696             {\cf19 return} res < 0;\par
3697         {\cf19 return} fileOrderComparator(lhs, rhs);\par
3698     \}\par
3699 \par
3700     {\cf20 // for sorting tests by name/suite/file/line}\par
3701     {\cf18 bool} nameOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
3702         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_name, rhs->m_name);\par
3703         {\cf19 if}(res != 0)\par
3704             {\cf19 return} res < 0;\par
3705         {\cf19 return} suiteOrderComparator(lhs, rhs);\par
3706     \}\par
3707 \par
3708     {\cf20 // all the registered tests}\par
3709     std::set<TestCase>& getRegisteredTests() \{\par
3710         {\cf17 static} std::set<TestCase> data;\par
3711         {\cf19 return} data;\par
3712     \}\par
3713 \par
3714 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_WINDOWS}\par
3715     HANDLE g_stdoutHandle;\par
3716     WORD   g_origFgAttrs;\par
3717     WORD   g_origBgAttrs;\par
3718     {\cf18 bool}   g_attrsInitted = {\cf17 false};\par
3719 \par
3720     {\cf18 int} colors_init() \{\par
3721         {\cf19 if}(!g_attrsInitted) \{\par
3722             g_stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);\par
3723             g_attrsInitted = {\cf17 true};\par
3724             CONSOLE_SCREEN_BUFFER_INFO csbiInfo;\par
3725             GetConsoleScreenBufferInfo(g_stdoutHandle, &csbiInfo);\par
3726             g_origFgAttrs = csbiInfo.wAttributes & ~(BACKGROUND_GREEN | BACKGROUND_RED |\par
3727                                                      BACKGROUND_BLUE | BACKGROUND_INTENSITY);\par
3728             g_origBgAttrs = csbiInfo.wAttributes & ~(FOREGROUND_GREEN | FOREGROUND_RED |\par
3729                                                      FOREGROUND_BLUE | FOREGROUND_INTENSITY);\par
3730         \}\par
3731         {\cf19 return} 0;\par
3732     \}\par
3733 \par
3734     {\cf18 int} dumy_init_console_colors = colors_init();\par
3735 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS}\par
3736 \par
3737     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"})\par
3738     void color_to_stream(std::ostream& s, Color::Enum code) \{\par
3739         ((void)s);    {\cf20 // for DOCTEST_CONFIG_COLORS_NONE or DOCTEST_CONFIG_COLORS_WINDOWS}\par
3740         ((void)code); {\cf20 // for DOCTEST_CONFIG_COLORS_NONE}\par
3741 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_ANSI}\par
3742         {\cf19 if}(g_no_colors ||\par
3743            (isatty(STDOUT_FILENO) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
3744             {\cf19 return};\par
3745 \par
3746         {\cf17 auto} col = {\cf22 ""};\par
3747         {\cf20 // clang-format off}\par
3748             {\cf19 switch}(code) \{ \par
3749                 {\cf19 case} Color::Red:         col = {\cf22 "[0;31m"}; {\cf19 break};\par
3750                 {\cf19 case} Color::Green:       col = {\cf22 "[0;32m"}; {\cf19 break};\par
3751                 {\cf19 case} Color::Blue:        col = {\cf22 "[0;34m"}; {\cf19 break};\par
3752                 {\cf19 case} Color::Cyan:        col = {\cf22 "[0;36m"}; {\cf19 break};\par
3753                 {\cf19 case} Color::Yellow:      col = {\cf22 "[0;33m"}; {\cf19 break};\par
3754                 {\cf19 case} Color::Grey:        col = {\cf22 "[1;30m"}; {\cf19 break};\par
3755                 {\cf19 case} Color::LightGrey:   col = {\cf22 "[0;37m"}; {\cf19 break};\par
3756                 {\cf19 case} Color::BrightRed:   col = {\cf22 "[1;31m"}; {\cf19 break};\par
3757                 {\cf19 case} Color::BrightGreen: col = {\cf22 "[1;32m"}; {\cf19 break};\par
3758                 {\cf19 case} Color::BrightWhite: col = {\cf22 "[1;37m"}; {\cf19 break};\par
3759                 {\cf19 case} Color::Bright: {\cf20 // invalid}\par
3760                 {\cf19 case} Color::None:\par
3761                 {\cf19 case} Color::White:\par
3762                 {\cf19 default}:                 col = {\cf22 "[0m"};\par
3763             \}\par
3764         {\cf20 // clang-format on}\par
3765         s << {\cf22 "\\033"} << col;\par
3766 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_ANSI}\par
3767 \par
3768 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_WINDOWS}\par
3769         {\cf19 if}(g_no_colors ||\par
3770            (isatty(fileno(stdout)) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
3771             {\cf19 return};\par
3772 \par
3773 {\cf21 #define DOCTEST_SET_ATTR(x) SetConsoleTextAttribute(g_stdoutHandle, x | g_origBgAttrs)}\par
3774 \par
3775         {\cf20 // clang-format off}\par
3776         {\cf19 switch} (code) \{\par
3777             {\cf19 case} Color::White:       DOCTEST_SET_ATTR(FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
3778             {\cf19 case} Color::Red:         DOCTEST_SET_ATTR(FOREGROUND_RED);                                      {\cf19 break};\par
3779             {\cf19 case} Color::Green:       DOCTEST_SET_ATTR(FOREGROUND_GREEN);                                    {\cf19 break};\par
3780             {\cf19 case} Color::Blue:        DOCTEST_SET_ATTR(FOREGROUND_BLUE);                                     {\cf19 break};\par
3781             {\cf19 case} Color::Cyan:        DOCTEST_SET_ATTR(FOREGROUND_BLUE | FOREGROUND_GREEN);                  {\cf19 break};\par
3782             {\cf19 case} Color::Yellow:      DOCTEST_SET_ATTR(FOREGROUND_RED | FOREGROUND_GREEN);                   {\cf19 break};\par
3783             {\cf19 case} Color::Grey:        DOCTEST_SET_ATTR(0);                                                   {\cf19 break};\par
3784             {\cf19 case} Color::LightGrey:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);                                {\cf19 break};\par
3785             {\cf19 case} Color::BrightRed:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_RED);               {\cf19 break};\par
3786             {\cf19 case} Color::BrightGreen: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN);             {\cf19 break};\par
3787             {\cf19 case} Color::BrightWhite: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
3788             {\cf19 case} Color::None:\par
3789             {\cf19 case} Color::Bright: {\cf20 // invalid}\par
3790             {\cf19 default}:                 DOCTEST_SET_ATTR(g_origFgAttrs);\par
3791         \}\par
3792             {\cf20 // clang-format on}\par
3793 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS}\par
3794     \}\par
3795     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3796 \par
3797     std::vector<const IExceptionTranslator*>& getExceptionTranslators() \{\par
3798         {\cf17 static} std::vector<const IExceptionTranslator*> data;\par
3799         {\cf19 return} data;\par
3800     \}\par
3801 \par
3802     String translateActiveException() \{\par
3803 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3804         String res;\par
3805         {\cf17 auto}&  translators = getExceptionTranslators();\par
3806         {\cf19 for}({\cf17 auto}& curr : translators)\par
3807             {\cf19 if}(curr->translate(res))\par
3808                 {\cf19 return} res;\par
3809         {\cf20 // clang-format off}\par
3810         DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wcatch-value"})\par
3811         {\cf17 try} \{\par
3812             {\cf19 throw};\par
3813         \} {\cf19 catch}(std::exception& ex) \{\par
3814             {\cf19 return} ex.what();\par
3815         \} {\cf19 catch}(std::string& msg) \{\par
3816             {\cf19 return} msg.c_str();\par
3817         \} {\cf19 catch}({\cf17 const} {\cf18 char}* msg) \{\par
3818             {\cf19 return} msg;\par
3819         \} {\cf19 catch}(...) \{\par
3820             {\cf19 return} {\cf22 "unknown exception"};\par
3821         \}\par
3822         DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3823 {\cf20 // clang-format on}\par
3824 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3825         {\cf19 return} {\cf22 ""};\par
3826 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3827     \}\par
3828 \} {\cf20 // namespace}\par
3829 \par
3830 {\cf17 namespace }detail \{\par
3831     {\cf20 // used by the macros for registering tests}\par
3832     {\cf18 int} regTest({\cf17 const} TestCase& tc) \{\par
3833         getRegisteredTests().insert(tc);\par
3834         {\cf19 return} 0;\par
3835     \}\par
3836 \par
3837     {\cf20 // sets the current test suite}\par
3838     {\cf18 int} setTestSuite({\cf17 const} TestSuite& ts) \{\par
3839         doctest_detail_test_suite_ns::getCurrentTestSuite() = ts;\par
3840         {\cf19 return} 0;\par
3841     \}\par
3842 \par
3843 {\cf21 #ifdef DOCTEST_IS_DEBUGGER_ACTIVE}\par
3844     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} DOCTEST_IS_DEBUGGER_ACTIVE(); \}\par
3845 {\cf21 #else }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
3846 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
3847     {\cf20 // The following function is taken directly from the following technical note:}\par
3848     {\cf20 // https://developer.apple.com/library/archive/qa/qa1361/_index.html}\par
3849     {\cf20 // Returns true if the current process is being debugged (either}\par
3850     {\cf20 // running under the debugger or has a debugger attached post facto).}\par
3851     {\cf18 bool} isDebuggerActive() \{\par
3852         {\cf18 int}        mib[4];\par
3853         kinfo_proc info;\par
3854         {\cf18 size_t}     size;\par
3855         {\cf20 // Initialize the flags so that, if sysctl fails for some bizarre}\par
3856         {\cf20 // reason, we get a predictable result.}\par
3857         info.kp_proc.p_flag = 0;\par
3858         {\cf20 // Initialize mib, which tells sysctl the info we want, in this case}\par
3859         {\cf20 // we're looking for information about a specific process ID.}\par
3860         mib[0] = CTL_KERN;\par
3861         mib[1] = KERN_PROC;\par
3862         mib[2] = KERN_PROC_PID;\par
3863         mib[3] = getpid();\par
3864         {\cf20 // Call sysctl.}\par
3865         size = {\cf17 sizeof}(info);\par
3866         {\cf19 if}(sysctl(mib, DOCTEST_COUNTOF(mib), &info, &size, 0, 0) != 0) \{\par
3867             std::cerr << {\cf22 "\\nCall to sysctl failed - unable to determine if debugger is active **\\n"};\par
3868             {\cf19 return} {\cf17 false};\par
3869         \}\par
3870         {\cf20 // We're being debugged if the P_TRACED flag is set.}\par
3871         {\cf19 return} ((info.kp_proc.p_flag & P_TRACED) != 0);\par
3872     \}\par
3873 {\cf21 #elif DOCTEST_MSVC || defined(__MINGW32__) || defined(__MINGW64__)}\par
3874     {\cf18 bool} isDebuggerActive() \{ return ::IsDebuggerPresent() != 0; \}\par
3875 {\cf21 #else}\par
3876     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} {\cf17 false}; \}\par
3877 {\cf21 #endif }{\cf20 // Platform}\par
3878 {\cf21 #endif }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
3879 \par
3880     {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et) \{\par
3881         {\cf19 if}(std::find(getExceptionTranslators().begin(), getExceptionTranslators().end(), et) ==\par
3882            getExceptionTranslators().end())\par
3883             getExceptionTranslators().push_back(et);\par
3884     \}\par
3885 \par
3886 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3887     {\cf18 void} toStream(std::ostream* s, {\cf18 char}* in) \{ *s << in; \}\par
3888     {\cf18 void} toStream(std::ostream* s, {\cf17 const} {\cf18 char}* in) \{ *s << in; \}\par
3889 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3890     {\cf18 void} toStream(std::ostream* s, {\cf18 bool} in) \{ *s << std::boolalpha << in << std::noboolalpha; \}\par
3891     {\cf18 void} toStream(std::ostream* s, {\cf18 float} in) \{ *s << in; \}\par
3892     {\cf18 void} toStream(std::ostream* s, {\cf18 double} in) \{ *s << in; \}\par
3893     {\cf18 void} toStream(std::ostream* s, {\cf18 double} {\cf18 long} in) \{ *s << in; \}\par
3894 \par
3895     {\cf18 void} toStream(std::ostream* s, {\cf18 char} in) \{ *s << in; \}\par
3896     {\cf18 void} toStream(std::ostream* s, {\cf18 char} {\cf18 signed} in) \{ *s << in; \}\par
3897     {\cf18 void} toStream(std::ostream* s, {\cf18 char} {\cf18 unsigned} in) \{ *s << in; \}\par
3898     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 short} in) \{ *s << in; \}\par
3899     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 short} {\cf18 unsigned} in) \{ *s << in; \}\par
3900     {\cf18 void} toStream(std::ostream* s, {\cf18 int} in) \{ *s << in; \}\par
3901     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 unsigned} in) \{ *s << in; \}\par
3902     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} in) \{ *s << in; \}\par
3903     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 unsigned} in) \{ *s << in; \}\par
3904     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 long} in) \{ *s << in; \}\par
3905     {\cf18 void} toStream(std::ostream* s, {\cf18 int} {\cf18 long} {\cf18 long} {\cf18 unsigned} in) \{ *s << in; \}\par
3906 \par
3907     DOCTEST_THREAD_LOCAL std::vector<IContextScope*> g_infoContexts; {\cf20 // for logging with INFO()}\par
3908 \par
3909     ContextScopeBase::ContextScopeBase() \{\par
3910         g_infoContexts.push_back({\cf17 this});\par
3911     \}\par
3912 \par
3913     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17 }\par
3914     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations") \par
3915     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
3916 \par
3917     {\cf20 // destroy cannot be inlined into the destructor because that would mean calling stringify after}\par
3918     {\cf20 // ContextScope has been destroyed (base class destructors run after derived class destructors).}\par
3919     {\cf20 // Instead, ContextScope calls this method directly from its destructor.}\par
3920     {\cf18 void} ContextScopeBase::destroy() \{\par
3921 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L}\par
3922         {\cf19 if}(std::uncaught_exceptions() > 0) \{\par
3923 {\cf21 #else}\par
3924         {\cf19 if}(std::uncaught_exception()) \{\par
3925 {\cf21 #endif}\par
3926             std::ostringstream s;\par
3927             this->stringify(&s);\par
3928             g_cs->stringifiedContexts.push_back(s.str().c_str());\par
3929         \}\par
3930         g_infoContexts.pop_back();\par
3931     \}\par
3932 \par
3933     DOCTEST_CLANG_SUPPRESS_WARNING_POP  \par
3934     DOCTEST_GCC_SUPPRESS_WARNING_POP    \par
3935     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3936 \} {\cf20 // namespace detail}\par
3937 {\cf17 namespace }\{\par
3938     {\cf17 using namespace }detail;\par
3939 \par
3940 {\cf21 #if !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
3941     {\cf17 struct }FatalConditionHandler\par
3942     \{\par
3943         {\cf18 void} reset() \{\}\par
3944     \};\par
3945 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
3946 \par
3947     {\cf18 void} reportFatal({\cf17 const} std::string&);\par
3948 \par
3949 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3950 \par
3951     {\cf17 struct }SignalDefs\par
3952     \{\par
3953         DWORD id;\par
3954         {\cf17 const} {\cf18 char}* name;\par
3955     \};\par
3956     {\cf20 // There is no 1-1 mapping between signals and windows exceptions.}\par
3957     {\cf20 // Windows can easily distinguish between SO and SigSegV,}\par
3958     {\cf20 // but SigInt, SigTerm, etc are handled differently.}\par
3959     SignalDefs signalDefs[] = \{\par
3960             \{EXCEPTION_ILLEGAL_INSTRUCTION, {\cf22 "SIGILL - Illegal instruction signal"}\},\par
3961             \{EXCEPTION_STACK_OVERFLOW, {\cf22 "SIGSEGV - Stack overflow"}\},\par
3962             \{EXCEPTION_ACCESS_VIOLATION, {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
3963             \{EXCEPTION_INT_DIVIDE_BY_ZERO, {\cf22 "Divide by zero error"}\},\par
3964     \};\par
3965 \par
3966     {\cf17 struct }FatalConditionHandler\par
3967     \{\par
3968         {\cf17 static} LONG CALLBACK handleException(PEXCEPTION_POINTERS ExceptionInfo) \{\par
3969             {\cf19 for}({\cf18 size_t} i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
3970                 {\cf19 if}(ExceptionInfo->ExceptionRecord->ExceptionCode == signalDefs[i].id) \{\par
3971                     reportFatal(signalDefs[i].name);\par
3972                     {\cf19 break};\par
3973                 \}\par
3974             \}\par
3975             {\cf20 // If its not an exception we care about, pass it along.}\par
3976             {\cf20 // This stops us from eating debugger breaks etc.}\par
3977             {\cf19 return} EXCEPTION_CONTINUE_SEARCH;\par
3978         \}\par
3979 \par
3980         FatalConditionHandler() \{\par
3981             isSet = {\cf17 true};\par
3982             {\cf20 // 32k seems enough for doctest to handle stack overflow,}\par
3983             {\cf20 // but the value was found experimentally, so there is no strong guarantee}\par
3984             guaranteeSize = 32 * 1024;\par
3985             {\cf20 // Register an unhandled exception filter}\par
3986             previousTop = SetUnhandledExceptionFilter(handleException);\par
3987             {\cf20 // Pass in guarantee size to be filled}\par
3988             SetThreadStackGuarantee(&guaranteeSize);\par
3989         \}\par
3990 \par
3991         {\cf17 static} {\cf18 void} reset() \{\par
3992             {\cf19 if}(isSet) \{\par
3993                 {\cf20 // Unregister handler and restore the old guarantee}\par
3994                 SetUnhandledExceptionFilter(previousTop);\par
3995                 SetThreadStackGuarantee(&guaranteeSize);\par
3996                 previousTop = {\cf17 nullptr};\par
3997                 isSet = {\cf17 false};\par
3998             \}\par
3999         \}\par
4000 \par
4001         ~FatalConditionHandler() \{ reset(); \}\par
4002 \par
4003     {\cf17 private}:\par
4004         {\cf17 static} {\cf18 bool} isSet;\par
4005         {\cf17 static} ULONG guaranteeSize;\par
4006         {\cf17 static} LPTOP_LEVEL_EXCEPTION_FILTER previousTop;\par
4007     \};\par
4008 \par
4009     {\cf18 bool} FatalConditionHandler::isSet = {\cf17 false};\par
4010     ULONG FatalConditionHandler::guaranteeSize = 0;\par
4011     LPTOP_LEVEL_EXCEPTION_FILTER FatalConditionHandler::previousTop = {\cf17 nullptr};\par
4012 \par
4013 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4014 \par
4015     {\cf17 struct }SignalDefs\par
4016     \{\par
4017         {\cf18 int}         id;\par
4018         {\cf17 const} {\cf18 char}* name;\par
4019     \};\par
4020     SignalDefs signalDefs[] = \{\{SIGINT, {\cf22 "SIGINT - Terminal interrupt signal"}\},\par
4021                                \{SIGILL, {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4022                                \{SIGFPE, {\cf22 "SIGFPE - Floating point error signal"}\},\par
4023                                \{SIGSEGV, {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4024                                \{SIGTERM, {\cf22 "SIGTERM - Termination request signal"}\},\par
4025                                \{SIGABRT, {\cf22 "SIGABRT - Abort (abnormal termination) signal"}\}\};\par
4026 \par
4027     {\cf17 struct }FatalConditionHandler\par
4028     \{\par
4029         {\cf17 static} {\cf18 bool}             isSet;\par
4030         {\cf17 static} {\cf17 struct }sigaction oldSigActions[DOCTEST_COUNTOF(signalDefs)];\par
4031         {\cf17 static} stack_t          oldSigStack;\par
4032         {\cf17 static} {\cf18 char}             altStackMem[4 * SIGSTKSZ];\par
4033 \par
4034         {\cf17 static} {\cf18 void} handleSignal({\cf18 int} sig) \{\par
4035             {\cf17 const} {\cf18 char}* name = {\cf22 "<unknown signal>"};\par
4036             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4037                 SignalDefs& def = signalDefs[i];\par
4038                 {\cf19 if}(sig == def.id) \{\par
4039                     name = def.name;\par
4040                     {\cf19 break};\par
4041                 \}\par
4042             \}\par
4043             reset();\par
4044             reportFatal(name);\par
4045             {\cf17 raise}(sig);\par
4046         \}\par
4047 \par
4048         FatalConditionHandler() \{\par
4049             isSet = {\cf17 true};\par
4050             stack_t sigStack;\par
4051             sigStack.ss_sp    = altStackMem;\par
4052             sigStack.ss_size  = {\cf17 sizeof}(altStackMem);\par
4053             sigStack.ss_flags = 0;\par
4054             sigaltstack(&sigStack, &oldSigStack);\par
4055             {\cf17 struct }sigaction sa = \{\};\par
4056             sa.sa_handler       = handleSignal; {\cf20 // NOLINT}\par
4057             sa.sa_flags         = SA_ONSTACK;\par
4058             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4059                 sigaction(signalDefs[i].{\cf18 id}, &sa, &oldSigActions[i]);\par
4060             \}\par
4061         \}\par
4062 \par
4063         ~FatalConditionHandler() \{ reset(); \}\par
4064         {\cf17 static} {\cf18 void} reset() \{\par
4065             {\cf19 if}(isSet) \{\par
4066                 {\cf20 // Set signals back to previous values -- hopefully nobody overwrote them in the meantime}\par
4067                 {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4068                     sigaction(signalDefs[i].{\cf18 id}, &oldSigActions[i], {\cf17 nullptr});\par
4069                 \}\par
4070                 {\cf20 // Return the old stack}\par
4071                 sigaltstack(&oldSigStack, {\cf17 nullptr});\par
4072                 isSet = {\cf17 false};\par
4073             \}\par
4074         \}\par
4075     \};\par
4076 \par
4077     {\cf18 bool}             FatalConditionHandler::isSet                                      = {\cf17 false};\par
4078     {\cf17 struct }sigaction FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)] = \{\};\par
4079     stack_t          FatalConditionHandler::oldSigStack                                = \{\};\par
4080     {\cf18 char}             FatalConditionHandler::altStackMem[]                              = \{\};\par
4081 \par
4082 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4083 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4084 \par
4085 \} {\cf20 // namespace}\par
4086 \par
4087 {\cf17 namespace }\{\par
4088     {\cf17 using namespace }detail;\par
4089 \par
4090 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4091 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text) ::OutputDebugStringA(text)}\par
4092 {\cf21 #else}\par
4093     {\cf20 // TODO: integration with XCode and other IDEs}\par
4094 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text) }{\cf20 // NOLINT(clang-diagnostic-unused-macros)}\par
4095 {\cf21 #endif }{\cf20 // Platform}\par
4096 \par
4097     {\cf18 void} addAssert(assertType::Enum at) \{\par
4098         {\cf19 if}((at & assertType::is_warn) == 0) \par
4099             g_cs->numAssertsCurrentTest_atomic++;\par
4100     \}\par
4101 \par
4102     {\cf18 void} addFailedAssert(assertType::Enum at) \{\par
4103         {\cf19 if}((at & assertType::is_warn) == 0) \par
4104             g_cs->numAssertsFailedCurrentTest_atomic++;\par
4105     \}\par
4106 \par
4107 {\cf21 #if defined(DOCTEST_CONFIG_POSIX_SIGNALS) || defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4108     {\cf18 void} reportFatal({\cf17 const} std::string& message) \{\par
4109         g_cs->failure_flags |= TestCaseFailureReason::Crash;\par
4110 \par
4111         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception, \{message.c_str(), {\cf17 true}\});\par
4112 \par
4113         {\cf19 while}(g_cs->subcasesStack.size()) \{\par
4114             g_cs->subcasesStack.pop_back();\par
4115             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4116         \}\par
4117 \par
4118         g_cs->finalizeTestCaseData();\par
4119 \par
4120         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
4121 \par
4122         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
4123     \}\par
4124 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4125 \} {\cf20 // namespace}\par
4126 {\cf17 namespace }detail \{\par
4127 \par
4128     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4129                                  {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} {\cf18 char}* exception_string) \{\par
4130         m_test_case        = g_cs->currentTest;\par
4131         m_at               = at;\par
4132         m_file             = file;\par
4133         m_line             = line;\par
4134         m_expr             = expr;\par
4135         m_failed           = {\cf17 true};\par
4136         m_threw            = {\cf17 false};\par
4137         m_threw_as         = {\cf17 false};\par
4138         m_exception_type   = exception_type;\par
4139         m_exception_string = exception_string;\par
4140 {\cf21 #if DOCTEST_MSVC}\par
4141         {\cf19 if}(m_expr[0] == {\cf23 ' '}) {\cf20 // this happens when variadic macros are disabled under MSVC}\par
4142             ++m_expr;\par
4143 {\cf21 #endif }{\cf20 // MSVC}\par
4144     \}\par
4145 \par
4146     {\cf18 void} ResultBuilder::setResult({\cf17 const} Result& res) \{\par
4147         m_decomp = res.m_decomp;\par
4148         m_failed = !res.m_passed;\par
4149     \}\par
4150 \par
4151     {\cf18 void} ResultBuilder::translateException() \{\par
4152         m_threw     = {\cf17 true};\par
4153         m_exception = translateActiveException();\par
4154     \}\par
4155 \par
4156     {\cf18 bool} ResultBuilder::log() \{\par
4157         {\cf19 if}(m_at & assertType::is_throws) \{ \par
4158             m_failed = !m_threw;\par
4159         \} {\cf19 else} {\cf19 if}((m_at & assertType::is_throws_as) && (m_at & assertType::is_throws_with)) \{ \par
4160             m_failed = !m_threw_as || (m_exception != m_exception_string);\par
4161         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_as) \{ \par
4162             m_failed = !m_threw_as;\par
4163         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_with) \{ \par
4164             m_failed = m_exception != m_exception_string;\par
4165         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_nothrow) \{ \par
4166             m_failed = m_threw;\par
4167         \}\par
4168 \par
4169         {\cf19 if}(m_exception.size())\par
4170             m_exception = String({\cf22 "\\""}) + m_exception + {\cf22 "\\""};\par
4171 \par
4172         {\cf19 if}(is_running_in_test) \{\par
4173             addAssert(m_at);\par
4174             DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert, *{\cf17 this});\par
4175 \par
4176             {\cf19 if}(m_failed)\par
4177                 addFailedAssert(m_at);\par
4178         \} {\cf19 else} {\cf19 if}(m_failed) \{\par
4179             failed_out_of_a_testing_context(*{\cf17 this});\par
4180         \}\par
4181 \par
4182         {\cf19 return} m_failed && isDebuggerActive() &&\par
4183                !getContextOptions()->no_breaks; {\cf20 // break into debugger}\par
4184     \}\par
4185 \par
4186     {\cf18 void} ResultBuilder::react(){\cf17  const }\{\par
4187         {\cf19 if}(m_failed && checkIfShouldThrow(m_at))\par
4188             throwException();\par
4189     \}\par
4190 \par
4191     {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad) \{\par
4192         {\cf19 if}(g_cs->ah)\par
4193             g_cs->ah(ad);\par
4194         {\cf19 else}\par
4195             std::abort();\par
4196     \}\par
4197 \par
4198     {\cf18 void} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4199                        Result result) \{\par
4200         {\cf18 bool} failed = !result.m_passed;\par
4201 \par
4202         {\cf20 // ###################################################################################}\par
4203         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
4204         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
4205         {\cf20 // ###################################################################################}\par
4206         DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);\par
4207         DOCTEST_ASSERT_IN_TESTS(result.m_decomp);\par
4208     \}\par
4209 \par
4210     MessageBuilder::MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity) \{\par
4211         m_stream   = getTlsOss();\par
4212         m_file     = file;\par
4213         m_line     = line;\par
4214         m_severity = severity;\par
4215     \}\par
4216 \par
4217     IExceptionTranslator::IExceptionTranslator()  = {\cf19 default};\par
4218     IExceptionTranslator::~IExceptionTranslator() = {\cf19 default};\par
4219 \par
4220     {\cf18 bool} MessageBuilder::log() \{\par
4221         m_string = getTlsOssResult();\par
4222         DOCTEST_ITERATE_THROUGH_REPORTERS(log_message, *{\cf17 this});\par
4223 \par
4224         {\cf17 const} {\cf18 bool} isWarn = m_severity & assertType::is_warn;\par
4225 \par
4226         {\cf20 // warn is just a message in this context so we don't treat it as an assert}\par
4227         {\cf19 if}(!isWarn) \{\par
4228             addAssert(m_severity);\par
4229             addFailedAssert(m_severity);\par
4230         \}\par
4231 \par
4232         {\cf19 return} isDebuggerActive() && !getContextOptions()->no_breaks && !isWarn; {\cf20 // break}\par
4233     \}\par
4234 \par
4235     {\cf18 void} MessageBuilder::react() \{\par
4236         {\cf19 if}(m_severity & assertType::is_require) \par
4237             throwException();\par
4238     \}\par
4239 \par
4240     MessageBuilder::~MessageBuilder() = {\cf19 default};\par
4241 \} {\cf20 // namespace detail}\par
4242 {\cf17 namespace }\{\par
4243     {\cf17 using namespace }detail;\par
4244 \par
4245     {\cf17 template} <{\cf17 typename} Ex>\par
4246     DOCTEST_NORETURN {\cf18 void} throw_exception(Ex {\cf17 const}& e) \{\par
4247 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4248         {\cf19 throw} e;\par
4249 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4250         std::cerr << {\cf22 "doctest will terminate because it needed to throw an exception.\\n"}\par
4251                   << {\cf22 "The message was: "} << e.what() << {\cf23 '\\n'};\par
4252         std::terminate();\par
4253 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4254     \}\par
4255 \par
4256 {\cf21 #ifndef DOCTEST_INTERNAL_ERROR}\par
4257 {\cf21 #define DOCTEST_INTERNAL_ERROR(msg)                                                                \\}\par
4258 {\cf21     throw_exception(std::logic_error(                                                              \\}\par
4259 {\cf21             __FILE__ ":"} DOCTEST_TOSTR(__LINE__) ": Internal doctest error: " msg))\par
4260 {\cf21 #endif }{\cf20 // DOCTEST_INTERNAL_ERROR}\par
4261 \par
4262     {\cf20 // clang-format off}\par
4263 \par
4264 {\cf20 // =================================================================================================}\par
4265 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
4266 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
4267 {\cf20 // =================================================================================================}\par
4268 \par
4269     {\cf17 class }XmlEncode \{\par
4270     {\cf17 public}:\par
4271         {\cf17 enum} ForWhat \{ ForTextNodes, ForAttributes \};\par
4272 \par
4273         XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat = ForTextNodes );\par
4274 \par
4275         {\cf18 void} encodeTo( std::ostream& os ) {\cf17 const};\par
4276 \par
4277         {\cf17 friend} std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode );\par
4278 \par
4279     {\cf17 private}:\par
4280         std::string m_str;\par
4281         ForWhat m_forWhat;\par
4282     \};\par
4283 \par
4284     {\cf17 class }XmlWriter \{\par
4285     {\cf17 public}:\par
4286 \par
4287         {\cf17 class }ScopedElement \{\par
4288         {\cf17 public}:\par
4289             ScopedElement( XmlWriter* writer );\par
4290 \par
4291             ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
4292             ScopedElement& operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
4293 \par
4294             ~ScopedElement();\par
4295 \par
4296             ScopedElement& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
4297 \par
4298             {\cf17 template}<{\cf17 typename} T>\par
4299             ScopedElement& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
4300                 m_writer->writeAttribute( name, attribute );\par
4301                 {\cf19 return} *{\cf17 this};\par
4302             \}\par
4303 \par
4304         {\cf17 private}:\par
4305             {\cf17 mutable} XmlWriter* m_writer = {\cf17 nullptr};\par
4306         \};\par
4307 \par
4308         XmlWriter( std::ostream& os = std::cout );\par
4309         ~XmlWriter();\par
4310 \par
4311         XmlWriter( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
4312         XmlWriter& operator=( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
4313 \par
4314         XmlWriter& startElement( std::string {\cf17 const}& name );\par
4315 \par
4316         ScopedElement scopedElement( std::string {\cf17 const}& name );\par
4317 \par
4318         XmlWriter& endElement();\par
4319 \par
4320         XmlWriter& writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute );\par
4321 \par
4322         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute );\par
4323 \par
4324         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute );\par
4325 \par
4326         {\cf17 template}<{\cf17 typename} T>\par
4327         XmlWriter& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
4328         std::stringstream rss;\par
4329             rss << attribute;\par
4330             {\cf19 return} writeAttribute( name, rss.str() );\par
4331         \}\par
4332 \par
4333         XmlWriter& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
4334 \par
4335         {\cf20 //XmlWriter& writeComment( std::string const& text );}\par
4336 \par
4337         {\cf20 //void writeStylesheetRef( std::string const& url );}\par
4338 \par
4339         {\cf20 //XmlWriter& writeBlankLine();}\par
4340 \par
4341         {\cf18 void} ensureTagClosed();\par
4342 \par
4343     {\cf17 private}:\par
4344 \par
4345         {\cf18 void} writeDeclaration();\par
4346 \par
4347         {\cf18 void} newlineIfNecessary();\par
4348 \par
4349         {\cf18 bool} m_tagIsOpen = {\cf17 false};\par
4350         {\cf18 bool} m_needsNewline = {\cf17 false};\par
4351         std::vector<std::string> m_tags;\par
4352         std::string m_indent;\par
4353         std::ostream& m_os;\par
4354     \};\par
4355 \par
4356 {\cf20 // =================================================================================================}\par
4357 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
4358 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
4359 {\cf20 // =================================================================================================}\par
4360 \par
4361 {\cf17 using} uchar = {\cf18 unsigned} char;\par
4362 \par
4363 {\cf17 namespace }\{\par
4364 \par
4365     {\cf18 size_t} trailingBytes({\cf18 unsigned} {\cf18 char} c) \{\par
4366         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
4367             {\cf19 return} 2;\par
4368         \}\par
4369         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
4370             {\cf19 return} 3;\par
4371         \}\par
4372         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
4373             {\cf19 return} 4;\par
4374         \}\par
4375         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
4376     \}\par
4377 \par
4378     uint32_t headerValue({\cf18 unsigned} {\cf18 char} c) \{\par
4379         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
4380             {\cf19 return} c & 0x1F;\par
4381         \}\par
4382         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
4383             {\cf19 return} c & 0x0F;\par
4384         \}\par
4385         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
4386             {\cf19 return} c & 0x07;\par
4387         \}\par
4388         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
4389     \}\par
4390 \par
4391     {\cf18 void} hexEscapeChar(std::ostream& os, {\cf18 unsigned} {\cf18 char} c) \{\par
4392         std::ios_base::fmtflags f(os.flags());\par
4393         os << {\cf22 "\\\\x"}\par
4394             << std::uppercase << std::hex << std::setfill({\cf23 '0'}) << std::setw(2)\par
4395             << {\cf17 static_cast<}{\cf18 int}{\cf17 >}(c);\par
4396         os.flags(f);\par
4397     \}\par
4398 \par
4399 \} {\cf20 // anonymous namespace}\par
4400 \par
4401     XmlEncode::XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat )\par
4402     :   m_str( str ),\par
4403         m_forWhat( forWhat )\par
4404     \{\}\par
4405 \par
4406     {\cf18 void} XmlEncode::encodeTo( std::ostream& os ){\cf17  const }\{\par
4407         {\cf20 // Apostrophe escaping not necessary if we always use " to write attributes}\par
4408         {\cf20 // (see: https://www.w3.org/TR/xml/#syntax)}\par
4409 \par
4410         {\cf19 for}( std::size_t idx = 0; idx < m_str.size(); ++ idx ) \{\par
4411             uchar c = m_str[idx];\par
4412             {\cf19 switch} (c) \{\par
4413             {\cf19 case} {\cf23 '<'}:   os << {\cf22 "&lt;"}; {\cf19 break};\par
4414             {\cf19 case} {\cf23 '&'}:   os << {\cf22 "&amp;"}; {\cf19 break};\par
4415 \par
4416             {\cf19 case} {\cf23 '>'}:\par
4417                 {\cf20 // See: https://www.w3.org/TR/xml/#syntax}\par
4418                 {\cf19 if} (idx > 2 && m_str[idx - 1] == {\cf23 ']'} && m_str[idx - 2] == {\cf23 ']'})\par
4419                     os << {\cf22 "&gt;"};\par
4420                 {\cf19 else}\par
4421                     os << c;\par
4422                 {\cf19 break};\par
4423 \par
4424             {\cf19 case} {\cf23 '\\"'}:\par
4425                 {\cf19 if} (m_forWhat == ForAttributes)\par
4426                     os << {\cf22 "&quot;"};\par
4427                 {\cf19 else}\par
4428                     os << c;\par
4429                 {\cf19 break};\par
4430 \par
4431             {\cf19 default}:\par
4432                 {\cf20 // Check for control characters and invalid utf-8}\par
4433 \par
4434                 {\cf20 // Escape control characters in standard ascii}\par
4435                 {\cf20 // see https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0}\par
4436                 {\cf19 if} (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) \{\par
4437                     hexEscapeChar(os, c);\par
4438                     {\cf19 break};\par
4439                 \}\par
4440 \par
4441                 {\cf20 // Plain ASCII: Write it to stream}\par
4442                 {\cf19 if} (c < 0x7F) \{\par
4443                     os << c;\par
4444                     {\cf19 break};\par
4445                 \}\par
4446 \par
4447                 {\cf20 // UTF-8 territory}\par
4448                 {\cf20 // Check if the encoding is valid and if it is not, hex escape bytes.}\par
4449                 {\cf20 // Important: We do not check the exact decoded values for validity, only the encoding format}\par
4450                 {\cf20 // First check that this bytes is a valid lead byte:}\par
4451                 {\cf20 // This means that it is not encoded as 1111 1XXX}\par
4452                 {\cf20 // Or as 10XX XXXX}\par
4453                 {\cf19 if} (c <  0xC0 ||\par
4454                     c >= 0xF8) \{\par
4455                     hexEscapeChar(os, c);\par
4456                     {\cf19 break};\par
4457                 \}\par
4458 \par
4459                 {\cf17 auto} encBytes = trailingBytes(c);\par
4460                 {\cf20 // Are there enough bytes left to avoid accessing out-of-bounds memory?}\par
4461                 {\cf19 if} (idx + encBytes - 1 >= m_str.size()) \{\par
4462                     hexEscapeChar(os, c);\par
4463                     {\cf19 break};\par
4464                 \}\par
4465                 {\cf20 // The header is valid, check data}\par
4466                 {\cf20 // The next encBytes bytes must together be a valid utf-8}\par
4467                 {\cf20 // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)}\par
4468                 {\cf18 bool} valid = {\cf17 true};\par
4469                 uint32_t value = headerValue(c);\par
4470                 {\cf19 for} (std::size_t n = 1; n < encBytes; ++n) \{\par
4471                     uchar nc = m_str[idx + n];\par
4472                     valid &= ((nc & 0xC0) == 0x80);\par
4473                     value = (value << 6) | (nc & 0x3F);\par
4474                 \}\par
4475 \par
4476                 {\cf19 if} (\par
4477                     {\cf20 // Wrong bit pattern of following bytes}\par
4478                     (!valid) ||\par
4479                     {\cf20 // Overlong encodings}\par
4480                     (value < 0x80) ||\par
4481                     (                 value < 0x800   && encBytes > 2) || {\cf20 // removed "0x80 <= value &&" because redundant}\par
4482                     (0x800 < value && value < 0x10000 && encBytes > 3) ||\par
4483                     {\cf20 // Encoded value out of range}\par
4484                     (value >= 0x110000)\par
4485                     ) \{\par
4486                     hexEscapeChar(os, c);\par
4487                     {\cf19 break};\par
4488                 \}\par
4489 \par
4490                 {\cf20 // If we got here, this is in fact a valid(ish) utf-8 sequence}\par
4491                 {\cf19 for} (std::size_t n = 0; n < encBytes; ++n) \{\par
4492                     os << m_str[idx + n];\par
4493                 \}\par
4494                 idx += encBytes - 1;\par
4495                 {\cf19 break};\par
4496             \}\par
4497         \}\par
4498     \}\par
4499 \par
4500     std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode ) \{\par
4501         xmlEncode.encodeTo( os );\par
4502         {\cf19 return} os;\par
4503     \}\par
4504 \par
4505     XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )\par
4506     :   m_writer( writer )\par
4507     \{\}\par
4508 \par
4509     XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT\par
4510     :   m_writer( other.m_writer )\{\par
4511         other.m_writer = {\cf17 nullptr};\par
4512     \}\par
4513     XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT \{\par
4514         {\cf19 if} ( m_writer ) \{\par
4515             m_writer->endElement();\par
4516         \}\par
4517         m_writer = other.m_writer;\par
4518         other.m_writer = {\cf17 nullptr};\par
4519         {\cf19 return} *{\cf17 this};\par
4520     \}\par
4521 \par
4522 \par
4523     XmlWriter::ScopedElement::~ScopedElement() \{\par
4524         {\cf19 if}( m_writer )\par
4525             m_writer->endElement();\par
4526     \}\par
4527 \par
4528     XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
4529         m_writer->writeText( text, indent );\par
4530         {\cf19 return} *{\cf17 this};\par
4531     \}\par
4532 \par
4533     XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )\par
4534     \{\par
4535         writeDeclaration();\par
4536     \}\par
4537 \par
4538     XmlWriter::~XmlWriter() \{\par
4539         {\cf19 while}( !m_tags.empty() )\par
4540             endElement();\par
4541     \}\par
4542 \par
4543     XmlWriter& XmlWriter::startElement( std::string {\cf17 const}& name ) \{\par
4544         ensureTagClosed();\par
4545         newlineIfNecessary();\par
4546         m_os << m_indent << {\cf23 '<'} << name;\par
4547         m_tags.push_back( name );\par
4548         m_indent += {\cf22 "  "};\par
4549         m_tagIsOpen = {\cf17 true};\par
4550         {\cf19 return} *{\cf17 this};\par
4551     \}\par
4552 \par
4553     XmlWriter::ScopedElement XmlWriter::scopedElement( std::string {\cf17 const}& name ) \{\par
4554         ScopedElement scoped( {\cf17 this} );\par
4555         startElement( name );\par
4556         {\cf19 return} scoped;\par
4557     \}\par
4558 \par
4559     XmlWriter& XmlWriter::endElement() \{\par
4560         newlineIfNecessary();\par
4561         m_indent = m_indent.substr( 0, m_indent.size()-2 );\par
4562         {\cf19 if}( m_tagIsOpen ) \{\par
4563             m_os << {\cf22 "/>"};\par
4564             m_tagIsOpen = {\cf17 false};\par
4565         \}\par
4566         {\cf19 else} \{\par
4567             m_os << m_indent << {\cf22 "</"} << m_tags.back() << {\cf22 ">"};\par
4568         \}\par
4569         m_os << std::endl;\par
4570         m_tags.pop_back();\par
4571         {\cf19 return} *{\cf17 this};\par
4572     \}\par
4573 \par
4574     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute ) \{\par
4575         {\cf19 if}( !name.empty() && !attribute.empty() )\par
4576             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
4577         {\cf19 return} *{\cf17 this};\par
4578     \}\par
4579 \par
4580     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute ) \{\par
4581         {\cf19 if}( !name.empty() && attribute && attribute[0] != {\cf23 '\\0'} )\par
4582             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
4583         {\cf19 return} *{\cf17 this};\par
4584     \}\par
4585 \par
4586     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute ) \{\par
4587         m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << ( attribute ? {\cf22 "true"} : {\cf22 "false"} ) << {\cf23 '"'};\par
4588         {\cf19 return} *{\cf17 this};\par
4589     \}\par
4590 \par
4591     XmlWriter& XmlWriter::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
4592         {\cf19 if}( !text.empty() )\{\par
4593             {\cf18 bool} tagWasOpen = m_tagIsOpen;\par
4594             ensureTagClosed();\par
4595             {\cf19 if}( tagWasOpen && indent )\par
4596                 m_os << m_indent;\par
4597             m_os << XmlEncode( text );\par
4598             m_needsNewline = {\cf17 true};\par
4599         \}\par
4600         {\cf19 return} *{\cf17 this};\par
4601     \}\par
4602 \par
4603     {\cf20 //XmlWriter& XmlWriter::writeComment( std::string const& text ) \{}\par
4604     {\cf20 //    ensureTagClosed();}\par
4605     {\cf20 //    m_os << m_indent << "<!--" << text << "-->";}\par
4606     {\cf20 //    m_needsNewline = true;}\par
4607     {\cf20 //    return *this;}\par
4608     {\cf20 //\}}\par
4609 \par
4610     {\cf20 //void XmlWriter::writeStylesheetRef( std::string const& url ) \{}\par
4611     {\cf20 //    m_os << "<?xml-stylesheet type=\\"text/xsl\\" href=\\"" << url << "\\"?>\\n";}\par
4612     {\cf20 //\}}\par
4613 \par
4614     {\cf20 //XmlWriter& XmlWriter::writeBlankLine() \{}\par
4615     {\cf20 //    ensureTagClosed();}\par
4616     {\cf20 //    m_os << '\\n';}\par
4617     {\cf20 //    return *this;}\par
4618     {\cf20 //\}}\par
4619 \par
4620     {\cf18 void} XmlWriter::ensureTagClosed() \{\par
4621         {\cf19 if}( m_tagIsOpen ) \{\par
4622             m_os << {\cf22 ">"} << std::endl;\par
4623             m_tagIsOpen = {\cf17 false};\par
4624         \}\par
4625     \}\par
4626 \par
4627     {\cf18 void} XmlWriter::writeDeclaration() \{\par
4628         m_os << {\cf22 "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n"};\par
4629     \}\par
4630 \par
4631     {\cf18 void} XmlWriter::newlineIfNecessary() \{\par
4632         {\cf19 if}( m_needsNewline ) \{\par
4633             m_os << std::endl;\par
4634             m_needsNewline = {\cf17 false};\par
4635         \}\par
4636     \}\par
4637 \par
4638 {\cf20 // =================================================================================================}\par
4639 {\cf20 // End of copy-pasted code from Catch}\par
4640 {\cf20 // =================================================================================================}\par
4641 \par
4642     {\cf20 // clang-format on}\par
4643 \par
4644     {\cf17 struct }XmlReporter : {\cf17 public} IReporter\par
4645     \{\par
4646         XmlWriter  xml;\par
4647         std::mutex mutex;\par
4648 \par
4649         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
4650         {\cf17 const} ContextOptions& opt;\par
4651         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
4652 \par
4653         XmlReporter({\cf17 const} ContextOptions& co)\par
4654                 : xml(*co.cout)\par
4655                 , opt(co) \{\}\par
4656 \par
4657         {\cf18 void} log_contexts() \{\par
4658             {\cf18 int} num_contexts = get_num_active_contexts();\par
4659             {\cf19 if}(num_contexts) \{\par
4660                 {\cf17 auto}              contexts = get_active_contexts();\par
4661                 std::stringstream ss;\par
4662                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
4663                     contexts[i]->stringify(&ss);\par
4664                     xml.scopedElement({\cf22 "Info"}).writeText(ss.str());\par
4665                     ss.str({\cf22 ""});\par
4666                 \}\par
4667             \}\par
4668         \}\par
4669 \par
4670         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
4671 \par
4672         {\cf18 void} test_case_start_impl({\cf17 const} TestCaseData& in) \{\par
4673             {\cf18 bool} open_ts_tag = {\cf17 false};\par
4674             {\cf19 if}(tc != {\cf17 nullptr}) \{ {\cf20 // we have already opened a test suite}\par
4675                 {\cf19 if}(std::strcmp(tc->m_test_suite, in.m_test_suite) != 0) \{\par
4676                     xml.endElement();\par
4677                     open_ts_tag = {\cf17 true};\par
4678                 \}\par
4679             \}\par
4680             {\cf19 else} \{\par
4681                 open_ts_tag = {\cf17 true}; {\cf20 // first test case ==> first test suite}\par
4682             \}\par
4683 \par
4684             {\cf19 if}(open_ts_tag) \{\par
4685                 xml.startElement({\cf22 "TestSuite"});\par
4686                 xml.writeAttribute({\cf22 "name"}, in.m_test_suite);\par
4687             \}\par
4688 \par
4689             tc = &in;\par
4690             xml.startElement({\cf22 "TestCase"})\par
4691                     .writeAttribute({\cf22 "name"}, in.m_name)\par
4692                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file.c_str()))\par
4693                     .writeAttribute({\cf22 "line"}, line(in.m_line))\par
4694                     .writeAttribute({\cf22 "description"}, in.m_description);\par
4695 \par
4696             {\cf19 if}(Approx(in.m_timeout) != 0)\par
4697                 xml.writeAttribute({\cf22 "timeout"}, in.m_timeout);\par
4698             {\cf19 if}(in.m_may_fail)\par
4699                 xml.writeAttribute({\cf22 "may_fail"}, {\cf17 true});\par
4700             {\cf19 if}(in.m_should_fail)\par
4701                 xml.writeAttribute({\cf22 "should_fail"}, {\cf17 true});\par
4702         \}\par
4703 \par
4704         {\cf20 // =========================================================================================}\par
4705         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
4706         {\cf20 // =========================================================================================}\par
4707 \par
4708         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
4709             test_run_start();\par
4710             {\cf19 if}(opt.list_reporters) \{\par
4711                 {\cf19 for}({\cf17 auto}& curr : getListeners())\par
4712                     xml.scopedElement({\cf22 "Listener"})\par
4713                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
4714                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
4715                 {\cf19 for}({\cf17 auto}& curr : getReporters())\par
4716                     xml.scopedElement({\cf22 "Reporter"})\par
4717                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
4718                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
4719             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
4720                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i) \{\par
4721                     xml.scopedElement({\cf22 "TestCase"}).writeAttribute({\cf22 "name"}, in.data[i]->m_name)\par
4722                         .writeAttribute({\cf22 "testsuite"}, in.data[i]->m_test_suite)\par
4723                         .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.data[i]->m_file.c_str()))\par
4724                         .writeAttribute({\cf22 "line"}, line(in.data[i]->m_line));\par
4725                 \}\par
4726                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
4727                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
4728             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
4729                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
4730                     xml.scopedElement({\cf22 "TestSuite"}).writeAttribute({\cf22 "name"}, in.data[i]->m_test_suite);\par
4731                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
4732                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
4733                 xml.scopedElement({\cf22 "OverallResultsTestSuites"})\par
4734                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestSuitesPassingFilters);\par
4735             \}\par
4736             xml.endElement();\par
4737         \}\par
4738 \par
4739         {\cf18 void} test_run_start(){\cf17  override }\{\par
4740             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
4741             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
4742 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4743             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
4744                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
4745 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4746 \par
4747             xml.startElement({\cf22 "doctest"}).writeAttribute({\cf22 "binary"}, binary_name);\par
4748             {\cf19 if}(opt.no_version == {\cf17 false})\par
4749                 xml.writeAttribute({\cf22 "version"}, DOCTEST_VERSION_STR);\par
4750 \par
4751             {\cf20 // only the consequential ones (TODO: filters)}\par
4752             xml.scopedElement({\cf22 "Options"})\par
4753                     .writeAttribute({\cf22 "order_by"}, opt.order_by.c_str())\par
4754                     .writeAttribute({\cf22 "rand_seed"}, opt.rand_seed)\par
4755                     .writeAttribute({\cf22 "first"}, opt.first)\par
4756                     .writeAttribute({\cf22 "last"}, opt.last)\par
4757                     .writeAttribute({\cf22 "abort_after"}, opt.abort_after)\par
4758                     .writeAttribute({\cf22 "subcase_filter_levels"}, opt.subcase_filter_levels)\par
4759                     .writeAttribute({\cf22 "case_sensitive"}, opt.case_sensitive)\par
4760                     .writeAttribute({\cf22 "no_throw"}, opt.no_throw)\par
4761                     .writeAttribute({\cf22 "no_skip"}, opt.no_skip);\par
4762         \}\par
4763 \par
4764         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
4765             {\cf19 if}(tc) {\cf20 // the TestSuite tag - only if there has been at least 1 test case}\par
4766                 xml.endElement();\par
4767 \par
4768             xml.scopedElement({\cf22 "OverallResultsAsserts"})\par
4769                     .writeAttribute({\cf22 "successes"}, p.numAsserts - p.numAssertsFailed)\par
4770                     .writeAttribute({\cf22 "failures"}, p.numAssertsFailed);\par
4771 \par
4772             xml.startElement({\cf22 "OverallResultsTestCases"})\par
4773                     .writeAttribute({\cf22 "successes"},\par
4774                                     p.numTestCasesPassingFilters - p.numTestCasesFailed)\par
4775                     .writeAttribute({\cf22 "failures"}, p.numTestCasesFailed);\par
4776             {\cf19 if}(opt.no_skipped_summary == {\cf17 false})\par
4777                 xml.writeAttribute({\cf22 "skipped"}, p.numTestCases - p.numTestCasesPassingFilters);\par
4778             xml.endElement();\par
4779 \par
4780             xml.endElement();\par
4781         \}\par
4782 \par
4783         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
4784             test_case_start_impl(in);\par
4785             xml.ensureTagClosed();\par
4786         \}\par
4787         \par
4788         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
4789 \par
4790         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
4791             xml.startElement({\cf22 "OverallResultsAsserts"})\par
4792                     .writeAttribute({\cf22 "successes"},\par
4793                                     st.numAssertsCurrentTest - st.numAssertsFailedCurrentTest)\par
4794                     .writeAttribute({\cf22 "failures"}, st.numAssertsFailedCurrentTest);\par
4795             {\cf19 if}(opt.duration)\par
4796                 xml.writeAttribute({\cf22 "duration"}, st.seconds);\par
4797             {\cf19 if}(tc->m_expected_failures)\par
4798                 xml.writeAttribute({\cf22 "expected_failures"}, tc->m_expected_failures);\par
4799             xml.endElement();\par
4800 \par
4801             xml.endElement();\par
4802         \}\par
4803 \par
4804         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
4805             std::lock_guard<std::mutex> lock(mutex);\par
4806 \par
4807             xml.scopedElement({\cf22 "Exception"})\par
4808                     .writeAttribute({\cf22 "crash"}, e.is_crash)\par
4809                     .writeText(e.error_string.c_str());\par
4810         \}\par
4811 \par
4812         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
4813             std::lock_guard<std::mutex> lock(mutex);\par
4814 \par
4815             xml.startElement({\cf22 "SubCase"})\par
4816                     .writeAttribute({\cf22 "name"}, in.m_name)\par
4817                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file))\par
4818                     .writeAttribute({\cf22 "line"}, line(in.m_line));\par
4819             xml.ensureTagClosed();\par
4820         \}\par
4821 \par
4822         {\cf18 void} subcase_end(){\cf17  override }\{ xml.endElement(); \}\par
4823 \par
4824         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
4825             {\cf19 if}(!rb.m_failed && !opt.success)\par
4826                 {\cf19 return};\par
4827 \par
4828             std::lock_guard<std::mutex> lock(mutex);\par
4829 \par
4830             xml.startElement({\cf22 "Expression"})\par
4831                     .writeAttribute({\cf22 "success"}, !rb.m_failed)\par
4832                     .writeAttribute({\cf22 "type"}, assertString(rb.m_at))\par
4833                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(rb.m_file))\par
4834                     .writeAttribute({\cf22 "line"}, line(rb.m_line));\par
4835 \par
4836             xml.scopedElement({\cf22 "Original"}).writeText(rb.m_expr);\par
4837 \par
4838             {\cf19 if}(rb.m_threw)\par
4839                 xml.scopedElement({\cf22 "Exception"}).writeText(rb.m_exception.c_str());\par
4840 \par
4841             {\cf19 if}(rb.m_at & assertType::is_throws_as)\par
4842                 xml.scopedElement({\cf22 "ExpectedException"}).writeText(rb.m_exception_type);\par
4843             {\cf19 if}(rb.m_at & assertType::is_throws_with)\par
4844                 xml.scopedElement({\cf22 "ExpectedExceptionString"}).writeText(rb.m_exception_string);\par
4845             {\cf19 if}((rb.m_at & assertType::is_normal) && !rb.m_threw)\par
4846                 xml.scopedElement({\cf22 "Expanded"}).writeText(rb.m_decomp.c_str());\par
4847 \par
4848             log_contexts();\par
4849 \par
4850             xml.endElement();\par
4851         \}\par
4852 \par
4853         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
4854             std::lock_guard<std::mutex> lock(mutex);\par
4855 \par
4856             xml.startElement({\cf22 "Message"})\par
4857                     .writeAttribute({\cf22 "type"}, failureString(mb.m_severity))\par
4858                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(mb.m_file))\par
4859                     .writeAttribute({\cf22 "line"}, line(mb.m_line));\par
4860 \par
4861             xml.scopedElement({\cf22 "Text"}).writeText(mb.m_string.c_str());\par
4862 \par
4863             log_contexts();\par
4864 \par
4865             xml.endElement();\par
4866         \}\par
4867 \par
4868         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData& in){\cf17  override }\{\par
4869             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
4870                 test_case_start_impl(in);\par
4871                 xml.writeAttribute({\cf22 "skipped"}, {\cf22 "true"});\par
4872                 xml.endElement();\par
4873             \}\par
4874         \}\par
4875     \};\par
4876 \par
4877     DOCTEST_REGISTER_REPORTER({\cf22 "xml"}, 0, XmlReporter);\par
4878 \par
4879     {\cf18 void} fulltext_log_assert_to_stream(std::ostream& s, {\cf17 const} AssertData& rb) \{\par
4880         {\cf19 if}((rb.m_at & (assertType::is_throws_as | assertType::is_throws_with)) ==\par
4881             0) \par
4882             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 " ) "}\par
4883                 << Color::None;\par
4884 \par
4885         {\cf19 if}(rb.m_at & assertType::is_throws) \{ \par
4886             s << (rb.m_threw ? {\cf22 "threw as expected!"} : {\cf22 "did NOT throw at all!"}) << {\cf22 "\\n"};\par
4887         \} {\cf19 else} {\cf19 if}((rb.m_at & assertType::is_throws_as) &&\par
4888                     (rb.m_at & assertType::is_throws_with)) \{ \par
4889             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
4890                 << rb.m_exception_string << {\cf22 "\\", "} << rb.m_exception_type << {\cf22 " ) "} << Color::None;\par
4891             {\cf19 if}(rb.m_threw) \{\par
4892                 {\cf19 if}(!rb.m_failed) \{\par
4893                     s << {\cf22 "threw as expected!\\n"};\par
4894                 \} {\cf19 else} \{\par
4895                     s << {\cf22 "threw a DIFFERENT exception! (contents: "} << rb.m_exception << {\cf22 ")\\n"};\par
4896                 \}\par
4897             \} {\cf19 else} \{\par
4898                 s << {\cf22 "did NOT throw at all!\\n"};\par
4899             \}\par
4900         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
4901                     assertType::is_throws_as) \{ \par
4902             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", "}\par
4903                 << rb.m_exception_type << {\cf22 " ) "} << Color::None\par
4904                 << (rb.m_threw ? (rb.m_threw_as ? {\cf22 "threw as expected!"} :\par
4905                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
4906                                 {\cf22 "did NOT throw at all!"})\par
4907                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
4908         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
4909                     assertType::is_throws_with) \{ \par
4910             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
4911                 << rb.m_exception_string << {\cf22 "\\" ) "} << Color::None\par
4912                 << (rb.m_threw ? (!rb.m_failed ? {\cf22 "threw as expected!"} :\par
4913                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
4914                                 {\cf22 "did NOT throw at all!"})\par
4915                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
4916         \} {\cf19 else} {\cf19 if}(rb.m_at & assertType::is_nothrow) \{ \par
4917             s << (rb.m_threw ? {\cf22 "THREW exception: "} : {\cf22 "didn't throw!"}) << Color::Cyan\par
4918                 << rb.m_exception << {\cf22 "\\n"};\par
4919         \} {\cf19 else} \{\par
4920             s << (rb.m_threw ? {\cf22 "THREW exception: "} :\par
4921                                 (!rb.m_failed ? {\cf22 "is correct!\\n"} : {\cf22 "is NOT correct!\\n"}));\par
4922             {\cf19 if}(rb.m_threw)\par
4923                 s << rb.m_exception << {\cf22 "\\n"};\par
4924             {\cf19 else}\par
4925                 s << {\cf22 "  values: "} << assertString(rb.m_at) << {\cf22 "( "} << rb.m_decomp << {\cf22 " )\\n"};\par
4926         \}\par
4927     \}\par
4928 \par
4929     {\cf20 // TODO:}\par
4930     {\cf20 // - log_contexts()}\par
4931     {\cf20 // - log_message()}\par
4932     {\cf20 // - respond to queries}\par
4933     {\cf20 // - honor remaining options}\par
4934     {\cf20 // - more attributes in tags}\par
4935     {\cf17 struct }JUnitReporter : {\cf17 public} IReporter\par
4936     \{\par
4937         XmlWriter  xml;\par
4938         std::mutex mutex;\par
4939         Timer timer;\par
4940         std::vector<String> deepestSubcaseStackNames;\par
4941 \par
4942         {\cf17 struct }JUnitTestCaseData\par
4943         \{\par
4944 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"}) {\cf20 // gmtime}\par
4945             static std::{\cf18 string} getCurrentTimestamp() \{\par
4946                 {\cf20 // Beware, this is not reentrant because of backward compatibility issues}\par
4947                 {\cf20 // Also, UTC only, again because of backward compatibility (%z is C++11)}\par
4948                 time_t rawtime;\par
4949                 std::time(&rawtime);\par
4950                 {\cf17 auto} {\cf17 const} timeStampSize = {\cf17 sizeof}({\cf22 "2017-01-16T17:06:45Z"});\par
4951 \par
4952                 std::tm* timeInfo;\par
4953                 timeInfo = std::gmtime(&rawtime);\par
4954 \par
4955                 {\cf18 char} timeStamp[timeStampSize];\par
4956                 {\cf17 const} {\cf18 char}* {\cf17 const} fmt = {\cf22 "%Y-%m-%dT%H:%M:%SZ"};\par
4957 \par
4958                 std::strftime(timeStamp, timeStampSize, fmt, timeInfo);\par
4959                 {\cf19 return} std::string(timeStamp);\par
4960             \}\par
4961 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4962 \par
4963             {\cf17 struct }JUnitTestMessage\par
4964             \{\par
4965                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _type, {\cf17 const} std::string& _details)\par
4966                     : message(_message), type(_type), details(_details) \{\}\par
4967 \par
4968                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _details)\par
4969                     : message(_message), type(), details(_details) \{\}\par
4970 \par
4971                 std::string message, type, details;\par
4972             \};\par
4973 \par
4974             {\cf17 struct }JUnitTestCase\par
4975             \{\par
4976                 JUnitTestCase({\cf17 const} std::string& _classname, {\cf17 const} std::string& _name)\par
4977                     : classname(_classname), name(_name), time(0), failures() \{\}\par
4978 \par
4979                 std::string classname, name;\par
4980                 {\cf18 double} time;\par
4981                 std::vector<JUnitTestMessage> failures, errors;\par
4982             \};\par
4983 \par
4984             {\cf18 void} add({\cf17 const} std::string& classname, {\cf17 const} std::string& name) \{\par
4985                 testcases.emplace_back(classname, name);\par
4986             \}\par
4987 \par
4988             {\cf18 void} appendSubcaseNamesToLastTestcase(std::vector<String> nameStack) \{\par
4989                 {\cf19 for}({\cf17 auto}& curr: nameStack)\par
4990                     {\cf19 if}(curr.size())\par
4991                         testcases.back().name += std::string({\cf22 "/"}) + curr.c_str();\par
4992             \}\par
4993 \par
4994             {\cf18 void} addTime({\cf18 double} time) \{\par
4995                 {\cf19 if}(time < 1e-4)\par
4996                     time = 0;\par
4997                 testcases.back().time = time;\par
4998                 totalSeconds += time;\par
4999             \}\par
5000 \par
5001             {\cf18 void} addFailure({\cf17 const} std::string& message, {\cf17 const} std::string& type, {\cf17 const} std::string& details) \{\par
5002                 testcases.back().failures.emplace_back(message, type, details);\par
5003                 ++totalFailures;\par
5004             \}\par
5005 \par
5006             {\cf18 void} addError({\cf17 const} std::string& message, {\cf17 const} std::string& details) \{\par
5007                 testcases.back().errors.emplace_back(message, details);\par
5008                 ++totalErrors;\par
5009             \}\par
5010 \par
5011             std::vector<JUnitTestCase> testcases;\par
5012             {\cf18 double} totalSeconds = 0;\par
5013             {\cf18 int} totalErrors = 0, totalFailures = 0;\par
5014         \};\par
5015 \par
5016         JUnitTestCaseData testCaseData;\par
5017 \par
5018         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5019         {\cf17 const} ContextOptions& opt;\par
5020         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5021 \par
5022         JUnitReporter({\cf17 const} ContextOptions& co)\par
5023                 : xml(*co.cout)\par
5024                 , opt(co) \{\}\par
5025 \par
5026         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5027 \par
5028         {\cf20 // =========================================================================================}\par
5029         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5030         {\cf20 // =========================================================================================}\par
5031 \par
5032         {\cf18 void} report_query({\cf17 const} QueryData&){\cf17  override }\{\}\par
5033 \par
5034         {\cf18 void} test_run_start(){\cf17  override }\{\}\par
5035 \par
5036         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5037             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5038             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5039 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5040             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5041                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5042 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5043             xml.startElement({\cf22 "testsuites"});\par
5044             xml.startElement({\cf22 "testsuite"}).writeAttribute({\cf22 "name"}, binary_name)\par
5045                     .writeAttribute({\cf22 "errors"}, testCaseData.totalErrors)\par
5046                     .writeAttribute({\cf22 "failures"}, testCaseData.totalFailures)\par
5047                     .writeAttribute({\cf22 "tests"}, p.numAsserts);\par
5048             {\cf19 if}(opt.no_time_in_output == {\cf17 false}) \{\par
5049                 xml.writeAttribute({\cf22 "time"}, testCaseData.totalSeconds);\par
5050                 xml.writeAttribute({\cf22 "timestamp"}, JUnitTestCaseData::getCurrentTimestamp());\par
5051             \}\par
5052             {\cf19 if}(opt.no_version == {\cf17 false})\par
5053                 xml.writeAttribute({\cf22 "doctest_version"}, DOCTEST_VERSION_STR);\par
5054 \par
5055             {\cf19 for}({\cf17 const} {\cf17 auto}& testCase : testCaseData.testcases) \{\par
5056                 xml.startElement({\cf22 "testcase"})\par
5057                     .writeAttribute({\cf22 "classname"}, testCase.classname)\par
5058                     .writeAttribute({\cf22 "name"}, testCase.name);\par
5059                 {\cf19 if}(opt.no_time_in_output == {\cf17 false})\par
5060                     xml.writeAttribute({\cf22 "time"}, testCase.time);\par
5061                 {\cf20 // This is not ideal, but it should be enough to mimic gtest's junit output.}\par
5062                 xml.writeAttribute({\cf22 "status"}, {\cf22 "run"});\par
5063 \par
5064                 {\cf19 for}({\cf17 const} {\cf17 auto}& failure : testCase.failures) \{\par
5065                     xml.scopedElement({\cf22 "failure"})\par
5066                         .writeAttribute({\cf22 "message"}, failure.message)\par
5067                         .writeAttribute({\cf22 "type"}, failure.type)\par
5068                         .writeText(failure.details, {\cf17 false});\par
5069                 \}\par
5070 \par
5071                 {\cf19 for}({\cf17 const} {\cf17 auto}& error : testCase.errors) \{\par
5072                     xml.scopedElement({\cf22 "error"})\par
5073                         .writeAttribute({\cf22 "message"}, error.message)\par
5074                         .writeText(error.details);\par
5075                 \}\par
5076 \par
5077                 xml.endElement();\par
5078             \}\par
5079             xml.endElement();\par
5080             xml.endElement();\par
5081         \}\par
5082 \par
5083         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5084             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5085             timer.start();\par
5086         \}\par
5087 \par
5088         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5089             testCaseData.addTime(timer.getElapsedSeconds());\par
5090             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5091             deepestSubcaseStackNames.clear();\par
5092 \par
5093             timer.start();\par
5094             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5095         \}\par
5096 \par
5097         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&){\cf17  override }\{\par
5098             testCaseData.addTime(timer.getElapsedSeconds());\par
5099             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5100             deepestSubcaseStackNames.clear();\par
5101         \}\par
5102 \par
5103         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5104             std::lock_guard<std::mutex> lock(mutex);\par
5105             testCaseData.addError({\cf22 "exception"}, e.error_string.c_str());\par
5106         \}\par
5107 \par
5108         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5109             std::lock_guard<std::mutex> lock(mutex);\par
5110             deepestSubcaseStackNames.push_back(in.m_name);\par
5111         \}\par
5112 \par
5113         {\cf18 void} subcase_end(){\cf17  override }\{\}\par
5114 \par
5115         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5116             {\cf19 if}(!rb.m_failed) {\cf20 // report only failures & ignore the `success` option}\par
5117                 {\cf19 return};\par
5118 \par
5119             std::lock_guard<std::mutex> lock(mutex);\par
5120 \par
5121             std::ostringstream os;\par
5122             os << skipPathFromFilename(rb.m_file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5123               << line(rb.m_line) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << std::endl;\par
5124 \par
5125             fulltext_log_assert_to_stream(os, rb);\par
5126             testCaseData.addFailure(rb.m_decomp.c_str(), assertString(rb.m_at), os.str());\par
5127         \}\par
5128 \par
5129         {\cf18 void} log_message({\cf17 const} MessageData&){\cf17  override }\{\}\par
5130 \par
5131         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5132     \};\par
5133 \par
5134     DOCTEST_REGISTER_REPORTER({\cf22 "junit"}, 0, JUnitReporter);\par
5135 \par
5136     {\cf17 struct }Whitespace\par
5137     \{\par
5138         {\cf18 int} nrSpaces;\par
5139         {\cf17 explicit} Whitespace({\cf18 int} nr)\par
5140                 : nrSpaces(nr) \{\}\par
5141     \};\par
5142 \par
5143     std::ostream& operator<<(std::ostream& out, {\cf17 const} Whitespace& ws) \{\par
5144         {\cf19 if}(ws.nrSpaces != 0)\par
5145             out << std::setw(ws.nrSpaces) << {\cf23 ' '};\par
5146         {\cf19 return} out;\par
5147     \}\par
5148 \par
5149     {\cf17 struct }ConsoleReporter : {\cf17 public} IReporter\par
5150     \{\par
5151         std::ostream&                 s;\par
5152         {\cf18 bool}                          hasLoggedCurrentTestStart;\par
5153         std::vector<SubcaseSignature> subcasesStack;\par
5154         {\cf18 size_t}                        currentSubcaseLevel;\par
5155         std::mutex                    mutex;\par
5156 \par
5157         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5158         {\cf17 const} ContextOptions& opt;\par
5159         {\cf17 const} TestCaseData*   tc;\par
5160 \par
5161         ConsoleReporter({\cf17 const} ContextOptions& co)\par
5162                 : s(*co.cout)\par
5163                 , opt(co) \{\}\par
5164 \par
5165         ConsoleReporter({\cf17 const} ContextOptions& co, std::ostream& ostr)\par
5166                 : s(ostr)\par
5167                 , opt(co) \{\}\par
5168 \par
5169         {\cf20 // =========================================================================================}\par
5170         {\cf20 // WHAT FOLLOWS ARE HELPERS USED BY THE OVERRIDES OF THE VIRTUAL METHODS OF THE INTERFACE}\par
5171         {\cf20 // =========================================================================================}\par
5172 \par
5173         {\cf18 void} separator_to_stream() \{\par
5174             s << Color::Yellow\par
5175               << {\cf22 "==============================================================================="}\par
5176                  {\cf22 "\\n"};\par
5177         \}\par
5178 \par
5179         {\cf17 const} {\cf18 char}* getSuccessOrFailString({\cf18 bool} success, assertType::Enum at,\par
5180                                            {\cf17 const} {\cf18 char}* success_str) \{\par
5181             {\cf19 if}(success)\par
5182                 {\cf19 return} success_str;\par
5183             {\cf19 return} failureString(at);\par
5184         \}\par
5185 \par
5186         Color::Enum getSuccessOrFailColor({\cf18 bool} success, assertType::Enum at) \{\par
5187             {\cf19 return} success ? Color::BrightGreen :\par
5188                              (at & assertType::is_warn) ? Color::Yellow : Color::Red;\par
5189         \}\par
5190 \par
5191         {\cf18 void} successOrFailColoredStringToStream({\cf18 bool} success, assertType::Enum at,\par
5192                                                 {\cf17 const} {\cf18 char}* success_str = {\cf22 "SUCCESS"}) \{\par
5193             s << getSuccessOrFailColor(success, at)\par
5194               << getSuccessOrFailString(success, at, success_str) << {\cf22 ": "};\par
5195         \}\par
5196 \par
5197         {\cf18 void} log_contexts() \{\par
5198             {\cf18 int} num_contexts = get_num_active_contexts();\par
5199             {\cf19 if}(num_contexts) \{\par
5200                 {\cf17 auto} contexts = get_active_contexts();\par
5201 \par
5202                 s << Color::None << {\cf22 "  logged: "};\par
5203                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5204                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5205                     contexts[i]->stringify(&s);\par
5206                     s << {\cf22 "\\n"};\par
5207                 \}\par
5208             \}\par
5209 \par
5210             s << {\cf22 "\\n"};\par
5211         \}\par
5212 \par
5213         {\cf20 // this was requested to be made virtual so users could override it}\par
5214         {\cf17 virtual} {\cf18 void} file_line_to_stream({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
5215                                         {\cf17 const} {\cf18 char}* tail = {\cf22 ""}) \{\par
5216             s << Color::LightGrey << skipPathFromFilename(file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5217             << (opt.no_line_numbers ? 0 : line) {\cf20 // 0 or the real num depending on the option}\par
5218             << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << tail;\par
5219         \}\par
5220 \par
5221         {\cf18 void} logTestStart() \{\par
5222             {\cf19 if}(hasLoggedCurrentTestStart)\par
5223                 {\cf19 return};\par
5224 \par
5225             separator_to_stream();\par
5226             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 "\\n"});\par
5227             {\cf19 if}(tc->m_description)\par
5228                 s << Color::Yellow << {\cf22 "DESCRIPTION: "} << Color::None << tc->m_description << {\cf22 "\\n"};\par
5229             {\cf19 if}(tc->m_test_suite && tc->m_test_suite[0] != {\cf23 '\\0'})\par
5230                 s << Color::Yellow << {\cf22 "TEST SUITE: "} << Color::None << tc->m_test_suite << {\cf22 "\\n"};\par
5231             {\cf19 if}(strncmp(tc->m_name, {\cf22 "  Scenario:"}, 11) != 0)\par
5232                 s << Color::Yellow << {\cf22 "TEST CASE:  "};\par
5233             s << Color::None << tc->m_name << {\cf22 "\\n"};\par
5234 \par
5235             {\cf19 for}({\cf18 size_t} i = 0; i < currentSubcaseLevel; ++i) \{\par
5236                 {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5237                     s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5238             \}\par
5239 \par
5240             {\cf19 if}(currentSubcaseLevel != subcasesStack.size()) \{\par
5241                 s << Color::Yellow << {\cf22 "\\nDEEPEST SUBCASE STACK REACHED (DIFFERENT FROM THE CURRENT ONE):\\n"} << Color::None;\par
5242                 {\cf19 for}({\cf18 size_t} i = 0; i < subcasesStack.size(); ++i) \{\par
5243                     {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5244                         s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5245                 \}\par
5246             \}\par
5247 \par
5248             s << {\cf22 "\\n"};\par
5249 \par
5250             hasLoggedCurrentTestStart = {\cf17 true};\par
5251         \}\par
5252 \par
5253         {\cf18 void} printVersion() \{\par
5254             {\cf19 if}(opt.no_version == {\cf17 false})\par
5255                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "doctest version is \\""}\par
5256                   << DOCTEST_VERSION_STR << {\cf22 "\\"\\n"};\par
5257         \}\par
5258 \par
5259         {\cf18 void} printIntro() \{\par
5260             printVersion();\par
5261             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5262               << {\cf22 "run with \\"--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help\\" for options\\n"};\par
5263         \}\par
5264 \par
5265         {\cf18 void} printHelp() \{\par
5266             {\cf18 int} sizePrefixDisplay = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));\par
5267             printVersion();\par
5268             {\cf20 // clang-format off}\par
5269             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
5270             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5271             s << {\cf22 "boolean values: \\"1/on/yes/true\\" or \\"0/off/no/false\\"\\n"};\par
5272             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5273             s << {\cf22 "filter  values: \\"str1,str2,str3\\" (comma separated strings)\\n"};\par
5274             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
5275             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5276             s << {\cf22 "filters use wildcards for matching strings\\n"};\par
5277             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5278             s << {\cf22 "something passes a filter if any of the strings in a filter matches\\n"};\par
5279 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
5280             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
5281             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5282             s << {\cf22 "ALL FLAGS, OPTIONS AND FILTERS ALSO AVAILABLE WITH A \\""} DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "\\" PREFIX!!!\\n"};\par
5283 {\cf21 #endif}\par
5284             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
5285             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5286             s << {\cf22 "Query flags - the program quits after them. Available:\\n\\n"};\par
5287             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "?,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help, -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "h                      "}\par
5288               << Whitespace(sizePrefixDisplay*0) <<  {\cf22 "prints this message\\n"};\par
5289             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "v,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "version                       "}\par
5290               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the version\\n"};\par
5291             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "c,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "count                         "}\par
5292               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the number of matching tests\\n"};\par
5293             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ltc, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-cases               "}\par
5294               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching tests by name\\n"};\par
5295             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lts, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-suites              "}\par
5296               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching test suites\\n"};\par
5297             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-reporters                "}\par
5298               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all registered reporters\\n\\n"};\par
5299             {\cf20 // ================================================================================== << 79}\par
5300             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
5301             s << {\cf22 "The available <int>/<string> options/filters are:\\n\\n"};\par
5302             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case=<filters>           "}\par
5303               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their name\\n"};\par
5304             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case-exclude=<filters>   "}\par
5305               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their name\\n"};\par
5306             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sf,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file=<filters>         "}\par
5307               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their file\\n"};\par
5308             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sfe, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file-exclude=<filters> "}\par
5309               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their file\\n"};\par
5310             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ts,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite=<filters>          "}\par
5311               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their test suite\\n"};\par
5312             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tse, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite-exclude=<filters>  "}\par
5313               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their test suite\\n"};\par
5314             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase=<filters>             "}\par
5315               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     subcases by their name\\n"};\par
5316             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-exclude=<filters>     "}\par
5317               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT subcases by their name\\n"};\par
5318             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "r,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "reporters=<filters>           "}\par
5319               << Whitespace(sizePrefixDisplay*1) << {\cf22 "reporters to use (console is default)\\n"};\par
5320             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "o,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "out=<string>                  "}\par
5321               << Whitespace(sizePrefixDisplay*1) << {\cf22 "output filename\\n"};\par
5322             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ob,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "order-by=<string>             "}\par
5323               << Whitespace(sizePrefixDisplay*1) << {\cf22 "how the tests should be ordered\\n"};\par
5324             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       <string> - by [file/suite/name/rand]\\n"};\par
5325             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rand-seed=<int>               "}\par
5326               << Whitespace(sizePrefixDisplay*1) << {\cf22 "seed for random ordering\\n"};\par
5327             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "f,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "first=<int>                   "}\par
5328               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the first test passing the filters to\\n"};\par
5329             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
5330             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "l,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "last=<int>                    "}\par
5331               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the last test passing the filters to\\n"};\par
5332             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
5333             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "aa,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "abort-after=<int>             "}\par
5334               << Whitespace(sizePrefixDisplay*1) << {\cf22 "stop after <int> failed assertions\\n"};\par
5335             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "scfl,--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-filter-levels=<int>   "}\par
5336               << Whitespace(sizePrefixDisplay*1) << {\cf22 "apply filters for the first <int> levels\\n"};\par
5337             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
5338             s << {\cf22 "Bool options - can be used like flags and true is assumed. Available:\\n\\n"};\par
5339             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "s,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "success=<bool>                "}\par
5340               << Whitespace(sizePrefixDisplay*1) << {\cf22 "include successful assertions in output\\n"};\par
5341             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "cs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "case-sensitive=<bool>         "}\par
5342               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters being treated as case sensitive\\n"};\par
5343             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "e,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "exit=<bool>                   "}\par
5344               << Whitespace(sizePrefixDisplay*1) << {\cf22 "exits after the tests finish\\n"};\par
5345             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "d,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "duration=<bool>               "}\par
5346               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the time duration of each test\\n"};\par
5347             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nt,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-throw=<bool>               "}\par
5348               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips exceptions-related assert checks\\n"};\par
5349             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ne,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-exitcode=<bool>            "}\par
5350               << Whitespace(sizePrefixDisplay*1) << {\cf22 "returns (or exits) always with success\\n"};\par
5351             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-run=<bool>                 "}\par
5352               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips all runtime doctest operations\\n"};\par
5353             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nv,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-version=<bool>             "}\par
5354               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework version in the output\\n"};\par
5355             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-colors=<bool>              "}\par
5356               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables colors in output\\n"};\par
5357             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "fc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "force-colors=<bool>           "}\par
5358               << Whitespace(sizePrefixDisplay*1) << {\cf22 "use colors even when not in a tty\\n"};\par
5359             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nb,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-breaks=<bool>              "}\par
5360               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables breakpoints in debuggers\\n"};\par
5361             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ns,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-skip=<bool>                "}\par
5362               << Whitespace(sizePrefixDisplay*1) << {\cf22 "don't skip test cases marked as skip\\n"};\par
5363             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gfl, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gnu-file-line=<bool>          "}\par
5364               << Whitespace(sizePrefixDisplay*1) << {\cf22 ":n: vs (n): for line numbers in output\\n"};\par
5365             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "npf, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-path-filenames=<bool>      "}\par
5366               << Whitespace(sizePrefixDisplay*1) << {\cf22 "only filenames and no paths in output\\n"};\par
5367             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nln, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-line-numbers=<bool>        "}\par
5368               << Whitespace(sizePrefixDisplay*1) << {\cf22 "0 instead of real line numbers in output\\n"};\par
5369             {\cf20 // ================================================================================== << 79}\par
5370             {\cf20 // clang-format on}\par
5371 \par
5372             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
5373             s << {\cf22 "for more information visit the project documentation\\n\\n"};\par
5374         \}\par
5375 \par
5376         {\cf18 void} printRegisteredReporters() \{\par
5377             printVersion();\par
5378             {\cf17 auto} printReporters = [{\cf17 this}] ({\cf17 const} reporterMap& reporters, {\cf17 const} {\cf18 char}* type) \{\par
5379                 {\cf19 if}(reporters.size()) \{\par
5380                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all registered "} << type << {\cf22 "\\n"};\par
5381                     {\cf19 for}({\cf17 auto}& curr : reporters)\par
5382                         s << {\cf22 "priority: "} << std::setw(5) << curr.first.first\par
5383                           << {\cf22 " name: "} << curr.first.second << {\cf22 "\\n"};\par
5384                 \}\par
5385             \};\par
5386             printReporters(getListeners(), {\cf22 "listeners"});\par
5387             printReporters(getReporters(), {\cf22 "reporters"});\par
5388         \}\par
5389 \par
5390         {\cf18 void} list_query_results() \{\par
5391             separator_to_stream();\par
5392             {\cf19 if}(opt.count || opt.list_test_cases) \{\par
5393                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5394                   << {\cf22 "unskipped test cases passing the current filters: "}\par
5395                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
5396             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
5397                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5398                   << {\cf22 "unskipped test cases passing the current filters: "}\par
5399                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
5400                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5401                   << {\cf22 "test suites with unskipped test cases passing the current filters: "}\par
5402                   << g_cs->numTestSuitesPassingFilters << {\cf22 "\\n"};\par
5403             \}\par
5404         \}\par
5405 \par
5406         {\cf20 // =========================================================================================}\par
5407         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5408         {\cf20 // =========================================================================================}\par
5409 \par
5410         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
5411             {\cf19 if}(opt.version) \{\par
5412                 printVersion();\par
5413             \} {\cf19 else} {\cf19 if}(opt.help) \{\par
5414                 printHelp();\par
5415             \} {\cf19 else} {\cf19 if}(opt.list_reporters) \{\par
5416                 printRegisteredReporters();\par
5417             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
5418                 {\cf19 if}(opt.list_test_cases) \{\par
5419                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5420                       << {\cf22 "listing all test case names\\n"};\par
5421                     separator_to_stream();\par
5422                 \}\par
5423 \par
5424                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
5425                     s << Color::None << in.data[i]->m_name << {\cf22 "\\n"};\par
5426 \par
5427                 separator_to_stream();\par
5428 \par
5429                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5430                   << {\cf22 "unskipped test cases passing the current filters: "}\par
5431                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
5432 \par
5433             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
5434                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all test suites\\n"};\par
5435                 separator_to_stream();\par
5436 \par
5437                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
5438                     s << Color::None << in.data[i]->m_test_suite << {\cf22 "\\n"};\par
5439 \par
5440                 separator_to_stream();\par
5441 \par
5442                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5443                   << {\cf22 "unskipped test cases passing the current filters: "}\par
5444                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
5445                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5446                   << {\cf22 "test suites with unskipped test cases passing the current filters: "}\par
5447                   << g_cs->numTestSuitesPassingFilters << {\cf22 "\\n"};\par
5448             \}\par
5449         \}\par
5450 \par
5451         {\cf18 void} test_run_start(){\cf17  override }\{ printIntro(); \}\par
5452 \par
5453         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5454             separator_to_stream();\par
5455             s << std::dec;\par
5456 \par
5457             {\cf17 const} {\cf18 bool} anythingFailed = p.numTestCasesFailed > 0 || p.numAssertsFailed > 0;\par
5458             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "test cases: "} << std::setw(6)\par
5459               << p.numTestCasesPassingFilters << {\cf22 " | "}\par
5460               << ((p.numTestCasesPassingFilters == 0 || anythingFailed) ? Color::None :\par
5461                                                                           Color::Green)\par
5462               << std::setw(6) << p.numTestCasesPassingFilters - p.numTestCasesFailed << {\cf22 " passed"}\par
5463               << Color::None << {\cf22 " | "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::None)\par
5464               << std::setw(6) << p.numTestCasesFailed << {\cf22 " failed"} << Color::None << {\cf22 " | "};\par
5465             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
5466                 {\cf17 const} {\cf18 int} numSkipped = p.numTestCases - p.numTestCasesPassingFilters;\par
5467                 s << (numSkipped == 0 ? Color::None : Color::Yellow) << std::setw(6) << numSkipped\par
5468                   << {\cf22 " skipped"} << Color::None;\par
5469             \}\par
5470             s << {\cf22 "\\n"};\par
5471             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "assertions: "} << std::setw(6)\par
5472               << p.numAsserts << {\cf22 " | "}\par
5473               << ((p.numAsserts == 0 || anythingFailed) ? Color::None : Color::Green)\par
5474               << std::setw(6) << (p.numAsserts - p.numAssertsFailed) << {\cf22 " passed"} << Color::None\par
5475               << {\cf22 " | "} << (p.numAssertsFailed > 0 ? Color::Red : Color::None) << std::setw(6)\par
5476               << p.numAssertsFailed << {\cf22 " failed"} << Color::None << {\cf22 " |\\n"};\par
5477             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5478               << {\cf22 "Status: "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::Green)\par
5479               << ((p.numTestCasesFailed > 0) ? {\cf22 "FAILURE!"} : {\cf22 "SUCCESS!"}) << Color::None << std::endl;\par
5480         \}\par
5481 \par
5482         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5483             hasLoggedCurrentTestStart = {\cf17 false};\par
5484             tc                        = &in;\par
5485             subcasesStack.clear();\par
5486             currentSubcaseLevel = 0;\par
5487         \}\par
5488         \par
5489         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\par
5490             subcasesStack.clear();\par
5491         \}\par
5492 \par
5493         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
5494             {\cf20 // log the preamble of the test case only if there is something}\par
5495             {\cf20 // else to print - something other than that an assert has failed}\par
5496             {\cf19 if}(opt.duration ||\par
5497                (st.failure_flags && st.failure_flags != TestCaseFailureReason::AssertFailure))\par
5498                 logTestStart();\par
5499 \par
5500             {\cf19 if}(opt.duration)\par
5501                 s << Color::None << std::setprecision(6) << std::fixed << st.seconds\par
5502                   << {\cf22 " s: "} << tc->m_name << {\cf22 "\\n"};\par
5503 \par
5504             {\cf19 if}(st.failure_flags & TestCaseFailureReason::Timeout)\par
5505                 s << Color::Red << {\cf22 "Test case exceeded time limit of "} << std::setprecision(6)\par
5506                   << std::fixed << tc->m_timeout << {\cf22 "!\\n"};\par
5507 \par
5508             {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedButDidnt) \{\par
5509                 s << Color::Red << {\cf22 "Should have failed but didn't! Marking it as failed!\\n"};\par
5510             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedAndDid) \{\par
5511                 s << Color::Yellow << {\cf22 "Failed as expected so marking it as not failed\\n"};\par
5512             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::CouldHaveFailedAndDid) \{\par
5513                 s << Color::Yellow << {\cf22 "Allowed to fail so marking it as not failed\\n"};\par
5514             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::DidntFailExactlyNumTimes) \{\par
5515                 s << Color::Red << {\cf22 "Didn't fail exactly "} << tc->m_expected_failures\par
5516                   << {\cf22 " times so marking it as failed!\\n"};\par
5517             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::FailedExactlyNumTimes) \{\par
5518                 s << Color::Yellow << {\cf22 "Failed exactly "} << tc->m_expected_failures\par
5519                   << {\cf22 " times as expected so marking it as not failed!\\n"};\par
5520             \}\par
5521             {\cf19 if}(st.failure_flags & TestCaseFailureReason::TooManyFailedAsserts) \{\par
5522                 s << Color::Red << {\cf22 "Aborting - too many failed asserts!\\n"};\par
5523             \}\par
5524             s << Color::None; {\cf20 // lgtm [cpp/useless-expression]}\par
5525         \}\par
5526 \par
5527         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5528             logTestStart();\par
5529 \par
5530             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 " "});\par
5531             successOrFailColoredStringToStream({\cf17 false}, e.is_crash ? assertType::is_require :\par
5532                                                                    assertType::is_check);\par
5533             s << Color::Red << (e.is_crash ? {\cf22 "test case CRASHED: "} : {\cf22 "test case THREW exception: "})\par
5534               << Color::Cyan << e.error_string << {\cf22 "\\n"};\par
5535 \par
5536             {\cf18 int} num_stringified_contexts = get_num_stringified_contexts();\par
5537             {\cf19 if}(num_stringified_contexts) \{\par
5538                 {\cf17 auto} stringified_contexts = get_stringified_contexts();\par
5539                 s << Color::None << {\cf22 "  logged: "};\par
5540                 {\cf19 for}({\cf18 int} i = num_stringified_contexts; i > 0; --i) \{\par
5541                     s << (i == num_stringified_contexts ? {\cf22 ""} : {\cf22 "          "})\par
5542                       << stringified_contexts[i - 1] << {\cf22 "\\n"};\par
5543                 \}\par
5544             \}\par
5545             s << {\cf22 "\\n"} << Color::None;\par
5546         \}\par
5547 \par
5548         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& subc){\cf17  override }\{\par
5549             std::lock_guard<std::mutex> lock(mutex);\par
5550             subcasesStack.push_back(subc);\par
5551             ++currentSubcaseLevel;\par
5552             hasLoggedCurrentTestStart = {\cf17 false};\par
5553         \}\par
5554 \par
5555         {\cf18 void} subcase_end(){\cf17  override }\{\par
5556             std::lock_guard<std::mutex> lock(mutex);\par
5557             --currentSubcaseLevel;\par
5558             hasLoggedCurrentTestStart = {\cf17 false};\par
5559         \}\par
5560 \par
5561         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5562             {\cf19 if}(!rb.m_failed && !opt.success)\par
5563                 {\cf19 return};\par
5564 \par
5565             std::lock_guard<std::mutex> lock(mutex);\par
5566 \par
5567             logTestStart();\par
5568 \par
5569             file_line_to_stream(rb.m_file, rb.m_line, {\cf22 " "});\par
5570             successOrFailColoredStringToStream(!rb.m_failed, rb.m_at);\par
5571 \par
5572             fulltext_log_assert_to_stream(s, rb);\par
5573 \par
5574             log_contexts();\par
5575         \}\par
5576 \par
5577         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
5578             std::lock_guard<std::mutex> lock(mutex);\par
5579 \par
5580             logTestStart();\par
5581 \par
5582             file_line_to_stream(mb.m_file, mb.m_line, {\cf22 " "});\par
5583             s << getSuccessOrFailColor({\cf17 false}, mb.m_severity)\par
5584               << getSuccessOrFailString(mb.m_severity & assertType::is_warn, mb.m_severity,\par
5585                                         {\cf22 "MESSAGE"}) << {\cf22 ": "};\par
5586             s << Color::None << mb.m_string << {\cf22 "\\n"};\par
5587             log_contexts();\par
5588         \}\par
5589 \par
5590         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5591     \};\par
5592 \par
5593     DOCTEST_REGISTER_REPORTER({\cf22 "console"}, 0, ConsoleReporter);\par
5594 \par
5595 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5596     {\cf17 struct }DebugOutputWindowReporter : {\cf17 public} ConsoleReporter\par
5597     \{\par
5598         DOCTEST_THREAD_LOCAL {\cf17 static} std::ostringstream oss;\par
5599 \par
5600         DebugOutputWindowReporter({\cf17 const} ContextOptions& co)\par
5601                 : ConsoleReporter(co, oss) \{\}\par
5602 \par
5603 {\cf21 #define DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func, type, arg)                                    \\}\par
5604 {\cf21     void func(type arg) override \{                                                                 \\}\par
5605 {\cf21         bool with_col = g_no_colors;                                                               \\}\par
5606 {\cf21         g_no_colors   = false;                                                                     \\}\par
5607 {\cf21         ConsoleReporter::func(arg);                                                                \\}\par
5608 {\cf21         DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());                                            \\}\par
5609 {\cf21         oss.str(""});                                                                               \\\par
5610         g_no_colors = with_col;                                                                    \\\par
5611     \}\par
5612 \par
5613         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
5614         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end, {\cf17 const} TestRunStats&, in)\par
5615         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start, {\cf17 const} TestCaseData&, in)\par
5616         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter, {\cf17 const} TestCaseData&, in)\par
5617         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end, {\cf17 const} CurrentTestCaseStats&, in)\par
5618         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception, {\cf17 const} TestCaseException&, in)\par
5619         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start, {\cf17 const} SubcaseSignature&, in)\par
5620         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
5621         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert, {\cf17 const} AssertData&, in)\par
5622         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message, {\cf17 const} MessageData&, in)\par
5623         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped, {\cf17 const} TestCaseData&, in)\par
5624     \};\par
5625 \par
5626     DOCTEST_THREAD_LOCAL std::ostringstream DebugOutputWindowReporter::oss;\par
5627 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5628 \par
5629     {\cf20 // the implementation of parseOption()}\par
5630     {\cf18 bool} parseOptionImpl({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value) \{\par
5631         {\cf20 // going from the end to the beginning and stopping on the first occurrence from the end}\par
5632         {\cf19 for}({\cf18 int} i = argc; i > 0; --i) \{\par
5633             {\cf17 auto} index = i - 1;\par
5634             {\cf17 auto} temp = std::strstr(argv[index], pattern);\par
5635             {\cf19 if}(temp && (value || strlen(temp) == strlen(pattern))) \{ \par
5636                 {\cf20 // eliminate matches in which the chars before the option are not '-'}\par
5637                 {\cf18 bool} noBadCharsFound = {\cf17 true};\par
5638                 {\cf17 auto} curr            = argv[index];\par
5639                 {\cf19 while}(curr != temp) \{\par
5640                     {\cf19 if}(*curr++ != {\cf23 '-'}) \{\par
5641                         noBadCharsFound = {\cf17 false};\par
5642                         {\cf19 break};\par
5643                     \}\par
5644                 \}\par
5645                 {\cf19 if}(noBadCharsFound && argv[index][0] == {\cf23 '-'}) \{\par
5646                     {\cf19 if}(value) \{\par
5647                         {\cf20 // parsing the value of an option}\par
5648                         temp += strlen(pattern);\par
5649                         {\cf17 const} {\cf18 unsigned} len = strlen(temp);\par
5650                         {\cf19 if}(len) \{\par
5651                             *value = temp;\par
5652                             {\cf19 return} {\cf17 true};\par
5653                         \}\par
5654                     \} {\cf19 else} \{\par
5655                         {\cf20 // just a flag - no value}\par
5656                         {\cf19 return} {\cf17 true};\par
5657                     \}\par
5658                 \}\par
5659             \}\par
5660         \}\par
5661         {\cf19 return} {\cf17 false};\par
5662     \}\par
5663 \par
5664     {\cf20 // parses an option and returns the string after the '=' character}\par
5665     {\cf18 bool} parseOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value = {\cf17 nullptr},\par
5666                      {\cf17 const} String& defaultVal = String()) \{\par
5667         {\cf19 if}(value)\par
5668             *value = defaultVal;\par
5669 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
5670         {\cf20 // offset (normally 3 for "dt-") to skip prefix}\par
5671         {\cf19 if}(parseOptionImpl(argc, argv, pattern + strlen(DOCTEST_CONFIG_OPTIONS_PREFIX), value))\par
5672             {\cf19 return} {\cf17 true};\par
5673 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
5674         {\cf19 return} parseOptionImpl(argc, argv, pattern, value);\par
5675     \}\par
5676 \par
5677     {\cf20 // locates a flag on the command line}\par
5678     {\cf18 bool} parseFlag({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern) \{\par
5679         {\cf19 return} parseOption(argc, argv, pattern);\par
5680     \}\par
5681 \par
5682     {\cf20 // parses a comma separated list of words after a pattern in one of the arguments in argv}\par
5683     {\cf18 bool} parseCommaSepArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern,\par
5684                            std::vector<String>& res) \{\par
5685         String filtersString;\par
5686         {\cf19 if}(parseOption(argc, argv, pattern, &filtersString)) \{\par
5687             {\cf20 // tokenize with "," as a separator}\par
5688             {\cf20 // cppcheck-suppress strtokCalled}\par
5689             DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"})\par
5690             auto pch = std::strtok(filtersString.c_str(), ","); {\cf20 // modifies the string}\par
5691             while(pch != {\cf18 nullptr}) \{\par
5692                 {\cf19 if}(strlen(pch))\par
5693                     res.push_back(pch);\par
5694                 {\cf20 // uses the strtok() internal state to go to the next token}\par
5695                 {\cf20 // cppcheck-suppress strtokCalled}\par
5696                 pch = std::strtok({\cf17 nullptr}, {\cf22 ","});\par
5697             \}\par
5698             DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
5699             {\cf19 return} {\cf17 true};\par
5700         \}\par
5701         {\cf19 return} {\cf17 false};\par
5702     \}\par
5703 \par
5704     {\cf17 enum} optionType\par
5705     \{\par
5706         option_bool,\par
5707         option_int\par
5708     \};\par
5709 \par
5710     {\cf20 // parses an int/bool option from the command line}\par
5711     {\cf18 bool} parseIntOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, optionType type,\par
5712                         {\cf18 int}& res) \{\par
5713         String parsedValue;\par
5714         {\cf19 if}(!parseOption(argc, argv, pattern, &parsedValue))\par
5715             {\cf19 return} {\cf17 false};\par
5716 \par
5717         {\cf19 if}(type == 0) \{\par
5718             {\cf20 // boolean}\par
5719             {\cf17 const} {\cf18 char} positive[][5] = \{{\cf22 "1"}, {\cf22 "true"}, {\cf22 "on"}, {\cf22 "yes"}\};  {\cf20 // 5 - strlen("true") + 1}\par
5720             {\cf17 const} {\cf18 char} negative[][6] = \{{\cf22 "0"}, {\cf22 "false"}, {\cf22 "off"}, {\cf22 "no"}\}; {\cf20 // 6 - strlen("false") + 1}\par
5721 \par
5722             {\cf20 // if the value matches any of the positive/negative possibilities}\par
5723             {\cf19 for}({\cf18 unsigned} i = 0; i < 4; i++) \{\par
5724                 {\cf19 if}(parsedValue.compare(positive[i], {\cf17 true}) == 0) \{\par
5725                     res = 1; \par
5726                     {\cf19 return} {\cf17 true};\par
5727                 \}\par
5728                 {\cf19 if}(parsedValue.compare(negative[i], {\cf17 true}) == 0) \{\par
5729                     res = 0; \par
5730                     {\cf19 return} {\cf17 true};\par
5731                 \}\par
5732             \}\par
5733         \} {\cf19 else} \{\par
5734             {\cf20 // integer}\par
5735             {\cf20 // TODO: change this to use std::stoi or something else! currently it uses undefined behavior - assumes '0' on failed parse...}\par
5736             {\cf18 int} theInt = std::atoi(parsedValue.c_str()); {\cf20 // NOLINT}\par
5737             {\cf19 if}(theInt != 0) \{\par
5738                 res = theInt; \par
5739                 {\cf19 return} {\cf17 true};\par
5740             \}\par
5741         \}\par
5742         {\cf19 return} {\cf17 false};\par
5743     \}\par
5744 \} {\cf20 // namespace}\par
5745 \par
5746 Context::Context({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv)\par
5747         : p(new detail::ContextState) \{\par
5748     parseArgs(argc, argv, {\cf17 true});\par
5749     {\cf19 if}(argc)\par
5750         p->binary_name = argv[0];\par
5751 \}\par
5752 \par
5753 Context::~Context() \{\par
5754     {\cf19 if}(g_cs == p)\par
5755         g_cs = {\cf17 nullptr};\par
5756     {\cf17 delete} p;\par
5757 \}\par
5758 \par
5759 {\cf18 void} Context::applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv) \{\par
5760     parseArgs(argc, argv);\par
5761     {\cf19 if}(argc)\par
5762         p->binary_name = argv[0];\par
5763 \}\par
5764 \par
5765 {\cf20 // parses args}\par
5766 {\cf18 void} Context::parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults) \{\par
5767     {\cf17 using namespace }detail;\par
5768 \par
5769     {\cf20 // clang-format off}\par
5770     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file="},        p->filters[0]);\par
5771     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sf="},                 p->filters[0]);\par
5772     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file-exclude="},p->filters[1]);\par
5773     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sfe="},                p->filters[1]);\par
5774     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite="},         p->filters[2]);\par
5775     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ts="},                 p->filters[2]);\par
5776     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite-exclude="}, p->filters[3]);\par
5777     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tse="},                p->filters[3]);\par
5778     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case="},          p->filters[4]);\par
5779     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tc="},                 p->filters[4]);\par
5780     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case-exclude="},  p->filters[5]);\par
5781     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tce="},                p->filters[5]);\par
5782     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase="},            p->filters[6]);\par
5783     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sc="},                 p->filters[6]);\par
5784     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase-exclude="},    p->filters[7]);\par
5785     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sce="},                p->filters[7]);\par
5786     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "reporters="},          p->filters[8]);\par
5787     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "r="},                  p->filters[8]);\par
5788     {\cf20 // clang-format on}\par
5789 \par
5790     {\cf18 int}    intRes = 0;\par
5791     String strRes;\par
5792 \par
5793 {\cf21 #define DOCTEST_PARSE_AS_BOOL_OR_FLAG(name, sname, var, default)                                   \\}\par
5794 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "="}, option_bool, intRes) ||  \\\par
5795        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_bool, intRes))   \\\par
5796         p->var = !!intRes;                                                                         \\\par
5797     else if(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name) ||                           \\\par
5798             parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname))                            \\\par
5799         p->var = true;                                                                             \\\par
5800     else if(withDefaults)                                                                          \\\par
5801     p->var = default\par
5802 \par
5803 {\cf21 #define DOCTEST_PARSE_INT_OPTION(name, sname, var, default)                                        \\}\par
5804 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "="}, option_int, intRes) ||   \\\par
5805        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_int, intRes))    \\\par
5806         p->var = intRes;                                                                           \\\par
5807     else if(withDefaults)                                                                          \\\par
5808     p->var = default\par
5809 \par
5810 {\cf21 #define DOCTEST_PARSE_STR_OPTION(name, sname, var, default)                                        \\}\par
5811 {\cf21     if(parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "="}, &strRes, default) ||        \\\par
5812        parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", &strRes, default) ||       \\\par
5813        withDefaults)                                                                               \\\par
5814     p->var = strRes\par
5815 \par
5816     {\cf20 // clang-format off}\par
5817     DOCTEST_PARSE_STR_OPTION({\cf22 "out"}, {\cf22 "o"}, out, {\cf22 ""});\par
5818     DOCTEST_PARSE_STR_OPTION({\cf22 "order-by"}, {\cf22 "ob"}, order_by, {\cf22 "file"});\par
5819     DOCTEST_PARSE_INT_OPTION({\cf22 "rand-seed"}, {\cf22 "rs"}, rand_seed, 0);\par
5820 \par
5821     DOCTEST_PARSE_INT_OPTION({\cf22 "first"}, {\cf22 "f"}, first, 0);\par
5822     DOCTEST_PARSE_INT_OPTION({\cf22 "last"}, {\cf22 "l"}, last, UINT_MAX);\par
5823 \par
5824     DOCTEST_PARSE_INT_OPTION({\cf22 "abort-after"}, {\cf22 "aa"}, abort_after, 0);\par
5825     DOCTEST_PARSE_INT_OPTION({\cf22 "subcase-filter-levels"}, {\cf22 "scfl"}, subcase_filter_levels, INT_MAX);\par
5826 \par
5827     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "success"}, {\cf22 "s"}, success, {\cf17 false});\par
5828     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "case-sensitive"}, {\cf22 "cs"}, case_sensitive, {\cf17 false});\par
5829     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "exit"}, {\cf22 "e"}, exit, {\cf17 false});\par
5830     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "duration"}, {\cf22 "d"}, duration, {\cf17 false});\par
5831     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-throw"}, {\cf22 "nt"}, no_throw, {\cf17 false});\par
5832     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-exitcode"}, {\cf22 "ne"}, no_exitcode, {\cf17 false});\par
5833     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-run"}, {\cf22 "nr"}, no_run, {\cf17 false});\par
5834     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-version"}, {\cf22 "nv"}, no_version, {\cf17 false});\par
5835     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-colors"}, {\cf22 "nc"}, no_colors, {\cf17 false});\par
5836     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "force-colors"}, {\cf22 "fc"}, force_colors, {\cf17 false});\par
5837     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-breaks"}, {\cf22 "nb"}, no_breaks, {\cf17 false});\par
5838     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skip"}, {\cf22 "ns"}, no_skip, {\cf17 false});\par
5839     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "gnu-file-line"}, {\cf22 "gfl"}, gnu_file_line, !{\cf18 bool}(DOCTEST_MSVC));\par
5840     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-path-filenames"}, {\cf22 "npf"}, no_path_in_filenames, {\cf17 false});\par
5841     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-line-numbers"}, {\cf22 "nln"}, no_line_numbers, {\cf17 false});\par
5842     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skipped-summary"}, {\cf22 "nss"}, no_skipped_summary, {\cf17 false});\par
5843     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-time-in-output"}, {\cf22 "ntio"}, no_time_in_output, {\cf17 false});\par
5844     {\cf20 // clang-format on}\par
5845 \par
5846     {\cf19 if}(withDefaults) \{\par
5847         p->help             = {\cf17 false};\par
5848         p->version          = {\cf17 false};\par
5849         p->count            = {\cf17 false};\par
5850         p->list_test_cases  = {\cf17 false};\par
5851         p->list_test_suites = {\cf17 false};\par
5852         p->list_reporters   = {\cf17 false};\par
5853     \}\par
5854     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "help"}) ||\par
5855        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "h"}) ||\par
5856        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "?"})) \{\par
5857         p->help = {\cf17 true};\par
5858         p->exit = {\cf17 true};\par
5859     \}\par
5860     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "version"}) ||\par
5861        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "v"})) \{\par
5862         p->version = {\cf17 true};\par
5863         p->exit    = {\cf17 true};\par
5864     \}\par
5865     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "count"}) ||\par
5866        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "c"})) \{\par
5867         p->count = {\cf17 true};\par
5868         p->exit  = {\cf17 true};\par
5869     \}\par
5870     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-cases"}) ||\par
5871        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ltc"})) \{\par
5872         p->list_test_cases = {\cf17 true};\par
5873         p->exit            = {\cf17 true};\par
5874     \}\par
5875     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-suites"}) ||\par
5876        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lts"})) \{\par
5877         p->list_test_suites = {\cf17 true};\par
5878         p->exit             = {\cf17 true};\par
5879     \}\par
5880     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-reporters"}) ||\par
5881        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lr"})) \{\par
5882         p->list_reporters = {\cf17 true};\par
5883         p->exit           = {\cf17 true};\par
5884     \}\par
5885 \}\par
5886 \par
5887 {\cf20 // allows the user to add procedurally to the filters from the command line}\par
5888 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value) \{ setOption(filter, value); \}\par
5889 \par
5890 {\cf20 // allows the user to clear all filters from the command line}\par
5891 {\cf18 void} Context::clearFilters() \{\par
5892     {\cf19 for}({\cf17 auto}& curr : p->filters)\par
5893         curr.clear();\par
5894 \}\par
5895 \par
5896 {\cf20 // allows the user to override procedurally the int/bool options from the command line}\par
5897 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value) \{\par
5898     setOption(option, toString(value).c_str());\par
5899 \}\par
5900 \par
5901 {\cf20 // allows the user to override procedurally the string options from the command line}\par
5902 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value) \{\par
5903     {\cf17 auto} argv   = String({\cf22 "-"}) + option + {\cf22 "="} + value;\par
5904     {\cf17 auto} lvalue = argv.c_str();\par
5905     parseArgs(1, &lvalue);\par
5906 \}\par
5907 \par
5908 {\cf20 // users should query this in their main() and exit the program if true}\par
5909 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} p->exit; \}\par
5910 \par
5911 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{ g_cs = p; \}\par
5912 \par
5913 {\cf18 void} Context::setAssertHandler(detail::assert_handler ah) \{ p->ah = ah; \}\par
5914 \par
5915 {\cf20 // the main function that does all the filtering and test running}\par
5916 {\cf18 int} Context::run() \{\par
5917     {\cf17 using namespace }detail;\par
5918 \par
5919     {\cf20 // save the old context state in case such was setup - for using asserts out of a testing context}\par
5920     {\cf17 auto} old_cs = g_cs;\par
5921     {\cf20 // this is the current contest}\par
5922     g_cs               = p;\par
5923     is_running_in_test = {\cf17 true};\par
5924 \par
5925     g_no_colors = p->no_colors;\par
5926     p->resetRunData();\par
5927 \par
5928     {\cf20 // stdout by default}\par
5929     p->cout = &std::cout;\par
5930     p->cerr = &std::cerr;\par
5931 \par
5932     {\cf20 // or to a file if specified}\par
5933     std::fstream fstr;\par
5934     {\cf19 if}(p->out.size()) \{\par
5935         fstr.open(p->out.c_str(), std::fstream::out);\par
5936         p->cout = &fstr;\par
5937     \}\par
5938 \par
5939     {\cf17 auto} cleanup_and_return = [&]() \{\par
5940         {\cf19 if}(fstr.is_open())\par
5941             fstr.close();\par
5942 \par
5943         {\cf20 // restore context}\par
5944         g_cs               = old_cs;\par
5945         is_running_in_test = {\cf17 false};\par
5946 \par
5947         {\cf20 // we have to free the reporters which were allocated when the run started}\par
5948         {\cf19 for}({\cf17 auto}& curr : p->reporters_currently_used)\par
5949             {\cf17 delete} curr;\par
5950         p->reporters_currently_used.clear();\par
5951 \par
5952         {\cf19 if}(p->numTestCasesFailed && !p->no_exitcode)\par
5953             {\cf19 return} EXIT_FAILURE;\par
5954         {\cf19 return} EXIT_SUCCESS;\par
5955     \};\par
5956 \par
5957     {\cf20 // setup default reporter if none is given through the command line}\par
5958     {\cf19 if}(p->filters[8].empty())\par
5959         p->filters[8].push_back({\cf22 "console"});\par
5960 \par
5961     {\cf20 // check to see if any of the registered reporters has been selected}\par
5962     {\cf19 for}({\cf17 auto}& curr : getReporters()) \{\par
5963         {\cf19 if}(matchesAny(curr.first.second.c_str(), p->filters[8], {\cf17 false}, p->case_sensitive))\par
5964             p->reporters_currently_used.push_back(curr.second(*g_cs));\par
5965     \}\par
5966 \par
5967     {\cf20 // TODO: check if there is nothing in reporters_currently_used}\par
5968 \par
5969     {\cf20 // prepend all listeners}\par
5970     {\cf19 for}({\cf17 auto}& curr : getListeners())\par
5971         p->reporters_currently_used.insert(p->reporters_currently_used.begin(), curr.second(*g_cs));\par
5972 \par
5973 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5974     {\cf19 if}(isDebuggerActive())\par
5975         p->reporters_currently_used.push_back({\cf17 new} DebugOutputWindowReporter(*g_cs));\par
5976 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5977 \par
5978     {\cf20 // handle version, help and no_run}\par
5979     {\cf19 if}(p->no_run || p->version || p->help || p->list_reporters) \{\par
5980         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, QueryData());\par
5981 \par
5982         {\cf19 return} cleanup_and_return();\par
5983     \}\par
5984 \par
5985     std::vector<const TestCase*> testArray;\par
5986     {\cf19 for}({\cf17 auto}& curr : getRegisteredTests())\par
5987         testArray.push_back(&curr);\par
5988     p->numTestCases = testArray.size();\par
5989 \par
5990     {\cf20 // sort the collected records}\par
5991     {\cf19 if}(!testArray.empty()) \{\par
5992         {\cf19 if}(p->order_by.compare({\cf22 "file"}, {\cf17 true}) == 0) \{\par
5993             std::sort(testArray.begin(), testArray.end(), fileOrderComparator);\par
5994         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "suite"}, {\cf17 true}) == 0) \{\par
5995             std::sort(testArray.begin(), testArray.end(), suiteOrderComparator);\par
5996         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "name"}, {\cf17 true}) == 0) \{\par
5997             std::sort(testArray.begin(), testArray.end(), nameOrderComparator);\par
5998         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "rand"}, {\cf17 true}) == 0) \{\par
5999             std::srand(p->rand_seed);\par
6000 \par
6001             {\cf20 // random_shuffle implementation}\par
6002             {\cf17 const} {\cf17 auto} first = &testArray[0];\par
6003             {\cf19 for}({\cf18 size_t} i = testArray.size() - 1; i > 0; --i) \{\par
6004                 {\cf18 int} idxToSwap = std::rand() % (i + 1); {\cf20 // NOLINT}\par
6005 \par
6006                 {\cf17 const} {\cf17 auto} temp = first[i];\par
6007 \par
6008                 first[i]         = first[idxToSwap];\par
6009                 first[idxToSwap] = temp;\par
6010             \}\par
6011         \}\par
6012     \}\par
6013 \par
6014     std::set<String> testSuitesPassingFilt;\par
6015 \par
6016     {\cf18 bool}                             query_mode = p->count || p->list_test_cases || p->list_test_suites;\par
6017     std::vector<const TestCaseData*> queryResults;\par
6018 \par
6019     {\cf19 if}(!query_mode)\par
6020         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start, DOCTEST_EMPTY);\par
6021 \par
6022     {\cf20 // invoke the registered functions if they match the filter criteria (or just count them)}\par
6023     {\cf19 for}({\cf17 auto}& curr : testArray) \{\par
6024         {\cf17 const} {\cf17 auto}& tc = *curr;\par
6025 \par
6026         {\cf18 bool} skip_me = {\cf17 false};\par
6027         {\cf19 if}(tc.m_skip && !p->no_skip)\par
6028             skip_me = {\cf17 true};\par
6029 \par
6030         {\cf19 if}(!matchesAny(tc.m_file.c_str(), p->filters[0], {\cf17 true}, p->case_sensitive))\par
6031             skip_me = {\cf17 true};\par
6032         {\cf19 if}(matchesAny(tc.m_file.c_str(), p->filters[1], {\cf17 false}, p->case_sensitive))\par
6033             skip_me = {\cf17 true};\par
6034         {\cf19 if}(!matchesAny(tc.m_test_suite, p->filters[2], {\cf17 true}, p->case_sensitive))\par
6035             skip_me = {\cf17 true};\par
6036         {\cf19 if}(matchesAny(tc.m_test_suite, p->filters[3], {\cf17 false}, p->case_sensitive))\par
6037             skip_me = {\cf17 true};\par
6038         {\cf19 if}(!matchesAny(tc.m_name, p->filters[4], {\cf17 true}, p->case_sensitive))\par
6039             skip_me = {\cf17 true};\par
6040         {\cf19 if}(matchesAny(tc.m_name, p->filters[5], {\cf17 false}, p->case_sensitive))\par
6041             skip_me = {\cf17 true};\par
6042 \par
6043         {\cf19 if}(!skip_me)\par
6044             p->numTestCasesPassingFilters++;\par
6045 \par
6046         {\cf20 // skip the test if it is not in the execution range}\par
6047         {\cf19 if}((p->last < p->numTestCasesPassingFilters && p->first <= p->last) ||\par
6048            (p->first > p->numTestCasesPassingFilters))\par
6049             skip_me = {\cf17 true};\par
6050 \par
6051         {\cf19 if}(skip_me) \{\par
6052             {\cf19 if}(!query_mode)\par
6053                 DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped, tc);\par
6054             {\cf19 continue};\par
6055         \}\par
6056 \par
6057         {\cf20 // do not execute the test if we are to only count the number of filter passing tests}\par
6058         {\cf19 if}(p->count)\par
6059             {\cf19 continue};\par
6060 \par
6061         {\cf20 // print the name of the test and don't execute it}\par
6062         {\cf19 if}(p->list_test_cases) \{\par
6063             queryResults.push_back(&tc);\par
6064             {\cf19 continue};\par
6065         \}\par
6066 \par
6067         {\cf20 // print the name of the test suite if not done already and don't execute it}\par
6068         {\cf19 if}(p->list_test_suites) \{\par
6069             {\cf19 if}((testSuitesPassingFilt.count(tc.m_test_suite) == 0) && tc.m_test_suite[0] != {\cf23 '\\0'}) \{\par
6070                 queryResults.push_back(&tc);\par
6071                 testSuitesPassingFilt.insert(tc.m_test_suite);\par
6072                 p->numTestSuitesPassingFilters++;\par
6073             \}\par
6074             {\cf19 continue};\par
6075         \}\par
6076 \par
6077         {\cf20 // execute the test if it passes all the filtering}\par
6078         \{\par
6079             p->currentTest = &tc;\par
6080 \par
6081             p->failure_flags = TestCaseFailureReason::None;\par
6082             p->seconds       = 0;\par
6083 \par
6084             {\cf20 // reset atomic counters}\par
6085             p->numAssertsFailedCurrentTest_atomic = 0;\par
6086             p->numAssertsCurrentTest_atomic       = 0;\par
6087 \par
6088             p->subcasesPassed.clear();\par
6089 \par
6090             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start, tc);\par
6091 \par
6092             p->timer.start();\par
6093             \par
6094             {\cf18 bool} run_test = {\cf17 true};\par
6095 \par
6096             {\cf19 do} \{\par
6097                 {\cf20 // reset some of the fields for subcases (except for the set of fully passed ones)}\par
6098                 p->should_reenter          = {\cf17 false};\par
6099                 p->subcasesCurrentMaxLevel = 0;\par
6100                 p->subcasesStack.clear();\par
6101 \par
6102                 p->shouldLogCurrentException = {\cf17 true};\par
6103 \par
6104                 {\cf20 // reset stuff for logging with INFO()}\par
6105                 p->stringifiedContexts.clear();\par
6106 \par
6107 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6108                 {\cf19 try} \{\par
6109 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6110                     FatalConditionHandler fatalConditionHandler; {\cf20 // Handle signals}\par
6111                     {\cf20 // execute the test}\par
6112                     tc.m_test();\par
6113                     fatalConditionHandler.reset();\par
6114 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6115                 \} {\cf19 catch}({\cf17 const} TestFailureException&) \{\par
6116                     p->failure_flags |= TestCaseFailureReason::AssertFailure;\par
6117                 \} {\cf19 catch}(...) \{\par
6118                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,\par
6119                                                       \{translateActiveException(), {\cf17 false}\});\par
6120                     p->failure_flags |= TestCaseFailureReason::Exception;\par
6121                 \}\par
6122 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6123 \par
6124                 {\cf20 // exit this loop if enough assertions have failed - even if there are more subcases}\par
6125                 {\cf19 if}(p->abort_after > 0 &&\par
6126                    p->numAssertsFailed + p->numAssertsFailedCurrentTest_atomic >= p->abort_after) \{\par
6127                     run_test = {\cf17 false};\par
6128                     p->failure_flags |= TestCaseFailureReason::TooManyFailedAsserts;\par
6129                 \}\par
6130                 \par
6131                 {\cf19 if}(p->should_reenter && run_test)\par
6132                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter, tc);\par
6133                 {\cf19 if}(!p->should_reenter)\par
6134                     run_test = {\cf17 false};\par
6135             \} {\cf19 while}(run_test);\par
6136 \par
6137             p->finalizeTestCaseData();\par
6138 \par
6139             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
6140 \par
6141             p->currentTest = {\cf17 nullptr};\par
6142 \par
6143             {\cf20 // stop executing tests if enough assertions have failed}\par
6144             {\cf19 if}(p->abort_after > 0 && p->numAssertsFailed >= p->abort_after)\par
6145                 {\cf19 break};\par
6146         \}\par
6147     \}\par
6148 \par
6149     {\cf19 if}(!query_mode) \{\par
6150         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
6151     \} {\cf19 else} \{\par
6152         QueryData qdata;\par
6153         qdata.run_stats = g_cs;\par
6154         qdata.data      = queryResults.data();\par
6155         qdata.num_data  = unsigned(queryResults.size());\par
6156         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, qdata);\par
6157     \}\par
6158 \par
6159     {\cf20 // see these issues on the reasoning for this:}\par
6160     {\cf20 // - https://github.com/onqtam/doctest/issues/143#issuecomment-414418903}\par
6161     {\cf20 // - https://github.com/onqtam/doctest/issues/126}\par
6162     {\cf17 auto} DOCTEST_FIX_FOR_MACOS_LIBCPP_IOSFWD_STRING_LINK_ERRORS = []() DOCTEST_NOINLINE\par
6163         \{ std::cout << std::string(); \};\par
6164     DOCTEST_FIX_FOR_MACOS_LIBCPP_IOSFWD_STRING_LINK_ERRORS();\par
6165 \par
6166     {\cf19 return} cleanup_and_return();\par
6167 \}\par
6168 \par
6169 IReporter::~IReporter() = {\cf19 default};\par
6170 \par
6171 {\cf18 int} IReporter::get_num_active_contexts() \{ {\cf19 return} detail::g_infoContexts.size(); \}\par
6172 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{\par
6173     {\cf19 return} get_num_active_contexts() ? &detail::g_infoContexts[0] : {\cf17 nullptr};\par
6174 \}\par
6175 \par
6176 {\cf18 int} IReporter::get_num_stringified_contexts() \{ {\cf19 return} detail::g_cs->stringifiedContexts.size(); \}\par
6177 {\cf17 const} String* IReporter::get_stringified_contexts() \{\par
6178     {\cf19 return} get_num_stringified_contexts() ? &detail::g_cs->stringifiedContexts[0] : {\cf17 nullptr};\par
6179 \}\par
6180 \par
6181 {\cf17 namespace }detail \{\par
6182     {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, reporterCreatorFunc c, {\cf18 bool} isReporter) \{\par
6183         {\cf19 if}(isReporter)\par
6184             getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6185         {\cf19 else}\par
6186             getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6187     \}\par
6188 \} {\cf20 // namespace detail}\par
6189 \par
6190 \} {\cf20 // namespace doctest}\par
6191 \par
6192 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
6193 \par
6194 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
6195 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) {\cf20 // 'function' : must be 'attribute' - see issue #182}\par
6196 int main({\cf18 int} argc, {\cf18 char}** argv) \{ {\cf19 return} doctest::Context(argc, argv).run(); \}\par
6197 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
6198 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
6199 \par
6200 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
6201 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
6202 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
6203 \par
6204 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_IMPLEMENTATION}\par
6205 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/FileWritingTests.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/FileWritingTests.cpp}
{\xe \v AudioFile/tests/FileWritingTests.cpp}
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <math.h>}\par
{\f2 #include <AudioFile.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b writeTestAudioFile} (int numChannels, int sampleRate, int bitDepth, {\b AudioFileFormat} format)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_SUITE} ("Writing Tests")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b projectBuildDirectory} = PROJECT_BINARY_DIR\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_SUITE\:FileWritingTests.cpp}
{\xe \v FileWritingTests.cpp\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_SUITE ("Writing Tests" )}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v writeTestAudioFile\:FileWritingTests.cpp}
{\xe \v FileWritingTests.cpp\:writeTestAudioFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool writeTestAudioFile (int  {\i numChannels}, int  {\i sampleRate}, int  {\i bitDepth}, {\b AudioFileFormat}  {\i format})}}
\par
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v projectBuildDirectory\:FileWritingTests.cpp}
{\xe \v FileWritingTests.cpp\:projectBuildDirectory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string projectBuildDirectory = PROJECT_BINARY_DIR}}
\par
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/GeneralTests.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/GeneralTests.cpp}
{\xe \v AudioFile/tests/GeneralTests.cpp}
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <math.h>}\par
{\f2 #include <AudioFile.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_SUITE} ("General Tests")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_SUITE\:GeneralTests.cpp}
{\xe \v GeneralTests.cpp\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_SUITE ("General Tests" )}}
\par
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/main.cpp}
{\xe \v AudioFile/tests/main.cpp}
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_COLORS_NONE}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_COLORS_NONE\:main.cpp}
{\xe \v main.cpp\:DOCTEST_CONFIG_COLORS_NONE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_COLORS_NONE}}
\par
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:main.cpp}
{\xe \v main.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/makeHeaders.py File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/makeHeaders.py}
{\xe \v AudioFile/tests/makeHeaders.py}
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b makeHeaders}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b makeHeaders.makeHeader} (fileName, audioSignal, numChannels, bitRate, sampleRate, fileFormat)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b makeHeaders.wavFiles} = []\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b makeHeaders.audioSignal}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b makeHeaders.fs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b makeHeaders.enc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b makeHeaders.fileFormat} = "wav"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b makeHeaders.numChannels} = 1\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_16bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_16bit_44100.h}
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_16bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_44100::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_16bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_16bit_44100::testBuffer} = \{\{-0.009429931640625, -0.030426025390625, -0.035186767578125, 0.17071533203125, -0.01959228515625, -0.11553955078125, 0.06549072265625, 0.014617919921875, -0.01251220703125, -0.038818359375, -0.051116943359375, 0.055755615234375, 0.052215576171875, 0.010406494140625, -0.0538330078125, -0.038848876953125, 0.059295654296875, -0.002655029296875, -0.004608154296875, 0.062774658203125, 0.03363037109375, 0.040863037109375, -0.00921630859375, -0.055572509765625, -0.015533447265625, -0.070648193359375, -0.0711669921875, 0.0555419921875, 0.142486572265625, 0.044586181640625, -0.14093017578125, -0.04248046875, 0.116851806640625, 0.03070068359375, -0.069549560546875, -0.035400390625, 0.1212158203125, 0.07855224609375, -0.1387939453125, 0.037109375, 0.1822509765625, -0.1285400390625, -0.071685791015625, 0.22222900390625, -0.020782470703125, -0.175018310546875, 0.080718994140625, 0.116790771484375, -0.033233642578125, -0.00732421875, 0.068206787109375, -0.014404296875, -0.016632080078125, 0.1287841796875, 0.06170654296875, -0.033599853515625, 0.129180908203125, 0.152374267578125, -0.0736083984375, -0.08221435546875, 0.12152099609375, 0.10015869140625, -0.069122314453125, 0.015380859375, 0.158447265625, 0.025604248046875, -0.029754638671875, 0.1312255859375, 0.060211181640625, -0.105621337890625, 0.050079345703125, 0.21539306640625, 0.049591064453125, -0.066802978515625, 0.0919189453125, 0.013458251953125, -0.132843017578125, 0.152252197265625, 0.18670654296875, -0.079315185546875, 0.025909423828125, 0.1351318359375, -0.00177001953125, -0.04156494140625, 0.041412353515625, -0.02325439453125, -0.10821533203125, 0.065704345703125, 0.08941650390625, -0.067901611328125, -0.03741455078125, 0.01251220703125, 0.080474853515625, 0.03302001953125, -0.148468017578125, -0.019134521484375, 0.065338134765625, -0.136505126953125, -0.06561279296875, 0.09429931640625, -0.020660400390625, -0.0557861328125, -0.045623779296875, -0.090576171875, -0.060943603515625, -0.0792236328125, -0.01702880859375, -0.002716064453125, -0.141143798828125, -0.10955810546875, -0.034332275390625, -0.023284912109375, -0.035552978515625, -0.10833740234375, -0.103363037109375, -0.03570556640625, -0.0582275390625, -0.14263916015625, -0.167572021484375, -0.079315185546875, -0.044677734375, -0.1461181640625, -0.1444091796875, -0.075531005859375, -0.081146240234375, -0.104156494140625, -0.126373291015625, -0.11944580078125, -0.158905029296875, -0.167388916015625, -0.1009521484375, -0.134307861328125, -0.15655517578125, -0.098114013671875, -0.1104736328125, -0.15087890625, -0.125732421875, -0.140380859375, -0.166748046875, -0.076690673828125, -0.044403076171875, -0.152130126953125, -0.1761474609375, -0.0623779296875, -0.009002685546875, -0.083526611328125, -0.1474609375, -0.13336181640625, -0.087432861328125, -0.09112548828125, -0.1595458984375, -0.11383056640625, 0.0025634765625, -0.108612060546875, -0.176055908203125, -0.017364501953125, -0.05621337890625, -0.171630859375, -0.048736572265625, 0.077789306640625, -0.01885986328125, -0.144775390625, -0.062713623046875, -0.01025390625, -0.075836181640625, -0.057830810546875, -0.00714111328125, 0.016387939453125, -0.017364501953125, -0.015411376953125, 0.061767578125, 0.011260986328125, -0.0439453125, 0.026641845703125, 0.056884765625, 0.02276611328125, 0.0557861328125, 0.09747314453125, 0.022064208984375, -0.023834228515625, 0.037872314453125, 0.1395263671875, 0.0946044921875, -0.033355712890625, 0.10833740234375, 0.190093994140625, 0.0584716796875, 0.059173583984375, 0.08880615234375, 0.0999755859375, 0.104644775390625, 0.066558837890625, 0.089996337890625, 0.126220703125, 0.13580322265625, 0.150634765625, 0.122833251953125, 0.072235107421875, 0.10394287109375, 0.136077880859375, 0.124969482421875, 0.144622802734375, 0.116241455078125, 0.114501953125, 0.1761474609375, 0.139617919921875, 0.098052978515625, 0.158355712890625, 0.14996337890625, 0.053192138671875, 0.090240478515625, 0.182586669921875, 0.175506591796875, 0.16473388671875, 0.122100830078125, 0.103729248046875, 0.1373291015625, 0.112823486328125, 0.12225341796875, 0.138885498046875, 0.150299072265625, 0.15008544921875, 0.096405029296875, 0.090911865234375, 0.01837158203125, -0.038330078125, 0.025909423828125, 0.001434326171875, -0.01409912109375, 0.0623779296875, 0.112518310546875, 0.1634521484375, 0.24664306640625, 0.253265380859375, 0.236114501953125, 0.298248291015625, 0.243194580078125, 0.172027587890625, 0.24615478515625, 0.216766357421875, 0.134552001953125, 0.121490478515625, 0.11419677734375, 0.08935546875, -0.007232666015625, -0.0238037109375, 0.013458251953125, -0.071044921875, -0.09210205078125, -0.051483154296875, -0.08331298828125, -0.127166748046875, -0.137054443359375, -0.077239990234375, -0.053558349609375, -0.08843994140625, -0.098236083984375, -0.14013671875, -0.12054443359375, -0.044769287109375, -0.11083984375, -0.152679443359375, -0.06036376953125, -0.060333251953125, -0.1005859375, -0.07586669921875, -0.02154541015625, 0.022705078125, -0.02044677734375, 0.00494384765625, 0.069183349609375, 0.079742431640625, 0.158416748046875, 0.142669677734375, 0.080841064453125, 0.1121826171875, 0.0828857421875, 0.0223388671875, 0.018951416015625, 0.056610107421875, 0.060394287109375, 0.02294921875, 0.000701904296875, -0.020172119140625, 0.01123046875, 0.031005859375, -0.038848876953125, -0.03265380859375, 0.012420654296875, -0.050567626953125, -0.099517822265625, -0.07818603515625, -0.1011962890625, -0.1331787109375, -0.130584716796875, -0.16241455078125, -0.175506591796875, -0.164947509765625, -0.161773681640625, -0.11907958984375, -0.11871337890625, -0.174957275390625, -0.1658935546875, -0.157562255859375, -0.223480224609375, -0.22882080078125, -0.17333984375, -0.190582275390625, -0.24285888671875, -0.215728759765625, -0.159027099609375, -0.172882080078125, -0.198516845703125, -0.1790771484375, -0.162689208984375, -0.188690185546875, -0.21173095703125, -0.2039794921875, -0.207122802734375, -0.184112548828125, -0.162811279296875, -0.19024658203125, -0.1748046875, -0.14013671875, -0.142974853515625, -0.149322509765625, -0.1236572265625, -0.096710205078125, -0.12646484375, -0.130645751953125, -0.077789306640625, -0.04254150390625, -0.060028076171875, -0.049163818359375, 0.04315185546875, 0.0528564453125, 0.01708984375, 0.069427490234375, 0.1015625, 0.10479736328125, 0.1112060546875, 0.106781005859375, 0.168792724609375, 0.215240478515625, 0.1641845703125, 0.156829833984375, 0.200408935546875, 0.196014404296875, 0.158477783203125, 0.147491455078125, 0.1724853515625, 0.17608642578125, 0.156982421875, 0.14520263671875, 0.14154052734375, 0.143707275390625, 0.128875732421875, 0.083282470703125, 0.0904541015625, 0.121429443359375, 0.060333251953125, 0.068634033203125, 0.142333984375, 0.122314453125, 0.13726806640625, 0.163848876953125, 0.15008544921875, 0.189056396484375, 0.202056884765625, 0.1939697265625, 0.219818115234375, 0.23236083984375, 0.224822998046875, 0.198516845703125, 0.188720703125, 0.17999267578125, 0.14501953125, 0.146270751953125, 0.16339111328125, 0.17364501953125, 0.180633544921875, 0.133514404296875, 0.111175537109375, 0.1343994140625, 0.082366943359375, 0.022735595703125, 0.025115966796875, 0.013641357421875, -0.01580810546875, -0.011444091796875, 0.024688720703125, 0.019287109375, -0.020111083984375, 0.0008544921875, 0.008087158203125, -0.01922607421875, -0.004669189453125, -0.00848388671875, -0.012908935546875, -0.00213623046875, -0.00225830078125, 0.0054931640625, -0.001495361328125, 0.012298583984375, 0.026397705078125, 0.01165771484375, 0.00335693359375, -0.002105712890625, 0.020843505859375, 0.02276611328125, -0.02996826171875, -0.027313232421875, -0.02850341796875, -0.09857177734375, -0.08453369140625, -0.043792724609375, -0.0887451171875, -0.09521484375, -0.076507568359375, -0.087890625, -0.094085693359375, -0.102294921875, -0.08465576171875, -0.071258544921875, -0.1043701171875, -0.097869873046875, -0.063446044921875, -0.063201904296875, -0.03558349609375, 0.001495361328125, 0.003631591796875, -0.000579833984375, -0.004791259765625, 0.000457763671875, -0.00103759765625, -0.043792724609375, -0.079864501953125, -0.08441162109375, -0.106689453125, -0.130645751953125, -0.136871337890625, -0.120819091796875, -0.10394287109375, -0.12506103515625, -0.10198974609375, -0.04742431640625, -0.03851318359375, -0.018798828125, 6.103515625e-05, -0.0032958984375, 0.023895263671875, 0.047271728515625, 0.018463134765625, -0.0032958984375, 0.022735595703125, 0.024200439453125, -0.00927734375, -0.014892578125, -0.024810791015625, -0.04498291015625, -0.0562744140625, -0.072113037109375, -0.073638916015625, -0.06494140625, -0.065460205078125, -0.0618896484375, -0.03472900390625, -0.012542724609375, -0.0146484375, -0.0078125, -0.01214599609375, -0.021453857421875, -0.010986328125, -0.011749267578125, -0.0126953125, -0.0233154296875, -0.040374755859375, -0.025238037109375, -0.002838134765625, -0.007720947265625, -0.022674560546875, -0.01568603515625, -0.012481689453125, -0.013275146484375, -0.0062255859375, -0.022705078125, -0.026885986328125, -0.023712158203125, -0.051971435546875, -0.048828125, -0.0289306640625, -0.0340576171875, -0.02191162109375, 0.003936767578125, 0.027923583984375, 0.021881103515625, -0.00665283203125, 0.016693115234375, 0.052764892578125, 0.034271240234375\}, \{-0.007781982421875, -0.02508544921875, -0.029052734375, 0.140869140625, -0.01611328125, -0.095458984375, 0.05401611328125, 0.011932373046875, -0.010223388671875, -0.031890869140625, -0.0419921875, 0.046112060546875, 0.04302978515625, 0.00836181640625, -0.044525146484375, -0.03228759765625, 0.048736572265625, -0.002410888671875, -0.004119873046875, 0.051666259765625, 0.0269775390625, 0.03399658203125, -0.008331298828125, -0.047271728515625, -0.011627197265625, -0.06134033203125, -0.063690185546875, 0.050567626953125, 0.115875244140625, 0.02581787109375, -0.11456298828125, -0.02630615234375, 0.096099853515625, 0.013671875, -0.071929931640625, -0.02972412109375, 0.117401123046875, 0.074859619140625, -0.143341064453125, -0.00653076171875, 0.169342041015625, -0.070709228515625, -0.08624267578125, 0.13677978515625, -0.010528564453125, -0.12677001953125, 0.04742431640625, 0.08538818359375, -0.015228271484375, 0.002410888671875, 0.0445556640625, -0.052581787109375, -0.034423828125, 0.1241455078125, 0.05096435546875, -0.07647705078125, 0.03424072265625, 0.094482421875, -0.033660888671875, -0.049407958984375, 0.078582763671875, 0.05535888671875, -0.0574951171875, 0.020355224609375, 0.100433349609375, -0.02215576171875, -0.03228759765625, 0.10845947265625, 0.03070068359375, -0.09619140625, 0.029327392578125, 0.1314697265625, 0.0103759765625, -0.052734375, 0.0662841796875, -0.00958251953125, -0.125244140625, 0.113067626953125, 0.150970458984375, -0.065399169921875, 0.011138916015625, 0.093963623046875, -0.018157958984375, -0.045501708984375, 0.036041259765625, -0.0130615234375, -0.096466064453125, 0.043609619140625, 0.073486328125, -0.057037353515625, -0.042388916015625, 0.003509521484375, 0.0645751953125, 0.02593994140625, -0.10821533203125, 0.001708984375, 0.066436767578125, -0.089385986328125, -0.026611328125, 0.091949462890625, -0.017486572265625, -0.05657958984375, -0.030548095703125, -0.031036376953125, -0.0108642578125, -0.0548095703125, -0.008148193359375, 0.019012451171875, -0.07684326171875, -0.05609130859375, -0.020751953125, -0.01458740234375, 0.005767822265625, -0.030181884765625, -0.057037353515625, -0.031707763671875, -0.00396728515625, -0.04803466796875, -0.10845947265625, -0.04644775390625, 0.016204833984375, -0.0521240234375, -0.080047607421875, -0.04339599609375, -0.0306396484375, -0.0360107421875, -0.0577392578125, -0.05877685546875, -0.0797119140625, -0.0787353515625, -0.0491943359375, -0.08892822265625, -0.082855224609375, -0.01922607421875, -0.055511474609375, -0.105194091796875, -0.05084228515625, -0.041015625, -0.0833740234375, -0.031768798828125, -3.0517578125e-05, -0.070098876953125, -0.10113525390625, -0.031951904296875, 0.022705078125, -0.010101318359375, -0.069854736328125, -0.10662841796875, -0.069244384765625, -0.0113525390625, -0.0545654296875, -0.062530517578125, 9.1552734375e-05, -0.06982421875, -0.106781005859375, -0.003692626953125, -0.030242919921875, -0.09442138671875, -0.01922607421875, 0.04986572265625, -0.0126953125, -0.092254638671875, -0.043212890625, -0.018310546875, -0.0484619140625, -0.005340576171875, 0.0389404296875, 0.034820556640625, -0.01239013671875, -0.011444091796875, 0.030059814453125, -0.015228271484375, -0.02685546875, 0.0303955078125, 0.035308837890625, -9.1552734375e-05, 0.02789306640625, 0.07049560546875, 0.003448486328125, -0.044647216796875, 0.00933837890625, 0.09552001953125, 0.065460205078125, -0.0450439453125, 0.057403564453125, 0.13531494140625, 0.024139404296875, 0.014404296875, 0.050933837890625, 0.055084228515625, 0.049957275390625, 0.024383544921875, 0.033477783203125, 0.051483154296875, 0.06805419921875, 0.09503173828125, 0.069183349609375, 0.0150146484375, 0.038299560546875, 0.059478759765625, 0.040802001953125, 0.063751220703125, 0.052001953125, 0.0469970703125, 0.091278076171875, 0.067962646484375, 0.046661376953125, 0.09881591796875, 0.074493408203125, -0.013519287109375, 0.033447265625, 0.101318359375, 0.076904296875, 0.064727783203125, 0.0325927734375, 0.03033447265625, 0.058807373046875, 0.036102294921875, 0.055633544921875, 0.07525634765625, 0.086578369140625, 0.086090087890625, 0.030487060546875, 0.001800537109375, -0.07098388671875, -0.09820556640625, -0.02899169921875, -0.053558349609375, -0.077789306640625, -0.018096923828125, 0.046783447265625, 0.120819091796875, 0.1968994140625, 0.192718505859375, 0.170928955078125, 0.228240966796875, 0.202850341796875, 0.143218994140625, 0.1767578125, 0.150665283203125, 0.103668212890625, 0.10107421875, 0.077880859375, 0.03509521484375, -0.03912353515625, -0.04345703125, -0.021881103515625, -0.09051513671875, -0.1024169921875, -0.07733154296875, -0.10015869140625, -0.126373291015625, -0.14178466796875, -0.10406494140625, -0.07568359375, -0.080963134765625, -0.076080322265625, -0.126373291015625, -0.124786376953125, -0.042022705078125, -0.078765869140625, -0.12628173828125, -0.0654296875, -0.062591552734375, -0.0731201171875, -0.033416748046875, -0.00018310546875, 0.02777099609375, 0.016571044921875, 0.060546875, 0.111297607421875, 0.112274169921875, 0.176422119140625, 0.176513671875, 0.13916015625, 0.160980224609375, 0.129608154296875, 0.0814208984375, 0.0892333984375, 0.114410400390625, 0.1002197265625, 0.07806396484375, 0.06915283203125, 0.03765869140625, 0.05810546875, 0.080780029296875, 0.01995849609375, 0.030548095703125, 0.08331298828125, 0.03369140625, -0.018096923828125, -0.008941650390625, -0.024444580078125, -0.059051513671875, -0.074554443359375, -0.10260009765625, -0.1148681640625, -0.093902587890625, -0.074920654296875, -0.0550537109375, -0.07427978515625, -0.11358642578125, -0.087493896484375, -0.081695556640625, -0.148345947265625, -0.160308837890625, -0.12030029296875, -0.132568359375, -0.172576904296875, -0.15130615234375, -0.100616455078125, -0.11102294921875, -0.128936767578125, -0.117645263671875, -0.117340087890625, -0.144439697265625, -0.17120361328125, -0.152923583984375, -0.14068603515625, -0.141448974609375, -0.12872314453125, -0.139892578125, -0.135467529296875, -0.108489990234375, -0.11370849609375, -0.13201904296875, -0.106842041015625, -0.0736083984375, -0.090179443359375, -0.085784912109375, -0.05206298828125, -0.045013427734375, -0.0595703125, -0.033111572265625, 0.05096435546875, 0.062774658203125, 0.028411865234375, 0.062896728515625, 0.08935546875, 0.096221923828125, 0.111419677734375, 0.10797119140625, 0.145233154296875, 0.184722900390625, 0.146026611328125, 0.132080078125, 0.174285888671875, 0.173431396484375, 0.130035400390625, 0.120269775390625, 0.139892578125, 0.13922119140625, 0.12957763671875, 0.109100341796875, 0.085662841796875, 0.093994140625, 0.083526611328125, 0.0277099609375, 0.028350830078125, 0.05755615234375, 0.015045166015625, 0.02264404296875, 0.071044921875, 0.0557861328125, 0.076507568359375, 0.100250244140625, 0.089202880859375, 0.12200927734375, 0.132537841796875, 0.117462158203125, 0.143524169921875, 0.168243408203125, 0.15576171875, 0.125396728515625, 0.11529541015625, 0.103790283203125, 0.072662353515625, 0.0721435546875, 0.08599853515625, 0.1007080078125, 0.11004638671875, 0.0616455078125, 0.03515625, 0.051177978515625, 0.001678466796875, -0.04595947265625, -0.046478271484375, -0.07000732421875, -0.093109130859375, -0.069305419921875, -0.02935791015625, -0.047698974609375, -0.096771240234375, -0.073028564453125, -0.055206298828125, -0.081085205078125, -0.068878173828125, -0.06353759765625, -0.067138671875, -0.05389404296875, -0.050994873046875, -0.060028076171875, -0.06683349609375, -0.0323486328125, -0.00848388671875, -0.02935791015625, -0.045501708984375, -0.046112060546875, -0.01715087890625, -0.007598876953125, -0.057159423828125, -0.06317138671875, -0.057373046875, -0.1085205078125, -0.0994873046875, -0.0782470703125, -0.119537353515625, -0.111358642578125, -0.083343505859375, -0.09002685546875, -0.0958251953125, -0.100677490234375, -0.080657958984375, -0.0738525390625, -0.103668212890625, -0.087860107421875, -0.05670166015625, -0.052581787109375, -0.01361083984375, 0.02984619140625, 0.026763916015625, 0.01654052734375, 0.02197265625, 0.034820556640625, 0.028961181640625, -0.011688232421875, -0.040740966796875, -0.047515869140625, -0.07000732421875, -0.088226318359375, -0.089599609375, -0.073089599609375, -0.06304931640625, -0.074798583984375, -0.04254150390625, 0.005157470703125, 0.018096923828125, 0.040924072265625, 0.058380126953125, 0.05657958984375, 0.07958984375, 0.106414794921875, 0.0928955078125, 0.072479248046875, 0.0799560546875, 0.076019287109375, 0.055908203125, 0.0606689453125, 0.053497314453125, 0.023712158203125, 0.005218505859375, -0.0037841796875, 0.004302978515625, 0.01153564453125, -0.0072021484375, -0.00933837890625, 0.03509521484375, 0.071197509765625, 0.063995361328125, 0.056610107421875, 0.05157470703125, 0.048248291015625, 0.056488037109375, 0.053680419921875, 0.04522705078125, 0.035552978515625, 0.027679443359375, 0.0384521484375, 0.0545654296875, 0.04962158203125, 0.031768798828125, 0.03521728515625, 0.040618896484375, 0.0380859375, 0.039520263671875, 0.020111083984375, 0.015716552734375, 0.02117919921875, -0.010040283203125, -0.015045166015625, 0.006500244140625, 0.003692626953125, 0.008270263671875, 0.027801513671875, 0.053802490234375, 0.049957275390625, 0.017578125, 0.029022216796875, 0.06060791015625, 0.049957275390625\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_16bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_16bit_44100.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_16bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.009429931640625, -0.030426025390625, -0.035186767578125, 0.17071533203125, -0.01959228515625, -0.11553955078125, 0.06549072265625, 0.014617919921875, -0.01251220703125, -0.038818359375, -0.051116943359375, 0.055755615234375, 0.052215576171875, 0.010406494140625, -0.0538330078125, -0.038848876953125, 0.059295654296875, -0.002655029296875, -0.004608154296875, 0.062774658203125, 0.03363037109375, 0.040863037109375, -0.00921630859375, -0.055572509765625, -0.015533447265625, -0.070648193359375, -0.0711669921875, 0.0555419921875, 0.142486572265625, 0.044586181640625, -0.14093017578125, -0.04248046875, 0.116851806640625, 0.03070068359375, -0.069549560546875, -0.035400390625, 0.1212158203125, 0.07855224609375, -0.1387939453125, 0.037109375, 0.1822509765625, -0.1285400390625, -0.071685791015625, 0.22222900390625, -0.020782470703125, -0.175018310546875, 0.080718994140625, 0.116790771484375, -0.033233642578125, -0.00732421875, 0.068206787109375, -0.014404296875, -0.016632080078125, 0.1287841796875, 0.06170654296875, -0.033599853515625, 0.129180908203125, 0.152374267578125, -0.0736083984375, -0.08221435546875, 0.12152099609375, 0.10015869140625, -0.069122314453125, 0.015380859375, 0.158447265625, 0.025604248046875, -0.029754638671875, 0.1312255859375, 0.060211181640625, -0.105621337890625, 0.050079345703125, 0.21539306640625, 0.049591064453125, -0.066802978515625, 0.0919189453125, 0.013458251953125, -0.132843017578125, 0.152252197265625, 0.18670654296875, -0.079315185546875, 0.025909423828125, 0.1351318359375, -0.00177001953125, -0.04156494140625, 0.041412353515625, -0.02325439453125, -0.10821533203125, 0.065704345703125, 0.08941650390625, -0.067901611328125, -0.03741455078125, 0.01251220703125, 0.080474853515625, 0.03302001953125, -0.148468017578125, -0.019134521484375, 0.065338134765625, -0.136505126953125, -0.06561279296875, 0.09429931640625, -0.020660400390625, -0.0557861328125, -0.045623779296875, -0.090576171875, -0.060943603515625, -0.0792236328125, -0.01702880859375, -0.002716064453125, -0.141143798828125, -0.10955810546875, -0.034332275390625, -0.023284912109375, -0.035552978515625, -0.10833740234375, -0.103363037109375, -0.03570556640625, -0.0582275390625, -0.14263916015625, -0.167572021484375, -0.079315185546875, -0.044677734375, -0.1461181640625, -0.1444091796875, -0.075531005859375, -0.081146240234375, -0.104156494140625, -0.126373291015625, -0.11944580078125, -0.158905029296875, -0.167388916015625, -0.1009521484375, -0.134307861328125, -0.15655517578125, -0.098114013671875, -0.1104736328125, -0.15087890625, -0.125732421875, -0.140380859375, -0.166748046875, -0.076690673828125, -0.044403076171875, -0.152130126953125, -0.1761474609375, -0.0623779296875, -0.009002685546875, -0.083526611328125, -0.1474609375, -0.13336181640625, -0.087432861328125, -0.09112548828125, -0.1595458984375, -0.11383056640625, 0.0025634765625, -0.108612060546875, -0.176055908203125, -0.017364501953125, -0.05621337890625, -0.171630859375, -0.048736572265625, 0.077789306640625, -0.01885986328125, -0.144775390625, -0.062713623046875, -0.01025390625, -0.075836181640625, -0.057830810546875, -0.00714111328125, 0.016387939453125, -0.017364501953125, -0.015411376953125, 0.061767578125, 0.011260986328125, -0.0439453125, 0.026641845703125, 0.056884765625, 0.02276611328125, 0.0557861328125, 0.09747314453125, 0.022064208984375, -0.023834228515625, 0.037872314453125, 0.1395263671875, 0.0946044921875, -0.033355712890625, 0.10833740234375, 0.190093994140625, 0.0584716796875, 0.059173583984375, 0.08880615234375, 0.0999755859375, 0.104644775390625, 0.066558837890625, 0.089996337890625, 0.126220703125, 0.13580322265625, 0.150634765625, 0.122833251953125, 0.072235107421875, 0.10394287109375, 0.136077880859375, 0.124969482421875, 0.144622802734375, 0.116241455078125, 0.114501953125, 0.1761474609375, 0.139617919921875, 0.098052978515625, 0.158355712890625, 0.14996337890625, 0.053192138671875, 0.090240478515625, 0.182586669921875, 0.175506591796875, 0.16473388671875, 0.122100830078125, 0.103729248046875, 0.1373291015625, 0.112823486328125, 0.12225341796875, 0.138885498046875, 0.150299072265625, 0.15008544921875, 0.096405029296875, 0.090911865234375, 0.01837158203125, -0.038330078125, 0.025909423828125, 0.001434326171875, -0.01409912109375, 0.0623779296875, 0.112518310546875, 0.1634521484375, 0.24664306640625, 0.253265380859375, 0.236114501953125, 0.298248291015625, 0.243194580078125, 0.172027587890625, 0.24615478515625, 0.216766357421875, 0.134552001953125, 0.121490478515625, 0.11419677734375, 0.08935546875, -0.007232666015625, -0.0238037109375, 0.013458251953125, -0.071044921875, -0.09210205078125, -0.051483154296875, -0.08331298828125, -0.127166748046875, -0.137054443359375, -0.077239990234375, -0.053558349609375, -0.08843994140625, -0.098236083984375, -0.14013671875, -0.12054443359375, -0.044769287109375, -0.11083984375, -0.152679443359375, -0.06036376953125, -0.060333251953125, -0.1005859375, -0.07586669921875, -0.02154541015625, 0.022705078125, -0.02044677734375, 0.00494384765625, 0.069183349609375, 0.079742431640625, 0.158416748046875, 0.142669677734375, 0.080841064453125, 0.1121826171875, 0.0828857421875, 0.0223388671875, 0.018951416015625, 0.056610107421875, 0.060394287109375, 0.02294921875, 0.000701904296875, -0.020172119140625, 0.01123046875, 0.031005859375, -0.038848876953125, -0.03265380859375, 0.012420654296875, -0.050567626953125, -0.099517822265625, -0.07818603515625, -0.1011962890625, -0.1331787109375, -0.130584716796875, -0.16241455078125, -0.175506591796875, -0.164947509765625, -0.161773681640625, -0.11907958984375, -0.11871337890625, -0.174957275390625, -0.1658935546875, -0.157562255859375, -0.223480224609375, -0.22882080078125, -0.17333984375, -0.190582275390625, -0.24285888671875, -0.215728759765625, -0.159027099609375, -0.172882080078125, -0.198516845703125, -0.1790771484375, -0.162689208984375, -0.188690185546875, -0.21173095703125, -0.2039794921875, -0.207122802734375, -0.184112548828125, -0.162811279296875, -0.19024658203125, -0.1748046875, -0.14013671875, -0.142974853515625, -0.149322509765625, -0.1236572265625, -0.096710205078125, -0.12646484375, -0.130645751953125, -0.077789306640625, -0.04254150390625, -0.060028076171875, -0.049163818359375, 0.04315185546875, 0.0528564453125, 0.01708984375, 0.069427490234375, 0.1015625, 0.10479736328125, 0.1112060546875, 0.106781005859375, 0.168792724609375, 0.215240478515625, 0.1641845703125, 0.156829833984375, 0.200408935546875, 0.196014404296875, 0.158477783203125, 0.147491455078125, 0.1724853515625, 0.17608642578125, 0.156982421875, 0.14520263671875, 0.14154052734375, 0.143707275390625, 0.128875732421875, 0.083282470703125, 0.0904541015625, 0.121429443359375, 0.060333251953125, 0.068634033203125, 0.142333984375, 0.122314453125, 0.13726806640625, 0.163848876953125, 0.15008544921875, 0.189056396484375, 0.202056884765625, 0.1939697265625, 0.219818115234375, 0.23236083984375, 0.224822998046875, 0.198516845703125, 0.188720703125, 0.17999267578125, 0.14501953125, 0.146270751953125, 0.16339111328125, 0.17364501953125, 0.180633544921875, 0.133514404296875, 0.111175537109375, 0.1343994140625, 0.082366943359375, 0.022735595703125, 0.025115966796875, 0.013641357421875, -0.01580810546875, -0.011444091796875, 0.024688720703125, 0.019287109375, -0.020111083984375, 0.0008544921875, 0.008087158203125, -0.01922607421875, -0.004669189453125, -0.00848388671875, -0.012908935546875, -0.00213623046875, -0.00225830078125, 0.0054931640625, -0.001495361328125, 0.012298583984375, 0.026397705078125, 0.01165771484375, 0.00335693359375, -0.002105712890625, 0.020843505859375, 0.02276611328125, -0.02996826171875, -0.027313232421875, -0.02850341796875, -0.09857177734375, -0.08453369140625, -0.043792724609375, -0.0887451171875, -0.09521484375, -0.076507568359375, -0.087890625, -0.094085693359375, -0.102294921875, -0.08465576171875, -0.071258544921875, -0.1043701171875, -0.097869873046875, -0.063446044921875, -0.063201904296875, -0.03558349609375, 0.001495361328125, 0.003631591796875, -0.000579833984375, -0.004791259765625, 0.000457763671875, -0.00103759765625, -0.043792724609375, -0.079864501953125, -0.08441162109375, -0.106689453125, -0.130645751953125, -0.136871337890625, -0.120819091796875, -0.10394287109375, -0.12506103515625, -0.10198974609375, -0.04742431640625, -0.03851318359375, -0.018798828125, 6.103515625e-05, -0.0032958984375, 0.023895263671875, 0.047271728515625, 0.018463134765625, -0.0032958984375, 0.022735595703125, 0.024200439453125, -0.00927734375, -0.014892578125, -0.024810791015625, -0.04498291015625, -0.0562744140625, -0.072113037109375, -0.073638916015625, -0.06494140625, -0.065460205078125, -0.0618896484375, -0.03472900390625, -0.012542724609375, -0.0146484375, -0.0078125, -0.01214599609375, -0.021453857421875, -0.010986328125, -0.011749267578125, -0.0126953125, -0.0233154296875, -0.040374755859375, -0.025238037109375, -0.002838134765625, -0.007720947265625, -0.022674560546875, -0.01568603515625, -0.012481689453125, -0.013275146484375, -0.0062255859375, -0.022705078125, -0.026885986328125, -0.023712158203125, -0.051971435546875, -0.048828125, -0.0289306640625, -0.0340576171875, -0.02191162109375, 0.003936767578125, 0.027923583984375, 0.021881103515625, -0.00665283203125, 0.016693115234375, 0.052764892578125, 0.034271240234375\}, \{-0.007781982421875, -0.02508544921875, -0.029052734375, 0.140869140625, -0.01611328125, -0.095458984375, 0.05401611328125, 0.011932373046875, -0.010223388671875, -0.031890869140625, -0.0419921875, 0.046112060546875, 0.04302978515625, 0.00836181640625, -0.044525146484375, -0.03228759765625, 0.048736572265625, -0.002410888671875, -0.004119873046875, 0.051666259765625, 0.0269775390625, 0.03399658203125, -0.008331298828125, -0.047271728515625, -0.011627197265625, -0.06134033203125, -0.063690185546875, 0.050567626953125, 0.115875244140625, 0.02581787109375, -0.11456298828125, -0.02630615234375, 0.096099853515625, 0.013671875, -0.071929931640625, -0.02972412109375, 0.117401123046875, 0.074859619140625, -0.143341064453125, -0.00653076171875, 0.169342041015625, -0.070709228515625, -0.08624267578125, 0.13677978515625, -0.010528564453125, -0.12677001953125, 0.04742431640625, 0.08538818359375, -0.015228271484375, 0.002410888671875, 0.0445556640625, -0.052581787109375, -0.034423828125, 0.1241455078125, 0.05096435546875, -0.07647705078125, 0.03424072265625, 0.094482421875, -0.033660888671875, -0.049407958984375, 0.078582763671875, 0.05535888671875, -0.0574951171875, 0.020355224609375, 0.100433349609375, -0.02215576171875, -0.03228759765625, 0.10845947265625, 0.03070068359375, -0.09619140625, 0.029327392578125, 0.1314697265625, 0.0103759765625, -0.052734375, 0.0662841796875, -0.00958251953125, -0.125244140625, 0.113067626953125, 0.150970458984375, -0.065399169921875, 0.011138916015625, 0.093963623046875, -0.018157958984375, -0.045501708984375, 0.036041259765625, -0.0130615234375, -0.096466064453125, 0.043609619140625, 0.073486328125, -0.057037353515625, -0.042388916015625, 0.003509521484375, 0.0645751953125, 0.02593994140625, -0.10821533203125, 0.001708984375, 0.066436767578125, -0.089385986328125, -0.026611328125, 0.091949462890625, -0.017486572265625, -0.05657958984375, -0.030548095703125, -0.031036376953125, -0.0108642578125, -0.0548095703125, -0.008148193359375, 0.019012451171875, -0.07684326171875, -0.05609130859375, -0.020751953125, -0.01458740234375, 0.005767822265625, -0.030181884765625, -0.057037353515625, -0.031707763671875, -0.00396728515625, -0.04803466796875, -0.10845947265625, -0.04644775390625, 0.016204833984375, -0.0521240234375, -0.080047607421875, -0.04339599609375, -0.0306396484375, -0.0360107421875, -0.0577392578125, -0.05877685546875, -0.0797119140625, -0.0787353515625, -0.0491943359375, -0.08892822265625, -0.082855224609375, -0.01922607421875, -0.055511474609375, -0.105194091796875, -0.05084228515625, -0.041015625, -0.0833740234375, -0.031768798828125, -3.0517578125e-05, -0.070098876953125, -0.10113525390625, -0.031951904296875, 0.022705078125, -0.010101318359375, -0.069854736328125, -0.10662841796875, -0.069244384765625, -0.0113525390625, -0.0545654296875, -0.062530517578125, 9.1552734375e-05, -0.06982421875, -0.106781005859375, -0.003692626953125, -0.030242919921875, -0.09442138671875, -0.01922607421875, 0.04986572265625, -0.0126953125, -0.092254638671875, -0.043212890625, -0.018310546875, -0.0484619140625, -0.005340576171875, 0.0389404296875, 0.034820556640625, -0.01239013671875, -0.011444091796875, 0.030059814453125, -0.015228271484375, -0.02685546875, 0.0303955078125, 0.035308837890625, -9.1552734375e-05, 0.02789306640625, 0.07049560546875, 0.003448486328125, -0.044647216796875, 0.00933837890625, 0.09552001953125, 0.065460205078125, -0.0450439453125, 0.057403564453125, 0.13531494140625, 0.024139404296875, 0.014404296875, 0.050933837890625, 0.055084228515625, 0.049957275390625, 0.024383544921875, 0.033477783203125, 0.051483154296875, 0.06805419921875, 0.09503173828125, 0.069183349609375, 0.0150146484375, 0.038299560546875, 0.059478759765625, 0.040802001953125, 0.063751220703125, 0.052001953125, 0.0469970703125, 0.091278076171875, 0.067962646484375, 0.046661376953125, 0.09881591796875, 0.074493408203125, -0.013519287109375, 0.033447265625, 0.101318359375, 0.076904296875, 0.064727783203125, 0.0325927734375, 0.03033447265625, 0.058807373046875, 0.036102294921875, 0.055633544921875, 0.07525634765625, 0.086578369140625, 0.086090087890625, 0.030487060546875, 0.001800537109375, -0.07098388671875, -0.09820556640625, -0.02899169921875, -0.053558349609375, -0.077789306640625, -0.018096923828125, 0.046783447265625, 0.120819091796875, 0.1968994140625, 0.192718505859375, 0.170928955078125, 0.228240966796875, 0.202850341796875, 0.143218994140625, 0.1767578125, 0.150665283203125, 0.103668212890625, 0.10107421875, 0.077880859375, 0.03509521484375, -0.03912353515625, -0.04345703125, -0.021881103515625, -0.09051513671875, -0.1024169921875, -0.07733154296875, -0.10015869140625, -0.126373291015625, -0.14178466796875, -0.10406494140625, -0.07568359375, -0.080963134765625, -0.076080322265625, -0.126373291015625, -0.124786376953125, -0.042022705078125, -0.078765869140625, -0.12628173828125, -0.0654296875, -0.062591552734375, -0.0731201171875, -0.033416748046875, -0.00018310546875, 0.02777099609375, 0.016571044921875, 0.060546875, 0.111297607421875, 0.112274169921875, 0.176422119140625, 0.176513671875, 0.13916015625, 0.160980224609375, 0.129608154296875, 0.0814208984375, 0.0892333984375, 0.114410400390625, 0.1002197265625, 0.07806396484375, 0.06915283203125, 0.03765869140625, 0.05810546875, 0.080780029296875, 0.01995849609375, 0.030548095703125, 0.08331298828125, 0.03369140625, -0.018096923828125, -0.008941650390625, -0.024444580078125, -0.059051513671875, -0.074554443359375, -0.10260009765625, -0.1148681640625, -0.093902587890625, -0.074920654296875, -0.0550537109375, -0.07427978515625, -0.11358642578125, -0.087493896484375, -0.081695556640625, -0.148345947265625, -0.160308837890625, -0.12030029296875, -0.132568359375, -0.172576904296875, -0.15130615234375, -0.100616455078125, -0.11102294921875, -0.128936767578125, -0.117645263671875, -0.117340087890625, -0.144439697265625, -0.17120361328125, -0.152923583984375, -0.14068603515625, -0.141448974609375, -0.12872314453125, -0.139892578125, -0.135467529296875, -0.108489990234375, -0.11370849609375, -0.13201904296875, -0.106842041015625, -0.0736083984375, -0.090179443359375, -0.085784912109375, -0.05206298828125, -0.045013427734375, -0.0595703125, -0.033111572265625, 0.05096435546875, 0.062774658203125, 0.028411865234375, 0.062896728515625, 0.08935546875, 0.096221923828125, 0.111419677734375, 0.10797119140625, 0.145233154296875, 0.184722900390625, 0.146026611328125, 0.132080078125, 0.174285888671875, 0.173431396484375, 0.130035400390625, 0.120269775390625, 0.139892578125, 0.13922119140625, 0.12957763671875, 0.109100341796875, 0.085662841796875, 0.093994140625, 0.083526611328125, 0.0277099609375, 0.028350830078125, 0.05755615234375, 0.015045166015625, 0.02264404296875, 0.071044921875, 0.0557861328125, 0.076507568359375, 0.100250244140625, 0.089202880859375, 0.12200927734375, 0.132537841796875, 0.117462158203125, 0.143524169921875, 0.168243408203125, 0.15576171875, 0.125396728515625, 0.11529541015625, 0.103790283203125, 0.072662353515625, 0.0721435546875, 0.08599853515625, 0.1007080078125, 0.11004638671875, 0.0616455078125, 0.03515625, 0.051177978515625, 0.001678466796875, -0.04595947265625, -0.046478271484375, -0.07000732421875, -0.093109130859375, -0.069305419921875, -0.02935791015625, -0.047698974609375, -0.096771240234375, -0.073028564453125, -0.055206298828125, -0.081085205078125, -0.068878173828125, -0.06353759765625, -0.067138671875, -0.05389404296875, -0.050994873046875, -0.060028076171875, -0.06683349609375, -0.0323486328125, -0.00848388671875, -0.02935791015625, -0.045501708984375, -0.046112060546875, -0.01715087890625, -0.007598876953125, -0.057159423828125, -0.06317138671875, -0.057373046875, -0.1085205078125, -0.0994873046875, -0.0782470703125, -0.119537353515625, -0.111358642578125, -0.083343505859375, -0.09002685546875, -0.0958251953125, -0.100677490234375, -0.080657958984375, -0.0738525390625, -0.103668212890625, -0.087860107421875, -0.05670166015625, -0.052581787109375, -0.01361083984375, 0.02984619140625, 0.026763916015625, 0.01654052734375, 0.02197265625, 0.034820556640625, 0.028961181640625, -0.011688232421875, -0.040740966796875, -0.047515869140625, -0.07000732421875, -0.088226318359375, -0.089599609375, -0.073089599609375, -0.06304931640625, -0.074798583984375, -0.04254150390625, 0.005157470703125, 0.018096923828125, 0.040924072265625, 0.058380126953125, 0.05657958984375, 0.07958984375, 0.106414794921875, 0.0928955078125, 0.072479248046875, 0.0799560546875, 0.076019287109375, 0.055908203125, 0.0606689453125, 0.053497314453125, 0.023712158203125, 0.005218505859375, -0.0037841796875, 0.004302978515625, 0.01153564453125, -0.0072021484375, -0.00933837890625, 0.03509521484375, 0.071197509765625, 0.063995361328125, 0.056610107421875, 0.05157470703125, 0.048248291015625, 0.056488037109375, 0.053680419921875, 0.04522705078125, 0.035552978515625, 0.027679443359375, 0.0384521484375, 0.0545654296875, 0.04962158203125, 0.031768798828125, 0.03521728515625, 0.040618896484375, 0.0380859375, 0.039520263671875, 0.020111083984375, 0.015716552734375, 0.02117919921875, -0.010040283203125, -0.015045166015625, 0.006500244140625, 0.003692626953125, 0.008270263671875, 0.027801513671875, 0.053802490234375, 0.049957275390625, 0.017578125, 0.029022216796875, 0.06060791015625, 0.049957275390625\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_16bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_16bit_48000.h}
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_16bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_48000::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_16bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_16bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_16bit_48000::testBuffer} = \{\{0.0, 0.0, 0.0, -3.0517578125e-05, 3.0517578125e-05, 0.0, 6.103515625e-05, 3.0517578125e-05, 0.0, -0.00152587890625, -0.0037841796875, -0.00445556640625, -0.0029296875, -0.001953125, -0.0010986328125, -0.000885009765625, -0.0015869140625, -0.000946044921875, 0.003814697265625, 0.008880615234375, 0.008544921875, 0.001373291015625, -0.005218505859375, -0.00592041015625, -0.000213623046875, 0.00628662109375, 0.008331298828125, 0.00531005859375, 0.001983642578125, 0.002197265625, 0.003021240234375, 0.00146484375, -0.0003662109375, -0.00030517578125, 0.007354736328125, 0.03131103515625, 0.050201416015625, 0.024261474609375, -0.02618408203125, -0.039398193359375, -0.014251708984375, 0.013519287109375, 0.042083740234375, 0.047760009765625, 0.009521484375, -0.014190673828125, 0.01751708984375, 0.03814697265625, 0.003875732421875, -0.02069091796875, 0.01123046875, 0.033111572265625, 0.007598876953125, 0.017059326171875, 0.066558837890625, 0.0506591796875, -0.01678466796875, -0.029083251953125, 0.003204345703125, 0.021026611328125, 0.035736083984375, 0.031890869140625, -0.0257568359375, -0.0556640625, 0.02166748046875, 0.09393310546875, 0.028472900390625, -0.089630126953125, -0.092742919921875, 0.0054931640625, 0.05126953125, -0.007293701171875, -0.070465087890625, -0.0552978515625, -0.005584716796875, -0.0054931640625, -0.043060302734375, -0.0494384765625, -0.045166015625, -0.066802978515625, -0.064605712890625, -0.03546142578125, -0.05303955078125, -0.096771240234375, -0.084228515625, -0.040008544921875, -0.041046142578125, -0.07281494140625, -0.077484130859375, -0.059234619140625, -0.06219482421875, -0.095245361328125, -0.104644775390625, -0.0552978515625, -0.024322509765625, -0.07855224609375, -0.1416015625, -0.117156982421875, -0.034454345703125, -0.00921630859375, -0.08367919921875, -0.141326904296875, -0.083404541015625, 0.0086669921875, 0.001251220703125, -0.074493408203125, -0.067657470703125, 0.009857177734375, -0.01751708984375, -0.1160888671875, -0.08123779296875, 0.0286865234375, 0.023834228515625, -0.0228271484375, -0.007293701171875, 0.003143310546875, -0.000152587890625, 0.002685546875, -0.0128173828125, 0.0001220703125, 0.02496337890625, -0.021148681640625, -0.039947509765625, 0.075347900390625, 0.154296875, 0.061920166015625, -0.032379150390625, 0.009002685546875, 0.074676513671875, 0.06451416015625, 0.038665771484375, 0.058074951171875, 0.076263427734375, 0.065673828125, 0.084228515625, 0.135162353515625, 0.140472412109375, 0.0894775390625, 0.054443359375, 0.06353759765625, 0.0860595703125, 0.12384033203125, 0.16864013671875, 0.14739990234375, 0.08135986328125, 0.09307861328125, 0.180816650390625, 0.24127197265625, 0.236968994140625, 0.181243896484375, 0.09075927734375, -0.000946044921875, -0.029876708984375, 0.03076171875, 0.122344970703125, 0.17926025390625, 0.18585205078125, 0.160125732421875, 0.121917724609375, 0.0552978515625, -0.01513671875, -0.003875732421875, 0.07733154296875, 0.13287353515625, 0.147705078125, 0.14251708984375, 0.0924072265625, 0.01959228515625, -3.0517578125e-05, 0.03533935546875, 0.06378173828125, 0.046356201171875, 0.021026611328125, 0.031951904296875, 0.01239013671875, -0.05462646484375, -0.02325439453125, 0.11676025390625, 0.1571044921875, 0.03369140625, -0.083526611328125, -0.0931396484375, -0.066680908203125, -0.085052490234375, -0.139190673828125, -0.17095947265625, -0.177215576171875, -0.207550048828125, -0.24237060546875, -0.2021484375, -0.080078125, 0.01983642578125, 0.0133056640625, -0.048614501953125, -0.07525634765625, -0.087005615234375, -0.14178466796875, -0.204345703125, -0.2119140625, -0.197479248046875, -0.2066650390625, -0.204254150390625, -0.18341064453125, -0.188232421875, -0.202850341796875, -0.166717529296875, -0.083953857421875, -0.03448486328125, -0.04473876953125, -0.0679931640625, -0.09625244140625, -0.109344482421875, -0.0667724609375, -0.006591796875, 0.0330810546875, 0.07012939453125, 0.063201904296875, -0.051177978515625, -0.2208251953125, -0.326385498046875, -0.35015869140625, -0.35162353515625, -0.32568359375, -0.262115478515625, -0.17431640625, -0.044769287109375, 0.122344970703125, 0.2481689453125, 0.2684326171875, 0.23095703125, 0.192840576171875, 0.147796630859375, 0.086761474609375, -0.00384521484375, -0.10125732421875, -0.1444091796875, -0.115570068359375, -0.058258056640625, -0.027984619140625, -0.01055908203125, 0.035247802734375, 0.095001220703125, 0.13427734375, 0.1390380859375, 0.152313232421875, 0.21356201171875, 0.277099609375, 0.279327392578125, 0.2332763671875, 0.19677734375, 0.18988037109375, 0.194854736328125, 0.1807861328125, 0.122344970703125, 0.052947998046875, 0.0323486328125, 0.014739990234375, -0.04632568359375, -0.076080322265625, -0.0394287109375, 0.003662109375, 0.019012451171875, 0.02838134765625, 0.04583740234375, 0.03631591796875, 0.011016845703125, 0.036468505859375, 0.07733154296875, 0.0614013671875, 0.0079345703125, -0.026885986328125, -0.0228271484375, -0.001983642578125, 0.019775390625, 0.057769775390625, 0.118896484375, 0.183624267578125, 0.226104736328125, 0.2464599609375, 0.270172119140625, 0.2890625, 0.267822265625, 0.201263427734375, 0.125762939453125, 0.0765380859375, 0.061920166015625, 0.06439208984375, 0.047760009765625, -0.0068359375, -0.046234130859375, 0.006744384765625, 0.115814208984375, 0.1375732421875, 0.04473876953125, -0.046905517578125, -0.0953369140625, -0.133514404296875, -0.180084228515625, -0.230133056640625, -0.254058837890625, -0.22821044921875, -0.173309326171875, -0.12713623046875, -0.082305908203125, -0.025299072265625, 0.018310546875, 0.037567138671875, 0.04608154296875, 0.043060302734375, 0.035003662109375, 0.033203125, 0.031463623046875, 0.00933837890625, -0.0299072265625, -0.05133056640625, -0.073974609375, -0.150604248046875, -0.2430419921875, -0.273681640625, -0.258697509765625, -0.2574462890625, -0.261077880859375, -0.231964111328125, -0.210693359375, -0.235565185546875, -0.242828369140625, -0.20452880859375, -0.19964599609375, -0.26898193359375, -0.34588623046875, -0.3634033203125, -0.351837158203125, -0.35791015625, -0.36181640625, -0.343719482421875, -0.305908203125, -0.25054931640625, -0.17315673828125, -0.072357177734375, 0.0245361328125, 0.09521484375, 0.141510009765625, 0.169586181640625, 0.18475341796875, 0.19952392578125, 0.215972900390625, 0.2159423828125, 0.211090087890625, 0.228668212890625, 0.250823974609375, 0.273345947265625, 0.306732177734375, 0.324981689453125, 0.31182861328125, 0.29632568359375, 0.287841796875, 0.252685546875, 0.18682861328125, 0.127899169921875, 0.11199951171875, 0.1424560546875, 0.1658935546875, 0.153472900390625, 0.162506103515625, 0.196380615234375, 0.20623779296875, 0.2103271484375, 0.224578857421875, 0.21392822265625, 0.180084228515625, 0.1671142578125, 0.166046142578125, 0.116546630859375, 0.030670166015625, -0.012908935546875, -0.014678955078125, -0.022430419921875, -0.039886474609375, -0.054779052734375, -0.06024169921875, -0.048248291015625, -0.01617431640625, 0.010467529296875, 0.003692626953125, -0.023162841796875, -0.05780029296875, -0.098724365234375, -0.10809326171875, -0.082489013671875, -0.06134033203125, -0.059539794921875, -0.0728759765625, -0.07415771484375, -0.03515625, 0.0146484375, 0.01239013671875, -0.038665771484375, -0.060791015625, -0.03131103515625, -0.00250244140625, -0.005523681640625, -0.016998291015625, -0.006134033203125, 0.01934814453125, 0.047393798828125, 0.08221435546875, 0.108245849609375, 0.102020263671875, 0.062713623046875, 0.034210205078125, 0.030517578125, 0.0069580078125, -0.04296875, -0.071807861328125, -0.0491943359375, 0.002716064453125, 0.041107177734375, 0.05810546875, 0.053253173828125, 0.0350341796875, 0.026702880859375, 0.0201416015625, -0.000457763671875, -0.02337646484375, -0.0469970703125, -0.087738037109375, -0.12774658203125, -0.127105712890625, -0.10931396484375, -0.1192626953125, -0.102386474609375, -0.021026611328125, 0.038177490234375, 0.034942626953125, 0.031036376953125, 0.042083740234375, 0.037933349609375, 0.019622802734375, -0.0030517578125, -0.024627685546875, -0.02325439453125, 0.00146484375, 0.0152587890625, 0.02923583984375, 0.067779541015625, 0.090057373046875, 0.07781982421875, 0.068328857421875, 0.08221435546875, 0.10498046875, 0.10943603515625, 0.089996337890625, 0.08026123046875, 0.113372802734375, 0.150146484375, 0.138641357421875, 0.109222412109375, 0.107208251953125, 0.11798095703125, 0.114654541015625, 0.10211181640625, 0.09503173828125, 0.0758056640625, 0.060699462890625, 0.084564208984375, 0.10748291015625, 0.09002685546875, 0.0736083984375, 0.092193603515625, 0.107635498046875, 0.10784912109375, 0.127685546875, 0.14788818359375, 0.1387939453125, 0.136199951171875, 0.151611328125, 0.155364990234375, 0.152496337890625, 0.16754150390625, 0.181427001953125, 0.169586181640625, 0.162322998046875, 0.162109375, 0.136627197265625, 0.121673583984375, 0.149261474609375, 0.15789794921875, 0.12591552734375, 0.11029052734375, 0.125213623046875, 0.136444091796875, 0.143524169921875, 0.16168212890625, 0.158599853515625, 0.11553955078125, 0.07843017578125, 0.07415771484375, 0.076812744140625, 0.06414794921875, 0.03802490234375\}, \{0.0, 0.0, 3.0517578125e-05, -3.0517578125e-05, 9.1552734375e-05, -6.103515625e-05, 0.0001220703125, -9.1552734375e-05, 9.1552734375e-05, -0.00067138671875, -0.00177001953125, -0.001922607421875, -0.000244140625, 0.00042724609375, 0.000335693359375, -0.0008544921875, -0.00311279296875, -0.003173828125, 0.00146484375, 0.007049560546875, 0.006805419921875, 0.00018310546875, -0.005279541015625, -0.00360107421875, 0.00238037109375, 0.007568359375, 0.009368896484375, 0.00885009765625, 0.004302978515625, -0.003753662109375, -0.0096435546875, -0.0091552734375, -0.007537841796875, -0.002838134765625, 0.02001953125, 0.04461669921875, 0.027130126953125, -0.0228271484375, -0.0426025390625, -0.022735595703125, 0.00732421875, 0.03759765625, 0.042327880859375, 0.005645751953125, -0.015106201171875, 0.010162353515625, 0.019561767578125, -0.016204833984375, -0.03082275390625, 0.006805419921875, 0.02252197265625, -0.006744384765625, 0.010040283203125, 0.064483642578125, 0.044342041015625, -0.025238037109375, -0.034759521484375, -0.003662109375, 0.011505126953125, 0.02874755859375, 0.03045654296875, -0.0224609375, -0.046356201171875, 0.035888671875, 0.104156494140625, 0.02947998046875, -0.09515380859375, -0.095367431640625, 0.012847900390625, 0.06707763671875, 0.011199951171875, -0.05670166015625, -0.044921875, 0.008392333984375, 0.01495361328125, -0.01702880859375, -0.02484130859375, -0.025604248046875, -0.04046630859375, -0.023712158203125, 0.010284423828125, -0.01641845703125, -0.06744384765625, -0.050018310546875, -0.00732421875, -0.01861572265625, -0.050872802734375, -0.0430908203125, -0.012786865234375, -0.018585205078125, -0.0650634765625, -0.072021484375, -0.008087158203125, 0.0272216796875, -0.0291748046875, -0.091766357421875, -0.064300537109375, 0.0081787109375, 0.0091552734375, -0.073883056640625, -0.11468505859375, -0.036376953125, 0.053924560546875, 0.022674560546875, -0.069366455078125, -0.052764892578125, 0.0396728515625, 0.013153076171875, -0.08868408203125, -0.050689697265625, 0.050872802734375, 0.03717041015625, -0.002349853515625, 0.012451171875, 0.007598876953125, -0.006317138671875, -0.003814697265625, -0.01226806640625, 0.01177978515625, 0.02972412109375, -0.048614501953125, -0.08477783203125, 0.0445556640625, 0.14459228515625, 0.06085205078125, -0.046783447265625, -0.031463623046875, 0.02081298828125, 0.019439697265625, 0.011688232421875, 0.029022216796875, 0.027679443359375, -0.001007080078125, 0.005645751953125, 0.06414794921875, 0.101287841796875, 0.07928466796875, 0.03118896484375, -0.015411376953125, -0.02813720703125, 0.03118896484375, 0.11285400390625, 0.10699462890625, 0.024261474609375, -0.0008544921875, 0.059326171875, 0.1170654296875, 0.14697265625, 0.155426025390625, 0.108612060546875, 0.001495361328125, -0.083892822265625, -0.067413330078125, 0.01776123046875, 0.080780029296875, 0.1019287109375, 0.11871337890625, 0.129180908203125, 0.06622314453125, -0.0565185546875, -0.1072998046875, -0.05718994140625, 0.006439208984375, 0.0701904296875, 0.132110595703125, 0.135711669921875, 0.082366943359375, 0.02880859375, 0.011444091796875, 0.01629638671875, 0.00823974609375, 0.005523681640625, 0.0299072265625, 0.007049560546875, -0.070068359375, -0.05126953125, 0.082977294921875, 0.142974853515625, 0.072174072265625, 0.006866455078125, 0.0137939453125, 0.02203369140625, -0.02984619140625, -0.108062744140625, -0.136810302734375, -0.118927001953125, -0.14764404296875, -0.22454833984375, -0.220672607421875, -0.099395751953125, 0.029510498046875, 0.065032958984375, 0.04144287109375, 0.05908203125, 0.063323974609375, -0.040008544921875, -0.147735595703125, -0.149566650390625, -0.1265869140625, -0.153472900390625, -0.165008544921875, -0.120819091796875, -0.08428955078125, -0.09326171875, -0.099212646484375, -0.058990478515625, 0.0008544921875, 0.034088134765625, 0.015411376953125, -0.031585693359375, -0.03765869140625, -0.015228271484375, -0.00286865234375, 0.062652587890625, 0.17291259765625, 0.189056396484375, 0.09130859375, -0.0301513671875, -0.146331787109375, -0.25439453125, -0.323944091796875, -0.33447265625, -0.308319091796875, -0.263671875, -0.15850830078125, 0.02984619140625, 0.217437744140625, 0.297698974609375, 0.288055419921875, 0.264404296875, 0.235321044921875, 0.1824951171875, 0.07476806640625, -0.06707763671875, -0.144195556640625, -0.132904052734375, -0.10296630859375, -0.088287353515625, -0.067138671875, -0.02252197265625, 0.037017822265625, 0.08343505859375, 0.084869384765625, 0.080352783203125, 0.138031005859375, 0.215118408203125, 0.22509765625, 0.194854736328125, 0.18841552734375, 0.192596435546875, 0.1832275390625, 0.152130126953125, 0.090301513671875, 0.026702880859375, 0.003448486328125, -0.022857666015625, -0.100189208984375, -0.153717041015625, -0.127227783203125, -0.093902587890625, -0.100860595703125, -0.1019287109375, -0.073089599609375, -0.06304931640625, -0.07562255859375, -0.0333251953125, 0.040313720703125, 0.03509521484375, -0.04083251953125, -0.087646484375, -0.08642578125, -0.0819091796875, -0.078399658203125, -0.0452880859375, 0.020233154296875, 0.0819091796875, 0.13067626953125, 0.180419921875, 0.225067138671875, 0.250091552734375, 0.242218017578125, 0.2037353515625, 0.15057373046875, 0.1014404296875, 0.082183837890625, 0.092864990234375, 0.080718994140625, 0.014739990234375, -0.040496826171875, 0.01348876953125, 0.126708984375, 0.137908935546875, 0.0333251953125, -0.056396484375, -0.09442138671875, -0.132598876953125, -0.178192138671875, -0.216033935546875, -0.231109619140625, -0.199737548828125, -0.14239501953125, -0.092559814453125, -0.037109375, 0.025787353515625, 0.0687255859375, 0.089813232421875, 0.106109619140625, 0.107208251953125, 0.09088134765625, 0.0889892578125, 0.103607177734375, 0.09326171875, 0.05572509765625, 0.03228759765625, 0.02459716796875, -0.031585693359375, -0.1376953125, -0.195892333984375, -0.191925048828125, -0.204864501953125, -0.2216796875, -0.19268798828125, -0.16595458984375, -0.179595947265625, -0.178253173828125, -0.133453369140625, -0.121246337890625, -0.193023681640625, -0.277191162109375, -0.302947998046875, -0.302337646484375, -0.3109130859375, -0.3212890625, -0.3203125, -0.298675537109375, -0.26806640625, -0.223907470703125, -0.1361083984375, -0.03192138671875, 0.059326171875, 0.1324462890625, 0.174652099609375, 0.205780029296875, 0.236663818359375, 0.243499755859375, 0.224945068359375, 0.218841552734375, 0.238616943359375, 0.2457275390625, 0.24761962890625, 0.278106689453125, 0.297271728515625, 0.2808837890625, 0.266754150390625, 0.26373291015625, 0.2393798828125, 0.181396484375, 0.11865234375, 0.0947265625, 0.11846923828125, 0.133819580078125, 0.113128662109375, 0.107025146484375, 0.130096435546875, 0.136260986328125, 0.129180908203125, 0.132232666015625, 0.120269775390625, 0.0999755859375, 0.10845947265625, 0.117919921875, 0.0711669921875, -0.012908935546875, -0.05902099609375, -0.0595703125, -0.07958984375, -0.126373291015625, -0.15728759765625, -0.1663818359375, -0.154449462890625, -0.1175537109375, -0.085662841796875, -0.089019775390625, -0.10626220703125, -0.120391845703125, -0.150604248046875, -0.1820068359375, -0.173614501953125, -0.1453857421875, -0.13580322265625, -0.150634765625, -0.15509033203125, -0.11114501953125, -0.054534912109375, -0.053497314453125, -0.0948486328125, -0.109375, -0.0792236328125, -0.0484619140625, -0.042633056640625, -0.0447998046875, -0.033660888671875, -0.009063720703125, 0.02740478515625, 0.075653076171875, 0.112945556640625, 0.10479736328125, 0.0648193359375, 0.048431396484375, 0.0660400390625, 0.057769775390625, 0.004791259765625, -0.03753662109375, -0.02740478515625, 0.0211181640625, 0.0697021484375, 0.0985107421875, 0.09600830078125, 0.06591796875, 0.0494384765625, 0.0621337890625, 0.059326171875, 0.035064697265625, 0.0185546875, -0.008026123046875, -0.05322265625, -0.07183837890625, -0.057342529296875, -0.054656982421875, -0.04119873046875, 0.02783203125, 0.088104248046875, 0.092437744140625, 0.104949951171875, 0.123748779296875, 0.097991943359375, 0.068817138671875, 0.067230224609375, 0.052337646484375, 0.022918701171875, 0.02813720703125, 0.076690673828125, 0.113677978515625, 0.113067626953125, 0.116241455078125, 0.135589599609375, 0.13128662109375, 0.113922119140625, 0.137237548828125, 0.16937255859375, 0.140228271484375, 0.094146728515625, 0.117706298828125, 0.1761474609375, 0.178375244140625, 0.14324951171875, 0.139068603515625, 0.150177001953125, 0.13043212890625, 0.100128173828125, 0.09393310546875, 0.0870361328125, 0.05010986328125, 0.0272216796875, 0.05023193359375, 0.07421875, 0.06732177734375, 0.06121826171875, 0.073760986328125, 0.083984375, 0.088104248046875, 0.09515380859375, 0.095855712890625, 0.090545654296875, 0.081298828125, 0.0677490234375, 0.0736083984375, 0.103057861328125, 0.115020751953125, 0.101776123046875, 0.100189208984375, 0.11822509765625, 0.10791015625, 0.0548095703125, 0.038787841796875, 0.07855224609375, 0.075225830078125, 0.020111083984375, 0.00909423828125, 0.0477294921875, 0.076263427734375, 0.08416748046875, 0.090301513671875, 0.078094482421875, 0.028839111328125, -0.02044677734375, -0.02392578125, 0.000244140625, 0.0009765625, -0.0380859375\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_16bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_16bit_48000.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_16bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, 0.0, 0.0, -3.0517578125e-05, 3.0517578125e-05, 0.0, 6.103515625e-05, 3.0517578125e-05, 0.0, -0.00152587890625, -0.0037841796875, -0.00445556640625, -0.0029296875, -0.001953125, -0.0010986328125, -0.000885009765625, -0.0015869140625, -0.000946044921875, 0.003814697265625, 0.008880615234375, 0.008544921875, 0.001373291015625, -0.005218505859375, -0.00592041015625, -0.000213623046875, 0.00628662109375, 0.008331298828125, 0.00531005859375, 0.001983642578125, 0.002197265625, 0.003021240234375, 0.00146484375, -0.0003662109375, -0.00030517578125, 0.007354736328125, 0.03131103515625, 0.050201416015625, 0.024261474609375, -0.02618408203125, -0.039398193359375, -0.014251708984375, 0.013519287109375, 0.042083740234375, 0.047760009765625, 0.009521484375, -0.014190673828125, 0.01751708984375, 0.03814697265625, 0.003875732421875, -0.02069091796875, 0.01123046875, 0.033111572265625, 0.007598876953125, 0.017059326171875, 0.066558837890625, 0.0506591796875, -0.01678466796875, -0.029083251953125, 0.003204345703125, 0.021026611328125, 0.035736083984375, 0.031890869140625, -0.0257568359375, -0.0556640625, 0.02166748046875, 0.09393310546875, 0.028472900390625, -0.089630126953125, -0.092742919921875, 0.0054931640625, 0.05126953125, -0.007293701171875, -0.070465087890625, -0.0552978515625, -0.005584716796875, -0.0054931640625, -0.043060302734375, -0.0494384765625, -0.045166015625, -0.066802978515625, -0.064605712890625, -0.03546142578125, -0.05303955078125, -0.096771240234375, -0.084228515625, -0.040008544921875, -0.041046142578125, -0.07281494140625, -0.077484130859375, -0.059234619140625, -0.06219482421875, -0.095245361328125, -0.104644775390625, -0.0552978515625, -0.024322509765625, -0.07855224609375, -0.1416015625, -0.117156982421875, -0.034454345703125, -0.00921630859375, -0.08367919921875, -0.141326904296875, -0.083404541015625, 0.0086669921875, 0.001251220703125, -0.074493408203125, -0.067657470703125, 0.009857177734375, -0.01751708984375, -0.1160888671875, -0.08123779296875, 0.0286865234375, 0.023834228515625, -0.0228271484375, -0.007293701171875, 0.003143310546875, -0.000152587890625, 0.002685546875, -0.0128173828125, 0.0001220703125, 0.02496337890625, -0.021148681640625, -0.039947509765625, 0.075347900390625, 0.154296875, 0.061920166015625, -0.032379150390625, 0.009002685546875, 0.074676513671875, 0.06451416015625, 0.038665771484375, 0.058074951171875, 0.076263427734375, 0.065673828125, 0.084228515625, 0.135162353515625, 0.140472412109375, 0.0894775390625, 0.054443359375, 0.06353759765625, 0.0860595703125, 0.12384033203125, 0.16864013671875, 0.14739990234375, 0.08135986328125, 0.09307861328125, 0.180816650390625, 0.24127197265625, 0.236968994140625, 0.181243896484375, 0.09075927734375, -0.000946044921875, -0.029876708984375, 0.03076171875, 0.122344970703125, 0.17926025390625, 0.18585205078125, 0.160125732421875, 0.121917724609375, 0.0552978515625, -0.01513671875, -0.003875732421875, 0.07733154296875, 0.13287353515625, 0.147705078125, 0.14251708984375, 0.0924072265625, 0.01959228515625, -3.0517578125e-05, 0.03533935546875, 0.06378173828125, 0.046356201171875, 0.021026611328125, 0.031951904296875, 0.01239013671875, -0.05462646484375, -0.02325439453125, 0.11676025390625, 0.1571044921875, 0.03369140625, -0.083526611328125, -0.0931396484375, -0.066680908203125, -0.085052490234375, -0.139190673828125, -0.17095947265625, -0.177215576171875, -0.207550048828125, -0.24237060546875, -0.2021484375, -0.080078125, 0.01983642578125, 0.0133056640625, -0.048614501953125, -0.07525634765625, -0.087005615234375, -0.14178466796875, -0.204345703125, -0.2119140625, -0.197479248046875, -0.2066650390625, -0.204254150390625, -0.18341064453125, -0.188232421875, -0.202850341796875, -0.166717529296875, -0.083953857421875, -0.03448486328125, -0.04473876953125, -0.0679931640625, -0.09625244140625, -0.109344482421875, -0.0667724609375, -0.006591796875, 0.0330810546875, 0.07012939453125, 0.063201904296875, -0.051177978515625, -0.2208251953125, -0.326385498046875, -0.35015869140625, -0.35162353515625, -0.32568359375, -0.262115478515625, -0.17431640625, -0.044769287109375, 0.122344970703125, 0.2481689453125, 0.2684326171875, 0.23095703125, 0.192840576171875, 0.147796630859375, 0.086761474609375, -0.00384521484375, -0.10125732421875, -0.1444091796875, -0.115570068359375, -0.058258056640625, -0.027984619140625, -0.01055908203125, 0.035247802734375, 0.095001220703125, 0.13427734375, 0.1390380859375, 0.152313232421875, 0.21356201171875, 0.277099609375, 0.279327392578125, 0.2332763671875, 0.19677734375, 0.18988037109375, 0.194854736328125, 0.1807861328125, 0.122344970703125, 0.052947998046875, 0.0323486328125, 0.014739990234375, -0.04632568359375, -0.076080322265625, -0.0394287109375, 0.003662109375, 0.019012451171875, 0.02838134765625, 0.04583740234375, 0.03631591796875, 0.011016845703125, 0.036468505859375, 0.07733154296875, 0.0614013671875, 0.0079345703125, -0.026885986328125, -0.0228271484375, -0.001983642578125, 0.019775390625, 0.057769775390625, 0.118896484375, 0.183624267578125, 0.226104736328125, 0.2464599609375, 0.270172119140625, 0.2890625, 0.267822265625, 0.201263427734375, 0.125762939453125, 0.0765380859375, 0.061920166015625, 0.06439208984375, 0.047760009765625, -0.0068359375, -0.046234130859375, 0.006744384765625, 0.115814208984375, 0.1375732421875, 0.04473876953125, -0.046905517578125, -0.0953369140625, -0.133514404296875, -0.180084228515625, -0.230133056640625, -0.254058837890625, -0.22821044921875, -0.173309326171875, -0.12713623046875, -0.082305908203125, -0.025299072265625, 0.018310546875, 0.037567138671875, 0.04608154296875, 0.043060302734375, 0.035003662109375, 0.033203125, 0.031463623046875, 0.00933837890625, -0.0299072265625, -0.05133056640625, -0.073974609375, -0.150604248046875, -0.2430419921875, -0.273681640625, -0.258697509765625, -0.2574462890625, -0.261077880859375, -0.231964111328125, -0.210693359375, -0.235565185546875, -0.242828369140625, -0.20452880859375, -0.19964599609375, -0.26898193359375, -0.34588623046875, -0.3634033203125, -0.351837158203125, -0.35791015625, -0.36181640625, -0.343719482421875, -0.305908203125, -0.25054931640625, -0.17315673828125, -0.072357177734375, 0.0245361328125, 0.09521484375, 0.141510009765625, 0.169586181640625, 0.18475341796875, 0.19952392578125, 0.215972900390625, 0.2159423828125, 0.211090087890625, 0.228668212890625, 0.250823974609375, 0.273345947265625, 0.306732177734375, 0.324981689453125, 0.31182861328125, 0.29632568359375, 0.287841796875, 0.252685546875, 0.18682861328125, 0.127899169921875, 0.11199951171875, 0.1424560546875, 0.1658935546875, 0.153472900390625, 0.162506103515625, 0.196380615234375, 0.20623779296875, 0.2103271484375, 0.224578857421875, 0.21392822265625, 0.180084228515625, 0.1671142578125, 0.166046142578125, 0.116546630859375, 0.030670166015625, -0.012908935546875, -0.014678955078125, -0.022430419921875, -0.039886474609375, -0.054779052734375, -0.06024169921875, -0.048248291015625, -0.01617431640625, 0.010467529296875, 0.003692626953125, -0.023162841796875, -0.05780029296875, -0.098724365234375, -0.10809326171875, -0.082489013671875, -0.06134033203125, -0.059539794921875, -0.0728759765625, -0.07415771484375, -0.03515625, 0.0146484375, 0.01239013671875, -0.038665771484375, -0.060791015625, -0.03131103515625, -0.00250244140625, -0.005523681640625, -0.016998291015625, -0.006134033203125, 0.01934814453125, 0.047393798828125, 0.08221435546875, 0.108245849609375, 0.102020263671875, 0.062713623046875, 0.034210205078125, 0.030517578125, 0.0069580078125, -0.04296875, -0.071807861328125, -0.0491943359375, 0.002716064453125, 0.041107177734375, 0.05810546875, 0.053253173828125, 0.0350341796875, 0.026702880859375, 0.0201416015625, -0.000457763671875, -0.02337646484375, -0.0469970703125, -0.087738037109375, -0.12774658203125, -0.127105712890625, -0.10931396484375, -0.1192626953125, -0.102386474609375, -0.021026611328125, 0.038177490234375, 0.034942626953125, 0.031036376953125, 0.042083740234375, 0.037933349609375, 0.019622802734375, -0.0030517578125, -0.024627685546875, -0.02325439453125, 0.00146484375, 0.0152587890625, 0.02923583984375, 0.067779541015625, 0.090057373046875, 0.07781982421875, 0.068328857421875, 0.08221435546875, 0.10498046875, 0.10943603515625, 0.089996337890625, 0.08026123046875, 0.113372802734375, 0.150146484375, 0.138641357421875, 0.109222412109375, 0.107208251953125, 0.11798095703125, 0.114654541015625, 0.10211181640625, 0.09503173828125, 0.0758056640625, 0.060699462890625, 0.084564208984375, 0.10748291015625, 0.09002685546875, 0.0736083984375, 0.092193603515625, 0.107635498046875, 0.10784912109375, 0.127685546875, 0.14788818359375, 0.1387939453125, 0.136199951171875, 0.151611328125, 0.155364990234375, 0.152496337890625, 0.16754150390625, 0.181427001953125, 0.169586181640625, 0.162322998046875, 0.162109375, 0.136627197265625, 0.121673583984375, 0.149261474609375, 0.15789794921875, 0.12591552734375, 0.11029052734375, 0.125213623046875, 0.136444091796875, 0.143524169921875, 0.16168212890625, 0.158599853515625, 0.11553955078125, 0.07843017578125, 0.07415771484375, 0.076812744140625, 0.06414794921875, 0.03802490234375\}, \{0.0, 0.0, 3.0517578125e-05, -3.0517578125e-05, 9.1552734375e-05, -6.103515625e-05, 0.0001220703125, -9.1552734375e-05, 9.1552734375e-05, -0.00067138671875, -0.00177001953125, -0.001922607421875, -0.000244140625, 0.00042724609375, 0.000335693359375, -0.0008544921875, -0.00311279296875, -0.003173828125, 0.00146484375, 0.007049560546875, 0.006805419921875, 0.00018310546875, -0.005279541015625, -0.00360107421875, 0.00238037109375, 0.007568359375, 0.009368896484375, 0.00885009765625, 0.004302978515625, -0.003753662109375, -0.0096435546875, -0.0091552734375, -0.007537841796875, -0.002838134765625, 0.02001953125, 0.04461669921875, 0.027130126953125, -0.0228271484375, -0.0426025390625, -0.022735595703125, 0.00732421875, 0.03759765625, 0.042327880859375, 0.005645751953125, -0.015106201171875, 0.010162353515625, 0.019561767578125, -0.016204833984375, -0.03082275390625, 0.006805419921875, 0.02252197265625, -0.006744384765625, 0.010040283203125, 0.064483642578125, 0.044342041015625, -0.025238037109375, -0.034759521484375, -0.003662109375, 0.011505126953125, 0.02874755859375, 0.03045654296875, -0.0224609375, -0.046356201171875, 0.035888671875, 0.104156494140625, 0.02947998046875, -0.09515380859375, -0.095367431640625, 0.012847900390625, 0.06707763671875, 0.011199951171875, -0.05670166015625, -0.044921875, 0.008392333984375, 0.01495361328125, -0.01702880859375, -0.02484130859375, -0.025604248046875, -0.04046630859375, -0.023712158203125, 0.010284423828125, -0.01641845703125, -0.06744384765625, -0.050018310546875, -0.00732421875, -0.01861572265625, -0.050872802734375, -0.0430908203125, -0.012786865234375, -0.018585205078125, -0.0650634765625, -0.072021484375, -0.008087158203125, 0.0272216796875, -0.0291748046875, -0.091766357421875, -0.064300537109375, 0.0081787109375, 0.0091552734375, -0.073883056640625, -0.11468505859375, -0.036376953125, 0.053924560546875, 0.022674560546875, -0.069366455078125, -0.052764892578125, 0.0396728515625, 0.013153076171875, -0.08868408203125, -0.050689697265625, 0.050872802734375, 0.03717041015625, -0.002349853515625, 0.012451171875, 0.007598876953125, -0.006317138671875, -0.003814697265625, -0.01226806640625, 0.01177978515625, 0.02972412109375, -0.048614501953125, -0.08477783203125, 0.0445556640625, 0.14459228515625, 0.06085205078125, -0.046783447265625, -0.031463623046875, 0.02081298828125, 0.019439697265625, 0.011688232421875, 0.029022216796875, 0.027679443359375, -0.001007080078125, 0.005645751953125, 0.06414794921875, 0.101287841796875, 0.07928466796875, 0.03118896484375, -0.015411376953125, -0.02813720703125, 0.03118896484375, 0.11285400390625, 0.10699462890625, 0.024261474609375, -0.0008544921875, 0.059326171875, 0.1170654296875, 0.14697265625, 0.155426025390625, 0.108612060546875, 0.001495361328125, -0.083892822265625, -0.067413330078125, 0.01776123046875, 0.080780029296875, 0.1019287109375, 0.11871337890625, 0.129180908203125, 0.06622314453125, -0.0565185546875, -0.1072998046875, -0.05718994140625, 0.006439208984375, 0.0701904296875, 0.132110595703125, 0.135711669921875, 0.082366943359375, 0.02880859375, 0.011444091796875, 0.01629638671875, 0.00823974609375, 0.005523681640625, 0.0299072265625, 0.007049560546875, -0.070068359375, -0.05126953125, 0.082977294921875, 0.142974853515625, 0.072174072265625, 0.006866455078125, 0.0137939453125, 0.02203369140625, -0.02984619140625, -0.108062744140625, -0.136810302734375, -0.118927001953125, -0.14764404296875, -0.22454833984375, -0.220672607421875, -0.099395751953125, 0.029510498046875, 0.065032958984375, 0.04144287109375, 0.05908203125, 0.063323974609375, -0.040008544921875, -0.147735595703125, -0.149566650390625, -0.1265869140625, -0.153472900390625, -0.165008544921875, -0.120819091796875, -0.08428955078125, -0.09326171875, -0.099212646484375, -0.058990478515625, 0.0008544921875, 0.034088134765625, 0.015411376953125, -0.031585693359375, -0.03765869140625, -0.015228271484375, -0.00286865234375, 0.062652587890625, 0.17291259765625, 0.189056396484375, 0.09130859375, -0.0301513671875, -0.146331787109375, -0.25439453125, -0.323944091796875, -0.33447265625, -0.308319091796875, -0.263671875, -0.15850830078125, 0.02984619140625, 0.217437744140625, 0.297698974609375, 0.288055419921875, 0.264404296875, 0.235321044921875, 0.1824951171875, 0.07476806640625, -0.06707763671875, -0.144195556640625, -0.132904052734375, -0.10296630859375, -0.088287353515625, -0.067138671875, -0.02252197265625, 0.037017822265625, 0.08343505859375, 0.084869384765625, 0.080352783203125, 0.138031005859375, 0.215118408203125, 0.22509765625, 0.194854736328125, 0.18841552734375, 0.192596435546875, 0.1832275390625, 0.152130126953125, 0.090301513671875, 0.026702880859375, 0.003448486328125, -0.022857666015625, -0.100189208984375, -0.153717041015625, -0.127227783203125, -0.093902587890625, -0.100860595703125, -0.1019287109375, -0.073089599609375, -0.06304931640625, -0.07562255859375, -0.0333251953125, 0.040313720703125, 0.03509521484375, -0.04083251953125, -0.087646484375, -0.08642578125, -0.0819091796875, -0.078399658203125, -0.0452880859375, 0.020233154296875, 0.0819091796875, 0.13067626953125, 0.180419921875, 0.225067138671875, 0.250091552734375, 0.242218017578125, 0.2037353515625, 0.15057373046875, 0.1014404296875, 0.082183837890625, 0.092864990234375, 0.080718994140625, 0.014739990234375, -0.040496826171875, 0.01348876953125, 0.126708984375, 0.137908935546875, 0.0333251953125, -0.056396484375, -0.09442138671875, -0.132598876953125, -0.178192138671875, -0.216033935546875, -0.231109619140625, -0.199737548828125, -0.14239501953125, -0.092559814453125, -0.037109375, 0.025787353515625, 0.0687255859375, 0.089813232421875, 0.106109619140625, 0.107208251953125, 0.09088134765625, 0.0889892578125, 0.103607177734375, 0.09326171875, 0.05572509765625, 0.03228759765625, 0.02459716796875, -0.031585693359375, -0.1376953125, -0.195892333984375, -0.191925048828125, -0.204864501953125, -0.2216796875, -0.19268798828125, -0.16595458984375, -0.179595947265625, -0.178253173828125, -0.133453369140625, -0.121246337890625, -0.193023681640625, -0.277191162109375, -0.302947998046875, -0.302337646484375, -0.3109130859375, -0.3212890625, -0.3203125, -0.298675537109375, -0.26806640625, -0.223907470703125, -0.1361083984375, -0.03192138671875, 0.059326171875, 0.1324462890625, 0.174652099609375, 0.205780029296875, 0.236663818359375, 0.243499755859375, 0.224945068359375, 0.218841552734375, 0.238616943359375, 0.2457275390625, 0.24761962890625, 0.278106689453125, 0.297271728515625, 0.2808837890625, 0.266754150390625, 0.26373291015625, 0.2393798828125, 0.181396484375, 0.11865234375, 0.0947265625, 0.11846923828125, 0.133819580078125, 0.113128662109375, 0.107025146484375, 0.130096435546875, 0.136260986328125, 0.129180908203125, 0.132232666015625, 0.120269775390625, 0.0999755859375, 0.10845947265625, 0.117919921875, 0.0711669921875, -0.012908935546875, -0.05902099609375, -0.0595703125, -0.07958984375, -0.126373291015625, -0.15728759765625, -0.1663818359375, -0.154449462890625, -0.1175537109375, -0.085662841796875, -0.089019775390625, -0.10626220703125, -0.120391845703125, -0.150604248046875, -0.1820068359375, -0.173614501953125, -0.1453857421875, -0.13580322265625, -0.150634765625, -0.15509033203125, -0.11114501953125, -0.054534912109375, -0.053497314453125, -0.0948486328125, -0.109375, -0.0792236328125, -0.0484619140625, -0.042633056640625, -0.0447998046875, -0.033660888671875, -0.009063720703125, 0.02740478515625, 0.075653076171875, 0.112945556640625, 0.10479736328125, 0.0648193359375, 0.048431396484375, 0.0660400390625, 0.057769775390625, 0.004791259765625, -0.03753662109375, -0.02740478515625, 0.0211181640625, 0.0697021484375, 0.0985107421875, 0.09600830078125, 0.06591796875, 0.0494384765625, 0.0621337890625, 0.059326171875, 0.035064697265625, 0.0185546875, -0.008026123046875, -0.05322265625, -0.07183837890625, -0.057342529296875, -0.054656982421875, -0.04119873046875, 0.02783203125, 0.088104248046875, 0.092437744140625, 0.104949951171875, 0.123748779296875, 0.097991943359375, 0.068817138671875, 0.067230224609375, 0.052337646484375, 0.022918701171875, 0.02813720703125, 0.076690673828125, 0.113677978515625, 0.113067626953125, 0.116241455078125, 0.135589599609375, 0.13128662109375, 0.113922119140625, 0.137237548828125, 0.16937255859375, 0.140228271484375, 0.094146728515625, 0.117706298828125, 0.1761474609375, 0.178375244140625, 0.14324951171875, 0.139068603515625, 0.150177001953125, 0.13043212890625, 0.100128173828125, 0.09393310546875, 0.0870361328125, 0.05010986328125, 0.0272216796875, 0.05023193359375, 0.07421875, 0.06732177734375, 0.06121826171875, 0.073760986328125, 0.083984375, 0.088104248046875, 0.09515380859375, 0.095855712890625, 0.090545654296875, 0.081298828125, 0.0677490234375, 0.0736083984375, 0.103057861328125, 0.115020751953125, 0.101776123046875, 0.100189208984375, 0.11822509765625, 0.10791015625, 0.0548095703125, 0.038787841796875, 0.07855224609375, 0.075225830078125, 0.020111083984375, 0.00909423828125, 0.0477294921875, 0.076263427734375, 0.08416748046875, 0.090301513671875, 0.078094482421875, 0.028839111328125, -0.02044677734375, -0.02392578125, 0.000244140625, 0.0009765625, -0.0380859375\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_24bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_24bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_24bit_44100.h}
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_24bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_44100::bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_24bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_24bit_44100::testBuffer} = \{\{0.0, 2.384185791015625e-07, 1.7881393432617188e-06, 5.4836273193359375e-06, 1.3232231140136719e-05, 2.467632293701172e-05, 4.1961669921875e-05, 6.413459777832031e-05, -0.0005469322204589844, -0.0027649402618408203, -0.001909017562866211, 0.0035326480865478516, 0.0028171539306640625, 0.000813603401184082, 0.00023508071899414062, -0.0021113157272338867, 0.0001468658447265625, 0.014778494834899902, 0.04538834095001221, 0.04520773887634277, -0.004081845283508301, -0.06305968761444092, -0.0665360689163208, -0.029284119606018066, -0.024863362312316895, -0.01780259609222412, -0.013840913772583008, 0.019315004348754883, 0.08567023277282715, 0.04245483875274658, -0.04147696495056152, -0.02841663360595703, 0.009694337844848633, 0.01996481418609619, -0.00319063663482666, -0.053113460540771484, -0.027323126792907715, 0.06642353534698486, 0.10269403457641602, 0.10253250598907471, 0.08760249614715576, 0.03816401958465576, 0.05413031578063965, 0.08223843574523926, 0.05015301704406738, 0.02655482292175293, 0.0518268346786499, 0.05460524559020996, -0.000580906867980957, 0.0395054817199707, 0.10501348972320557, 0.057415008544921875, 0.013211846351623535, 0.034859538078308105, 0.05507814884185791, 0.04670369625091553, -0.01683640480041504, -0.09157049655914307, -0.08178138732910156, 0.003289341926574707, 0.04446220397949219, -0.0565570592880249, -0.13708782196044922, -0.08847522735595703, -0.02224898338317871, -0.015274286270141602, -0.028183579444885254, -0.03865182399749756, -0.05581164360046387, -0.043233394622802734, -0.02816152572631836, -0.01761162281036377, -0.033526062965393066, -0.08275163173675537, -0.10685598850250244, -0.1034555435180664, -0.11973357200622559, -0.09033203125, -0.04437124729156494, -0.09464144706726074, -0.1173853874206543, -0.10559892654418945, -0.08117079734802246, -0.0644904375076294, -0.12826251983642578, -0.15485632419586182, -0.0441133975982666, 0.023441195487976074, -0.0313950777053833, -0.010845184326171875, 0.004209995269775391, -0.04794716835021973, -0.09660530090332031, -0.07935786247253418, 0.022089362144470215, 0.06454586982727051, 0.006242275238037109, -0.053893327713012695, 0.009267091751098633, 0.0192720890045166, -0.12457668781280518, -0.16945278644561768, -0.06906521320343018, -0.018019914627075195, -0.00901186466217041, 0.04090762138366699, 0.05578315258026123, 0.04540598392486572, -0.017262578010559082, -0.09481668472290039, -0.09463560581207275, -0.0850372314453125, -0.07044601440429688, 0.044732093811035156, 0.14043903350830078, 0.0615311861038208, -0.0017768144607543945, 0.050705790519714355, 0.051418185234069824, -0.02617955207824707, 0.0013318061828613281, 0.10370314121246338, 0.12050795555114746, 0.1356261968612671, 0.1976931095123291, 0.14523100852966309, -0.010580658912658691, -0.0808025598526001, -0.025513291358947754, 0.07318198680877686, 0.11440527439117432, 0.14054787158966064, 0.19859600067138672, 0.226037859916687, 0.25968968868255615, 0.27517223358154297, 0.21891403198242188, 0.17249858379364014, 0.10510575771331787, 0.021207571029663086, 0.03359854221343994, 0.11546945571899414, 0.16277778148651123, 0.13610899448394775, 0.11561858654022217, 0.15818476676940918, 0.15215349197387695, 0.003849506378173828, -0.030636906623840332, 0.13052606582641602, 0.18443167209625244, 0.17312121391296387, 0.15424621105194092, 0.0742192268371582, 0.051267147064208984, 0.038919806480407715, 0.022106051445007324, 0.012888550758361816, -0.007709026336669922, 0.029566526412963867, 0.030662059783935547, -0.027154207229614258, 0.040636539459228516, 0.16303539276123047, 0.11336028575897217, -0.029920458793640137, -0.07883155345916748, -0.053902268409729004, -0.06685054302215576, -0.11553120613098145, -0.14421296119689941, -0.15514814853668213, -0.23572230339050293, -0.33848822116851807, -0.3083235025405884, -0.2027122974395752, -0.13567590713500977, -0.1538301706314087, -0.16901659965515137, -0.14754056930541992, -0.18767130374908447, -0.2352076768875122, -0.22752869129180908, -0.19818603992462158, -0.1912686824798584, -0.1811293363571167, -0.15598833560943604, -0.15092182159423828, -0.13190996646881104, -0.09050929546356201, -0.05414414405822754, -0.021764397621154785, -0.01615750789642334, -0.016031503677368164, 0.02736032009124756, 0.05744445323944092, 0.10349833965301514, 0.17580628395080566, 0.17315220832824707, 0.08343183994293213, -0.09277796745300293, -0.24751710891723633, -0.3203364610671997, -0.36222290992736816, -0.3456164598464966, -0.29457712173461914, -0.2208174467086792, -0.07722604274749756, 0.07686781883239746, 0.10222053527832031, 0.08138704299926758, 0.07167577743530273, 0.006896376609802246, -0.03144514560699463, -0.06453490257263184, -0.0998678207397461, -0.11557626724243164, -0.08657562732696533, -0.011487841606140137, 0.024655699729919434, 0.07710301876068115, 0.19258737564086914, 0.2757699489593506, 0.24917995929718018, 0.2547190189361572, 0.3233884572982788, 0.3651694059371948, 0.3467220067977905, 0.26609206199645996, 0.21415364742279053, 0.1451643705368042, 0.028246164321899414, -0.05506265163421631, -0.09485781192779541, -0.10834360122680664, -0.09765219688415527, -0.11472666263580322, -0.10827720165252686, -0.05115628242492676, -0.011539101600646973, 0.012971639633178711, 0.03045511245727539, 0.04645514488220215, 0.0342707633972168, 0.0549466609954834, 0.16332507133483887, 0.24224793910980225, 0.18761515617370605, 0.11179554462432861, 0.09352076053619385, 0.09492385387420654, 0.11606824398040771, 0.1413419246673584, 0.17592430114746094, 0.2018730640411377, 0.23069274425506592, 0.25766170024871826, 0.2663611173629761, 0.21774756908416748, 0.057196974754333496, -0.08907783031463623, -0.12986385822296143, -0.10977804660797119, -0.04542100429534912, -0.009626269340515137, -0.03966021537780762, -0.02337789535522461, 0.06328558921813965, 0.1187981367111206, 0.10761165618896484, 0.07837212085723877, 0.05231678485870361, 0.02169060707092285, -0.03322577476501465, -0.11377441883087158, -0.15057945251464844, -0.14534151554107666, -0.18364381790161133, -0.21993911266326904, -0.1961129903793335, -0.1525101661682129, -0.10219216346740723, -0.06866455078125, -0.07127976417541504, -0.08443140983581543, -0.07552826404571533, -0.049929141998291016, -0.023989200592041016, 0.013609647750854492, 0.0475459098815918, 0.02447795867919922, -0.04460704326629639, -0.0887378454208374, -0.11880159378051758, -0.16825449466705322, -0.188887357711792, -0.16724884510040283, -0.18829452991485596, -0.2464510202407837, -0.2575598955154419, -0.25703179836273193, -0.32140886783599854, -0.4187908172607422, -0.46495234966278076, -0.44499170780181885, -0.40246832370758057, -0.36982977390289307, -0.3331559896469116, -0.28196287155151367, -0.21289277076721191, -0.1061016321182251, 0.023185014724731445, 0.1438899040222168, 0.22921299934387207, 0.2681858539581299, 0.2650902271270752, 0.2512338161468506, 0.23415231704711914, 0.185766339302063, 0.1503525972366333, 0.14675557613372803, 0.14294695854187012, 0.16180360317230225, 0.2102292776107788, 0.23564505577087402, 0.23043131828308105, 0.2227400541305542, 0.1978968381881714, 0.16218268871307373, 0.13503003120422363, 0.1386406421661377, 0.1782851219177246, 0.18684566020965576, 0.1817244291305542, 0.2154783010482788, 0.2369520664215088, 0.23360908031463623, 0.22561335563659668, 0.19286930561065674, 0.1471778154373169, 0.12532472610473633, 0.1119149923324585, 0.05721092224121094, -0.02198469638824463, -0.04966306686401367, -0.038004159927368164, -0.04068195819854736, -0.04813385009765625, -0.033611416816711426, 0.0015609264373779297, 0.03492474555969238, 0.062181949615478516, 0.05607593059539795, 0.02305746078491211, -0.015040397644042969, -0.058673977851867676, -0.06413936614990234, -0.033275723457336426, -0.023733139038085938, -0.051869869232177734, -0.062258124351501465, -0.02007758617401123, 0.0335007905960083, 0.018722057342529297, -0.045569419860839844, -0.05470895767211914, -0.013467192649841309, 0.003751397132873535, -0.015442371368408203, -0.015690922737121582, -0.0004124641418457031, 0.014282703399658203, 0.04862391948699951, 0.08602631092071533, 0.08928334712982178, 0.04978299140930176, 0.027298450469970703, 0.02523481845855713, -0.008887529373168945, -0.0626990795135498, -0.07338690757751465, -0.020415782928466797, 0.02891695499420166, 0.028627634048461914, 0.0006459951400756836, -0.02116239070892334, -0.02348458766937256, -0.020406246185302734, -0.025342345237731934, -0.0307157039642334, -0.05211818218231201, -0.09596836566925049, -0.10975241661071777, -0.11185181140899658, -0.13977432250976562, -0.12009251117706299, -0.033278465270996094, 0.02582836151123047, 0.025653958320617676, 0.024453401565551758, 0.027688980102539062, 0.017926692962646484, -0.003493070602416992, -0.03810405731201172, -0.05226755142211914, -0.03413844108581543, -0.013208985328674316, 0.015181303024291992, 0.061293840408325195, 0.07893812656402588, 0.05792880058288574, 0.05221593379974365, 0.07590818405151367, 0.0980989933013916, 0.09836816787719727, 0.08257675170898438, 0.10029327869415283, 0.14767920970916748, 0.15175235271453857, 0.12836933135986328, 0.12066364288330078, 0.11740505695343018, 0.09483444690704346, 0.07702457904815674, 0.06738293170928955, 0.04576694965362549, 0.054335594177246094, 0.07475137710571289, 0.0679701566696167, 0.06158328056335449, 0.0871274471282959, 0.10982775688171387, 0.1124962568283081, 0.14089477062225342, 0.1595534086227417, 0.14389824867248535, 0.1335231065750122, 0.12735068798065186, 0.11833178997039795, 0.12708508968353271, 0.13970792293548584, 0.12860453128814697, 0.12168312072753906, 0.1123509407043457, 0.0898061990737915, 0.10416066646575928, 0.12547802925109863, 0.08377218246459961, 0.029072880744934082, 0.029830574989318848, 0.0531919002532959, 0.06806492805480957, 0.10254108905792236, 0.16148173809051514, 0.16373705863952637, 0.11879289150238037, 0.09678351879119873, 0.09448826313018799, 0.11196637153625488, 0.0865253210067749, 0.08291256427764893, 0.1306225061416626, 0.1262650489807129, 0.06681835651397705, -0.015099048614501953, -0.03066885471343994, -0.020777344703674316, 0.0024286508560180664, 0.060593605041503906, 0.042906880378723145, 0.05804896354675293, 0.151015043258667, 0.14868927001953125, 0.11505436897277832, 0.07175743579864502, -0.034134626388549805, -0.08304548263549805, -0.03961801528930664, -0.02117478847503662, -0.15327191352844238, -0.23960638046264648, -0.17718052864074707, -0.19424962997436523, -0.23183894157409668, -0.16763031482696533, -0.13181567192077637, -0.13127875328063965, -0.13432729244232178, -0.2262347936630249, -0.27295756340026855, -0.18733930587768555, -0.11765587329864502, -0.14694952964782715, -0.20652127265930176, -0.26227104663848877, -0.32015371322631836, -0.2792940139770508, -0.1860034465789795, -0.21686923503875732, -0.260317325592041\}, \{0.0, 1.1920928955078125e-07, 9.5367431640625e-07, 2.2649765014648438e-06, 6.079673767089844e-06, 1.0728836059570312e-05, 1.9073486328125e-05, 2.8252601623535156e-05, -0.00028443336486816406, -0.0018184185028076172, -0.004040360450744629, -0.0009396076202392578, 0.005484461784362793, 0.0015494823455810547, -0.015085816383361816, -0.04052770137786865, -0.017013192176818848, 0.058156728744506836, 0.06110811233520508, 0.029061317443847656, 0.02493727207183838, 0.013658523559570312, 0.016342520713806152, 0.018374919891357422, 0.00035190582275390625, -0.05628693103790283, -0.08475041389465332, -0.06700503826141357, -0.06602168083190918, -0.020487546920776367, 0.02539694309234619, 0.04383206367492676, 0.07882440090179443, 0.060941100120544434, 0.0014215707778930664, -0.04584240913391113, -0.03603529930114746, 0.05073809623718262, 0.05614018440246582, -0.032359957695007324, -0.0762777328491211, -0.04066777229309082, 0.04830479621887207, 0.05345571041107178, 0.011443853378295898, 0.047042131423950195, 0.05494797229766846, 0.02233409881591797, 0.030956745147705078, 0.016776442527770996, -0.048729896545410156, -0.08724474906921387, -0.06734800338745117, -0.03170347213745117, 0.02237570285797119, 0.04881787300109863, -0.03780686855316162, -0.08068060874938965, 0.0026967525482177734, 0.04529011249542236, -0.043489813804626465, -0.13510656356811523, -0.07515919208526611, 0.01721322536468506, 0.0002690553665161133, -0.06276512145996094, -0.04584014415740967, 0.005838990211486816, -0.0016624927520751953, 0.004529833793640137, 0.015653610229492188, -0.034490108489990234, -0.07896971702575684, -0.030033111572265625, 0.0215531587600708, -0.01460111141204834, -0.018313288688659668, 0.03889763355255127, 0.031894803047180176, -0.010246634483337402, -0.03298473358154297, -0.04892385005950928, -0.06786513328552246, -0.10695624351501465, -0.08287906646728516, 0.016762256622314453, 0.056908607482910156, -0.014988064765930176, -0.03499424457550049, 0.0065468549728393555, -0.031754493713378906, -0.10726630687713623, -0.11101329326629639, 0.009048700332641602, 0.0486222505569458, -0.04605662822723389, -0.07960951328277588, -0.02328813076019287, -0.004543185234069824, -0.09627437591552734, -0.05884528160095215, 0.10364174842834473, 0.09685170650482178, 0.045968055725097656, 0.03957819938659668, -0.03821003437042236, -0.05694437026977539, -0.035282135009765625, -0.029552817344665527, 0.0214536190032959, -0.012764334678649902, -0.08995842933654785, -0.001164078712463379, 0.13212764263153076, 0.08456242084503174, 0.00866079330444336, 0.047564148902893066, 0.07651090621948242, 0.06226646900177002, 0.0562746524810791, 0.02554464340209961, -0.03723573684692383, -0.04509866237640381, 0.023096799850463867, 0.09191429615020752, 0.08427095413208008, 0.015224456787109375, -0.030819296836853027, -0.028264760971069336, 0.03852987289428711, 0.09747922420501709, 0.0367586612701416, -0.000820159912109375, 0.0901191234588623, 0.17078077793121338, 0.17741632461547852, 0.13783752918243408, 0.054445743560791016, -0.03565347194671631, -0.047922492027282715, 0.03185164928436279, 0.10580718517303467, 0.12050068378448486, 0.10873579978942871, 0.12096941471099854, 0.11137521266937256, -0.0009993314743041992, -0.09393143653869629, -0.08326005935668945, -0.030612945556640625, 0.04101908206939697, 0.08980667591094971, 0.07309329509735107, 0.020840883255004883, 0.008647799491882324, 0.057555437088012695, 0.08286881446838379, 0.0620877742767334, 0.0716317892074585, 0.03436076641082764, -0.0571746826171875, -0.035356760025024414, 0.06958937644958496, 0.0750497579574585, -0.015622258186340332, -0.024648666381835938, 0.027065277099609375, 0.009716510772705078, -0.04723799228668213, -0.06331014633178711, -0.05821490287780762, -0.10388648509979248, -0.19476401805877686, -0.2072697877883911, -0.09448206424713135, 0.0004132986068725586, 0.01934182643890381, 0.0691826343536377, 0.11633479595184326, 0.01135551929473877, -0.1298971176147461, -0.12967932224273682, -0.07559013366699219, -0.11252033710479736, -0.17155182361602783, -0.151908278465271, -0.10677552223205566, -0.09174108505249023, -0.08288359642028809, -0.051115989685058594, -0.020130157470703125, -0.020738720893859863, -0.037920236587524414, -0.004592418670654297, 0.03259909152984619, 0.05020785331726074, 0.12079429626464844, 0.19067823886871338, 0.14487552642822266, 0.007581591606140137, -0.12455368041992188, -0.23856544494628906, -0.3154296875, -0.32566773891448975, -0.29761195182800293, -0.24967217445373535, -0.12093818187713623, 0.07095670700073242, 0.22127437591552734, 0.2874826192855835, 0.28826332092285156, 0.2610100507736206, 0.2187519073486328, 0.12443351745605469, -0.024654150009155273, -0.12971389293670654, -0.1268397569656372, -0.09034407138824463, -0.09249532222747803, -0.07477307319641113, 0.00041997432708740234, 0.08121109008789062, 0.08543229103088379, 0.053551673889160156, 0.0856635570526123, 0.1519777774810791, 0.19927501678466797, 0.22236084938049316, 0.22502970695495605, 0.1982957124710083, 0.1526890993118286, 0.08495473861694336, 0.016612887382507324, -0.010601282119750977, -0.008789420127868652, -0.06143343448638916, -0.12442648410797119, -0.08210349082946777, -0.04412245750427246, -0.06306672096252441, -0.07549571990966797, -0.05231630802154541, -0.023296833038330078, -0.016872286796569824, 0.03221428394317627, 0.05150938034057617, -0.03199601173400879, -0.09383046627044678, -0.08064031600952148, -0.06209611892700195, -0.0597383975982666, -0.013897180557250977, 0.058489441871643066, 0.08891427516937256, 0.1171952486038208, 0.17978763580322266, 0.2432715892791748, 0.2535783052444458, 0.20599758625030518, 0.14655327796936035, 0.10514390468597412, 0.08141136169433594, 0.05590486526489258, 0.015575289726257324, -0.04405009746551514, -0.0506972074508667, 0.051082611083984375, 0.11393773555755615, 0.04440605640411377, -0.03252267837524414, -0.052556633949279785, -0.08064007759094238, -0.1295013427734375, -0.17340457439422607, -0.19879138469696045, -0.1591203212738037, -0.08914971351623535, -0.02925550937652588, 0.029255151748657227, 0.06997251510620117, 0.09895694255828857, 0.11739122867584229, 0.11855030059814453, 0.09577274322509766, 0.08734703063964844, 0.09667444229125977, 0.06840693950653076, 0.015652775764465332, -0.012304425239562988, -0.045244812965393066, -0.12900793552398682, -0.19318866729736328, -0.19666874408721924, -0.19153225421905518, -0.20771169662475586, -0.2053055763244629, -0.1848057508468628, -0.19264447689056396, -0.170293927192688, -0.12224113941192627, -0.15358853340148926, -0.22705447673797607, -0.23580658435821533, -0.2245558500289917, -0.2493739128112793, -0.2765018939971924, -0.2919579744338989, -0.2671802043914795, -0.22683489322662354, -0.16688382625579834, -0.06448042392730713, 0.022865772247314453, 0.10956120491027832, 0.16978025436401367, 0.18478429317474365, 0.19825875759124756, 0.20321297645568848, 0.19229507446289062, 0.17800354957580566, 0.18436145782470703, 0.18773901462554932, 0.21867060661315918, 0.28181779384613037, 0.291140079498291, 0.26553452014923096, 0.24170148372650146, 0.21254229545593262, 0.17331159114837646, 0.12445366382598877, 0.09697186946868896, 0.11258399486541748, 0.11760210990905762, 0.09881031513214111, 0.11139225959777832, 0.13009357452392578, 0.12616348266601562, 0.11484169960021973, 0.08685052394866943, 0.05947089195251465, 0.06806027889251709, 0.08014893531799316, 0.03275465965270996, -0.0431668758392334, -0.058649659156799316, -0.037531375885009766, -0.054636597633361816, -0.08444452285766602, -0.09223949909210205, -0.09775149822235107, -0.09412777423858643, -0.08281612396240234, -0.08051896095275879, -0.09104251861572266, -0.11477506160736084, -0.139451265335083, -0.1508934497833252, -0.12309527397155762, -0.08667111396789551, -0.09658992290496826, -0.1348973512649536, -0.1273709535598755, -0.0728754997253418, -0.06085610389709473, -0.08289229869842529, -0.06969869136810303, -0.035433053970336914, -0.03116893768310547, -0.04806971549987793, -0.05214071273803711, -0.03450584411621094, -0.0016306638717651367, 0.04028630256652832, 0.08594858646392822, 0.0848761796951294, 0.035337090492248535, 0.028369545936584473, 0.05674099922180176, 0.044611573219299316, -0.0035039186477661133, -0.026986002922058105, 0.011646866798400879, 0.06899452209472656, 0.1039731502532959, 0.10594344139099121, 0.07043087482452393, 0.04450654983520508, 0.051702141761779785, 0.05136919021606445, 0.03271472454071045, 0.014568090438842773, -0.01602017879486084, -0.04900157451629639, -0.04820454120635986, -0.050519347190856934, -0.06636714935302734, -0.024294495582580566, 0.038257718086242676, 0.061052680015563965, 0.09081876277923584, 0.09517109394073486, 0.05078423023223877, 0.039409637451171875, 0.04535531997680664, 0.021636128425598145, 0.014443159103393555, 0.06069135665893555, 0.1006617546081543, 0.09076976776123047, 0.08043479919433594, 0.08438968658447266, 0.0724341869354248, 0.0692756175994873, 0.10480272769927979, 0.111733078956604, 0.07570517063140869, 0.08829951286315918, 0.14347600936889648, 0.15435349941253662, 0.1246786117553711, 0.12301301956176758, 0.1334613561630249, 0.11145973205566406, 0.08833432197570801, 0.08753407001495361, 0.05760550498962402, 0.012098312377929688, 0.027511239051818848, 0.06813168525695801, 0.08020365238189697, 0.07725930213928223, 0.07583916187286377, 0.07558894157409668, 0.07643818855285645, 0.07976043224334717, 0.07859385013580322, 0.07544088363647461, 0.06211960315704346, 0.05318939685821533, 0.07513236999511719, 0.08571946620941162, 0.06249523162841797, 0.05035972595214844, 0.06366097927093506, 0.050999999046325684, 0.001934051513671875, 0.03683662414550781, 0.1383603811264038, 0.11644434928894043, 0.058933258056640625, 0.08979332447052002, 0.11329567432403564, 0.12212085723876953, 0.12594032287597656, 0.0771644115447998, -0.027837157249450684, -0.03001117706298828, 0.054079651832580566, 0.055371999740600586, 0.032338500022888184, -0.050858378410339355, -0.09859788417816162, -0.03464043140411377, -0.0773460865020752, -0.16343629360198975, -0.12706303596496582, -0.07501983642578125, -0.08532512187957764, -0.06788921356201172, 0.030174612998962402, 0.09513235092163086, -0.013241767883300781, -0.10206091403961182, -0.026000261306762695, 0.013743877410888672, -0.049562931060791016, -0.09325122833251953, -0.04290783405303955, -0.008336544036865234, -0.03705954551696777, -0.06940197944641113, -0.11304676532745361, -0.1251208782196045, -0.09949350357055664, -0.10748350620269775, -0.11892664432525635, -0.07435870170593262, -0.06046772003173828, -0.13789892196655273, -0.17106854915618896, -0.09213554859161377, -0.0877237319946289, -0.15187156200408936, -0.21173274517059326, -0.23158633708953857, -0.17964911460876465, -0.21098220348358154, -0.26535117626190186, -0.20347261428833008, -0.08696186542510986, -0.141501784324646\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_24bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_24bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_24bit_44100.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_24bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 24;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, 2.384185791015625e-07, 1.7881393432617188e-06, 5.4836273193359375e-06, 1.3232231140136719e-05, 2.467632293701172e-05, 4.1961669921875e-05, 6.413459777832031e-05, -0.0005469322204589844, -0.0027649402618408203, -0.001909017562866211, 0.0035326480865478516, 0.0028171539306640625, 0.000813603401184082, 0.00023508071899414062, -0.0021113157272338867, 0.0001468658447265625, 0.014778494834899902, 0.04538834095001221, 0.04520773887634277, -0.004081845283508301, -0.06305968761444092, -0.0665360689163208, -0.029284119606018066, -0.024863362312316895, -0.01780259609222412, -0.013840913772583008, 0.019315004348754883, 0.08567023277282715, 0.04245483875274658, -0.04147696495056152, -0.02841663360595703, 0.009694337844848633, 0.01996481418609619, -0.00319063663482666, -0.053113460540771484, -0.027323126792907715, 0.06642353534698486, 0.10269403457641602, 0.10253250598907471, 0.08760249614715576, 0.03816401958465576, 0.05413031578063965, 0.08223843574523926, 0.05015301704406738, 0.02655482292175293, 0.0518268346786499, 0.05460524559020996, -0.000580906867980957, 0.0395054817199707, 0.10501348972320557, 0.057415008544921875, 0.013211846351623535, 0.034859538078308105, 0.05507814884185791, 0.04670369625091553, -0.01683640480041504, -0.09157049655914307, -0.08178138732910156, 0.003289341926574707, 0.04446220397949219, -0.0565570592880249, -0.13708782196044922, -0.08847522735595703, -0.02224898338317871, -0.015274286270141602, -0.028183579444885254, -0.03865182399749756, -0.05581164360046387, -0.043233394622802734, -0.02816152572631836, -0.01761162281036377, -0.033526062965393066, -0.08275163173675537, -0.10685598850250244, -0.1034555435180664, -0.11973357200622559, -0.09033203125, -0.04437124729156494, -0.09464144706726074, -0.1173853874206543, -0.10559892654418945, -0.08117079734802246, -0.0644904375076294, -0.12826251983642578, -0.15485632419586182, -0.0441133975982666, 0.023441195487976074, -0.0313950777053833, -0.010845184326171875, 0.004209995269775391, -0.04794716835021973, -0.09660530090332031, -0.07935786247253418, 0.022089362144470215, 0.06454586982727051, 0.006242275238037109, -0.053893327713012695, 0.009267091751098633, 0.0192720890045166, -0.12457668781280518, -0.16945278644561768, -0.06906521320343018, -0.018019914627075195, -0.00901186466217041, 0.04090762138366699, 0.05578315258026123, 0.04540598392486572, -0.017262578010559082, -0.09481668472290039, -0.09463560581207275, -0.0850372314453125, -0.07044601440429688, 0.044732093811035156, 0.14043903350830078, 0.0615311861038208, -0.0017768144607543945, 0.050705790519714355, 0.051418185234069824, -0.02617955207824707, 0.0013318061828613281, 0.10370314121246338, 0.12050795555114746, 0.1356261968612671, 0.1976931095123291, 0.14523100852966309, -0.010580658912658691, -0.0808025598526001, -0.025513291358947754, 0.07318198680877686, 0.11440527439117432, 0.14054787158966064, 0.19859600067138672, 0.226037859916687, 0.25968968868255615, 0.27517223358154297, 0.21891403198242188, 0.17249858379364014, 0.10510575771331787, 0.021207571029663086, 0.03359854221343994, 0.11546945571899414, 0.16277778148651123, 0.13610899448394775, 0.11561858654022217, 0.15818476676940918, 0.15215349197387695, 0.003849506378173828, -0.030636906623840332, 0.13052606582641602, 0.18443167209625244, 0.17312121391296387, 0.15424621105194092, 0.0742192268371582, 0.051267147064208984, 0.038919806480407715, 0.022106051445007324, 0.012888550758361816, -0.007709026336669922, 0.029566526412963867, 0.030662059783935547, -0.027154207229614258, 0.040636539459228516, 0.16303539276123047, 0.11336028575897217, -0.029920458793640137, -0.07883155345916748, -0.053902268409729004, -0.06685054302215576, -0.11553120613098145, -0.14421296119689941, -0.15514814853668213, -0.23572230339050293, -0.33848822116851807, -0.3083235025405884, -0.2027122974395752, -0.13567590713500977, -0.1538301706314087, -0.16901659965515137, -0.14754056930541992, -0.18767130374908447, -0.2352076768875122, -0.22752869129180908, -0.19818603992462158, -0.1912686824798584, -0.1811293363571167, -0.15598833560943604, -0.15092182159423828, -0.13190996646881104, -0.09050929546356201, -0.05414414405822754, -0.021764397621154785, -0.01615750789642334, -0.016031503677368164, 0.02736032009124756, 0.05744445323944092, 0.10349833965301514, 0.17580628395080566, 0.17315220832824707, 0.08343183994293213, -0.09277796745300293, -0.24751710891723633, -0.3203364610671997, -0.36222290992736816, -0.3456164598464966, -0.29457712173461914, -0.2208174467086792, -0.07722604274749756, 0.07686781883239746, 0.10222053527832031, 0.08138704299926758, 0.07167577743530273, 0.006896376609802246, -0.03144514560699463, -0.06453490257263184, -0.0998678207397461, -0.11557626724243164, -0.08657562732696533, -0.011487841606140137, 0.024655699729919434, 0.07710301876068115, 0.19258737564086914, 0.2757699489593506, 0.24917995929718018, 0.2547190189361572, 0.3233884572982788, 0.3651694059371948, 0.3467220067977905, 0.26609206199645996, 0.21415364742279053, 0.1451643705368042, 0.028246164321899414, -0.05506265163421631, -0.09485781192779541, -0.10834360122680664, -0.09765219688415527, -0.11472666263580322, -0.10827720165252686, -0.05115628242492676, -0.011539101600646973, 0.012971639633178711, 0.03045511245727539, 0.04645514488220215, 0.0342707633972168, 0.0549466609954834, 0.16332507133483887, 0.24224793910980225, 0.18761515617370605, 0.11179554462432861, 0.09352076053619385, 0.09492385387420654, 0.11606824398040771, 0.1413419246673584, 0.17592430114746094, 0.2018730640411377, 0.23069274425506592, 0.25766170024871826, 0.2663611173629761, 0.21774756908416748, 0.057196974754333496, -0.08907783031463623, -0.12986385822296143, -0.10977804660797119, -0.04542100429534912, -0.009626269340515137, -0.03966021537780762, -0.02337789535522461, 0.06328558921813965, 0.1187981367111206, 0.10761165618896484, 0.07837212085723877, 0.05231678485870361, 0.02169060707092285, -0.03322577476501465, -0.11377441883087158, -0.15057945251464844, -0.14534151554107666, -0.18364381790161133, -0.21993911266326904, -0.1961129903793335, -0.1525101661682129, -0.10219216346740723, -0.06866455078125, -0.07127976417541504, -0.08443140983581543, -0.07552826404571533, -0.049929141998291016, -0.023989200592041016, 0.013609647750854492, 0.0475459098815918, 0.02447795867919922, -0.04460704326629639, -0.0887378454208374, -0.11880159378051758, -0.16825449466705322, -0.188887357711792, -0.16724884510040283, -0.18829452991485596, -0.2464510202407837, -0.2575598955154419, -0.25703179836273193, -0.32140886783599854, -0.4187908172607422, -0.46495234966278076, -0.44499170780181885, -0.40246832370758057, -0.36982977390289307, -0.3331559896469116, -0.28196287155151367, -0.21289277076721191, -0.1061016321182251, 0.023185014724731445, 0.1438899040222168, 0.22921299934387207, 0.2681858539581299, 0.2650902271270752, 0.2512338161468506, 0.23415231704711914, 0.185766339302063, 0.1503525972366333, 0.14675557613372803, 0.14294695854187012, 0.16180360317230225, 0.2102292776107788, 0.23564505577087402, 0.23043131828308105, 0.2227400541305542, 0.1978968381881714, 0.16218268871307373, 0.13503003120422363, 0.1386406421661377, 0.1782851219177246, 0.18684566020965576, 0.1817244291305542, 0.2154783010482788, 0.2369520664215088, 0.23360908031463623, 0.22561335563659668, 0.19286930561065674, 0.1471778154373169, 0.12532472610473633, 0.1119149923324585, 0.05721092224121094, -0.02198469638824463, -0.04966306686401367, -0.038004159927368164, -0.04068195819854736, -0.04813385009765625, -0.033611416816711426, 0.0015609264373779297, 0.03492474555969238, 0.062181949615478516, 0.05607593059539795, 0.02305746078491211, -0.015040397644042969, -0.058673977851867676, -0.06413936614990234, -0.033275723457336426, -0.023733139038085938, -0.051869869232177734, -0.062258124351501465, -0.02007758617401123, 0.0335007905960083, 0.018722057342529297, -0.045569419860839844, -0.05470895767211914, -0.013467192649841309, 0.003751397132873535, -0.015442371368408203, -0.015690922737121582, -0.0004124641418457031, 0.014282703399658203, 0.04862391948699951, 0.08602631092071533, 0.08928334712982178, 0.04978299140930176, 0.027298450469970703, 0.02523481845855713, -0.008887529373168945, -0.0626990795135498, -0.07338690757751465, -0.020415782928466797, 0.02891695499420166, 0.028627634048461914, 0.0006459951400756836, -0.02116239070892334, -0.02348458766937256, -0.020406246185302734, -0.025342345237731934, -0.0307157039642334, -0.05211818218231201, -0.09596836566925049, -0.10975241661071777, -0.11185181140899658, -0.13977432250976562, -0.12009251117706299, -0.033278465270996094, 0.02582836151123047, 0.025653958320617676, 0.024453401565551758, 0.027688980102539062, 0.017926692962646484, -0.003493070602416992, -0.03810405731201172, -0.05226755142211914, -0.03413844108581543, -0.013208985328674316, 0.015181303024291992, 0.061293840408325195, 0.07893812656402588, 0.05792880058288574, 0.05221593379974365, 0.07590818405151367, 0.0980989933013916, 0.09836816787719727, 0.08257675170898438, 0.10029327869415283, 0.14767920970916748, 0.15175235271453857, 0.12836933135986328, 0.12066364288330078, 0.11740505695343018, 0.09483444690704346, 0.07702457904815674, 0.06738293170928955, 0.04576694965362549, 0.054335594177246094, 0.07475137710571289, 0.0679701566696167, 0.06158328056335449, 0.0871274471282959, 0.10982775688171387, 0.1124962568283081, 0.14089477062225342, 0.1595534086227417, 0.14389824867248535, 0.1335231065750122, 0.12735068798065186, 0.11833178997039795, 0.12708508968353271, 0.13970792293548584, 0.12860453128814697, 0.12168312072753906, 0.1123509407043457, 0.0898061990737915, 0.10416066646575928, 0.12547802925109863, 0.08377218246459961, 0.029072880744934082, 0.029830574989318848, 0.0531919002532959, 0.06806492805480957, 0.10254108905792236, 0.16148173809051514, 0.16373705863952637, 0.11879289150238037, 0.09678351879119873, 0.09448826313018799, 0.11196637153625488, 0.0865253210067749, 0.08291256427764893, 0.1306225061416626, 0.1262650489807129, 0.06681835651397705, -0.015099048614501953, -0.03066885471343994, -0.020777344703674316, 0.0024286508560180664, 0.060593605041503906, 0.042906880378723145, 0.05804896354675293, 0.151015043258667, 0.14868927001953125, 0.11505436897277832, 0.07175743579864502, -0.034134626388549805, -0.08304548263549805, -0.03961801528930664, -0.02117478847503662, -0.15327191352844238, -0.23960638046264648, -0.17718052864074707, -0.19424962997436523, -0.23183894157409668, -0.16763031482696533, -0.13181567192077637, -0.13127875328063965, -0.13432729244232178, -0.2262347936630249, -0.27295756340026855, -0.18733930587768555, -0.11765587329864502, -0.14694952964782715, -0.20652127265930176, -0.26227104663848877, -0.32015371322631836, -0.2792940139770508, -0.1860034465789795, -0.21686923503875732, -0.260317325592041\}, \{0.0, 1.1920928955078125e-07, 9.5367431640625e-07, 2.2649765014648438e-06, 6.079673767089844e-06, 1.0728836059570312e-05, 1.9073486328125e-05, 2.8252601623535156e-05, -0.00028443336486816406, -0.0018184185028076172, -0.004040360450744629, -0.0009396076202392578, 0.005484461784362793, 0.0015494823455810547, -0.015085816383361816, -0.04052770137786865, -0.017013192176818848, 0.058156728744506836, 0.06110811233520508, 0.029061317443847656, 0.02493727207183838, 0.013658523559570312, 0.016342520713806152, 0.018374919891357422, 0.00035190582275390625, -0.05628693103790283, -0.08475041389465332, -0.06700503826141357, -0.06602168083190918, -0.020487546920776367, 0.02539694309234619, 0.04383206367492676, 0.07882440090179443, 0.060941100120544434, 0.0014215707778930664, -0.04584240913391113, -0.03603529930114746, 0.05073809623718262, 0.05614018440246582, -0.032359957695007324, -0.0762777328491211, -0.04066777229309082, 0.04830479621887207, 0.05345571041107178, 0.011443853378295898, 0.047042131423950195, 0.05494797229766846, 0.02233409881591797, 0.030956745147705078, 0.016776442527770996, -0.048729896545410156, -0.08724474906921387, -0.06734800338745117, -0.03170347213745117, 0.02237570285797119, 0.04881787300109863, -0.03780686855316162, -0.08068060874938965, 0.0026967525482177734, 0.04529011249542236, -0.043489813804626465, -0.13510656356811523, -0.07515919208526611, 0.01721322536468506, 0.0002690553665161133, -0.06276512145996094, -0.04584014415740967, 0.005838990211486816, -0.0016624927520751953, 0.004529833793640137, 0.015653610229492188, -0.034490108489990234, -0.07896971702575684, -0.030033111572265625, 0.0215531587600708, -0.01460111141204834, -0.018313288688659668, 0.03889763355255127, 0.031894803047180176, -0.010246634483337402, -0.03298473358154297, -0.04892385005950928, -0.06786513328552246, -0.10695624351501465, -0.08287906646728516, 0.016762256622314453, 0.056908607482910156, -0.014988064765930176, -0.03499424457550049, 0.0065468549728393555, -0.031754493713378906, -0.10726630687713623, -0.11101329326629639, 0.009048700332641602, 0.0486222505569458, -0.04605662822723389, -0.07960951328277588, -0.02328813076019287, -0.004543185234069824, -0.09627437591552734, -0.05884528160095215, 0.10364174842834473, 0.09685170650482178, 0.045968055725097656, 0.03957819938659668, -0.03821003437042236, -0.05694437026977539, -0.035282135009765625, -0.029552817344665527, 0.0214536190032959, -0.012764334678649902, -0.08995842933654785, -0.001164078712463379, 0.13212764263153076, 0.08456242084503174, 0.00866079330444336, 0.047564148902893066, 0.07651090621948242, 0.06226646900177002, 0.0562746524810791, 0.02554464340209961, -0.03723573684692383, -0.04509866237640381, 0.023096799850463867, 0.09191429615020752, 0.08427095413208008, 0.015224456787109375, -0.030819296836853027, -0.028264760971069336, 0.03852987289428711, 0.09747922420501709, 0.0367586612701416, -0.000820159912109375, 0.0901191234588623, 0.17078077793121338, 0.17741632461547852, 0.13783752918243408, 0.054445743560791016, -0.03565347194671631, -0.047922492027282715, 0.03185164928436279, 0.10580718517303467, 0.12050068378448486, 0.10873579978942871, 0.12096941471099854, 0.11137521266937256, -0.0009993314743041992, -0.09393143653869629, -0.08326005935668945, -0.030612945556640625, 0.04101908206939697, 0.08980667591094971, 0.07309329509735107, 0.020840883255004883, 0.008647799491882324, 0.057555437088012695, 0.08286881446838379, 0.0620877742767334, 0.0716317892074585, 0.03436076641082764, -0.0571746826171875, -0.035356760025024414, 0.06958937644958496, 0.0750497579574585, -0.015622258186340332, -0.024648666381835938, 0.027065277099609375, 0.009716510772705078, -0.04723799228668213, -0.06331014633178711, -0.05821490287780762, -0.10388648509979248, -0.19476401805877686, -0.2072697877883911, -0.09448206424713135, 0.0004132986068725586, 0.01934182643890381, 0.0691826343536377, 0.11633479595184326, 0.01135551929473877, -0.1298971176147461, -0.12967932224273682, -0.07559013366699219, -0.11252033710479736, -0.17155182361602783, -0.151908278465271, -0.10677552223205566, -0.09174108505249023, -0.08288359642028809, -0.051115989685058594, -0.020130157470703125, -0.020738720893859863, -0.037920236587524414, -0.004592418670654297, 0.03259909152984619, 0.05020785331726074, 0.12079429626464844, 0.19067823886871338, 0.14487552642822266, 0.007581591606140137, -0.12455368041992188, -0.23856544494628906, -0.3154296875, -0.32566773891448975, -0.29761195182800293, -0.24967217445373535, -0.12093818187713623, 0.07095670700073242, 0.22127437591552734, 0.2874826192855835, 0.28826332092285156, 0.2610100507736206, 0.2187519073486328, 0.12443351745605469, -0.024654150009155273, -0.12971389293670654, -0.1268397569656372, -0.09034407138824463, -0.09249532222747803, -0.07477307319641113, 0.00041997432708740234, 0.08121109008789062, 0.08543229103088379, 0.053551673889160156, 0.0856635570526123, 0.1519777774810791, 0.19927501678466797, 0.22236084938049316, 0.22502970695495605, 0.1982957124710083, 0.1526890993118286, 0.08495473861694336, 0.016612887382507324, -0.010601282119750977, -0.008789420127868652, -0.06143343448638916, -0.12442648410797119, -0.08210349082946777, -0.04412245750427246, -0.06306672096252441, -0.07549571990966797, -0.05231630802154541, -0.023296833038330078, -0.016872286796569824, 0.03221428394317627, 0.05150938034057617, -0.03199601173400879, -0.09383046627044678, -0.08064031600952148, -0.06209611892700195, -0.0597383975982666, -0.013897180557250977, 0.058489441871643066, 0.08891427516937256, 0.1171952486038208, 0.17978763580322266, 0.2432715892791748, 0.2535783052444458, 0.20599758625030518, 0.14655327796936035, 0.10514390468597412, 0.08141136169433594, 0.05590486526489258, 0.015575289726257324, -0.04405009746551514, -0.0506972074508667, 0.051082611083984375, 0.11393773555755615, 0.04440605640411377, -0.03252267837524414, -0.052556633949279785, -0.08064007759094238, -0.1295013427734375, -0.17340457439422607, -0.19879138469696045, -0.1591203212738037, -0.08914971351623535, -0.02925550937652588, 0.029255151748657227, 0.06997251510620117, 0.09895694255828857, 0.11739122867584229, 0.11855030059814453, 0.09577274322509766, 0.08734703063964844, 0.09667444229125977, 0.06840693950653076, 0.015652775764465332, -0.012304425239562988, -0.045244812965393066, -0.12900793552398682, -0.19318866729736328, -0.19666874408721924, -0.19153225421905518, -0.20771169662475586, -0.2053055763244629, -0.1848057508468628, -0.19264447689056396, -0.170293927192688, -0.12224113941192627, -0.15358853340148926, -0.22705447673797607, -0.23580658435821533, -0.2245558500289917, -0.2493739128112793, -0.2765018939971924, -0.2919579744338989, -0.2671802043914795, -0.22683489322662354, -0.16688382625579834, -0.06448042392730713, 0.022865772247314453, 0.10956120491027832, 0.16978025436401367, 0.18478429317474365, 0.19825875759124756, 0.20321297645568848, 0.19229507446289062, 0.17800354957580566, 0.18436145782470703, 0.18773901462554932, 0.21867060661315918, 0.28181779384613037, 0.291140079498291, 0.26553452014923096, 0.24170148372650146, 0.21254229545593262, 0.17331159114837646, 0.12445366382598877, 0.09697186946868896, 0.11258399486541748, 0.11760210990905762, 0.09881031513214111, 0.11139225959777832, 0.13009357452392578, 0.12616348266601562, 0.11484169960021973, 0.08685052394866943, 0.05947089195251465, 0.06806027889251709, 0.08014893531799316, 0.03275465965270996, -0.0431668758392334, -0.058649659156799316, -0.037531375885009766, -0.054636597633361816, -0.08444452285766602, -0.09223949909210205, -0.09775149822235107, -0.09412777423858643, -0.08281612396240234, -0.08051896095275879, -0.09104251861572266, -0.11477506160736084, -0.139451265335083, -0.1508934497833252, -0.12309527397155762, -0.08667111396789551, -0.09658992290496826, -0.1348973512649536, -0.1273709535598755, -0.0728754997253418, -0.06085610389709473, -0.08289229869842529, -0.06969869136810303, -0.035433053970336914, -0.03116893768310547, -0.04806971549987793, -0.05214071273803711, -0.03450584411621094, -0.0016306638717651367, 0.04028630256652832, 0.08594858646392822, 0.0848761796951294, 0.035337090492248535, 0.028369545936584473, 0.05674099922180176, 0.044611573219299316, -0.0035039186477661133, -0.026986002922058105, 0.011646866798400879, 0.06899452209472656, 0.1039731502532959, 0.10594344139099121, 0.07043087482452393, 0.04450654983520508, 0.051702141761779785, 0.05136919021606445, 0.03271472454071045, 0.014568090438842773, -0.01602017879486084, -0.04900157451629639, -0.04820454120635986, -0.050519347190856934, -0.06636714935302734, -0.024294495582580566, 0.038257718086242676, 0.061052680015563965, 0.09081876277923584, 0.09517109394073486, 0.05078423023223877, 0.039409637451171875, 0.04535531997680664, 0.021636128425598145, 0.014443159103393555, 0.06069135665893555, 0.1006617546081543, 0.09076976776123047, 0.08043479919433594, 0.08438968658447266, 0.0724341869354248, 0.0692756175994873, 0.10480272769927979, 0.111733078956604, 0.07570517063140869, 0.08829951286315918, 0.14347600936889648, 0.15435349941253662, 0.1246786117553711, 0.12301301956176758, 0.1334613561630249, 0.11145973205566406, 0.08833432197570801, 0.08753407001495361, 0.05760550498962402, 0.012098312377929688, 0.027511239051818848, 0.06813168525695801, 0.08020365238189697, 0.07725930213928223, 0.07583916187286377, 0.07558894157409668, 0.07643818855285645, 0.07976043224334717, 0.07859385013580322, 0.07544088363647461, 0.06211960315704346, 0.05318939685821533, 0.07513236999511719, 0.08571946620941162, 0.06249523162841797, 0.05035972595214844, 0.06366097927093506, 0.050999999046325684, 0.001934051513671875, 0.03683662414550781, 0.1383603811264038, 0.11644434928894043, 0.058933258056640625, 0.08979332447052002, 0.11329567432403564, 0.12212085723876953, 0.12594032287597656, 0.0771644115447998, -0.027837157249450684, -0.03001117706298828, 0.054079651832580566, 0.055371999740600586, 0.032338500022888184, -0.050858378410339355, -0.09859788417816162, -0.03464043140411377, -0.0773460865020752, -0.16343629360198975, -0.12706303596496582, -0.07501983642578125, -0.08532512187957764, -0.06788921356201172, 0.030174612998962402, 0.09513235092163086, -0.013241767883300781, -0.10206091403961182, -0.026000261306762695, 0.013743877410888672, -0.049562931060791016, -0.09325122833251953, -0.04290783405303955, -0.008336544036865234, -0.03705954551696777, -0.06940197944641113, -0.11304676532745361, -0.1251208782196045, -0.09949350357055664, -0.10748350620269775, -0.11892664432525635, -0.07435870170593262, -0.06046772003173828, -0.13789892196655273, -0.17106854915618896, -0.09213554859161377, -0.0877237319946289, -0.15187156200408936, -0.21173274517059326, -0.23158633708953857, -0.17964911460876465, -0.21098220348358154, -0.26535117626190186, -0.20347261428833008, -0.08696186542510986, -0.141501784324646\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_24bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_24bit_48000.h}
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_24bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_48000::bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_24bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_24bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_24bit_48000::testBuffer} = \{\{0.0, 0.0, 7.152557373046875e-07, 2.6226043701171875e-06, 6.556510925292969e-06, 1.2040138244628906e-05, 2.0742416381835938e-05, 3.2067298889160156e-05, 4.7087669372558594e-05, 6.473064422607422e-05, 8.678436279296875e-05, 0.00011146068572998047, 0.00014066696166992188, 0.00017261505126953125, 0.00020933151245117188, 0.00024831295013427734, 0.0002923011779785156, 0.0003383159637451172, 0.0003935098648071289, 0.00047397613525390625, 0.0005924701690673828, 0.0007510185241699219, 0.0009467601776123047, 0.0011757612228393555, 0.0014437437057495117, 0.0017348527908325195, 0.002057194709777832, 0.0024052858352661133, 0.00276792049407959, 0.003163456916809082, 0.0035680532455444336, 0.003991246223449707, 0.004441976547241211, 0.004886507987976074, 0.005361437797546387, 0.005846261978149414, 0.006371617317199707, 0.007035374641418457, 0.007773995399475098, 0.008626341819763184, 0.009595155715942383, 0.010571837425231934, 0.011674165725708008, 0.012801051139831543, 0.0139085054397583, 0.015142679214477539, 0.01630091667175293, 0.01747608184814453, 0.018746137619018555, 0.01986110210418701, 0.02108168601989746, 0.022292733192443848, 0.02333521842956543, 0.024582505226135254, 0.025773048400878906, 0.027095913887023926, 0.028706669807434082, 0.030106067657470703, 0.03176474571228027, 0.033440470695495605, 0.03486049175262451, 0.036620497703552246, 0.03804290294647217, 0.03943753242492676, 0.04100167751312256, 0.042027831077575684, 0.04335308074951172, 0.04441177845001221, 0.04517197608947754, 0.04625880718231201, 0.046680331230163574, 0.04720878601074219, 0.047441959381103516, 0.04705607891082764, 0.04693794250488281, 0.04610264301300049, 0.04532325267791748, 0.044411540031433105, 0.043007612228393555, 0.04193687438964844, 0.04024386405944824, 0.03873574733734131, 0.03707301616668701, 0.035071372985839844, 0.03341710567474365, 0.03115224838256836, 0.02919602394104004, 0.026967287063598633, 0.0245436429977417, 0.022371292114257812, 0.019638657569885254, 0.017338991165161133, 0.014601349830627441, 0.011943221092224121, 0.009397029876708984, 0.006356716156005859, 0.0038193464279174805, 0.0006439685821533203, -0.002169370651245117, -0.005274295806884766, -0.008595466613769531, -0.011147618293762207, -0.01512765884399414, -0.017611026763916016, -0.020638704299926758, -0.025217652320861816, -0.026407361030578613, -0.031000494956970215, -0.035413146018981934, -0.035219788551330566, -0.04285740852355957, -0.04419386386871338, -0.07065105438232422, -0.1564619541168213, -0.08552801609039307, 0.24239099025726318, 0.3864394426345825, 0.12467241287231445, -0.08393871784210205, 0.0599592924118042, 0.25836503505706787, 0.19484519958496094, 0.030383586883544922, 0.03242063522338867, 0.1321181058883667, 0.2580540180206299, 0.35796380043029785, 0.24705147743225098, 0.018767356872558594, -0.12914705276489258, -0.15051043033599854, 0.03967642784118652, 0.2507213354110718, 0.1530904769897461, -0.12343156337738037, -0.22272634506225586, -0.06961596012115479, 0.047440409660339355, -0.023664355278015137, -0.06798660755157471, -0.08156132698059082, -0.19806981086730957, -0.3167363405227661, -0.36041784286499023, -0.25601136684417725, -0.03191184997558594, -0.0019611120223999023, -0.1955111026763916, -0.2977677583694458, -0.3072565793991089, -0.35410332679748535, -0.3385869264602661, -0.3335835933685303, -0.4074738025665283, -0.30776309967041016, -0.16734051704406738, -0.2780416011810303, -0.38017547130584717, -0.3817152976989746, -0.47177445888519287, -0.4866825342178345, -0.3023874759674072, -0.17320525646209717, -0.3024212121963501, -0.4500840902328491, -0.4194523096084595, -0.45877671241760254, -0.4649801254272461, -0.2514234781265259, -0.27913451194763184, -0.4962806701660156, -0.36953091621398926, -0.18422472476959229, -0.2835296392440796, -0.3840268850326538, -0.35425662994384766, -0.34723663330078125, -0.38039541244506836, -0.3292655944824219, -0.20911633968353271, -0.2077404260635376, -0.35398340225219727, -0.4257551431655884, -0.2539527416229248, -0.06363248825073242, -0.17776715755462646, -0.33460700511932373, -0.19255638122558594, -0.04315447807312012, -0.09097802639007568, -0.1792086362838745, -0.2713695764541626, -0.22517192363739014, -0.015021204948425293, 0.019883275032043457, -0.08760619163513184, -0.0902794599533081, -0.06332087516784668, -0.05756986141204834, -0.08678078651428223, -0.08119654655456543, 0.12865030765533447, 0.2406013011932373, 0.041402578353881836, -0.015124917030334473, 0.1329936981201172, 0.08767187595367432, -0.01891481876373291, 0.06548357009887695, 0.18902921676635742, 0.2651712894439697, 0.309159517288208, 0.24167048931121826, 0.12716591358184814, 0.1285635232925415, 0.24710190296173096, 0.3353545665740967, 0.3048640489578247, 0.23640525341033936, 0.19801568984985352, 0.24145936965942383, 0.38207805156707764, 0.39572572708129883, 0.242537260055542, 0.22294330596923828, 0.3719959259033203, 0.47042763233184814, 0.43123185634613037, 0.3625662326812744, 0.383408784866333, 0.3847602605819702, 0.2966369390487671, 0.29896271228790283, 0.4360523223876953, 0.4896125793457031, 0.39724302291870117, 0.3815962076187134, 0.4534264802932739, 0.4414411783218384, 0.3999319076538086, 0.35165393352508545, 0.35485661029815674, 0.4814718961715698, 0.44379913806915283, 0.29586541652679443, 0.37749183177948, 0.4630330801010132, 0.42011332511901855, 0.4437040090560913, 0.47643351554870605, 0.435949444770813, 0.3261157274246216, 0.27746081352233887, 0.4226391315460205, 0.4980888366699219, 0.38505077362060547, 0.30010950565338135, 0.2888467311859131, 0.3689159154891968, 0.445814847946167, 0.3725932836532593, 0.2911602258682251, 0.22846055030822754, 0.22605085372924805, 0.40893709659576416, 0.42775416374206543, 0.20836222171783447, 0.2333357334136963, 0.39804911613464355, 0.3212165832519531, 0.195892333984375, 0.22362124919891357, 0.26487624645233154, 0.22749567031860352, 0.1369870901107788, 0.12077617645263672, 0.24939501285552979, 0.26789629459381104, 0.11335766315460205, 0.12515676021575928, 0.2685023546218872, 0.24835801124572754, 0.13637471199035645, 0.06915116310119629, 0.031465768814086914, 0.033051371574401855, 0.07739055156707764, 0.14928090572357178, 0.1548449993133545, 0.03806579113006592, -0.013826131820678711, 0.028536200523376465, 0.011515259742736816, 0.042510986328125, 0.1012643575668335, 0.010776638984680176, -0.06198525428771973, -0.07137572765350342, -0.1317131519317627, -0.05361461639404297, 0.06206834316253662, -0.06432950496673584, -0.12048935890197754, 0.009034037590026855, -0.0639646053314209, -0.19418513774871826, -0.11967575550079346, -0.13497543334960938, -0.24109327793121338, -0.13556921482086182, 0.01042783260345459, -0.0417020320892334, -0.1601254940032959, -0.21524441242218018, -0.21687912940979004, -0.18989944458007812, -0.22562241554260254, -0.3065894842147827, -0.21904540061950684, -0.07379841804504395, -0.15297472476959229, -0.23710381984710693, -0.16524136066436768, -0.18823754787445068, -0.2588622570037842, -0.23817908763885498, -0.2954603433609009, -0.3749955892562866, -0.2390432357788086, -0.04951882362365723, -0.10409390926361084, -0.26441144943237305, -0.2961171865463257, -0.3206024169921875, -0.37296855449676514, -0.283231258392334, -0.14088594913482666, -0.1253669261932373, -0.1848999261856079, -0.21555650234222412, -0.23587965965270996, -0.26917731761932373, -0.23497498035430908, -0.16667389869689941, -0.1993619203567505, -0.24594950675964355, -0.21152019500732422, -0.22987282276153564, -0.2938957214355469, -0.20448064804077148, -0.04813194274902344, -0.10050129890441895, -0.24380457401275635, -0.20102977752685547, -0.09385848045349121, -0.13394904136657715, -0.23743677139282227, -0.22063028812408447, -0.10554337501525879, -0.05075728893280029, -0.04014158248901367, -0.03482246398925781, -0.09469401836395264, -0.1707063913345337, -0.18545877933502197, -0.0828554630279541, 0.03270363807678223, -0.029465794563293457, -0.08564865589141846, -0.008828520774841309, 0.023022890090942383, 0.04940974712371826, 0.07871699333190918, 0.00938403606414795, -0.020748615264892578, 0.015776991844177246, -0.013007640838623047, -0.016423821449279785, 0.07607519626617432, 0.13856661319732666, 0.17144083976745605, 0.19836103916168213, 0.14312708377838135, 0.08844685554504395, 0.09385466575622559, 0.13057422637939453, 0.19418883323669434, 0.1656550168991089, 0.14820384979248047, 0.2732487916946411, 0.26032912731170654, 0.15827274322509766, 0.23128819465637207, 0.2577781677246094, 0.19526267051696777, 0.26577723026275635, 0.3350207805633545, 0.27855539321899414, 0.20366811752319336, 0.2120654582977295, 0.3471252918243408, 0.4206430912017822, 0.33420276641845703, 0.3273230791091919, 0.3509242534637451, 0.2829993963241577, 0.332008957862854, 0.404524564743042, 0.3320397138595581, 0.3025747537612915, 0.3695492744445801, 0.4585667848587036, 0.5032308101654053, 0.43179070949554443, 0.36614155769348145, 0.3820614814758301, 0.39749717712402344, 0.37503886222839355, 0.34576117992401123, 0.42437076568603516, 0.5453416109085083, 0.48537445068359375, 0.35331857204437256, 0.37486279010772705, 0.4858689308166504, 0.5147905349731445, 0.43232786655426025, 0.3892557621002197, 0.4649350643157959, 0.5095640420913696, 0.43350350856781006, 0.3718158006668091, 0.4326080083847046, 0.49584925174713135, 0.45596742630004883, 0.43474292755126953, 0.47605621814727783, 0.47333502769470215, 0.4404726028442383, 0.3915853500366211, 0.33557140827178955, 0.3999840021133423, 0.5150893926620483, 0.4970437288284302, 0.42444562911987305, 0.4048506021499634, 0.39621078968048096, 0.3801177740097046, 0.3829214572906494, 0.4082350730895996, 0.4241880178451538, 0.41378724575042725, 0.3986128568649292, 0.3851116895675659, 0.36377692222595215, 0.35513532161712646, 0.3565793037414551, 0.33568620681762695, 0.35301685333251953, 0.3977299928665161, 0.3435029983520508, 0.296980619430542, 0.3564276695251465, 0.3605707883834839, 0.30052828788757324, 0.2764015197753906, 0.28262293338775635, 0.3255685567855835, 0.3272974491119385, 0.25475525856018066, 0.25814247131347656, 0.3108431100845337, 0.2854355573654175, 0.24884772300720215, 0.2329423427581787, 0.21366536617279053, 0.24191498756408691, 0.2739831209182739, 0.2532503604888916, 0.22822248935699463, 0.1980072259902954, 0.1699124574661255, 0.19997727870941162, 0.22876441478729248, 0.18896055221557617, 0.16018569469451904, 0.19124722480773926, 0.20936596393585205, 0.17635905742645264, 0.12853789329528809, 0.12448525428771973, 0.17805540561676025, 0.1921987533569336, 0.1364384889602661, 0.11728966236114502, 0.12717628479003906, 0.1095055341720581, 0.11255598068237305, 0.11501777172088623, 0.09776890277862549\}, \{-1.1920928955078125e-07, -1.1920928955078125e-07, 4.76837158203125e-07, 9.5367431640625e-07, 2.9802322387695312e-06, 5.125999450683594e-06, 9.5367431640625e-06, 1.3828277587890625e-05, 2.1338462829589844e-05, 2.872943878173828e-05, 3.886222839355469e-05, 4.971027374267578e-05, 6.318092346191406e-05, 7.724761962890625e-05, 9.381771087646484e-05, 0.0001112222671508789, 0.0001310110092163086, 0.00015163421630859375, 0.0001760721206665039, 0.00021255016326904297, 0.0002651214599609375, 0.00033676624298095703, 0.0004240274429321289, 0.0005271434783935547, 0.0006465911865234375, 0.0007777214050292969, 0.0009214878082275391, 0.0010780096054077148, 0.0012400150299072266, 0.0014175176620483398, 0.0015987157821655273, 0.0017883777618408203, 0.0019905567169189453, 0.0021893978118896484, 0.002402782440185547, 0.0026192665100097656, 0.0028554201126098633, 0.003152132034301758, 0.0034835338592529297, 0.003865361213684082, 0.0042994022369384766, 0.004737257957458496, 0.005231022834777832, 0.005736231803894043, 0.006232142448425293, 0.006785392761230469, 0.0073043107986450195, 0.007830977439880371, 0.008400201797485352, 0.008899331092834473, 0.009447097778320312, 0.009988665580749512, 0.01045691967010498, 0.011014819145202637, 0.01154935359954834, 0.012141227722167969, 0.012863636016845703, 0.01349031925201416, 0.014233708381652832, 0.014984607696533203, 0.015620589256286621, 0.016409993171691895, 0.017046451568603516, 0.017672181129455566, 0.018372297286987305, 0.018832921981811523, 0.01942622661590576, 0.019900798797607422, 0.020241737365722656, 0.020727872848510742, 0.02091801166534424, 0.02115333080291748, 0.021259307861328125, 0.021084904670715332, 0.021033287048339844, 0.020658016204833984, 0.02030956745147705, 0.01990044116973877, 0.0192716121673584, 0.018791675567626953, 0.01803290843963623, 0.017357468605041504, 0.016611933708190918, 0.015715599060058594, 0.014973640441894531, 0.013959407806396484, 0.013082146644592285, 0.012084126472473145, 0.010997653007507324, 0.010024309158325195, 0.008800506591796875, 0.007768392562866211, 0.006543517112731934, 0.005352020263671875, 0.004207611083984375, 0.002852201461791992, 0.001705765724182129, 0.00028133392333984375, -0.0009337663650512695, -0.0023986101150512695, -0.0038579702377319336, -0.004896640777587891, -0.006933093070983887, -0.007810473442077637, -0.009076595306396484, -0.011730790138244629, -0.011400580406188965, -0.013871192932128906, -0.01661384105682373, -0.014528751373291016, -0.020139217376708984, -0.020017504692077637, -0.04427051544189453, -0.1284855604171753, -0.055773019790649414, 0.27432501316070557, 0.4197641611099243, 0.16023647785186768, -0.046770572662353516, 0.09858953952789307, 0.29926955699920654, 0.23687148094177246, 0.07439267635345459, 0.07832813262939453, 0.17903292179107666, 0.3071831464767456, 0.4082520008087158, 0.29867780208587646, 0.07255029678344727, -0.07463467121124268, -0.09422111511230469, 0.09741127490997314, 0.30896997451782227, 0.21336793899536133, -0.06238079071044922, -0.16082358360290527, -0.0059626102447509766, 0.11109304428100586, 0.04118692874908447, -0.001970529556274414, -0.01568758487701416, -0.1308119297027588, -0.2494492530822754, -0.29343879222869873, -0.18807709217071533, 0.035208940505981445, 0.06518185138702393, -0.12823379039764404, -0.23186469078063965, -0.241227388381958, -0.28888583183288574, -0.2745392322540283, -0.269575834274292, -0.3450504541397095, -0.24619364738464355, -0.10659360885620117, -0.2191087007522583, -0.3218768835067749, -0.32504284381866455, -0.41658055782318115, -0.43256640434265137, -0.2504643201828003, -0.12248098850250244, -0.25351500511169434, -0.4031703472137451, -0.3739124536514282, -0.41554903984069824, -0.4233818054199219, -0.2119276523590088, -0.241904616355896, -0.4607759714126587, -0.33654630184173584, -0.15313732624053955, -0.25476253032684326, -0.3576667308807373, -0.32992756366729736, -0.32559192180633545, -0.360870361328125, -0.31231582164764404, -0.1946035623550415, -0.1954578161239624, -0.3444420099258423, -0.4183681011199951, -0.24929380416870117, -0.06143510341644287, -0.1780107021331787, -0.33765077590942383, -0.19781625270843506, -0.051230788230895996, -0.10136687755584717, -0.19206678867340088, -0.28691720962524414, -0.24281489849090576, -0.03552901744842529, -0.0028706789016723633, -0.11286568641662598, -0.11816763877868652, -0.09310948848724365, -0.09014451503753662, -0.121329665184021, -0.11799275875091553, 0.08926558494567871, 0.19953036308288574, -0.0023943185806274414, -0.060732245445251465, 0.08560192584991455, 0.03772270679473877, -0.07008719444274902, 0.01198279857635498, 0.1335434913635254, 0.20849096775054932, 0.25003790855407715, 0.18151795864105225, 0.06548619270324707, 0.0647268295288086, 0.18266057968139648, 0.26894938945770264, 0.23718655109405518, 0.16832876205444336, 0.1278526782989502, 0.170754075050354, 0.3106015920639038, 0.32252490520477295, 0.16959261894226074, 0.1489201784133911, 0.2968308925628662, 0.3956648111343384, 0.3551570177078247, 0.2863428592681885, 0.3076368570327759, 0.3077211380004883, 0.22010397911071777, 0.22251105308532715, 0.35890650749206543, 0.4136618375778198, 0.32105469703674316, 0.3053661584854126, 0.37843775749206543, 0.3661247491836548, 0.3255974054336548, 0.2784233093261719, 0.2815166711807251, 0.40967857837677, 0.3726658821105957, 0.22540318965911865, 0.3089485168457031, 0.39496302604675293, 0.35351812839508057, 0.37870705127716064, 0.4121500253677368, 0.3738086223602295, 0.2652316093444824, 0.21804594993591309, 0.3653709888458252, 0.4419715404510498, 0.3310946226119995, 0.2478959560394287, 0.2383410930633545, 0.3208655118942261, 0.39932775497436523, 0.3284567594528198, 0.24911844730377197, 0.18835735321044922, 0.1885216236114502, 0.3732907772064209, 0.3946683406829834, 0.1775580644607544, 0.20476579666137695, 0.37214088439941406, 0.297365665435791, 0.17474329471588135, 0.20479297637939453, 0.24847817420959473, 0.21382462978363037, 0.12556719779968262, 0.11218321323394775, 0.24311590194702148, 0.26419734954833984, 0.11228275299072266, 0.12632155418395996, 0.272489070892334, 0.25454258918762207, 0.14522814750671387, 0.08058357238769531, 0.04517817497253418, 0.04956936836242676, 0.09593117237091064, 0.1704394817352295, 0.17833828926086426, 0.06362438201904297, 0.01445615291595459, 0.05865514278411865, 0.044203758239746094, 0.07741427421569824, 0.1379101276397705, 0.050028204917907715, -0.021233439445495605, -0.028426647186279297, -0.0866243839263916, -0.00715327262878418, 0.11104357242584229, -0.014105677604675293, -0.06869196891784668, 0.06297874450683594, -0.009259462356567383, -0.13739478588104248, -0.0614476203918457, -0.0759890079498291, -0.18007338047027588, -0.07402598857879639, 0.0731356143951416, 0.022660255432128906, -0.09563624858856201, -0.14927184581756592, -0.15022361278533936, -0.12320315837860107, -0.15738558769226074, -0.2383946180343628, -0.1504288911819458, -0.004198789596557617, -0.08409810066223145, -0.167488694190979, -0.09536778926849365, -0.11905217170715332, -0.18887794017791748, -0.16894876956939697, -0.2267364263534546, -0.30585145950317383, -0.17114698886871338, 0.018334507942199707, -0.036666154861450195, -0.19846463203430176, -0.23017489910125732, -0.25592732429504395, -0.3093768358230591, -0.22000503540039062, -0.07946312427520752, -0.06471645832061768, -0.12550139427185059, -0.15791165828704834, -0.17901134490966797, -0.21424496173858643, -0.18137967586517334, -0.11450648307800293, -0.14938223361968994, -0.19720280170440674, -0.16490375995635986, -0.18506693840026855, -0.25076162815093994, -0.16370618343353271, -0.008970379829406738, -0.06370353698730469, -0.20910346508026123, -0.1683253049850464, -0.06367373466491699, -0.10563445091247559, -0.2116776704788208, -0.19709527492523193, -0.084259033203125, -0.03211808204650879, -0.02363431453704834, -0.021051764488220215, -0.0831899642944336, -0.1616666316986084, -0.17903828620910645, -0.07862436771392822, 0.034129977226257324, -0.030289053916931152, -0.08910930156707764, -0.014927148818969727, 0.01462090015411377, 0.03817439079284668, 0.06535124778747559, -0.006643414497375488, -0.039221882820129395, -0.004878997802734375, -0.036478400230407715, -0.0419083833694458, 0.047892212867736816, 0.10803020000457764, 0.1389247179031372, 0.16310596466064453, 0.10615682601928711, 0.049030423164367676, 0.052176713943481445, 0.08721923828125, 0.14809000492095947, 0.1180877685546875, 0.09867644309997559, 0.22142601013183594, 0.20741891860961914, 0.10291719436645508, 0.1743375062942505, 0.1995682716369629, 0.13473773002624512, 0.20452332496643066, 0.272092342376709, 0.21377480030059814, 0.13840901851654053, 0.1448214054107666, 0.27900075912475586, 0.35206472873687744, 0.263651967048645, 0.256550669670105, 0.2792929410934448, 0.20995938777923584, 0.25940072536468506, 0.330751895904541, 0.2575054168701172, 0.22848761081695557, 0.2942301034927368, 0.3834885358810425, 0.42849528789520264, 0.35599660873413086, 0.29115796089172363, 0.30705058574676514, 0.32216978073120117, 0.3010164499282837, 0.27143406867980957, 0.35044872760772705, 0.47260582447052, 0.412439227104187, 0.2817457914352417, 0.3042030334472656, 0.41543304920196533, 0.4460902214050293, 0.364154577255249, 0.3222181797027588, 0.39972615242004395, 0.44491374492645264, 0.37071549892425537, 0.3104130029678345, 0.3722681999206543, 0.4377039670944214, 0.39897966384887695, 0.3796654939651489, 0.4229189157485962, 0.4215703010559082, 0.39108705520629883, 0.3437778949737549, 0.2898319959640503, 0.356526255607605, 0.47335922718048096, 0.45785844326019287, 0.38714730739593506, 0.36984479427337646, 0.36363863945007324, 0.3495290279388428, 0.3550088405609131, 0.3824489116668701, 0.40094733238220215, 0.3930283784866333, 0.3800544738769531, 0.3692972660064697, 0.3501228094100952, 0.34415674209594727, 0.34807658195495605, 0.3295656442642212, 0.3497049808502197, 0.39665985107421875, 0.34521484375, 0.301041841506958, 0.3629206418991089, 0.36975300312042236, 0.31182050704956055, 0.2904839515686035, 0.2989327907562256, 0.3443582057952881, 0.3487238883972168, 0.27816474437713623, 0.2842766046524048, 0.338948130607605, 0.3158252239227295, 0.28169405460357666, 0.26747190952301025, 0.25088953971862793, 0.28097569942474365, 0.31500864028930664, 0.2966419458389282, 0.27289509773254395, 0.24506640434265137, 0.21863305568695068, 0.2501581907272339, 0.2813589572906494, 0.24244964122772217, 0.21546220779418945, 0.24827325344085693, 0.2670714855194092, 0.2362205982208252, 0.18936467170715332, 0.18621742725372314, 0.24160587787628174, 0.25594615936279297, 0.2015317678451538, 0.18361639976501465, 0.19353771209716797, 0.1773679256439209, 0.1806330680847168, 0.18324732780456543, 0.16733908653259277\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_24bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_24bit_48000.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_24bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 24;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, 0.0, 7.152557373046875e-07, 2.6226043701171875e-06, 6.556510925292969e-06, 1.2040138244628906e-05, 2.0742416381835938e-05, 3.2067298889160156e-05, 4.7087669372558594e-05, 6.473064422607422e-05, 8.678436279296875e-05, 0.00011146068572998047, 0.00014066696166992188, 0.00017261505126953125, 0.00020933151245117188, 0.00024831295013427734, 0.0002923011779785156, 0.0003383159637451172, 0.0003935098648071289, 0.00047397613525390625, 0.0005924701690673828, 0.0007510185241699219, 0.0009467601776123047, 0.0011757612228393555, 0.0014437437057495117, 0.0017348527908325195, 0.002057194709777832, 0.0024052858352661133, 0.00276792049407959, 0.003163456916809082, 0.0035680532455444336, 0.003991246223449707, 0.004441976547241211, 0.004886507987976074, 0.005361437797546387, 0.005846261978149414, 0.006371617317199707, 0.007035374641418457, 0.007773995399475098, 0.008626341819763184, 0.009595155715942383, 0.010571837425231934, 0.011674165725708008, 0.012801051139831543, 0.0139085054397583, 0.015142679214477539, 0.01630091667175293, 0.01747608184814453, 0.018746137619018555, 0.01986110210418701, 0.02108168601989746, 0.022292733192443848, 0.02333521842956543, 0.024582505226135254, 0.025773048400878906, 0.027095913887023926, 0.028706669807434082, 0.030106067657470703, 0.03176474571228027, 0.033440470695495605, 0.03486049175262451, 0.036620497703552246, 0.03804290294647217, 0.03943753242492676, 0.04100167751312256, 0.042027831077575684, 0.04335308074951172, 0.04441177845001221, 0.04517197608947754, 0.04625880718231201, 0.046680331230163574, 0.04720878601074219, 0.047441959381103516, 0.04705607891082764, 0.04693794250488281, 0.04610264301300049, 0.04532325267791748, 0.044411540031433105, 0.043007612228393555, 0.04193687438964844, 0.04024386405944824, 0.03873574733734131, 0.03707301616668701, 0.035071372985839844, 0.03341710567474365, 0.03115224838256836, 0.02919602394104004, 0.026967287063598633, 0.0245436429977417, 0.022371292114257812, 0.019638657569885254, 0.017338991165161133, 0.014601349830627441, 0.011943221092224121, 0.009397029876708984, 0.006356716156005859, 0.0038193464279174805, 0.0006439685821533203, -0.002169370651245117, -0.005274295806884766, -0.008595466613769531, -0.011147618293762207, -0.01512765884399414, -0.017611026763916016, -0.020638704299926758, -0.025217652320861816, -0.026407361030578613, -0.031000494956970215, -0.035413146018981934, -0.035219788551330566, -0.04285740852355957, -0.04419386386871338, -0.07065105438232422, -0.1564619541168213, -0.08552801609039307, 0.24239099025726318, 0.3864394426345825, 0.12467241287231445, -0.08393871784210205, 0.0599592924118042, 0.25836503505706787, 0.19484519958496094, 0.030383586883544922, 0.03242063522338867, 0.1321181058883667, 0.2580540180206299, 0.35796380043029785, 0.24705147743225098, 0.018767356872558594, -0.12914705276489258, -0.15051043033599854, 0.03967642784118652, 0.2507213354110718, 0.1530904769897461, -0.12343156337738037, -0.22272634506225586, -0.06961596012115479, 0.047440409660339355, -0.023664355278015137, -0.06798660755157471, -0.08156132698059082, -0.19806981086730957, -0.3167363405227661, -0.36041784286499023, -0.25601136684417725, -0.03191184997558594, -0.0019611120223999023, -0.1955111026763916, -0.2977677583694458, -0.3072565793991089, -0.35410332679748535, -0.3385869264602661, -0.3335835933685303, -0.4074738025665283, -0.30776309967041016, -0.16734051704406738, -0.2780416011810303, -0.38017547130584717, -0.3817152976989746, -0.47177445888519287, -0.4866825342178345, -0.3023874759674072, -0.17320525646209717, -0.3024212121963501, -0.4500840902328491, -0.4194523096084595, -0.45877671241760254, -0.4649801254272461, -0.2514234781265259, -0.27913451194763184, -0.4962806701660156, -0.36953091621398926, -0.18422472476959229, -0.2835296392440796, -0.3840268850326538, -0.35425662994384766, -0.34723663330078125, -0.38039541244506836, -0.3292655944824219, -0.20911633968353271, -0.2077404260635376, -0.35398340225219727, -0.4257551431655884, -0.2539527416229248, -0.06363248825073242, -0.17776715755462646, -0.33460700511932373, -0.19255638122558594, -0.04315447807312012, -0.09097802639007568, -0.1792086362838745, -0.2713695764541626, -0.22517192363739014, -0.015021204948425293, 0.019883275032043457, -0.08760619163513184, -0.0902794599533081, -0.06332087516784668, -0.05756986141204834, -0.08678078651428223, -0.08119654655456543, 0.12865030765533447, 0.2406013011932373, 0.041402578353881836, -0.015124917030334473, 0.1329936981201172, 0.08767187595367432, -0.01891481876373291, 0.06548357009887695, 0.18902921676635742, 0.2651712894439697, 0.309159517288208, 0.24167048931121826, 0.12716591358184814, 0.1285635232925415, 0.24710190296173096, 0.3353545665740967, 0.3048640489578247, 0.23640525341033936, 0.19801568984985352, 0.24145936965942383, 0.38207805156707764, 0.39572572708129883, 0.242537260055542, 0.22294330596923828, 0.3719959259033203, 0.47042763233184814, 0.43123185634613037, 0.3625662326812744, 0.383408784866333, 0.3847602605819702, 0.2966369390487671, 0.29896271228790283, 0.4360523223876953, 0.4896125793457031, 0.39724302291870117, 0.3815962076187134, 0.4534264802932739, 0.4414411783218384, 0.3999319076538086, 0.35165393352508545, 0.35485661029815674, 0.4814718961715698, 0.44379913806915283, 0.29586541652679443, 0.37749183177948, 0.4630330801010132, 0.42011332511901855, 0.4437040090560913, 0.47643351554870605, 0.435949444770813, 0.3261157274246216, 0.27746081352233887, 0.4226391315460205, 0.4980888366699219, 0.38505077362060547, 0.30010950565338135, 0.2888467311859131, 0.3689159154891968, 0.445814847946167, 0.3725932836532593, 0.2911602258682251, 0.22846055030822754, 0.22605085372924805, 0.40893709659576416, 0.42775416374206543, 0.20836222171783447, 0.2333357334136963, 0.39804911613464355, 0.3212165832519531, 0.195892333984375, 0.22362124919891357, 0.26487624645233154, 0.22749567031860352, 0.1369870901107788, 0.12077617645263672, 0.24939501285552979, 0.26789629459381104, 0.11335766315460205, 0.12515676021575928, 0.2685023546218872, 0.24835801124572754, 0.13637471199035645, 0.06915116310119629, 0.031465768814086914, 0.033051371574401855, 0.07739055156707764, 0.14928090572357178, 0.1548449993133545, 0.03806579113006592, -0.013826131820678711, 0.028536200523376465, 0.011515259742736816, 0.042510986328125, 0.1012643575668335, 0.010776638984680176, -0.06198525428771973, -0.07137572765350342, -0.1317131519317627, -0.05361461639404297, 0.06206834316253662, -0.06432950496673584, -0.12048935890197754, 0.009034037590026855, -0.0639646053314209, -0.19418513774871826, -0.11967575550079346, -0.13497543334960938, -0.24109327793121338, -0.13556921482086182, 0.01042783260345459, -0.0417020320892334, -0.1601254940032959, -0.21524441242218018, -0.21687912940979004, -0.18989944458007812, -0.22562241554260254, -0.3065894842147827, -0.21904540061950684, -0.07379841804504395, -0.15297472476959229, -0.23710381984710693, -0.16524136066436768, -0.18823754787445068, -0.2588622570037842, -0.23817908763885498, -0.2954603433609009, -0.3749955892562866, -0.2390432357788086, -0.04951882362365723, -0.10409390926361084, -0.26441144943237305, -0.2961171865463257, -0.3206024169921875, -0.37296855449676514, -0.283231258392334, -0.14088594913482666, -0.1253669261932373, -0.1848999261856079, -0.21555650234222412, -0.23587965965270996, -0.26917731761932373, -0.23497498035430908, -0.16667389869689941, -0.1993619203567505, -0.24594950675964355, -0.21152019500732422, -0.22987282276153564, -0.2938957214355469, -0.20448064804077148, -0.04813194274902344, -0.10050129890441895, -0.24380457401275635, -0.20102977752685547, -0.09385848045349121, -0.13394904136657715, -0.23743677139282227, -0.22063028812408447, -0.10554337501525879, -0.05075728893280029, -0.04014158248901367, -0.03482246398925781, -0.09469401836395264, -0.1707063913345337, -0.18545877933502197, -0.0828554630279541, 0.03270363807678223, -0.029465794563293457, -0.08564865589141846, -0.008828520774841309, 0.023022890090942383, 0.04940974712371826, 0.07871699333190918, 0.00938403606414795, -0.020748615264892578, 0.015776991844177246, -0.013007640838623047, -0.016423821449279785, 0.07607519626617432, 0.13856661319732666, 0.17144083976745605, 0.19836103916168213, 0.14312708377838135, 0.08844685554504395, 0.09385466575622559, 0.13057422637939453, 0.19418883323669434, 0.1656550168991089, 0.14820384979248047, 0.2732487916946411, 0.26032912731170654, 0.15827274322509766, 0.23128819465637207, 0.2577781677246094, 0.19526267051696777, 0.26577723026275635, 0.3350207805633545, 0.27855539321899414, 0.20366811752319336, 0.2120654582977295, 0.3471252918243408, 0.4206430912017822, 0.33420276641845703, 0.3273230791091919, 0.3509242534637451, 0.2829993963241577, 0.332008957862854, 0.404524564743042, 0.3320397138595581, 0.3025747537612915, 0.3695492744445801, 0.4585667848587036, 0.5032308101654053, 0.43179070949554443, 0.36614155769348145, 0.3820614814758301, 0.39749717712402344, 0.37503886222839355, 0.34576117992401123, 0.42437076568603516, 0.5453416109085083, 0.48537445068359375, 0.35331857204437256, 0.37486279010772705, 0.4858689308166504, 0.5147905349731445, 0.43232786655426025, 0.3892557621002197, 0.4649350643157959, 0.5095640420913696, 0.43350350856781006, 0.3718158006668091, 0.4326080083847046, 0.49584925174713135, 0.45596742630004883, 0.43474292755126953, 0.47605621814727783, 0.47333502769470215, 0.4404726028442383, 0.3915853500366211, 0.33557140827178955, 0.3999840021133423, 0.5150893926620483, 0.4970437288284302, 0.42444562911987305, 0.4048506021499634, 0.39621078968048096, 0.3801177740097046, 0.3829214572906494, 0.4082350730895996, 0.4241880178451538, 0.41378724575042725, 0.3986128568649292, 0.3851116895675659, 0.36377692222595215, 0.35513532161712646, 0.3565793037414551, 0.33568620681762695, 0.35301685333251953, 0.3977299928665161, 0.3435029983520508, 0.296980619430542, 0.3564276695251465, 0.3605707883834839, 0.30052828788757324, 0.2764015197753906, 0.28262293338775635, 0.3255685567855835, 0.3272974491119385, 0.25475525856018066, 0.25814247131347656, 0.3108431100845337, 0.2854355573654175, 0.24884772300720215, 0.2329423427581787, 0.21366536617279053, 0.24191498756408691, 0.2739831209182739, 0.2532503604888916, 0.22822248935699463, 0.1980072259902954, 0.1699124574661255, 0.19997727870941162, 0.22876441478729248, 0.18896055221557617, 0.16018569469451904, 0.19124722480773926, 0.20936596393585205, 0.17635905742645264, 0.12853789329528809, 0.12448525428771973, 0.17805540561676025, 0.1921987533569336, 0.1364384889602661, 0.11728966236114502, 0.12717628479003906, 0.1095055341720581, 0.11255598068237305, 0.11501777172088623, 0.09776890277862549\}, \{-1.1920928955078125e-07, -1.1920928955078125e-07, 4.76837158203125e-07, 9.5367431640625e-07, 2.9802322387695312e-06, 5.125999450683594e-06, 9.5367431640625e-06, 1.3828277587890625e-05, 2.1338462829589844e-05, 2.872943878173828e-05, 3.886222839355469e-05, 4.971027374267578e-05, 6.318092346191406e-05, 7.724761962890625e-05, 9.381771087646484e-05, 0.0001112222671508789, 0.0001310110092163086, 0.00015163421630859375, 0.0001760721206665039, 0.00021255016326904297, 0.0002651214599609375, 0.00033676624298095703, 0.0004240274429321289, 0.0005271434783935547, 0.0006465911865234375, 0.0007777214050292969, 0.0009214878082275391, 0.0010780096054077148, 0.0012400150299072266, 0.0014175176620483398, 0.0015987157821655273, 0.0017883777618408203, 0.0019905567169189453, 0.0021893978118896484, 0.002402782440185547, 0.0026192665100097656, 0.0028554201126098633, 0.003152132034301758, 0.0034835338592529297, 0.003865361213684082, 0.0042994022369384766, 0.004737257957458496, 0.005231022834777832, 0.005736231803894043, 0.006232142448425293, 0.006785392761230469, 0.0073043107986450195, 0.007830977439880371, 0.008400201797485352, 0.008899331092834473, 0.009447097778320312, 0.009988665580749512, 0.01045691967010498, 0.011014819145202637, 0.01154935359954834, 0.012141227722167969, 0.012863636016845703, 0.01349031925201416, 0.014233708381652832, 0.014984607696533203, 0.015620589256286621, 0.016409993171691895, 0.017046451568603516, 0.017672181129455566, 0.018372297286987305, 0.018832921981811523, 0.01942622661590576, 0.019900798797607422, 0.020241737365722656, 0.020727872848510742, 0.02091801166534424, 0.02115333080291748, 0.021259307861328125, 0.021084904670715332, 0.021033287048339844, 0.020658016204833984, 0.02030956745147705, 0.01990044116973877, 0.0192716121673584, 0.018791675567626953, 0.01803290843963623, 0.017357468605041504, 0.016611933708190918, 0.015715599060058594, 0.014973640441894531, 0.013959407806396484, 0.013082146644592285, 0.012084126472473145, 0.010997653007507324, 0.010024309158325195, 0.008800506591796875, 0.007768392562866211, 0.006543517112731934, 0.005352020263671875, 0.004207611083984375, 0.002852201461791992, 0.001705765724182129, 0.00028133392333984375, -0.0009337663650512695, -0.0023986101150512695, -0.0038579702377319336, -0.004896640777587891, -0.006933093070983887, -0.007810473442077637, -0.009076595306396484, -0.011730790138244629, -0.011400580406188965, -0.013871192932128906, -0.01661384105682373, -0.014528751373291016, -0.020139217376708984, -0.020017504692077637, -0.04427051544189453, -0.1284855604171753, -0.055773019790649414, 0.27432501316070557, 0.4197641611099243, 0.16023647785186768, -0.046770572662353516, 0.09858953952789307, 0.29926955699920654, 0.23687148094177246, 0.07439267635345459, 0.07832813262939453, 0.17903292179107666, 0.3071831464767456, 0.4082520008087158, 0.29867780208587646, 0.07255029678344727, -0.07463467121124268, -0.09422111511230469, 0.09741127490997314, 0.30896997451782227, 0.21336793899536133, -0.06238079071044922, -0.16082358360290527, -0.0059626102447509766, 0.11109304428100586, 0.04118692874908447, -0.001970529556274414, -0.01568758487701416, -0.1308119297027588, -0.2494492530822754, -0.29343879222869873, -0.18807709217071533, 0.035208940505981445, 0.06518185138702393, -0.12823379039764404, -0.23186469078063965, -0.241227388381958, -0.28888583183288574, -0.2745392322540283, -0.269575834274292, -0.3450504541397095, -0.24619364738464355, -0.10659360885620117, -0.2191087007522583, -0.3218768835067749, -0.32504284381866455, -0.41658055782318115, -0.43256640434265137, -0.2504643201828003, -0.12248098850250244, -0.25351500511169434, -0.4031703472137451, -0.3739124536514282, -0.41554903984069824, -0.4233818054199219, -0.2119276523590088, -0.241904616355896, -0.4607759714126587, -0.33654630184173584, -0.15313732624053955, -0.25476253032684326, -0.3576667308807373, -0.32992756366729736, -0.32559192180633545, -0.360870361328125, -0.31231582164764404, -0.1946035623550415, -0.1954578161239624, -0.3444420099258423, -0.4183681011199951, -0.24929380416870117, -0.06143510341644287, -0.1780107021331787, -0.33765077590942383, -0.19781625270843506, -0.051230788230895996, -0.10136687755584717, -0.19206678867340088, -0.28691720962524414, -0.24281489849090576, -0.03552901744842529, -0.0028706789016723633, -0.11286568641662598, -0.11816763877868652, -0.09310948848724365, -0.09014451503753662, -0.121329665184021, -0.11799275875091553, 0.08926558494567871, 0.19953036308288574, -0.0023943185806274414, -0.060732245445251465, 0.08560192584991455, 0.03772270679473877, -0.07008719444274902, 0.01198279857635498, 0.1335434913635254, 0.20849096775054932, 0.25003790855407715, 0.18151795864105225, 0.06548619270324707, 0.0647268295288086, 0.18266057968139648, 0.26894938945770264, 0.23718655109405518, 0.16832876205444336, 0.1278526782989502, 0.170754075050354, 0.3106015920639038, 0.32252490520477295, 0.16959261894226074, 0.1489201784133911, 0.2968308925628662, 0.3956648111343384, 0.3551570177078247, 0.2863428592681885, 0.3076368570327759, 0.3077211380004883, 0.22010397911071777, 0.22251105308532715, 0.35890650749206543, 0.4136618375778198, 0.32105469703674316, 0.3053661584854126, 0.37843775749206543, 0.3661247491836548, 0.3255974054336548, 0.2784233093261719, 0.2815166711807251, 0.40967857837677, 0.3726658821105957, 0.22540318965911865, 0.3089485168457031, 0.39496302604675293, 0.35351812839508057, 0.37870705127716064, 0.4121500253677368, 0.3738086223602295, 0.2652316093444824, 0.21804594993591309, 0.3653709888458252, 0.4419715404510498, 0.3310946226119995, 0.2478959560394287, 0.2383410930633545, 0.3208655118942261, 0.39932775497436523, 0.3284567594528198, 0.24911844730377197, 0.18835735321044922, 0.1885216236114502, 0.3732907772064209, 0.3946683406829834, 0.1775580644607544, 0.20476579666137695, 0.37214088439941406, 0.297365665435791, 0.17474329471588135, 0.20479297637939453, 0.24847817420959473, 0.21382462978363037, 0.12556719779968262, 0.11218321323394775, 0.24311590194702148, 0.26419734954833984, 0.11228275299072266, 0.12632155418395996, 0.272489070892334, 0.25454258918762207, 0.14522814750671387, 0.08058357238769531, 0.04517817497253418, 0.04956936836242676, 0.09593117237091064, 0.1704394817352295, 0.17833828926086426, 0.06362438201904297, 0.01445615291595459, 0.05865514278411865, 0.044203758239746094, 0.07741427421569824, 0.1379101276397705, 0.050028204917907715, -0.021233439445495605, -0.028426647186279297, -0.0866243839263916, -0.00715327262878418, 0.11104357242584229, -0.014105677604675293, -0.06869196891784668, 0.06297874450683594, -0.009259462356567383, -0.13739478588104248, -0.0614476203918457, -0.0759890079498291, -0.18007338047027588, -0.07402598857879639, 0.0731356143951416, 0.022660255432128906, -0.09563624858856201, -0.14927184581756592, -0.15022361278533936, -0.12320315837860107, -0.15738558769226074, -0.2383946180343628, -0.1504288911819458, -0.004198789596557617, -0.08409810066223145, -0.167488694190979, -0.09536778926849365, -0.11905217170715332, -0.18887794017791748, -0.16894876956939697, -0.2267364263534546, -0.30585145950317383, -0.17114698886871338, 0.018334507942199707, -0.036666154861450195, -0.19846463203430176, -0.23017489910125732, -0.25592732429504395, -0.3093768358230591, -0.22000503540039062, -0.07946312427520752, -0.06471645832061768, -0.12550139427185059, -0.15791165828704834, -0.17901134490966797, -0.21424496173858643, -0.18137967586517334, -0.11450648307800293, -0.14938223361968994, -0.19720280170440674, -0.16490375995635986, -0.18506693840026855, -0.25076162815093994, -0.16370618343353271, -0.008970379829406738, -0.06370353698730469, -0.20910346508026123, -0.1683253049850464, -0.06367373466491699, -0.10563445091247559, -0.2116776704788208, -0.19709527492523193, -0.084259033203125, -0.03211808204650879, -0.02363431453704834, -0.021051764488220215, -0.0831899642944336, -0.1616666316986084, -0.17903828620910645, -0.07862436771392822, 0.034129977226257324, -0.030289053916931152, -0.08910930156707764, -0.014927148818969727, 0.01462090015411377, 0.03817439079284668, 0.06535124778747559, -0.006643414497375488, -0.039221882820129395, -0.004878997802734375, -0.036478400230407715, -0.0419083833694458, 0.047892212867736816, 0.10803020000457764, 0.1389247179031372, 0.16310596466064453, 0.10615682601928711, 0.049030423164367676, 0.052176713943481445, 0.08721923828125, 0.14809000492095947, 0.1180877685546875, 0.09867644309997559, 0.22142601013183594, 0.20741891860961914, 0.10291719436645508, 0.1743375062942505, 0.1995682716369629, 0.13473773002624512, 0.20452332496643066, 0.272092342376709, 0.21377480030059814, 0.13840901851654053, 0.1448214054107666, 0.27900075912475586, 0.35206472873687744, 0.263651967048645, 0.256550669670105, 0.2792929410934448, 0.20995938777923584, 0.25940072536468506, 0.330751895904541, 0.2575054168701172, 0.22848761081695557, 0.2942301034927368, 0.3834885358810425, 0.42849528789520264, 0.35599660873413086, 0.29115796089172363, 0.30705058574676514, 0.32216978073120117, 0.3010164499282837, 0.27143406867980957, 0.35044872760772705, 0.47260582447052, 0.412439227104187, 0.2817457914352417, 0.3042030334472656, 0.41543304920196533, 0.4460902214050293, 0.364154577255249, 0.3222181797027588, 0.39972615242004395, 0.44491374492645264, 0.37071549892425537, 0.3104130029678345, 0.3722681999206543, 0.4377039670944214, 0.39897966384887695, 0.3796654939651489, 0.4229189157485962, 0.4215703010559082, 0.39108705520629883, 0.3437778949737549, 0.2898319959640503, 0.356526255607605, 0.47335922718048096, 0.45785844326019287, 0.38714730739593506, 0.36984479427337646, 0.36363863945007324, 0.3495290279388428, 0.3550088405609131, 0.3824489116668701, 0.40094733238220215, 0.3930283784866333, 0.3800544738769531, 0.3692972660064697, 0.3501228094100952, 0.34415674209594727, 0.34807658195495605, 0.3295656442642212, 0.3497049808502197, 0.39665985107421875, 0.34521484375, 0.301041841506958, 0.3629206418991089, 0.36975300312042236, 0.31182050704956055, 0.2904839515686035, 0.2989327907562256, 0.3443582057952881, 0.3487238883972168, 0.27816474437713623, 0.2842766046524048, 0.338948130607605, 0.3158252239227295, 0.28169405460357666, 0.26747190952301025, 0.25088953971862793, 0.28097569942474365, 0.31500864028930664, 0.2966419458389282, 0.27289509773254395, 0.24506640434265137, 0.21863305568695068, 0.2501581907272339, 0.2813589572906494, 0.24244964122772217, 0.21546220779418945, 0.24827325344085693, 0.2670714855194092, 0.2362205982208252, 0.18936467170715332, 0.18621742725372314, 0.24160587787628174, 0.25594615936279297, 0.2015317678451538, 0.18361639976501465, 0.19353771209716797, 0.1773679256439209, 0.1806330680847168, 0.18324732780456543, 0.16733908653259277\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_32bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_32bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_32bit_44100.h}
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_32bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_44100::numSamplesPerChannel} = 384873\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_44100::bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_32bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_32bit_44100::testBuffer} = \{\{-0.10654573142528534, -0.11086378246545792, -0.11495868861675262, -0.13741405308246613, -0.14436161518096924, -0.07571711391210556, -0.07994011044502258, -0.10436136275529861, -0.12068937718868256, -0.163199782371521, -0.1605616807937622, -0.14431676268577576, -0.11785893142223358, -0.11374861747026443, -0.13877761363983154, -0.19541782140731812, -0.2437116801738739, -0.2504839599132538, -0.16460417211055756, -0.15231187641620636, -0.11007446050643921, -0.07427804917097092, -0.12210794538259506, -0.15676698088645935, -0.2024340182542801, -0.2378908395767212, -0.22202207148075104, -0.17159946262836456, -0.14988259971141815, -0.15377970039844513, -0.14517268538475037, -0.09163959324359894, -0.035986557602882385, -0.02559933252632618, -0.0773739144206047, -0.13961444795131683, -0.16486811637878418, -0.1642903834581375, -0.13523982465267181, -0.06943988054990768, -0.027117568999528885, -0.022984718903899193, -0.0627516359090805, -0.10830045491456985, -0.1435433179140091, -0.1474071592092514, -0.14713439345359802, -0.10550635308027267, -0.035432010889053345, 0.0027533872053027153, 0.017753789201378822, -0.06665127724409103, -0.11327283829450607, -0.14618153870105743, -0.20166568458080292, -0.1979595422744751, -0.13317497074604034, -0.07182467728853226, -0.0892641469836235, -0.05383358523249626, -0.0514177531003952, -0.046356163918972015, -0.037941765040159225, 0.009598610922694206, 0.029046352952718735, 0.059682391583919525, 0.053137049078941345, 0.014526255428791046, -0.07053980976343155, -0.10104520618915558, -0.0805070698261261, -0.02633623592555523, -0.006700810976326466, -0.005301951430737972, -0.0362333320081234, -0.04376407340168953, 0.05467132106423378, 0.025432296097278595, 0.012060509994626045, -0.022590387612581253, -0.02610771730542183, -0.021223485469818115, -0.02007393352687359, -0.015282858163118362, 0.008273095823824406, 0.015339110046625137, 0.052239056676626205, 0.0406816191971302, 0.0620943047106266, 0.026452526450157166, -0.0003376388340257108, -0.013151046819984913, -0.019276905804872513, -0.000476406974485144, 0.033063288778066635, 0.03876132890582085, 0.03317723050713539, 0.10930770635604858, 0.12609106302261353, 0.13342824578285217, 0.12120353430509567, 0.058676980435848236, 0.07592218369245529, 0.08193482458591461, 0.06398347020149231, 0.07712594419717789, 0.06805115938186646, 0.098694808781147, 0.14866608381271362, 0.20477294921875, 0.20494911074638367, 0.16524285078048706, 0.1688390076160431, 0.16633254289627075, 0.1062576025724411, 0.12215996533632278, 0.20390713214874268, 0.2651367485523224, 0.25690796971321106, 0.24583959579467773, 0.256146103143692, 0.16832926869392395, 0.13466861844062805, 0.1346236914396286, 0.12321566790342331, 0.16049039363861084, 0.19890908896923065, 0.242774099111557, 0.23645171523094177, 0.27003395557403564, 0.276238352060318, 0.25729161500930786, 0.26536837220191956, 0.22318758070468903, 0.163107231259346, 0.16733112931251526, 0.18780580163002014, 0.21744175255298615, 0.23527967929840088, 0.24036073684692383, 0.2565491497516632, 0.30208536982536316, 0.35403892397880554, 0.3526226282119751, 0.3460942208766937, 0.30663153529167175, 0.33553406596183777, 0.3057543635368347, 0.2687184810638428, 0.2383570373058319, 0.2280171662569046, 0.2809559404850006, 0.30829092860221863, 0.3041536211967468, 0.3074176609516144, 0.3143196403980255, 0.2581368684768677, 0.29476305842399597, 0.3203071057796478, 0.3113045394420624, 0.30545344948768616, 0.35099008679389954, 0.3641475737094879, 0.3391929566860199, 0.342308908700943, 0.3248733878135681, 0.32878077030181885, 0.348391056060791, 0.32364922761917114, 0.3666457533836365, 0.31888890266418457, 0.3485170304775238, 0.35097619891166687, 0.29793909192085266, 0.30303287506103516, 0.32259273529052734, 0.3318563997745514, 0.3026358187198639, 0.3554430305957794, 0.37340453267097473, 0.3471658229827881, 0.3235280513763428, 0.3301352560520172, 0.3078373372554779, 0.3523867428302765, 0.3408990800380707, 0.31364673376083374, 0.347843736410141, 0.3690349757671356, 0.3545178771018982, 0.35175198316574097, 0.36120036244392395, 0.3539530336856842, 0.35774993896484375, 0.3542696237564087, 0.3310922384262085, 0.3206315040588379, 0.35456445813179016, 0.3461000323295593, 0.3260113596916199, 0.3236057460308075, 0.2945432960987091, 0.337971031665802, 0.37424618005752563, 0.3846989572048187, 0.3572649359703064, 0.37454867362976074, 0.347695529460907, 0.3549690544605255, 0.3355972468852997, 0.3330603539943695, 0.3093926012516022, 0.3089359700679779, 0.2923196256160736, 0.2620227336883545, 0.3297586441040039, 0.32742032408714294, 0.3419759273529053, 0.3073009252548218, 0.297075092792511, 0.30074185132980347, 0.325280100107193, 0.33291471004486084, 0.3332453966140747, 0.3018326759338379, 0.31633010506629944, 0.3168993890285492, 0.3271448016166687, 0.31844666600227356, 0.295942485332489, 0.2917718291282654, 0.27710267901420593, 0.26118332147598267, 0.23221439123153687, 0.3317529261112213, 0.3540629744529724, 0.2922021746635437, 0.2951115667819977, 0.2493109554052353, 0.2867589592933655, 0.2960498631000519, 0.2836502492427826, 0.31431350111961365, 0.26537907123565674, 0.2590537369251251, 0.25247299671173096, 0.214023157954216, 0.2071918398141861, 0.22232457995414734, 0.26061317324638367, 0.30542057752609253, 0.28974950313568115, 0.24859151244163513, 0.2228160947561264, 0.25007280707359314, 0.26055601239204407, 0.2254960834980011, 0.27290746569633484, 0.2760733962059021, 0.2615794539451599, 0.27167510986328125, 0.2546367347240448, 0.21572034060955048, 0.21540221571922302, 0.192155659198761, 0.16099269688129425, 0.17680823802947998, 0.2131834626197815, 0.23785944283008575, 0.18247728049755096, 0.18726205825805664, 0.12993094325065613, 0.1181115210056305, 0.18653647601604462, 0.18050558865070343, 0.16915030777454376, 0.16404005885124207, 0.12621153891086578, 0.09435564279556274, 0.10899075120687485, 0.148171529173851, 0.11626031249761581, 0.10354291647672653, 0.13250792026519775, 0.09787636995315552, 0.1030190959572792, 0.1423940807580948, 0.10291619598865509, 0.08009081333875656, 0.11242035776376724, 0.09399483352899551, 0.1172405406832695, 0.15611103177070618, 0.06934958696365356, 0.06423342972993851, 0.08321265131235123, 0.09821876883506775, 0.13949915766716003, 0.12564539909362793, 0.07938070595264435, 0.045767609030008316, 0.05813327059149742, 0.047100234776735306, 0.06823265552520752, 0.0754186138510704, 0.05630476027727127, 0.017302609980106354, 0.0008599076536484063, 0.04353911802172661, 0.05204787477850914, 0.0824984684586525, 0.08795347064733505, 0.023234887048602104, 0.0009291400201618671, -0.0076574888080358505, 0.03232860192656517, 0.07685714960098267, 0.08119689673185349, 0.022120295092463493, -0.030937619507312775, -0.01876123994588852, -0.005620893556624651, 0.016592886298894882, 0.020832696929574013, 0.02656138315796852, -0.006862107198685408, -0.04585770145058632, -0.019484128803014755, -0.04244006425142288, -0.07499007135629654, -0.07102051377296448, -0.0662568062543869, -0.07428179681301117, -0.08879119902849197, -0.1008056253194809, -0.09425801783800125, -0.06951656192541122, -0.0381024032831192, -0.05902015417814255, -0.05611433461308479, -0.0790177583694458, -0.09637999534606934, -0.09812989085912704, -0.11073868721723557, -0.04480006918311119, -0.07395800203084946, -0.09014502167701721, -0.08693195879459381, -0.11231470853090286, -0.13826541602611542, -0.1370057761669159, -0.07036778330802917, -0.0552164763212204, -0.13812334835529327, -0.12577186524868011, -0.11669572442770004, -0.14448396861553192, -0.13990573585033417, -0.13741348683834076, -0.15565867722034454, -0.20557968318462372, -0.2103797346353531, -0.17862746119499207, -0.17775960266590118, -0.20560288429260254, -0.2237730473279953, -0.2743721902370453, -0.24996384978294373, -0.23076921701431274, -0.259387344121933, -0.24719151854515076, -0.268353134393692, -0.31968554854393005, -0.31176629662513733, -0.29554569721221924, -0.2924174666404724, -0.3033452332019806, -0.30051130056381226, -0.3123569190502167, -0.3448212444782257, -0.3220278024673462, -0.33063265681266785, -0.35563501715660095, -0.34307965636253357, -0.3080213963985443, -0.3056949973106384, -0.3366694152355194, -0.34156039357185364, -0.3316612243652344, -0.3065110445022583, -0.3081991970539093, -0.31517091393470764, -0.3162621259689331, -0.3385170102119446, -0.3392433226108551, -0.3133665919303894, -0.2800193428993225, -0.25216805934906006, -0.2883094251155853, -0.2657769024372101, -0.2518283724784851, -0.291072815656662, -0.2559393048286438, -0.24693608283996582, -0.2636662721633911, -0.2624438405036926, -0.2494381219148636, -0.2416200190782547, -0.22538360953330994, -0.2591025233268738, -0.2606838047504425, -0.26585760712623596, -0.25937068462371826, -0.23794609308242798, -0.24189132452011108, -0.240736722946167, -0.25603818893432617, -0.2745775580406189, -0.25089573860168457, -0.2764233648777008, -0.29448723793029785, -0.27957355976104736, -0.28125864267349243, -0.2727208435535431, -0.28344786167144775, -0.2571921944618225, -0.2760695815086365, -0.2874547243118286, -0.30504369735717773, -0.29986709356307983, -0.29826271533966064, -0.28532710671424866, -0.2496851533651352, -0.2607952654361725, -0.29777657985687256, -0.30393722653388977, -0.290038526058197, -0.264538437128067, -0.28155800700187683, -0.28155699372291565, -0.31245583295822144, -0.33506739139556885, -0.326878160238266, -0.32665902376174927, -0.29288503527641296, -0.3238815367221832, -0.32362183928489685, -0.28742843866348267, -0.3196392357349396, -0.32520994544029236, -0.33188876509666443, -0.3426867127418518, -0.3408244550228119, -0.33985793590545654, -0.3346248269081116, -0.32897987961769104, -0.289229154586792, -0.3050055503845215, -0.35268786549568176, -0.3525750935077667, -0.3248194754123688, -0.3169674277305603, -0.2992347478866577, -0.29648488759994507, -0.3069400489330292, -0.33537572622299194, -0.34434187412261963, -0.32709017395973206, -0.28708675503730774, -0.2828000485897064, -0.2635459005832672, -0.24564994871616364, -0.25203609466552734, -0.2388342022895813, -0.27065297961235046, -0.3090958297252655, -0.2922089099884033, -0.28137531876564026, -0.2720507085323334, -0.23547059297561646, -0.2411729395389557, -0.2583547830581665, -0.2711826264858246, -0.2532021403312683, -0.22009418904781342, -0.2116345316171646, -0.19967801868915558, -0.19406458735466003, -0.2078171819448471, -0.2124902307987213, -0.20337460935115814, -0.18594178557395935, -0.1790795922279358, -0.2099793255329132, -0.2033313512802124, -0.20906804502010345, -0.19370678067207336, -0.15078547596931458, -0.13426032662391663, -0.12475015968084335\}, \{-0.11599669605493546, -0.12672565877437592, -0.12244690209627151, -0.10400579124689102, -0.10054263472557068, -0.09792455285787582, -0.11399802565574646, -0.13109661638736725, -0.1454259157180786, -0.16973887383937836, -0.16307631134986877, -0.13756509125232697, -0.11309415847063065, -0.11173500120639801, -0.15657883882522583, -0.22070199251174927, -0.25723835825920105, -0.25677669048309326, -0.18688082695007324, -0.1293829381465912, -0.07931152731180191, -0.06811366230249405, -0.1331479847431183, -0.2092551589012146, -0.2333250343799591, -0.21923862397670746, -0.18591023981571198, -0.16142664849758148, -0.1670183539390564, -0.16855256259441376, -0.15506979823112488, -0.10953260213136673, -0.061346881091594696, -0.046533118933439255, -0.06950776278972626, -0.11180009692907333, -0.14044716954231262, -0.1505882889032364, -0.13731259107589722, -0.08639223873615265, -0.04593536630272865, -0.041714977473020554, -0.06255748122930527, -0.09127826988697052, -0.11618304997682571, -0.1337864249944687, -0.13376173377037048, -0.09759178012609482, -0.0437045656144619, -0.008813206106424332, -0.005579110700637102, -0.0517657995223999, -0.1034180298447609, -0.15580838918685913, -0.19931702315807343, -0.19810673594474792, -0.15496182441711426, -0.09203467518091202, -0.07570936530828476, -0.05799258500337601, -0.0533590205013752, -0.04272526875138283, -0.014789707958698273, 0.023693863302469254, 0.03842945769429207, 0.03768279775977135, 0.004951058886945248, -0.011700049974024296, -0.0381028838455677, -0.0346871018409729, -0.03866104781627655, -0.014867539517581463, -0.010183105245232582, -0.02323286607861519, -0.03279714658856392, -0.020923582836985588, 0.039653364568948746, 0.04521671682596207, 0.046729717403650284, 0.013431270606815815, -0.022297460585832596, -0.025272676721215248, -0.04681222140789032, -0.009317823685705662, 0.02244636043906212, 0.05973266810178757, 0.0768781378865242, 0.05284608155488968, 0.07143129408359528, 0.02711583860218525, 0.03839786723256111, 0.012436555698513985, 0.004006610251963139, 0.010198242962360382, 0.02177899144589901, 0.049605343490839005, 0.06822726875543594, 0.11034061759710312, 0.12692196667194366, 0.12588554620742798, 0.12312634289264679, 0.06580373644828796, 0.06688748300075531, 0.07834338396787643, 0.079814113676548, 0.0675809308886528, 0.09340251982212067, 0.1418682485818863, 0.16081903874874115, 0.1938496083021164, 0.18371270596981049, 0.16606703400611877, 0.1453780084848404, 0.14264588057994843, 0.14140000939369202, 0.16183701157569885, 0.20625357329845428, 0.2554421126842499, 0.25908300280570984, 0.24513374269008636, 0.21646222472190857, 0.16789764165878296, 0.14027543365955353, 0.14227530360221863, 0.1517212688922882, 0.15308530628681183, 0.18558776378631592, 0.21915170550346375, 0.24104736745357513, 0.2772127389907837, 0.2755987048149109, 0.2602156102657318, 0.23977312445640564, 0.20724307000637054, 0.20667679607868195, 0.1975099742412567, 0.21368660032749176, 0.21087419986724854, 0.21999076008796692, 0.2391047328710556, 0.2487514168024063, 0.2982803285121918, 0.32930511236190796, 0.34828928112983704, 0.34602072834968567, 0.3246139585971832, 0.32108768820762634, 0.302799791097641, 0.2783316671848297, 0.25961416959762573, 0.24959249794483185, 0.26101112365722656, 0.28227928280830383, 0.2920779287815094, 0.297308087348938, 0.30792203545570374, 0.29904991388320923, 0.3141164779663086, 0.31833046674728394, 0.3227021396160126, 0.332852303981781, 0.36176905035972595, 0.36297690868377686, 0.3202771842479706, 0.32608136534690857, 0.3103209435939789, 0.321264386177063, 0.328573077917099, 0.3340657949447632, 0.3736089766025543, 0.3562493920326233, 0.3634374439716339, 0.3280748128890991, 0.3176416754722595, 0.30878958106040955, 0.3174160122871399, 0.35036471486091614, 0.32714560627937317, 0.34801530838012695, 0.3503943383693695, 0.3647993505001068, 0.3681405186653137, 0.32807648181915283, 0.32953664660453796, 0.3405321538448334, 0.34943100810050964, 0.3560551702976227, 0.3620150685310364, 0.36614885926246643, 0.3584156334400177, 0.3555119037628174, 0.36789146065711975, 0.36287903785705566, 0.35888826847076416, 0.3576664328575134, 0.36205926537513733, 0.3508644998073578, 0.3460966646671295, 0.3467444181442261, 0.32808437943458557, 0.3299960494041443, 0.3383871912956238, 0.3562009334564209, 0.3494430482387543, 0.36458173394203186, 0.36849337816238403, 0.37402328848838806, 0.3391067385673523, 0.33225658535957336, 0.31954362988471985, 0.30253204703330994, 0.302290678024292, 0.3250865936279297, 0.3264887034893036, 0.3052440583705902, 0.3117298483848572, 0.32245171070098877, 0.35018929839134216, 0.3483627140522003, 0.3254387080669403, 0.3126079738140106, 0.30825087428092957, 0.3111360967159271, 0.337426096200943, 0.3281615972518921, 0.32460328936576843, 0.3167496919631958, 0.31922122836112976, 0.2969887852668762, 0.2928389012813568, 0.2914779782295227, 0.29788267612457275, 0.27603235840797424, 0.2548941969871521, 0.28029775619506836, 0.2780568301677704, 0.29458409547805786, 0.31376251578330994, 0.3126690685749054, 0.29889237880706787, 0.27958399057388306, 0.2617403566837311, 0.2564350366592407, 0.24390245974063873, 0.23144355416297913, 0.23795807361602783, 0.2392495721578598, 0.22884014248847961, 0.21977579593658447, 0.2312030792236328, 0.25205641984939575, 0.2623029947280884, 0.24803289771080017, 0.22561702132225037, 0.2425171285867691, 0.24483416974544525, 0.23759183287620544, 0.2494782954454422, 0.2526664137840271, 0.25105059146881104, 0.27185386419296265, 0.25577855110168457, 0.22133265435695648, 0.22442537546157837, 0.216847762465477, 0.2060990184545517, 0.19253723323345184, 0.18038463592529297, 0.18606528639793396, 0.203987255692482, 0.2072320282459259, 0.18231293559074402, 0.15119066834449768, 0.15387484431266785, 0.16129066050052643, 0.17887790501117706, 0.18513309955596924, 0.16292887926101685, 0.15068158507347107, 0.11482462286949158, 0.13241270184516907, 0.1380040943622589, 0.1611821949481964, 0.16993962228298187, 0.12258587777614594, 0.11076952517032623, 0.12219234555959702, 0.10447893291711807, 0.08861193805932999, 0.10225933790206909, 0.101822130382061, 0.11767645180225372, 0.13437233865261078, 0.1269274204969406, 0.10480000078678131, 0.09080363065004349, 0.04251999035477638, 0.04932666942477226, 0.07653720676898956, 0.08902866393327713, 0.07984988391399384, 0.04786965250968933, 0.032217901200056076, 0.059549301862716675, 0.06708430498838425, 0.04271629452705383, 0.025471054017543793, 0.0028339307755231857, 0.022612009197473526, 0.030384518206119537, 0.06637311726808548, 0.06817334145307541, 0.01309833861887455, -0.023433402180671692, -0.028508609160780907, -0.0064447177574038506, 0.02477163076400757, 0.036757953464984894, 0.05077197775244713, 0.01736379601061344, -0.01713472232222557, -0.03921069577336311, -0.03334583714604378, -0.002330835210159421, -0.004604189191013575, 0.015124421566724777, -0.025950325652956963, -0.05427074059844017, -0.07467610388994217, -0.05807540938258171, -0.04211416468024254, -0.050497788935899734, -0.070103220641613, -0.08373105525970459, -0.09563173353672028, -0.11078188568353653, -0.09294647723436356, -0.06793883442878723, -0.06202074512839317, -0.08585185557603836, -0.10128496587276459, -0.1160750538110733, -0.11176074296236038, -0.11151131987571716, -0.09551885724067688, -0.11131274700164795, -0.1288195699453354, -0.12427171319723129, -0.13388344645500183, -0.13484609127044678, -0.17450851202011108, -0.15434810519218445, -0.14610441029071808, -0.1378413885831833, -0.12303981184959412, -0.15689928829669952, -0.17307148873806, -0.18288256227970123, -0.161564901471138, -0.17955632507801056, -0.19222110509872437, -0.19828343391418457, -0.17353124916553497, -0.1704094558954239, -0.16460971534252167, -0.1634485125541687, -0.18914154171943665, -0.205159530043602, -0.2215428352355957, -0.21552522480487823, -0.21112169325351715, -0.21467767655849457, -0.23298951983451843, -0.23778094351291656, -0.2613266110420227, -0.26277321577072144, -0.2719411253929138, -0.25897377729415894, -0.24848750233650208, -0.27738744020462036, -0.2742609679698944, -0.29037532210350037, -0.2810390889644623, -0.2887313961982727, -0.28644612431526184, -0.27390414476394653, -0.2792174220085144, -0.26289841532707214, -0.27343371510505676, -0.28471338748931885, -0.30152449011802673, -0.30088040232658386, -0.2987018823623657, -0.3160925805568695, -0.30822208523750305, -0.30821436643600464, -0.3087691366672516, -0.3143851161003113, -0.3263503611087799, -0.30615243315696716, -0.3010587990283966, -0.3097633421421051, -0.2977924048900604, -0.29453033208847046, -0.29459741711616516, -0.32165971398353577, -0.3067639470100403, -0.3042844831943512, -0.2966454029083252, -0.29712945222854614, -0.31660208106040955, -0.3175387382507324, -0.3415686786174774, -0.32809412479400635, -0.3161765933036804, -0.3115851581096649, -0.30468976497650146, -0.30834493041038513, -0.28966856002807617, -0.30700811743736267, -0.3051874339580536, -0.30176717042922974, -0.31210535764694214, -0.3063400387763977, -0.3143419325351715, -0.2978472113609314, -0.29519933462142944, -0.2959807813167572, -0.3171444535255432, -0.3220752477645874, -0.32276326417922974, -0.3014363646507263, -0.29133206605911255, -0.30329686403274536, -0.3293691575527191, -0.3239937722682953, -0.2958269417285919, -0.2798727750778198, -0.2874899208545685, -0.2941288352012634, -0.2959405183792114, -0.3163144886493683, -0.30902916193008423, -0.3054257333278656, -0.2976999282836914, -0.3038743734359741, -0.30711156129837036, -0.2988722622394562, -0.30524390935897827, -0.29503414034843445, -0.28208407759666443, -0.2852691411972046, -0.2906931936740875, -0.2908329963684082, -0.3099006414413452, -0.3074454069137573, -0.2910221517086029, -0.30184462666511536, -0.3030585050582886, -0.3097419738769531, -0.3090875446796417, -0.29309025406837463, -0.2863524258136749, -0.2844317555427551, -0.2845662534236908, -0.2736321687698364, -0.2625400125980377, -0.2742711901664734, -0.25656312704086304, -0.2461545616388321, -0.24723801016807556, -0.2458602637052536, -0.26603105664253235, -0.25029364228248596, -0.25270113348960876, -0.2603098452091217, -0.25414562225341797, -0.2651461064815521, -0.26387685537338257, -0.2520322799682617, -0.2558180093765259, -0.2630579471588135, -0.260568231344223, -0.24691085517406464, -0.23404790461063385, -0.24226556718349457, -0.24143891036510468, -0.2449503391981125, -0.23793034255504608, -0.23901928961277008, -0.24645687639713287, -0.2454894334077835, -0.2424713522195816, -0.22918815910816193, -0.21920651197433472, -0.22075948119163513, -0.20886623859405518, -0.2039290964603424, -0.20882266759872437, -0.19430454075336456\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_32bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_32bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_32bit_44100.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_32bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384873;\par
6 {\cf18 int} bitDepth = 32;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.10654573142528534, -0.11086378246545792, -0.11495868861675262, -0.13741405308246613, -0.14436161518096924, -0.07571711391210556, -0.07994011044502258, -0.10436136275529861, -0.12068937718868256, -0.163199782371521, -0.1605616807937622, -0.14431676268577576, -0.11785893142223358, -0.11374861747026443, -0.13877761363983154, -0.19541782140731812, -0.2437116801738739, -0.2504839599132538, -0.16460417211055756, -0.15231187641620636, -0.11007446050643921, -0.07427804917097092, -0.12210794538259506, -0.15676698088645935, -0.2024340182542801, -0.2378908395767212, -0.22202207148075104, -0.17159946262836456, -0.14988259971141815, -0.15377970039844513, -0.14517268538475037, -0.09163959324359894, -0.035986557602882385, -0.02559933252632618, -0.0773739144206047, -0.13961444795131683, -0.16486811637878418, -0.1642903834581375, -0.13523982465267181, -0.06943988054990768, -0.027117568999528885, -0.022984718903899193, -0.0627516359090805, -0.10830045491456985, -0.1435433179140091, -0.1474071592092514, -0.14713439345359802, -0.10550635308027267, -0.035432010889053345, 0.0027533872053027153, 0.017753789201378822, -0.06665127724409103, -0.11327283829450607, -0.14618153870105743, -0.20166568458080292, -0.1979595422744751, -0.13317497074604034, -0.07182467728853226, -0.0892641469836235, -0.05383358523249626, -0.0514177531003952, -0.046356163918972015, -0.037941765040159225, 0.009598610922694206, 0.029046352952718735, 0.059682391583919525, 0.053137049078941345, 0.014526255428791046, -0.07053980976343155, -0.10104520618915558, -0.0805070698261261, -0.02633623592555523, -0.006700810976326466, -0.005301951430737972, -0.0362333320081234, -0.04376407340168953, 0.05467132106423378, 0.025432296097278595, 0.012060509994626045, -0.022590387612581253, -0.02610771730542183, -0.021223485469818115, -0.02007393352687359, -0.015282858163118362, 0.008273095823824406, 0.015339110046625137, 0.052239056676626205, 0.0406816191971302, 0.0620943047106266, 0.026452526450157166, -0.0003376388340257108, -0.013151046819984913, -0.019276905804872513, -0.000476406974485144, 0.033063288778066635, 0.03876132890582085, 0.03317723050713539, 0.10930770635604858, 0.12609106302261353, 0.13342824578285217, 0.12120353430509567, 0.058676980435848236, 0.07592218369245529, 0.08193482458591461, 0.06398347020149231, 0.07712594419717789, 0.06805115938186646, 0.098694808781147, 0.14866608381271362, 0.20477294921875, 0.20494911074638367, 0.16524285078048706, 0.1688390076160431, 0.16633254289627075, 0.1062576025724411, 0.12215996533632278, 0.20390713214874268, 0.2651367485523224, 0.25690796971321106, 0.24583959579467773, 0.256146103143692, 0.16832926869392395, 0.13466861844062805, 0.1346236914396286, 0.12321566790342331, 0.16049039363861084, 0.19890908896923065, 0.242774099111557, 0.23645171523094177, 0.27003395557403564, 0.276238352060318, 0.25729161500930786, 0.26536837220191956, 0.22318758070468903, 0.163107231259346, 0.16733112931251526, 0.18780580163002014, 0.21744175255298615, 0.23527967929840088, 0.24036073684692383, 0.2565491497516632, 0.30208536982536316, 0.35403892397880554, 0.3526226282119751, 0.3460942208766937, 0.30663153529167175, 0.33553406596183777, 0.3057543635368347, 0.2687184810638428, 0.2383570373058319, 0.2280171662569046, 0.2809559404850006, 0.30829092860221863, 0.3041536211967468, 0.3074176609516144, 0.3143196403980255, 0.2581368684768677, 0.29476305842399597, 0.3203071057796478, 0.3113045394420624, 0.30545344948768616, 0.35099008679389954, 0.3641475737094879, 0.3391929566860199, 0.342308908700943, 0.3248733878135681, 0.32878077030181885, 0.348391056060791, 0.32364922761917114, 0.3666457533836365, 0.31888890266418457, 0.3485170304775238, 0.35097619891166687, 0.29793909192085266, 0.30303287506103516, 0.32259273529052734, 0.3318563997745514, 0.3026358187198639, 0.3554430305957794, 0.37340453267097473, 0.3471658229827881, 0.3235280513763428, 0.3301352560520172, 0.3078373372554779, 0.3523867428302765, 0.3408990800380707, 0.31364673376083374, 0.347843736410141, 0.3690349757671356, 0.3545178771018982, 0.35175198316574097, 0.36120036244392395, 0.3539530336856842, 0.35774993896484375, 0.3542696237564087, 0.3310922384262085, 0.3206315040588379, 0.35456445813179016, 0.3461000323295593, 0.3260113596916199, 0.3236057460308075, 0.2945432960987091, 0.337971031665802, 0.37424618005752563, 0.3846989572048187, 0.3572649359703064, 0.37454867362976074, 0.347695529460907, 0.3549690544605255, 0.3355972468852997, 0.3330603539943695, 0.3093926012516022, 0.3089359700679779, 0.2923196256160736, 0.2620227336883545, 0.3297586441040039, 0.32742032408714294, 0.3419759273529053, 0.3073009252548218, 0.297075092792511, 0.30074185132980347, 0.325280100107193, 0.33291471004486084, 0.3332453966140747, 0.3018326759338379, 0.31633010506629944, 0.3168993890285492, 0.3271448016166687, 0.31844666600227356, 0.295942485332489, 0.2917718291282654, 0.27710267901420593, 0.26118332147598267, 0.23221439123153687, 0.3317529261112213, 0.3540629744529724, 0.2922021746635437, 0.2951115667819977, 0.2493109554052353, 0.2867589592933655, 0.2960498631000519, 0.2836502492427826, 0.31431350111961365, 0.26537907123565674, 0.2590537369251251, 0.25247299671173096, 0.214023157954216, 0.2071918398141861, 0.22232457995414734, 0.26061317324638367, 0.30542057752609253, 0.28974950313568115, 0.24859151244163513, 0.2228160947561264, 0.25007280707359314, 0.26055601239204407, 0.2254960834980011, 0.27290746569633484, 0.2760733962059021, 0.2615794539451599, 0.27167510986328125, 0.2546367347240448, 0.21572034060955048, 0.21540221571922302, 0.192155659198761, 0.16099269688129425, 0.17680823802947998, 0.2131834626197815, 0.23785944283008575, 0.18247728049755096, 0.18726205825805664, 0.12993094325065613, 0.1181115210056305, 0.18653647601604462, 0.18050558865070343, 0.16915030777454376, 0.16404005885124207, 0.12621153891086578, 0.09435564279556274, 0.10899075120687485, 0.148171529173851, 0.11626031249761581, 0.10354291647672653, 0.13250792026519775, 0.09787636995315552, 0.1030190959572792, 0.1423940807580948, 0.10291619598865509, 0.08009081333875656, 0.11242035776376724, 0.09399483352899551, 0.1172405406832695, 0.15611103177070618, 0.06934958696365356, 0.06423342972993851, 0.08321265131235123, 0.09821876883506775, 0.13949915766716003, 0.12564539909362793, 0.07938070595264435, 0.045767609030008316, 0.05813327059149742, 0.047100234776735306, 0.06823265552520752, 0.0754186138510704, 0.05630476027727127, 0.017302609980106354, 0.0008599076536484063, 0.04353911802172661, 0.05204787477850914, 0.0824984684586525, 0.08795347064733505, 0.023234887048602104, 0.0009291400201618671, -0.0076574888080358505, 0.03232860192656517, 0.07685714960098267, 0.08119689673185349, 0.022120295092463493, -0.030937619507312775, -0.01876123994588852, -0.005620893556624651, 0.016592886298894882, 0.020832696929574013, 0.02656138315796852, -0.006862107198685408, -0.04585770145058632, -0.019484128803014755, -0.04244006425142288, -0.07499007135629654, -0.07102051377296448, -0.0662568062543869, -0.07428179681301117, -0.08879119902849197, -0.1008056253194809, -0.09425801783800125, -0.06951656192541122, -0.0381024032831192, -0.05902015417814255, -0.05611433461308479, -0.0790177583694458, -0.09637999534606934, -0.09812989085912704, -0.11073868721723557, -0.04480006918311119, -0.07395800203084946, -0.09014502167701721, -0.08693195879459381, -0.11231470853090286, -0.13826541602611542, -0.1370057761669159, -0.07036778330802917, -0.0552164763212204, -0.13812334835529327, -0.12577186524868011, -0.11669572442770004, -0.14448396861553192, -0.13990573585033417, -0.13741348683834076, -0.15565867722034454, -0.20557968318462372, -0.2103797346353531, -0.17862746119499207, -0.17775960266590118, -0.20560288429260254, -0.2237730473279953, -0.2743721902370453, -0.24996384978294373, -0.23076921701431274, -0.259387344121933, -0.24719151854515076, -0.268353134393692, -0.31968554854393005, -0.31176629662513733, -0.29554569721221924, -0.2924174666404724, -0.3033452332019806, -0.30051130056381226, -0.3123569190502167, -0.3448212444782257, -0.3220278024673462, -0.33063265681266785, -0.35563501715660095, -0.34307965636253357, -0.3080213963985443, -0.3056949973106384, -0.3366694152355194, -0.34156039357185364, -0.3316612243652344, -0.3065110445022583, -0.3081991970539093, -0.31517091393470764, -0.3162621259689331, -0.3385170102119446, -0.3392433226108551, -0.3133665919303894, -0.2800193428993225, -0.25216805934906006, -0.2883094251155853, -0.2657769024372101, -0.2518283724784851, -0.291072815656662, -0.2559393048286438, -0.24693608283996582, -0.2636662721633911, -0.2624438405036926, -0.2494381219148636, -0.2416200190782547, -0.22538360953330994, -0.2591025233268738, -0.2606838047504425, -0.26585760712623596, -0.25937068462371826, -0.23794609308242798, -0.24189132452011108, -0.240736722946167, -0.25603818893432617, -0.2745775580406189, -0.25089573860168457, -0.2764233648777008, -0.29448723793029785, -0.27957355976104736, -0.28125864267349243, -0.2727208435535431, -0.28344786167144775, -0.2571921944618225, -0.2760695815086365, -0.2874547243118286, -0.30504369735717773, -0.29986709356307983, -0.29826271533966064, -0.28532710671424866, -0.2496851533651352, -0.2607952654361725, -0.29777657985687256, -0.30393722653388977, -0.290038526058197, -0.264538437128067, -0.28155800700187683, -0.28155699372291565, -0.31245583295822144, -0.33506739139556885, -0.326878160238266, -0.32665902376174927, -0.29288503527641296, -0.3238815367221832, -0.32362183928489685, -0.28742843866348267, -0.3196392357349396, -0.32520994544029236, -0.33188876509666443, -0.3426867127418518, -0.3408244550228119, -0.33985793590545654, -0.3346248269081116, -0.32897987961769104, -0.289229154586792, -0.3050055503845215, -0.35268786549568176, -0.3525750935077667, -0.3248194754123688, -0.3169674277305603, -0.2992347478866577, -0.29648488759994507, -0.3069400489330292, -0.33537572622299194, -0.34434187412261963, -0.32709017395973206, -0.28708675503730774, -0.2828000485897064, -0.2635459005832672, -0.24564994871616364, -0.25203609466552734, -0.2388342022895813, -0.27065297961235046, -0.3090958297252655, -0.2922089099884033, -0.28137531876564026, -0.2720507085323334, -0.23547059297561646, -0.2411729395389557, -0.2583547830581665, -0.2711826264858246, -0.2532021403312683, -0.22009418904781342, -0.2116345316171646, -0.19967801868915558, -0.19406458735466003, -0.2078171819448471, -0.2124902307987213, -0.20337460935115814, -0.18594178557395935, -0.1790795922279358, -0.2099793255329132, -0.2033313512802124, -0.20906804502010345, -0.19370678067207336, -0.15078547596931458, -0.13426032662391663, -0.12475015968084335\}, \{-0.11599669605493546, -0.12672565877437592, -0.12244690209627151, -0.10400579124689102, -0.10054263472557068, -0.09792455285787582, -0.11399802565574646, -0.13109661638736725, -0.1454259157180786, -0.16973887383937836, -0.16307631134986877, -0.13756509125232697, -0.11309415847063065, -0.11173500120639801, -0.15657883882522583, -0.22070199251174927, -0.25723835825920105, -0.25677669048309326, -0.18688082695007324, -0.1293829381465912, -0.07931152731180191, -0.06811366230249405, -0.1331479847431183, -0.2092551589012146, -0.2333250343799591, -0.21923862397670746, -0.18591023981571198, -0.16142664849758148, -0.1670183539390564, -0.16855256259441376, -0.15506979823112488, -0.10953260213136673, -0.061346881091594696, -0.046533118933439255, -0.06950776278972626, -0.11180009692907333, -0.14044716954231262, -0.1505882889032364, -0.13731259107589722, -0.08639223873615265, -0.04593536630272865, -0.041714977473020554, -0.06255748122930527, -0.09127826988697052, -0.11618304997682571, -0.1337864249944687, -0.13376173377037048, -0.09759178012609482, -0.0437045656144619, -0.008813206106424332, -0.005579110700637102, -0.0517657995223999, -0.1034180298447609, -0.15580838918685913, -0.19931702315807343, -0.19810673594474792, -0.15496182441711426, -0.09203467518091202, -0.07570936530828476, -0.05799258500337601, -0.0533590205013752, -0.04272526875138283, -0.014789707958698273, 0.023693863302469254, 0.03842945769429207, 0.03768279775977135, 0.004951058886945248, -0.011700049974024296, -0.0381028838455677, -0.0346871018409729, -0.03866104781627655, -0.014867539517581463, -0.010183105245232582, -0.02323286607861519, -0.03279714658856392, -0.020923582836985588, 0.039653364568948746, 0.04521671682596207, 0.046729717403650284, 0.013431270606815815, -0.022297460585832596, -0.025272676721215248, -0.04681222140789032, -0.009317823685705662, 0.02244636043906212, 0.05973266810178757, 0.0768781378865242, 0.05284608155488968, 0.07143129408359528, 0.02711583860218525, 0.03839786723256111, 0.012436555698513985, 0.004006610251963139, 0.010198242962360382, 0.02177899144589901, 0.049605343490839005, 0.06822726875543594, 0.11034061759710312, 0.12692196667194366, 0.12588554620742798, 0.12312634289264679, 0.06580373644828796, 0.06688748300075531, 0.07834338396787643, 0.079814113676548, 0.0675809308886528, 0.09340251982212067, 0.1418682485818863, 0.16081903874874115, 0.1938496083021164, 0.18371270596981049, 0.16606703400611877, 0.1453780084848404, 0.14264588057994843, 0.14140000939369202, 0.16183701157569885, 0.20625357329845428, 0.2554421126842499, 0.25908300280570984, 0.24513374269008636, 0.21646222472190857, 0.16789764165878296, 0.14027543365955353, 0.14227530360221863, 0.1517212688922882, 0.15308530628681183, 0.18558776378631592, 0.21915170550346375, 0.24104736745357513, 0.2772127389907837, 0.2755987048149109, 0.2602156102657318, 0.23977312445640564, 0.20724307000637054, 0.20667679607868195, 0.1975099742412567, 0.21368660032749176, 0.21087419986724854, 0.21999076008796692, 0.2391047328710556, 0.2487514168024063, 0.2982803285121918, 0.32930511236190796, 0.34828928112983704, 0.34602072834968567, 0.3246139585971832, 0.32108768820762634, 0.302799791097641, 0.2783316671848297, 0.25961416959762573, 0.24959249794483185, 0.26101112365722656, 0.28227928280830383, 0.2920779287815094, 0.297308087348938, 0.30792203545570374, 0.29904991388320923, 0.3141164779663086, 0.31833046674728394, 0.3227021396160126, 0.332852303981781, 0.36176905035972595, 0.36297690868377686, 0.3202771842479706, 0.32608136534690857, 0.3103209435939789, 0.321264386177063, 0.328573077917099, 0.3340657949447632, 0.3736089766025543, 0.3562493920326233, 0.3634374439716339, 0.3280748128890991, 0.3176416754722595, 0.30878958106040955, 0.3174160122871399, 0.35036471486091614, 0.32714560627937317, 0.34801530838012695, 0.3503943383693695, 0.3647993505001068, 0.3681405186653137, 0.32807648181915283, 0.32953664660453796, 0.3405321538448334, 0.34943100810050964, 0.3560551702976227, 0.3620150685310364, 0.36614885926246643, 0.3584156334400177, 0.3555119037628174, 0.36789146065711975, 0.36287903785705566, 0.35888826847076416, 0.3576664328575134, 0.36205926537513733, 0.3508644998073578, 0.3460966646671295, 0.3467444181442261, 0.32808437943458557, 0.3299960494041443, 0.3383871912956238, 0.3562009334564209, 0.3494430482387543, 0.36458173394203186, 0.36849337816238403, 0.37402328848838806, 0.3391067385673523, 0.33225658535957336, 0.31954362988471985, 0.30253204703330994, 0.302290678024292, 0.3250865936279297, 0.3264887034893036, 0.3052440583705902, 0.3117298483848572, 0.32245171070098877, 0.35018929839134216, 0.3483627140522003, 0.3254387080669403, 0.3126079738140106, 0.30825087428092957, 0.3111360967159271, 0.337426096200943, 0.3281615972518921, 0.32460328936576843, 0.3167496919631958, 0.31922122836112976, 0.2969887852668762, 0.2928389012813568, 0.2914779782295227, 0.29788267612457275, 0.27603235840797424, 0.2548941969871521, 0.28029775619506836, 0.2780568301677704, 0.29458409547805786, 0.31376251578330994, 0.3126690685749054, 0.29889237880706787, 0.27958399057388306, 0.2617403566837311, 0.2564350366592407, 0.24390245974063873, 0.23144355416297913, 0.23795807361602783, 0.2392495721578598, 0.22884014248847961, 0.21977579593658447, 0.2312030792236328, 0.25205641984939575, 0.2623029947280884, 0.24803289771080017, 0.22561702132225037, 0.2425171285867691, 0.24483416974544525, 0.23759183287620544, 0.2494782954454422, 0.2526664137840271, 0.25105059146881104, 0.27185386419296265, 0.25577855110168457, 0.22133265435695648, 0.22442537546157837, 0.216847762465477, 0.2060990184545517, 0.19253723323345184, 0.18038463592529297, 0.18606528639793396, 0.203987255692482, 0.2072320282459259, 0.18231293559074402, 0.15119066834449768, 0.15387484431266785, 0.16129066050052643, 0.17887790501117706, 0.18513309955596924, 0.16292887926101685, 0.15068158507347107, 0.11482462286949158, 0.13241270184516907, 0.1380040943622589, 0.1611821949481964, 0.16993962228298187, 0.12258587777614594, 0.11076952517032623, 0.12219234555959702, 0.10447893291711807, 0.08861193805932999, 0.10225933790206909, 0.101822130382061, 0.11767645180225372, 0.13437233865261078, 0.1269274204969406, 0.10480000078678131, 0.09080363065004349, 0.04251999035477638, 0.04932666942477226, 0.07653720676898956, 0.08902866393327713, 0.07984988391399384, 0.04786965250968933, 0.032217901200056076, 0.059549301862716675, 0.06708430498838425, 0.04271629452705383, 0.025471054017543793, 0.0028339307755231857, 0.022612009197473526, 0.030384518206119537, 0.06637311726808548, 0.06817334145307541, 0.01309833861887455, -0.023433402180671692, -0.028508609160780907, -0.0064447177574038506, 0.02477163076400757, 0.036757953464984894, 0.05077197775244713, 0.01736379601061344, -0.01713472232222557, -0.03921069577336311, -0.03334583714604378, -0.002330835210159421, -0.004604189191013575, 0.015124421566724777, -0.025950325652956963, -0.05427074059844017, -0.07467610388994217, -0.05807540938258171, -0.04211416468024254, -0.050497788935899734, -0.070103220641613, -0.08373105525970459, -0.09563173353672028, -0.11078188568353653, -0.09294647723436356, -0.06793883442878723, -0.06202074512839317, -0.08585185557603836, -0.10128496587276459, -0.1160750538110733, -0.11176074296236038, -0.11151131987571716, -0.09551885724067688, -0.11131274700164795, -0.1288195699453354, -0.12427171319723129, -0.13388344645500183, -0.13484609127044678, -0.17450851202011108, -0.15434810519218445, -0.14610441029071808, -0.1378413885831833, -0.12303981184959412, -0.15689928829669952, -0.17307148873806, -0.18288256227970123, -0.161564901471138, -0.17955632507801056, -0.19222110509872437, -0.19828343391418457, -0.17353124916553497, -0.1704094558954239, -0.16460971534252167, -0.1634485125541687, -0.18914154171943665, -0.205159530043602, -0.2215428352355957, -0.21552522480487823, -0.21112169325351715, -0.21467767655849457, -0.23298951983451843, -0.23778094351291656, -0.2613266110420227, -0.26277321577072144, -0.2719411253929138, -0.25897377729415894, -0.24848750233650208, -0.27738744020462036, -0.2742609679698944, -0.29037532210350037, -0.2810390889644623, -0.2887313961982727, -0.28644612431526184, -0.27390414476394653, -0.2792174220085144, -0.26289841532707214, -0.27343371510505676, -0.28471338748931885, -0.30152449011802673, -0.30088040232658386, -0.2987018823623657, -0.3160925805568695, -0.30822208523750305, -0.30821436643600464, -0.3087691366672516, -0.3143851161003113, -0.3263503611087799, -0.30615243315696716, -0.3010587990283966, -0.3097633421421051, -0.2977924048900604, -0.29453033208847046, -0.29459741711616516, -0.32165971398353577, -0.3067639470100403, -0.3042844831943512, -0.2966454029083252, -0.29712945222854614, -0.31660208106040955, -0.3175387382507324, -0.3415686786174774, -0.32809412479400635, -0.3161765933036804, -0.3115851581096649, -0.30468976497650146, -0.30834493041038513, -0.28966856002807617, -0.30700811743736267, -0.3051874339580536, -0.30176717042922974, -0.31210535764694214, -0.3063400387763977, -0.3143419325351715, -0.2978472113609314, -0.29519933462142944, -0.2959807813167572, -0.3171444535255432, -0.3220752477645874, -0.32276326417922974, -0.3014363646507263, -0.29133206605911255, -0.30329686403274536, -0.3293691575527191, -0.3239937722682953, -0.2958269417285919, -0.2798727750778198, -0.2874899208545685, -0.2941288352012634, -0.2959405183792114, -0.3163144886493683, -0.30902916193008423, -0.3054257333278656, -0.2976999282836914, -0.3038743734359741, -0.30711156129837036, -0.2988722622394562, -0.30524390935897827, -0.29503414034843445, -0.28208407759666443, -0.2852691411972046, -0.2906931936740875, -0.2908329963684082, -0.3099006414413452, -0.3074454069137573, -0.2910221517086029, -0.30184462666511536, -0.3030585050582886, -0.3097419738769531, -0.3090875446796417, -0.29309025406837463, -0.2863524258136749, -0.2844317555427551, -0.2845662534236908, -0.2736321687698364, -0.2625400125980377, -0.2742711901664734, -0.25656312704086304, -0.2461545616388321, -0.24723801016807556, -0.2458602637052536, -0.26603105664253235, -0.25029364228248596, -0.25270113348960876, -0.2603098452091217, -0.25414562225341797, -0.2651461064815521, -0.26387685537338257, -0.2520322799682617, -0.2558180093765259, -0.2630579471588135, -0.260568231344223, -0.24691085517406464, -0.23404790461063385, -0.24226556718349457, -0.24143891036510468, -0.2449503391981125, -0.23793034255504608, -0.23901928961277008, -0.24645687639713287, -0.2454894334077835, -0.2424713522195816, -0.22918815910816193, -0.21920651197433472, -0.22075948119163513, -0.20886623859405518, -0.2039290964603424, -0.20882266759872437, -0.19430454075336456\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_32bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_32bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_32bit_48000.h}
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_32bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_48000::numSamplesPerChannel} = 418909\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_48000::bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_32bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_32bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_32bit_48000::testBuffer} = \{\{-0.12224096804857254, -0.11750572919845581, -0.10568306595087051, -0.13950054347515106, -0.1767929494380951, -0.16854417324066162, -0.14937524497509003, -0.19859987497329712, -0.18106049299240112, -0.1705458164215088, -0.158586785197258, -0.13957403600215912, -0.15010197460651398, -0.17057763040065765, -0.1989690661430359, -0.2006751298904419, -0.19865016639232635, -0.18088047206401825, -0.1808841973543167, -0.13311649858951569, -0.11018519103527069, -0.17165954411029816, -0.1653222143650055, -0.1623266488313675, -0.17777632176876068, -0.15620478987693787, -0.1446300446987152, -0.15390099585056305, -0.147407665848732, -0.11260373145341873, -0.09065605700016022, -0.0993541032075882, -0.12435109168291092, -0.13127011060714722, -0.11339204758405685, -0.09639949351549149, -0.09794000536203384, -0.118886299431324, -0.14325787127017975, -0.15544630587100983, -0.17205581068992615, -0.18651363253593445, -0.1589917093515396, -0.11641548573970795, -0.09031657129526138, -0.10161475092172623, -0.15558701753616333, -0.2206290066242218, -0.2651331126689911, -0.25911515951156616, -0.2293650358915329, -0.16655930876731873, -0.08568081259727478, -0.06969723105430603, -0.08802063763141632, -0.16804634034633636, -0.24874094128608704, -0.21678587794303894, -0.19159023463726044, -0.17705512046813965, -0.1667148768901825, -0.1511954814195633, -0.15234029293060303, -0.19241401553153992, -0.14389729499816895, -0.09133698791265488, -0.06737270951271057, -0.07686055451631546, -0.1043776273727417, -0.12858182191848755, -0.15148888528347015, -0.11613457649946213, -0.08194688707590103, -0.04282720386981964, -0.051619481295347214, -0.05822686851024628, -0.06640405207872391, -0.08420905470848083, -0.1027848944067955, -0.1465090960264206, -0.14561817049980164, -0.1762324869632721, -0.08583363890647888, 0.007658501621335745, -0.011026734486222267, -0.021674031391739845, -0.07804986089468002, -0.11646044254302979, -0.1457371860742569, -0.1734718233346939, -0.19507013261318207, -0.17732016742229462, -0.15375635027885437, -0.1089492216706276, -0.07380896806716919, -0.07088757306337357, -0.038192976266145706, -0.06499908864498138, -0.06024225801229477, -0.042679619044065475, -0.027441389858722687, 0.0041082981042563915, 0.027060341089963913, 0.03698853775858879, -0.015535242855548859, -0.014174421317875385, 0.0033486864995211363, -0.009114397689700127, 0.019884033128619194, 0.01550981868058443, -0.037357546389102936, -0.02751404419541359, -0.022459618747234344, -0.039224039763212204, -0.012722630985081196, -0.01057526282966137, -0.008604312315583229, -0.0025005422066897154, 0.0032259311992675066, 0.007971002720296383, -0.014616752974689007, -0.019033854827284813, 0.03811630606651306, 0.0795116052031517, 0.04447280615568161, 0.0326358899474144, 0.05836005508899689, 0.07428614795207977, 0.05685563385486603, 0.021324539557099342, 0.053209684789180756, 0.06457655876874924, 0.017640281468629837, 0.03641613945364952, 0.0371590256690979, 0.02347523346543312, 0.0534922331571579, 0.09033214300870895, 0.14600975811481476, 0.1459035873413086, 0.13997846841812134, 0.1391625851392746, 0.09172435104846954, 0.08337311446666718, 0.0991726964712143, 0.07403057813644409, 0.043880339711904526, 0.059704579412937164, 0.08842291682958603, 0.13797225058078766, 0.18698176741600037, 0.20380723476409912, 0.20281563699245453, 0.18895266950130463, 0.2018708437681198, 0.1857737898826599, 0.17444564402103424, 0.18080522119998932, 0.20557913184165955, 0.2852883040904999, 0.2686017155647278, 0.22429560124874115, 0.18533986806869507, 0.14078998565673828, 0.1659850925207138, 0.19331330060958862, 0.2132040113210678, 0.20900602638721466, 0.23155458271503448, 0.21515335142612457, 0.18960048258304596, 0.2552071809768677, 0.28179067373275757, 0.2602389454841614, 0.2297178953886032, 0.23503455519676208, 0.23632201552391052, 0.20582474768161774, 0.20839151740074158, 0.2220737338066101, 0.21372979879379272, 0.24515412747859955, 0.251130610704422, 0.24134761095046997, 0.29103997349739075, 0.2575518786907196, 0.2912968099117279, 0.3386499285697937, 0.3110390603542328, 0.33430060744285583, 0.3444327116012573, 0.3543379306793213, 0.29801470041275024, 0.2688961923122406, 0.29495948553085327, 0.2926243543624878, 0.27863457798957825, 0.28476187586784363, 0.3210006058216095, 0.3082529902458191, 0.31962329149246216, 0.2942540943622589, 0.22272787988185883, 0.2429756373167038, 0.3119921088218689, 0.3556602895259857, 0.36511701345443726, 0.3722485601902008, 0.3644947409629822, 0.34194156527519226, 0.33835262060165405, 0.3356825113296509, 0.313857764005661, 0.2924339771270752, 0.3130567967891693, 0.34633496403694153, 0.3435116410255432, 0.3676229417324066, 0.35475513339042664, 0.3312518894672394, 0.35621294379234314, 0.3662162721157074, 0.3661949336528778, 0.34053680300712585, 0.36795416474342346, 0.38009434938430786, 0.3904728293418884, 0.3909663259983063, 0.3562968969345093, 0.36190885305404663, 0.3317756652832031, 0.35892489552497864, 0.33578428626060486, 0.32347404956817627, 0.38036999106407166, 0.3689430356025696, 0.38148778676986694, 0.365984171628952, 0.3566977381706238, 0.35760003328323364, 0.35259005427360535, 0.34553033113479614, 0.33848538994789124, 0.343122273683548, 0.34196919202804565, 0.3724546432495117, 0.36268332600593567, 0.3571181893348694, 0.3456774055957794, 0.32174304127693176, 0.33917397260665894, 0.35040560364723206, 0.36867985129356384, 0.34089750051498413, 0.3510991930961609, 0.4377979636192322, 0.4027383029460907, 0.34163492918014526, 0.33044081926345825, 0.27512919902801514, 0.3000381588935852, 0.3319402039051056, 0.3188630938529968, 0.3714633285999298, 0.37567785382270813, 0.3605020344257355, 0.3805369734764099, 0.35583651065826416, 0.32445028424263, 0.3273753225803375, 0.34350693225860596, 0.37266772985458374, 0.4051303267478943, 0.38749104738235474, 0.33489713072776794, 0.2926176190376282, 0.2997909188270569, 0.35792627930641174, 0.3495406210422516, 0.32898175716400146, 0.34207838773727417, 0.30513614416122437, 0.2971348166465759, 0.323106050491333, 0.32884302735328674, 0.3072342872619629, 0.3113476037979126, 0.32329732179641724, 0.30062735080718994, 0.3049944341182709, 0.2959534227848053, 0.3006644546985626, 0.27240437269210815, 0.24213634431362152, 0.27605050802230835, 0.22400249540805817, 0.1937772035598755, 0.24250462651252747, 0.24638913571834564, 0.24197907745838165, 0.24907651543617249, 0.22003580629825592, 0.17622274160385132, 0.16129399836063385, 0.19908778369426727, 0.2391531616449356, 0.21145354211330414, 0.20967057347297668, 0.23966427147388458, 0.21367546916007996, 0.2110227644443512, 0.26634150743484497, 0.2754223644733429, 0.24296922981739044, 0.2476264238357544, 0.23611263930797577, 0.18878644704818726, 0.20936761796474457, 0.200220987200737, 0.12659871578216553, 0.16990607976913452, 0.22594323754310608, 0.23622563481330872, 0.2579008638858795, 0.23935936391353607, 0.20377521216869354, 0.1770242303609848, 0.19050700962543488, 0.17883515357971191, 0.1445503532886505, 0.16307665407657623, 0.18120287358760834, 0.19124464690685272, 0.1822609156370163, 0.1725730150938034, 0.19347649812698364, 0.16731098294258118, 0.1431523710489273, 0.17723296582698822, 0.16800399124622345, 0.15858152508735657, 0.16715222597122192, 0.15132932364940643, 0.15779832005500793, 0.1636512130498886, 0.16144566237926483, 0.13408072292804718, 0.10357234627008438, 0.11535077542066574, 0.12146414816379547, 0.1260329633951187, 0.13228699564933777, 0.14134319126605988, 0.15444394946098328, 0.1138167753815651, 0.09479106217622757, 0.11657468229532242, 0.0768308937549591, 0.03843776509165764, 0.04751915857195854, 0.06857322156429291, 0.08591072261333466, 0.08842732757329941, 0.061318933963775635, 0.02593398652970791, 0.01728190667927265, 0.05172222852706909, 0.08984250575304031, 0.0773039236664772, 0.08697127550840378, 0.06321786344051361, 0.02655307576060295, 0.023250669240951538, -0.007586643565446138, 0.041380126029253006, 0.06117812171578407, 0.023553259670734406, 0.041256777942180634, 0.0491880401968956, 0.03875471651554108, 0.012586113065481186, -0.0021925601176917553, 0.03759865090250969, 0.04980526491999626, -0.02785763330757618, -0.04435095936059952, -0.02374078519642353, -0.061266154050827026, -0.06957022845745087, -0.053918372839689255, -0.030251622200012207, -0.0423254556953907, -0.08535436540842056, -0.09698139876127243, -0.08655910938978195, -0.1095670685172081, -0.15701161324977875, -0.16672946512699127, -0.18120694160461426, -0.157960444688797, -0.11035372316837311, -0.13494805991649628, -0.1468876451253891, -0.11911755055189133, -0.14180822670459747, -0.1837518960237503, -0.18428651988506317, -0.18684957921504974, -0.19712373614311218, -0.21363863348960876, -0.22607079148292542, -0.220926895737648, -0.23230569064617157, -0.20582062005996704, -0.1689976453781128, -0.19862088561058044, -0.22671961784362793, -0.21809007227420807, -0.1945611536502838, -0.2026081383228302, -0.24522821605205536, -0.26636841893196106, -0.2630700170993805, -0.22752085328102112, -0.19531291723251343, -0.19472180306911469, -0.19370894134044647, -0.20744088292121887, -0.23367057740688324, -0.23379568755626678, -0.21265174448490143, -0.18054811656475067, -0.15807342529296875, -0.2104102522134781, -0.23518647253513336, -0.21284565329551697, -0.2455269992351532, -0.225520059466362, -0.17518840730190277, -0.1689310520887375, -0.17387276887893677, -0.1667395532131195, -0.16734392940998077, -0.18754293024539948, -0.19966770708560944, -0.2391132265329361, -0.2407148778438568, -0.22207456827163696, -0.21636144816875458, -0.18523602187633514, -0.18086351454257965, -0.19031384587287903, -0.2032298445701599, -0.2355280965566635, -0.25809159874916077, -0.24057817459106445, -0.26307928562164307, -0.2787078022956848, -0.2530474364757538, -0.2552593946456909, -0.24616271257400513, -0.2615078389644623, -0.25530901551246643, -0.25154218077659607, -0.27712327241897583, -0.2809199392795563, -0.28890177607536316, -0.27933064103126526, -0.2856236696243286, -0.2849232852458954, -0.25188595056533813, -0.24557361006736755, -0.27384838461875916, -0.289350301027298, -0.29016152024269104, -0.27573761343955994, -0.2779495418071747, -0.3076897859573364, -0.3089178502559662, -0.3372926115989685, -0.3446064889431, -0.32759666442871094, -0.3277808725833893, -0.2960720956325531, -0.3113674819469452, -0.3466232419013977, -0.3239333927631378, -0.33543965220451355, -0.3672158420085907, -0.3573152422904968, -0.37235456705093384, -0.3797309696674347, -0.37353891134262085, -0.3716341257095337, -0.36808523535728455, -0.37087276577949524, -0.33149397373199463, -0.3127138912677765, -0.34366124868392944, -0.3634365499019623\}, \{-0.13098230957984924, -0.13301971554756165, -0.11656489223241806, -0.11829821765422821, -0.12535403668880463, -0.16248205304145813, -0.18745166063308716, -0.22520697116851807, -0.21080034971237183, -0.1904013305902481, -0.16496029496192932, -0.14162300527095795, -0.14347313344478607, -0.16602294147014618, -0.19634389877319336, -0.2149200439453125, -0.22522978484630585, -0.20178663730621338, -0.18612037599086761, -0.14985358715057373, -0.12262580543756485, -0.13781802356243134, -0.14350241422653198, -0.1589389443397522, -0.19272969663143158, -0.2097785919904709, -0.1824365258216858, -0.145534947514534, -0.11350366473197937, -0.09282288700342178, -0.1014917716383934, -0.12031487375497818, -0.13632328808307648, -0.14385820925235748, -0.13423022627830505, -0.12407434731721878, -0.1193736270070076, -0.1127484068274498, -0.11710993945598602, -0.1288047581911087, -0.15479081869125366, -0.18161211907863617, -0.17203018069267273, -0.1354159414768219, -0.11068115383386612, -0.1151931881904602, -0.1491471529006958, -0.20003053545951843, -0.23764470219612122, -0.2461288869380951, -0.21695780754089355, -0.15572752058506012, -0.09187649190425873, -0.07665468752384186, -0.1101890280842781, -0.17380939424037933, -0.22679995000362396, -0.21984511613845825, -0.19822350144386292, -0.1734401434659958, -0.1684066355228424, -0.1743251085281372, -0.17481721937656403, -0.1811244636774063, -0.14501699805259705, -0.09695302695035934, -0.06656937301158905, -0.06322145462036133, -0.08241093903779984, -0.12110648304224014, -0.14909732341766357, -0.1519862860441208, -0.13120222091674805, -0.06823401898145676, -0.02195756509900093, 0.005626976024359465, -0.023387039080262184, -0.07004567980766296, -0.11024026572704315, -0.15960432589054108, -0.16376608610153198, -0.15641160309314728, -0.08497655391693115, -0.008670007809996605, 0.009331360459327698, 0.01016170997172594, -0.04541979730129242, -0.11395926773548126, -0.15092238783836365, -0.20130449533462524, -0.20624154806137085, -0.1671808809041977, -0.13221855461597443, -0.0661710575222969, -0.06806620210409164, -0.05716852471232414, -0.04093584418296814, -0.0650990754365921, -0.025084052234888077, -0.019840111956000328, -0.008776037022471428, 0.014058645814657211, 0.017108915373682976, 0.02887691929936409, 0.013604167848825455, 0.0004400121106300503, -0.0008256957517005503, -0.009266170673072338, 0.007763943634927273, 0.014831318520009518, -0.030834661796689034, -0.034233853220939636, -0.029101157560944557, -0.026344917714595795, -0.01923276111483574, -0.0030079034622758627, 0.04014914110302925, 0.021990902721881866, 0.0011702945921570063, -0.012742288410663605, -0.026323873549699783, -0.012787616811692715, 0.012888557277619839, 0.052450962364673615, 0.07475677132606506, 0.08385134488344193, 0.07785890996456146, 0.06855015456676483, 0.046159904450178146, 0.024771152064204216, 0.03396138921380043, 0.03649052605032921, 0.03350280970335007, 0.03868703544139862, 0.04720373451709747, 0.047265440225601196, 0.04833248630166054, 0.08512450754642487, 0.12757368385791779, 0.1379624307155609, 0.14640067517757416, 0.13506022095680237, 0.09595006704330444, 0.08101014792919159, 0.06884046643972397, 0.07044558227062225, 0.08666981011629105, 0.08834072947502136, 0.11427663266658783, 0.13171352446079254, 0.1615714579820633, 0.20717056095600128, 0.20177707076072693, 0.18966683745384216, 0.17323966324329376, 0.15665693581104279, 0.17353065311908722, 0.1984722912311554, 0.23194125294685364, 0.26697951555252075, 0.2586726248264313, 0.22821970283985138, 0.20102165639400482, 0.17558340728282928, 0.1663520485162735, 0.17179147899150848, 0.18700683116912842, 0.1951422244310379, 0.2182496041059494, 0.23418676853179932, 0.23946397006511688, 0.26715296506881714, 0.273065984249115, 0.2674766480922699, 0.2560798227787018, 0.2533726096153259, 0.24914351105690002, 0.20119798183441162, 0.19149690866470337, 0.204098641872406, 0.2033185213804245, 0.23972539603710175, 0.24206045269966125, 0.25790032744407654, 0.2954062223434448, 0.2876637279987335, 0.3143113851547241, 0.3211040198802948, 0.3320118188858032, 0.3494296967983246, 0.3302988111972809, 0.34971290826797485, 0.3252882659435272, 0.2892061471939087, 0.2950528562068939, 0.2824278771877289, 0.3033698499202728, 0.32549065351486206, 0.30894389748573303, 0.3132327198982239, 0.3186533451080322, 0.3059418201446533, 0.286128968000412, 0.27375689148902893, 0.29324260354042053, 0.3319074809551239, 0.36915186047554016, 0.39437711238861084, 0.39165836572647095, 0.347377210855484, 0.31485727429389954, 0.30959588289260864, 0.3261728286743164, 0.3423120677471161, 0.3420419991016388, 0.35451993346214294, 0.34238627552986145, 0.33935263752937317, 0.34691545367240906, 0.3630000650882721, 0.37347179651260376, 0.3574090301990509, 0.3550010919570923, 0.3445420265197754, 0.3546827733516693, 0.3539896607398987, 0.3684117794036865, 0.39077886939048767, 0.36408862471580505, 0.3360978364944458, 0.3197782337665558, 0.3435496687889099, 0.35054486989974976, 0.3557061553001404, 0.37993210554122925, 0.39068374037742615, 0.40063023567199707, 0.38693132996559143, 0.3668704032897949, 0.35698202252388, 0.3608799874782562, 0.35217344760894775, 0.35569247603416443, 0.35453006625175476, 0.3387382924556732, 0.34590432047843933, 0.35231277346611023, 0.3653433918952942, 0.3511964976787567, 0.3419061005115509, 0.34664759039878845, 0.35771405696868896, 0.3725084960460663, 0.3510756194591522, 0.3647887408733368, 0.37821412086486816, 0.35716962814331055, 0.3511192500591278, 0.34456926584243774, 0.3314865231513977, 0.3208308219909668, 0.3156222999095917, 0.31540369987487793, 0.32744455337524414, 0.3372170925140381, 0.3380419611930847, 0.3529544472694397, 0.3704774081707001, 0.36462560296058655, 0.34822919964790344, 0.3377537727355957, 0.3367040455341339, 0.3352885842323303, 0.33520692586898804, 0.33603182435035706, 0.3249315321445465, 0.3334832787513733, 0.3402125835418701, 0.32134097814559937, 0.3175240457057953, 0.3239133358001709, 0.3080558180809021, 0.2940305769443512, 0.31710487604141235, 0.32018688321113586, 0.3021196722984314, 0.31539735198020935, 0.3222084939479828, 0.31612542271614075, 0.31298354268074036, 0.300657719373703, 0.28344833850860596, 0.2668655216693878, 0.25927987694740295, 0.2593653202056885, 0.25572603940963745, 0.24297574162483215, 0.23936042189598083, 0.2306809276342392, 0.2263612002134323, 0.2444968968629837, 0.23702287673950195, 0.23908279836177826, 0.23235733807086945, 0.22549593448638916, 0.24629828333854675, 0.23005014657974243, 0.24215242266654968, 0.25283926725387573, 0.2293381541967392, 0.23586948215961456, 0.25638747215270996, 0.2559342384338379, 0.2412996143102646, 0.25360795855522156, 0.25039905309677124, 0.23234722018241882, 0.22161784768104553, 0.20286725461483002, 0.1728346347808838, 0.16851651668548584, 0.2065815031528473, 0.213515505194664, 0.21770180761814117, 0.2098827213048935, 0.17774656414985657, 0.17121168971061707, 0.17504063248634338, 0.1757458746433258, 0.16709795594215393, 0.17267844080924988, 0.16643109917640686, 0.1688535511493683, 0.1758764684200287, 0.1518385112285614, 0.15622374415397644, 0.15530139207839966, 0.1624431163072586, 0.17321977019309998, 0.13510893285274506, 0.11024846136569977, 0.12457874417304993, 0.14784744381904602, 0.15759935975074768, 0.14089402556419373, 0.10344935953617096, 0.09838313609361649, 0.10374749451875687, 0.12493053823709488, 0.15402451157569885, 0.13285315036773682, 0.11931116133928299, 0.08833281695842743, 0.08918523043394089, 0.11602802574634552, 0.1011933907866478, 0.09568271785974503, 0.0639972984790802, 0.04696385934948921, 0.04943601042032242, 0.05571720004081726, 0.0727148950099945, 0.07865297049283981, 0.07631032913923264, 0.037004195153713226, 0.009603231213986874, 0.01828043721616268, 0.051060449331998825, 0.07627253234386444, 0.0738271176815033, 0.05658450722694397, 0.013986565172672272, -0.015534968115389347, -0.02274533361196518, 0.003938691224902868, 0.03155204653739929, 0.02330840937793255, 0.03788147121667862, 0.0311247818171978, 0.006079403683543205, -0.014304974116384983, -0.0473160557448864, -0.015843408182263374, -0.0017000987427309155, -0.013982987962663174, -0.008386271074414253, -0.04862101003527641, -0.0791562870144844, -0.0964505523443222, -0.07188238948583603, -0.03198642656207085, -0.034543123096227646, -0.05560626462101936, -0.09328742325305939, -0.0980432853102684, -0.11230849474668503, -0.12309566885232925, -0.11265511065721512, -0.11771883815526962, -0.10521982610225677, -0.10165797173976898, -0.1029997169971466, -0.10343661904335022, -0.09955000877380371, -0.10381722450256348, -0.12423542141914368, -0.13453924655914307, -0.15502531826496124, -0.15178704261779785, -0.1531396061182022, -0.15834370255470276, -0.14455945789813995, -0.1743067353963852, -0.17451700568199158, -0.15113615989685059, -0.14568006992340088, -0.13900914788246155, -0.17267492413520813, -0.19402097165584564, -0.20098720490932465, -0.2049938291311264, -0.17329798638820648, -0.16492614150047302, -0.17401424050331116, -0.1855435073375702, -0.20132692158222198, -0.19034720957279205, -0.18963919579982758, -0.19387602806091309, -0.18623121082782745, -0.19368135929107666, -0.2003438025712967, -0.20840629935264587, -0.22988379001617432, -0.23340362310409546, -0.2340153157711029, -0.25260746479034424, -0.24356180429458618, -0.23030529916286469, -0.22164814174175262, -0.22994613647460938, -0.2506025433540344, -0.2347460687160492, -0.24826651811599731, -0.2629214823246002, -0.2695138156414032, -0.28741344809532166, -0.27443358302116394, -0.2764207422733307, -0.2671276330947876, -0.24025899171829224, -0.24300161004066467, -0.24890510737895966, -0.26734983921051025, -0.2829558253288269, -0.2693065106868744, -0.2842794358730316, -0.2838103175163269, -0.27301153540611267, -0.2909810245037079, -0.29036033153533936, -0.30320534110069275, -0.3014327883720398, -0.2898329198360443, -0.2862693965435028, -0.287814736366272, -0.29961204528808594, -0.297253280878067, -0.3084547817707062, -0.3071892261505127, -0.29667341709136963, -0.2903779149055481, -0.29658836126327515, -0.3059506416320801, -0.292972207069397, -0.2861323952674866, -0.2874835431575775, -0.3051760196685791, -0.31047531962394714, -0.3169917166233063, -0.3349168300628662, -0.32608872652053833, -0.3180573582649231, -0.31016436219215393, -0.31271636486053467, -0.3231419026851654, -0.3134830594062805, -0.3148261606693268, -0.32320359349250793, -0.3186570703983307, -0.3166942894458771, -0.32194268703460693, -0.3222540020942688, -0.3167117238044739, -0.3292582333087921, -0.32684820890426636, -0.3000186085700989, -0.3036000430583954, -0.31384775042533875, -0.3126133382320404\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_32bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_32bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_32bit_48000.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_32bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 418909;\par
6 {\cf18 int} bitDepth = 32;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.12224096804857254, -0.11750572919845581, -0.10568306595087051, -0.13950054347515106, -0.1767929494380951, -0.16854417324066162, -0.14937524497509003, -0.19859987497329712, -0.18106049299240112, -0.1705458164215088, -0.158586785197258, -0.13957403600215912, -0.15010197460651398, -0.17057763040065765, -0.1989690661430359, -0.2006751298904419, -0.19865016639232635, -0.18088047206401825, -0.1808841973543167, -0.13311649858951569, -0.11018519103527069, -0.17165954411029816, -0.1653222143650055, -0.1623266488313675, -0.17777632176876068, -0.15620478987693787, -0.1446300446987152, -0.15390099585056305, -0.147407665848732, -0.11260373145341873, -0.09065605700016022, -0.0993541032075882, -0.12435109168291092, -0.13127011060714722, -0.11339204758405685, -0.09639949351549149, -0.09794000536203384, -0.118886299431324, -0.14325787127017975, -0.15544630587100983, -0.17205581068992615, -0.18651363253593445, -0.1589917093515396, -0.11641548573970795, -0.09031657129526138, -0.10161475092172623, -0.15558701753616333, -0.2206290066242218, -0.2651331126689911, -0.25911515951156616, -0.2293650358915329, -0.16655930876731873, -0.08568081259727478, -0.06969723105430603, -0.08802063763141632, -0.16804634034633636, -0.24874094128608704, -0.21678587794303894, -0.19159023463726044, -0.17705512046813965, -0.1667148768901825, -0.1511954814195633, -0.15234029293060303, -0.19241401553153992, -0.14389729499816895, -0.09133698791265488, -0.06737270951271057, -0.07686055451631546, -0.1043776273727417, -0.12858182191848755, -0.15148888528347015, -0.11613457649946213, -0.08194688707590103, -0.04282720386981964, -0.051619481295347214, -0.05822686851024628, -0.06640405207872391, -0.08420905470848083, -0.1027848944067955, -0.1465090960264206, -0.14561817049980164, -0.1762324869632721, -0.08583363890647888, 0.007658501621335745, -0.011026734486222267, -0.021674031391739845, -0.07804986089468002, -0.11646044254302979, -0.1457371860742569, -0.1734718233346939, -0.19507013261318207, -0.17732016742229462, -0.15375635027885437, -0.1089492216706276, -0.07380896806716919, -0.07088757306337357, -0.038192976266145706, -0.06499908864498138, -0.06024225801229477, -0.042679619044065475, -0.027441389858722687, 0.0041082981042563915, 0.027060341089963913, 0.03698853775858879, -0.015535242855548859, -0.014174421317875385, 0.0033486864995211363, -0.009114397689700127, 0.019884033128619194, 0.01550981868058443, -0.037357546389102936, -0.02751404419541359, -0.022459618747234344, -0.039224039763212204, -0.012722630985081196, -0.01057526282966137, -0.008604312315583229, -0.0025005422066897154, 0.0032259311992675066, 0.007971002720296383, -0.014616752974689007, -0.019033854827284813, 0.03811630606651306, 0.0795116052031517, 0.04447280615568161, 0.0326358899474144, 0.05836005508899689, 0.07428614795207977, 0.05685563385486603, 0.021324539557099342, 0.053209684789180756, 0.06457655876874924, 0.017640281468629837, 0.03641613945364952, 0.0371590256690979, 0.02347523346543312, 0.0534922331571579, 0.09033214300870895, 0.14600975811481476, 0.1459035873413086, 0.13997846841812134, 0.1391625851392746, 0.09172435104846954, 0.08337311446666718, 0.0991726964712143, 0.07403057813644409, 0.043880339711904526, 0.059704579412937164, 0.08842291682958603, 0.13797225058078766, 0.18698176741600037, 0.20380723476409912, 0.20281563699245453, 0.18895266950130463, 0.2018708437681198, 0.1857737898826599, 0.17444564402103424, 0.18080522119998932, 0.20557913184165955, 0.2852883040904999, 0.2686017155647278, 0.22429560124874115, 0.18533986806869507, 0.14078998565673828, 0.1659850925207138, 0.19331330060958862, 0.2132040113210678, 0.20900602638721466, 0.23155458271503448, 0.21515335142612457, 0.18960048258304596, 0.2552071809768677, 0.28179067373275757, 0.2602389454841614, 0.2297178953886032, 0.23503455519676208, 0.23632201552391052, 0.20582474768161774, 0.20839151740074158, 0.2220737338066101, 0.21372979879379272, 0.24515412747859955, 0.251130610704422, 0.24134761095046997, 0.29103997349739075, 0.2575518786907196, 0.2912968099117279, 0.3386499285697937, 0.3110390603542328, 0.33430060744285583, 0.3444327116012573, 0.3543379306793213, 0.29801470041275024, 0.2688961923122406, 0.29495948553085327, 0.2926243543624878, 0.27863457798957825, 0.28476187586784363, 0.3210006058216095, 0.3082529902458191, 0.31962329149246216, 0.2942540943622589, 0.22272787988185883, 0.2429756373167038, 0.3119921088218689, 0.3556602895259857, 0.36511701345443726, 0.3722485601902008, 0.3644947409629822, 0.34194156527519226, 0.33835262060165405, 0.3356825113296509, 0.313857764005661, 0.2924339771270752, 0.3130567967891693, 0.34633496403694153, 0.3435116410255432, 0.3676229417324066, 0.35475513339042664, 0.3312518894672394, 0.35621294379234314, 0.3662162721157074, 0.3661949336528778, 0.34053680300712585, 0.36795416474342346, 0.38009434938430786, 0.3904728293418884, 0.3909663259983063, 0.3562968969345093, 0.36190885305404663, 0.3317756652832031, 0.35892489552497864, 0.33578428626060486, 0.32347404956817627, 0.38036999106407166, 0.3689430356025696, 0.38148778676986694, 0.365984171628952, 0.3566977381706238, 0.35760003328323364, 0.35259005427360535, 0.34553033113479614, 0.33848538994789124, 0.343122273683548, 0.34196919202804565, 0.3724546432495117, 0.36268332600593567, 0.3571181893348694, 0.3456774055957794, 0.32174304127693176, 0.33917397260665894, 0.35040560364723206, 0.36867985129356384, 0.34089750051498413, 0.3510991930961609, 0.4377979636192322, 0.4027383029460907, 0.34163492918014526, 0.33044081926345825, 0.27512919902801514, 0.3000381588935852, 0.3319402039051056, 0.3188630938529968, 0.3714633285999298, 0.37567785382270813, 0.3605020344257355, 0.3805369734764099, 0.35583651065826416, 0.32445028424263, 0.3273753225803375, 0.34350693225860596, 0.37266772985458374, 0.4051303267478943, 0.38749104738235474, 0.33489713072776794, 0.2926176190376282, 0.2997909188270569, 0.35792627930641174, 0.3495406210422516, 0.32898175716400146, 0.34207838773727417, 0.30513614416122437, 0.2971348166465759, 0.323106050491333, 0.32884302735328674, 0.3072342872619629, 0.3113476037979126, 0.32329732179641724, 0.30062735080718994, 0.3049944341182709, 0.2959534227848053, 0.3006644546985626, 0.27240437269210815, 0.24213634431362152, 0.27605050802230835, 0.22400249540805817, 0.1937772035598755, 0.24250462651252747, 0.24638913571834564, 0.24197907745838165, 0.24907651543617249, 0.22003580629825592, 0.17622274160385132, 0.16129399836063385, 0.19908778369426727, 0.2391531616449356, 0.21145354211330414, 0.20967057347297668, 0.23966427147388458, 0.21367546916007996, 0.2110227644443512, 0.26634150743484497, 0.2754223644733429, 0.24296922981739044, 0.2476264238357544, 0.23611263930797577, 0.18878644704818726, 0.20936761796474457, 0.200220987200737, 0.12659871578216553, 0.16990607976913452, 0.22594323754310608, 0.23622563481330872, 0.2579008638858795, 0.23935936391353607, 0.20377521216869354, 0.1770242303609848, 0.19050700962543488, 0.17883515357971191, 0.1445503532886505, 0.16307665407657623, 0.18120287358760834, 0.19124464690685272, 0.1822609156370163, 0.1725730150938034, 0.19347649812698364, 0.16731098294258118, 0.1431523710489273, 0.17723296582698822, 0.16800399124622345, 0.15858152508735657, 0.16715222597122192, 0.15132932364940643, 0.15779832005500793, 0.1636512130498886, 0.16144566237926483, 0.13408072292804718, 0.10357234627008438, 0.11535077542066574, 0.12146414816379547, 0.1260329633951187, 0.13228699564933777, 0.14134319126605988, 0.15444394946098328, 0.1138167753815651, 0.09479106217622757, 0.11657468229532242, 0.0768308937549591, 0.03843776509165764, 0.04751915857195854, 0.06857322156429291, 0.08591072261333466, 0.08842732757329941, 0.061318933963775635, 0.02593398652970791, 0.01728190667927265, 0.05172222852706909, 0.08984250575304031, 0.0773039236664772, 0.08697127550840378, 0.06321786344051361, 0.02655307576060295, 0.023250669240951538, -0.007586643565446138, 0.041380126029253006, 0.06117812171578407, 0.023553259670734406, 0.041256777942180634, 0.0491880401968956, 0.03875471651554108, 0.012586113065481186, -0.0021925601176917553, 0.03759865090250969, 0.04980526491999626, -0.02785763330757618, -0.04435095936059952, -0.02374078519642353, -0.061266154050827026, -0.06957022845745087, -0.053918372839689255, -0.030251622200012207, -0.0423254556953907, -0.08535436540842056, -0.09698139876127243, -0.08655910938978195, -0.1095670685172081, -0.15701161324977875, -0.16672946512699127, -0.18120694160461426, -0.157960444688797, -0.11035372316837311, -0.13494805991649628, -0.1468876451253891, -0.11911755055189133, -0.14180822670459747, -0.1837518960237503, -0.18428651988506317, -0.18684957921504974, -0.19712373614311218, -0.21363863348960876, -0.22607079148292542, -0.220926895737648, -0.23230569064617157, -0.20582062005996704, -0.1689976453781128, -0.19862088561058044, -0.22671961784362793, -0.21809007227420807, -0.1945611536502838, -0.2026081383228302, -0.24522821605205536, -0.26636841893196106, -0.2630700170993805, -0.22752085328102112, -0.19531291723251343, -0.19472180306911469, -0.19370894134044647, -0.20744088292121887, -0.23367057740688324, -0.23379568755626678, -0.21265174448490143, -0.18054811656475067, -0.15807342529296875, -0.2104102522134781, -0.23518647253513336, -0.21284565329551697, -0.2455269992351532, -0.225520059466362, -0.17518840730190277, -0.1689310520887375, -0.17387276887893677, -0.1667395532131195, -0.16734392940998077, -0.18754293024539948, -0.19966770708560944, -0.2391132265329361, -0.2407148778438568, -0.22207456827163696, -0.21636144816875458, -0.18523602187633514, -0.18086351454257965, -0.19031384587287903, -0.2032298445701599, -0.2355280965566635, -0.25809159874916077, -0.24057817459106445, -0.26307928562164307, -0.2787078022956848, -0.2530474364757538, -0.2552593946456909, -0.24616271257400513, -0.2615078389644623, -0.25530901551246643, -0.25154218077659607, -0.27712327241897583, -0.2809199392795563, -0.28890177607536316, -0.27933064103126526, -0.2856236696243286, -0.2849232852458954, -0.25188595056533813, -0.24557361006736755, -0.27384838461875916, -0.289350301027298, -0.29016152024269104, -0.27573761343955994, -0.2779495418071747, -0.3076897859573364, -0.3089178502559662, -0.3372926115989685, -0.3446064889431, -0.32759666442871094, -0.3277808725833893, -0.2960720956325531, -0.3113674819469452, -0.3466232419013977, -0.3239333927631378, -0.33543965220451355, -0.3672158420085907, -0.3573152422904968, -0.37235456705093384, -0.3797309696674347, -0.37353891134262085, -0.3716341257095337, -0.36808523535728455, -0.37087276577949524, -0.33149397373199463, -0.3127138912677765, -0.34366124868392944, -0.3634365499019623\}, \{-0.13098230957984924, -0.13301971554756165, -0.11656489223241806, -0.11829821765422821, -0.12535403668880463, -0.16248205304145813, -0.18745166063308716, -0.22520697116851807, -0.21080034971237183, -0.1904013305902481, -0.16496029496192932, -0.14162300527095795, -0.14347313344478607, -0.16602294147014618, -0.19634389877319336, -0.2149200439453125, -0.22522978484630585, -0.20178663730621338, -0.18612037599086761, -0.14985358715057373, -0.12262580543756485, -0.13781802356243134, -0.14350241422653198, -0.1589389443397522, -0.19272969663143158, -0.2097785919904709, -0.1824365258216858, -0.145534947514534, -0.11350366473197937, -0.09282288700342178, -0.1014917716383934, -0.12031487375497818, -0.13632328808307648, -0.14385820925235748, -0.13423022627830505, -0.12407434731721878, -0.1193736270070076, -0.1127484068274498, -0.11710993945598602, -0.1288047581911087, -0.15479081869125366, -0.18161211907863617, -0.17203018069267273, -0.1354159414768219, -0.11068115383386612, -0.1151931881904602, -0.1491471529006958, -0.20003053545951843, -0.23764470219612122, -0.2461288869380951, -0.21695780754089355, -0.15572752058506012, -0.09187649190425873, -0.07665468752384186, -0.1101890280842781, -0.17380939424037933, -0.22679995000362396, -0.21984511613845825, -0.19822350144386292, -0.1734401434659958, -0.1684066355228424, -0.1743251085281372, -0.17481721937656403, -0.1811244636774063, -0.14501699805259705, -0.09695302695035934, -0.06656937301158905, -0.06322145462036133, -0.08241093903779984, -0.12110648304224014, -0.14909732341766357, -0.1519862860441208, -0.13120222091674805, -0.06823401898145676, -0.02195756509900093, 0.005626976024359465, -0.023387039080262184, -0.07004567980766296, -0.11024026572704315, -0.15960432589054108, -0.16376608610153198, -0.15641160309314728, -0.08497655391693115, -0.008670007809996605, 0.009331360459327698, 0.01016170997172594, -0.04541979730129242, -0.11395926773548126, -0.15092238783836365, -0.20130449533462524, -0.20624154806137085, -0.1671808809041977, -0.13221855461597443, -0.0661710575222969, -0.06806620210409164, -0.05716852471232414, -0.04093584418296814, -0.0650990754365921, -0.025084052234888077, -0.019840111956000328, -0.008776037022471428, 0.014058645814657211, 0.017108915373682976, 0.02887691929936409, 0.013604167848825455, 0.0004400121106300503, -0.0008256957517005503, -0.009266170673072338, 0.007763943634927273, 0.014831318520009518, -0.030834661796689034, -0.034233853220939636, -0.029101157560944557, -0.026344917714595795, -0.01923276111483574, -0.0030079034622758627, 0.04014914110302925, 0.021990902721881866, 0.0011702945921570063, -0.012742288410663605, -0.026323873549699783, -0.012787616811692715, 0.012888557277619839, 0.052450962364673615, 0.07475677132606506, 0.08385134488344193, 0.07785890996456146, 0.06855015456676483, 0.046159904450178146, 0.024771152064204216, 0.03396138921380043, 0.03649052605032921, 0.03350280970335007, 0.03868703544139862, 0.04720373451709747, 0.047265440225601196, 0.04833248630166054, 0.08512450754642487, 0.12757368385791779, 0.1379624307155609, 0.14640067517757416, 0.13506022095680237, 0.09595006704330444, 0.08101014792919159, 0.06884046643972397, 0.07044558227062225, 0.08666981011629105, 0.08834072947502136, 0.11427663266658783, 0.13171352446079254, 0.1615714579820633, 0.20717056095600128, 0.20177707076072693, 0.18966683745384216, 0.17323966324329376, 0.15665693581104279, 0.17353065311908722, 0.1984722912311554, 0.23194125294685364, 0.26697951555252075, 0.2586726248264313, 0.22821970283985138, 0.20102165639400482, 0.17558340728282928, 0.1663520485162735, 0.17179147899150848, 0.18700683116912842, 0.1951422244310379, 0.2182496041059494, 0.23418676853179932, 0.23946397006511688, 0.26715296506881714, 0.273065984249115, 0.2674766480922699, 0.2560798227787018, 0.2533726096153259, 0.24914351105690002, 0.20119798183441162, 0.19149690866470337, 0.204098641872406, 0.2033185213804245, 0.23972539603710175, 0.24206045269966125, 0.25790032744407654, 0.2954062223434448, 0.2876637279987335, 0.3143113851547241, 0.3211040198802948, 0.3320118188858032, 0.3494296967983246, 0.3302988111972809, 0.34971290826797485, 0.3252882659435272, 0.2892061471939087, 0.2950528562068939, 0.2824278771877289, 0.3033698499202728, 0.32549065351486206, 0.30894389748573303, 0.3132327198982239, 0.3186533451080322, 0.3059418201446533, 0.286128968000412, 0.27375689148902893, 0.29324260354042053, 0.3319074809551239, 0.36915186047554016, 0.39437711238861084, 0.39165836572647095, 0.347377210855484, 0.31485727429389954, 0.30959588289260864, 0.3261728286743164, 0.3423120677471161, 0.3420419991016388, 0.35451993346214294, 0.34238627552986145, 0.33935263752937317, 0.34691545367240906, 0.3630000650882721, 0.37347179651260376, 0.3574090301990509, 0.3550010919570923, 0.3445420265197754, 0.3546827733516693, 0.3539896607398987, 0.3684117794036865, 0.39077886939048767, 0.36408862471580505, 0.3360978364944458, 0.3197782337665558, 0.3435496687889099, 0.35054486989974976, 0.3557061553001404, 0.37993210554122925, 0.39068374037742615, 0.40063023567199707, 0.38693132996559143, 0.3668704032897949, 0.35698202252388, 0.3608799874782562, 0.35217344760894775, 0.35569247603416443, 0.35453006625175476, 0.3387382924556732, 0.34590432047843933, 0.35231277346611023, 0.3653433918952942, 0.3511964976787567, 0.3419061005115509, 0.34664759039878845, 0.35771405696868896, 0.3725084960460663, 0.3510756194591522, 0.3647887408733368, 0.37821412086486816, 0.35716962814331055, 0.3511192500591278, 0.34456926584243774, 0.3314865231513977, 0.3208308219909668, 0.3156222999095917, 0.31540369987487793, 0.32744455337524414, 0.3372170925140381, 0.3380419611930847, 0.3529544472694397, 0.3704774081707001, 0.36462560296058655, 0.34822919964790344, 0.3377537727355957, 0.3367040455341339, 0.3352885842323303, 0.33520692586898804, 0.33603182435035706, 0.3249315321445465, 0.3334832787513733, 0.3402125835418701, 0.32134097814559937, 0.3175240457057953, 0.3239133358001709, 0.3080558180809021, 0.2940305769443512, 0.31710487604141235, 0.32018688321113586, 0.3021196722984314, 0.31539735198020935, 0.3222084939479828, 0.31612542271614075, 0.31298354268074036, 0.300657719373703, 0.28344833850860596, 0.2668655216693878, 0.25927987694740295, 0.2593653202056885, 0.25572603940963745, 0.24297574162483215, 0.23936042189598083, 0.2306809276342392, 0.2263612002134323, 0.2444968968629837, 0.23702287673950195, 0.23908279836177826, 0.23235733807086945, 0.22549593448638916, 0.24629828333854675, 0.23005014657974243, 0.24215242266654968, 0.25283926725387573, 0.2293381541967392, 0.23586948215961456, 0.25638747215270996, 0.2559342384338379, 0.2412996143102646, 0.25360795855522156, 0.25039905309677124, 0.23234722018241882, 0.22161784768104553, 0.20286725461483002, 0.1728346347808838, 0.16851651668548584, 0.2065815031528473, 0.213515505194664, 0.21770180761814117, 0.2098827213048935, 0.17774656414985657, 0.17121168971061707, 0.17504063248634338, 0.1757458746433258, 0.16709795594215393, 0.17267844080924988, 0.16643109917640686, 0.1688535511493683, 0.1758764684200287, 0.1518385112285614, 0.15622374415397644, 0.15530139207839966, 0.1624431163072586, 0.17321977019309998, 0.13510893285274506, 0.11024846136569977, 0.12457874417304993, 0.14784744381904602, 0.15759935975074768, 0.14089402556419373, 0.10344935953617096, 0.09838313609361649, 0.10374749451875687, 0.12493053823709488, 0.15402451157569885, 0.13285315036773682, 0.11931116133928299, 0.08833281695842743, 0.08918523043394089, 0.11602802574634552, 0.1011933907866478, 0.09568271785974503, 0.0639972984790802, 0.04696385934948921, 0.04943601042032242, 0.05571720004081726, 0.0727148950099945, 0.07865297049283981, 0.07631032913923264, 0.037004195153713226, 0.009603231213986874, 0.01828043721616268, 0.051060449331998825, 0.07627253234386444, 0.0738271176815033, 0.05658450722694397, 0.013986565172672272, -0.015534968115389347, -0.02274533361196518, 0.003938691224902868, 0.03155204653739929, 0.02330840937793255, 0.03788147121667862, 0.0311247818171978, 0.006079403683543205, -0.014304974116384983, -0.0473160557448864, -0.015843408182263374, -0.0017000987427309155, -0.013982987962663174, -0.008386271074414253, -0.04862101003527641, -0.0791562870144844, -0.0964505523443222, -0.07188238948583603, -0.03198642656207085, -0.034543123096227646, -0.05560626462101936, -0.09328742325305939, -0.0980432853102684, -0.11230849474668503, -0.12309566885232925, -0.11265511065721512, -0.11771883815526962, -0.10521982610225677, -0.10165797173976898, -0.1029997169971466, -0.10343661904335022, -0.09955000877380371, -0.10381722450256348, -0.12423542141914368, -0.13453924655914307, -0.15502531826496124, -0.15178704261779785, -0.1531396061182022, -0.15834370255470276, -0.14455945789813995, -0.1743067353963852, -0.17451700568199158, -0.15113615989685059, -0.14568006992340088, -0.13900914788246155, -0.17267492413520813, -0.19402097165584564, -0.20098720490932465, -0.2049938291311264, -0.17329798638820648, -0.16492614150047302, -0.17401424050331116, -0.1855435073375702, -0.20132692158222198, -0.19034720957279205, -0.18963919579982758, -0.19387602806091309, -0.18623121082782745, -0.19368135929107666, -0.2003438025712967, -0.20840629935264587, -0.22988379001617432, -0.23340362310409546, -0.2340153157711029, -0.25260746479034424, -0.24356180429458618, -0.23030529916286469, -0.22164814174175262, -0.22994613647460938, -0.2506025433540344, -0.2347460687160492, -0.24826651811599731, -0.2629214823246002, -0.2695138156414032, -0.28741344809532166, -0.27443358302116394, -0.2764207422733307, -0.2671276330947876, -0.24025899171829224, -0.24300161004066467, -0.24890510737895966, -0.26734983921051025, -0.2829558253288269, -0.2693065106868744, -0.2842794358730316, -0.2838103175163269, -0.27301153540611267, -0.2909810245037079, -0.29036033153533936, -0.30320534110069275, -0.3014327883720398, -0.2898329198360443, -0.2862693965435028, -0.287814736366272, -0.29961204528808594, -0.297253280878067, -0.3084547817707062, -0.3071892261505127, -0.29667341709136963, -0.2903779149055481, -0.29658836126327515, -0.3059506416320801, -0.292972207069397, -0.2861323952674866, -0.2874835431575775, -0.3051760196685791, -0.31047531962394714, -0.3169917166233063, -0.3349168300628662, -0.32608872652053833, -0.3180573582649231, -0.31016436219215393, -0.31271636486053467, -0.3231419026851654, -0.3134830594062805, -0.3148261606693268, -0.32320359349250793, -0.3186570703983307, -0.3166942894458771, -0.32194268703460693, -0.3222540020942688, -0.3167117238044739, -0.3292582333087921, -0.32684820890426636, -0.3000186085700989, -0.3036000430583954, -0.31384775042533875, -0.3126133382320404\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_8bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_8bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_8bit_44100.h}
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_8bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_44100::bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_8bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_8bit_44100::testBuffer} = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.03125, 0.0078125, 0.0078125, 0.0, -0.03125, 0.03125, 0.015625, -0.0078125, -0.0078125, 0.0390625, -0.078125, 0.0078125, 0.0390625, 0.0234375, -0.0390625, 0.046875, 0.0, -0.0234375, 0.0, 0.0078125, 0.03125, -0.0234375, -0.0234375, 0.046875, 0.0390625, 0.0234375, 0.0, -0.0546875, -0.03125, 0.0625, 0.03125, 0.0703125, -0.0234375, 0.0390625, 0.015625, 0.0234375, -0.0546875, 0.0390625, 0.0390625, 0.0, 0.0859375, 0.0546875, 0.03125, 0.0234375, 0.03125, -0.0390625, 0.09375, 0.0625, -0.03125, -0.0078125, 0.109375, 0.140625, -0.03125, -0.0625, 0.0390625, 0.1015625, 0.0625, -0.0078125, -0.0390625, 0.046875, 0.109375, 0.0, 0.015625, 0.0, 0.015625, 0.0078125, 0.0078125, -0.078125, 0.03125, 0.0390625, -0.015625, -0.0234375, 0.0078125, -0.0078125, -0.03125, -0.03125, -0.0390625, -0.0234375, 0.015625, -0.125, -0.1484375, 0.0078125, 0.0546875, -0.1328125, -0.15625, 0.0, 0.0390625, -0.0625, -0.078125, -0.078125, -0.0078125, -0.1328125, -0.140625, -0.03125, 0.015625, -0.09375, -0.078125, -0.1171875, -0.1015625, -0.09375, -0.1328125, -0.0703125, -0.0546875, -0.1796875, -0.09375, -0.0078125, -0.078125, -0.203125, -0.0859375, -0.046875, -0.140625, -0.1796875, -0.0546875, -0.109375, -0.125, -0.109375, 0.03125, -0.1640625, -0.1796875, -0.09375, -0.09375, -0.046875, 0.0234375, -0.078125, -0.15625, -0.03125, 0.0625, 0.03125, 0.0390625, -0.0625, -0.1953125, -0.171875, -0.1015625, 0.0078125, 0.0703125, 0.0546875, 0.03125, 0.0, -0.15625, -0.0625, 0.0234375, 0.078125, 0.1171875, 0.1484375, 0.0, -0.015625, 0.0546875, 0.0859375, 0.0703125, 0.0625, 0.0703125, 0.0546875, 0.0078125, 0.1484375, 0.3046875, 0.28125, 0.015625, 0.015625, 0.09375, 0.078125, -0.0234375, 0.015625, 0.0234375, -0.0078125, -0.0234375, 0.0546875, 0.203125, 0.265625, 0.1796875, 0.140625, 0.2109375, 0.109375, -0.0078125, 0.0703125, 0.09375, 0.0234375, 0.03125, 0.109375, 0.015625, 0.0, 0.15625, 0.28125, 0.203125, 0.234375, 0.1171875, 0.1015625, 0.171875, 0.1796875, 0.265625, 0.359375, 0.1875, 0.0, -0.1328125, -0.2265625, -0.25, -0.203125, -0.1328125, -0.09375, 0.140625, 0.3125, 0.390625, 0.3046875, 0.3046875, 0.1484375, 0.140625, 0.0078125, -0.1328125, -0.125, -0.125, -0.09375, -0.1640625, -0.0625, 0.0078125, 0.03125, -0.015625, 0.03125, 0.0625, 0.25, 0.125, 0.0, 0.0625, 0.0078125, -0.0390625, -0.0546875, -0.0859375, -0.1953125, -0.2421875, -0.265625, -0.328125, -0.265625, -0.2265625, -0.1953125, -0.34375, -0.203125, -0.203125, -0.25, -0.203125, -0.125, -0.2109375, -0.3671875, -0.2734375, -0.2890625, -0.1484375, -0.15625, -0.03125, 0.0546875, 0.0390625, -0.0390625, 0.0703125, 0.1640625, 0.046875, -0.1015625, -0.1015625, 0.0078125, -0.0625, -0.078125, -0.1796875, -0.1015625, -0.046875, 0.015625, -0.015625, -0.046875, -0.0625, -0.1875, -0.1640625, -0.25, -0.3359375, -0.2578125, -0.1015625, -0.0546875, 0.03125, 0.09375, 0.15625, 0.1484375, 0.1796875, 0.09375, 0.140625, 0.1171875, 0.1953125, 0.1328125, 0.0625, 0.046875, -0.015625, -0.0625, -0.21875, -0.0390625, -0.0859375, -0.0703125, 0.0, 0.0, -0.0390625, 0.0, -0.015625, -0.2734375, -0.15625, -0.1171875, -0.1484375, -0.21875, -0.1484375, -0.1328125, -0.0625, 0.09375, 0.203125, 0.2421875, 0.2421875, 0.4296875, 0.375, 0.28125, 0.390625, 0.3984375, 0.34375, 0.375, 0.3671875, 0.4453125, 0.40625, 0.4375, 0.4296875, 0.359375, 0.3828125, 0.2109375, 0.1875, 0.1484375, 0.1484375, 0.21875, 0.1953125, 0.1875, 0.21875, 0.1796875, 0.203125, 0.21875, 0.171875, 0.1875, 0.046875, -0.0390625, 0.0234375, -0.0078125, -0.25, -0.09375, -0.09375, -0.2265625, -0.1640625, -0.03125, -0.078125, -0.09375, -0.1953125, -0.2109375, -0.2265625, -0.28125, -0.171875, -0.125, -0.125, -0.3046875, -0.1171875, -0.1015625, -0.125, -0.109375, -0.25, -0.1796875, -0.0078125, -0.0625, -0.1796875, -0.09375, -0.0078125, 0.0546875, -0.0546875, 0.0390625, 0.0078125, -0.0703125, 0.015625, -0.0390625, -0.140625, -0.15625, -0.0625, -0.0703125, 0.09375, 0.03125, 0.0234375, -0.015625, -0.015625, 0.0078125, 0.0, -0.09375, -0.2265625, -0.171875, -0.046875, -0.0390625, -0.1171875, -0.0390625, 0.1328125, -0.0390625, -0.0078125, 0.09375, 0.0625, 0.0546875, 0.0703125, -0.0859375, 0.03125, 0.03125, 0.0546875, 0.1328125, 0.1484375, 0.046875, 0.09375, 0.0703125, 0.2109375, 0.2109375, 0.1015625, 0.0, 0.15625, 0.15625, 0.1171875, 0.140625, 0.1171875, 0.1796875, 0.1328125, 0.0859375, 0.0625, 0.09375, 0.0546875, 0.015625, 0.046875, 0.125, 0.109375, 0.1171875, 0.1328125, 0.140625, 0.1328125, 0.125, 0.0546875, 0.09375, 0.234375, 0.1640625, 0.1328125, 0.2109375, 0.1328125, 0.0390625, 0.046875, 0.21875, 0.15625, 0.078125, 0.125, 0.109375, 0.15625, 0.125, 0.1875, 0.0703125, 0.109375, 0.09375, 0.0546875, 0.0546875, 0.0859375, -0.0234375, 0.15625, 0.1015625, 0.0, -0.0703125, 0.0078125, 0.125, 0.0625, 0.0859375, 0.0546875, 0.1640625, 0.140625, 0.171875, 0.015625, 0.0078125, 0.0546875, -0.0625, 0.03125, 0.1015625, -0.0234375, -0.1796875, 0.0078125, 0.0390625, -0.078125, -0.1796875, -0.0859375, -0.078125, 0.0859375, -0.015625, -0.265625, -0.0546875, 0.0, -0.1015625, -0.0625, -0.1171875, -0.28125, -0.2578125, -0.1484375, -0.1328125, -0.2265625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.015625, 0.015625, -0.0078125, 0.0, 0.0, 0.0078125, 0.0, -0.015625, 0.015625, -0.0078125, 0.015625, 0.0, 0.0234375, -0.015625, 0.0078125, -0.0234375, 0.0078125, -0.015625, 0.0078125, 0.0546875, 0.0078125, -0.0078125, -0.0625, 0.0078125, -0.0078125, 0.0703125, 0.015625, 0.0, -0.0078125, 0.03125, -0.0078125, -0.03125, 0.0078125, 0.03125, -0.0078125, 0.0390625, 0.0703125, 0.0390625, -0.0625, 0.0234375, -0.0078125, 0.0546875, 0.03125, 0.0078125, -0.046875, 0.0703125, 0.140625, -0.015625, -0.09375, -0.0546875, 0.1171875, 0.0390625, -0.0078125, -0.0390625, 0.0234375, 0.0625, -0.015625, 0.0390625, -0.0390625, 0.0234375, -0.015625, 0.0703125, -0.0546875, -0.03125, 0.015625, 0.0234375, -0.03125, -0.0234375, 0.0390625, -0.03125, -0.03125, -0.046875, 0.0625, -0.0078125, -0.046875, -0.078125, 0.0078125, 0.03125, -0.0859375, -0.09375, -0.0390625, 0.109375, -0.046875, -0.0546875, -0.015625, 0.046875, -0.09375, -0.0859375, 0.046875, -0.0078125, 0.0078125, -0.0390625, -0.0078125, -0.078125, -0.015625, -0.0625, 0.0, -0.078125, -0.140625, -0.015625, 0.0625, 0.015625, -0.140625, -0.0625, -0.0546875, -0.03125, -0.0859375, -0.0390625, -0.0625, -0.0859375, -0.03125, 0.0078125, 0.0234375, -0.09375, -0.1015625, -0.125, 0.0, 0.0234375, 0.0, -0.1015625, -0.0546875, 0.0390625, 0.0546875, 0.0859375, 0.015625, -0.0703125, -0.1953125, -0.09375, -0.015625, 0.046875, 0.0546875, 0.0703125, 0.0546875, -0.109375, -0.1484375, -0.109375, 0.0234375, 0.03125, 0.1640625, 0.1015625, 0.0546875, -0.015625, 0.046875, 0.0, 0.0234375, 0.046875, 0.0390625, -0.0625, 0.0078125, 0.1796875, 0.1875, 0.0859375, 0.046875, 0.09375, 0.0390625, -0.015625, -0.09375, -0.0234375, -0.109375, -0.1171875, -0.125, 0.0703125, 0.140625, 0.171875, 0.1328125, 0.203125, 0.1015625, -0.0234375, -0.0625, -0.015625, -0.0546875, -0.0390625, 0.0078125, 0.03125, 0.015625, 0.0078125, 0.1015625, 0.140625, 0.15625, 0.0859375, 0.09375, 0.0625, 0.125, 0.171875, 0.3125, 0.2578125, 0.109375, -0.0390625, -0.1640625, -0.265625, -0.3203125, -0.234375, -0.2265625, -0.0859375, 0.1328125, 0.3671875, 0.3359375, 0.34375, 0.28125, 0.2265625, 0.09375, -0.046875, -0.171875, -0.1328125, -0.1171875, -0.1171875, -0.1015625, -0.03125, 0.0390625, 0.046875, 0.0234375, 0.0625, 0.1640625, 0.203125, 0.1484375, 0.078125, 0.140625, 0.09375, 0.0546875, -0.046875, -0.0625, -0.125, -0.203125, -0.28125, -0.2265625, -0.2265625, -0.1875, -0.2265625, -0.2109375, -0.1953125, -0.171875, -0.1015625, -0.078125, -0.109375, -0.21875, -0.203125, -0.21875, -0.1875, -0.15625, -0.0234375, -0.015625, 0.109375, 0.1015625, 0.15625, 0.1484375, 0.1796875, 0.09375, -0.015625, 0.046875, 0.0234375, 0.0546875, -0.1015625, -0.0625, 0.03125, 0.1171875, 0.0234375, -0.09375, -0.1171875, -0.1640625, -0.1640625, -0.2421875, -0.21875, -0.2265625, -0.1328125, -0.0546875, 0.0234375, 0.1015625, 0.09375, 0.1953125, 0.140625, 0.171875, 0.1171875, 0.171875, 0.109375, 0.1484375, 0.1015625, 0.0703125, -0.0546875, -0.078125, -0.1171875, -0.1640625, -0.171875, -0.109375, -0.1171875, -0.0859375, -0.03125, -0.0546875, -0.0703125, -0.1796875, -0.2421875, -0.2421875, -0.203125, -0.2734375, -0.234375, -0.25, -0.1875, -0.15625, 0.0390625, 0.1171875, 0.1953125, 0.21875, 0.328125, 0.328125, 0.2890625, 0.3046875, 0.3125, 0.3203125, 0.3125, 0.34375, 0.359375, 0.328125, 0.3359375, 0.34375, 0.2734375, 0.28125, 0.1171875, 0.1328125, 0.125, 0.1328125, 0.109375, 0.1796875, 0.1328125, 0.140625, 0.1015625, 0.1484375, 0.0859375, 0.140625, 0.125, -0.0234375, -0.09375, -0.0703125, -0.0625, -0.1953125, -0.15625, -0.1953125, -0.2734375, -0.1953125, -0.0859375, -0.1171875, -0.1796875, -0.203125, -0.234375, -0.2421875, -0.234375, -0.1953125, -0.203125, -0.15625, -0.2421875, -0.1328125, -0.0859375, -0.1640625, -0.1484375, -0.171875, -0.1015625, -0.0703125, -0.0625, -0.078125, -0.015625, 0.0234375, 0.078125, 0.0625, 0.0390625, 0.015625, 0.0234375, 0.0546875, -0.0234375, -0.078125, -0.0703125, 0.0546875, 0.0546875, 0.1484375, 0.0078125, 0.0625, 0.0390625, 0.0859375, 0.0234375, 0.046875, -0.0703125, -0.1171875, -0.09375, -0.046875, -0.0078125, 0.0703125, 0.1015625, 0.109375, 0.046875, 0.1484375, 0.109375, 0.0625, 0.078125, 0.1171875, -0.0078125, 0.109375, 0.0859375, 0.140625, 0.15625, 0.1796875, 0.09375, 0.09375, 0.1875, 0.21875, 0.203125, 0.078125, 0.1484375, 0.171875, 0.171875, 0.140625, 0.1796875, 0.1171875, 0.1328125, 0.109375, 0.0703125, 0.078125, 0.03125, 0.046875, -0.015625, 0.0703125, 0.0859375, 0.1171875, 0.109375, 0.078125, 0.09375, 0.1171875, 0.0546875, 0.0, 0.046875, 0.203125, 0.09375, 0.046875, 0.1484375, 0.125, 0.0078125, -0.0078125, 0.109375, 0.0390625, -0.0234375, 0.03125, 0.0703125, 0.09375, 0.0703125, 0.140625, 0.0078125, -0.046875, -0.03125, 0.03125, -0.0703125, -0.0703125, -0.03125, 0.0859375, -0.0078125, -0.109375, -0.1484375, -0.0234375, 0.0078125, -0.0390625, -0.03125, 0.0859375, 0.046875, 0.0625, 0.1015625, 0.046875, -0.09375, -0.0625, -0.109375, -0.0234375, 0.0078125, -0.0703125, -0.1484375, -0.1328125, -0.0546875, -0.1328125, -0.171875, -0.1328125, -0.0078125, -0.0234375, -0.046875, -0.1953125, -0.078125, -0.1328125, -0.1484375, -0.1171875, -0.140625, -0.234375, -0.2265625, -0.1640625, -0.0859375, -0.15625\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_8bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_8bit_44100.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_8bit_44100.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_8bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 8;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.03125, 0.0078125, 0.0078125, 0.0, -0.03125, 0.03125, 0.015625, -0.0078125, -0.0078125, 0.0390625, -0.078125, 0.0078125, 0.0390625, 0.0234375, -0.0390625, 0.046875, 0.0, -0.0234375, 0.0, 0.0078125, 0.03125, -0.0234375, -0.0234375, 0.046875, 0.0390625, 0.0234375, 0.0, -0.0546875, -0.03125, 0.0625, 0.03125, 0.0703125, -0.0234375, 0.0390625, 0.015625, 0.0234375, -0.0546875, 0.0390625, 0.0390625, 0.0, 0.0859375, 0.0546875, 0.03125, 0.0234375, 0.03125, -0.0390625, 0.09375, 0.0625, -0.03125, -0.0078125, 0.109375, 0.140625, -0.03125, -0.0625, 0.0390625, 0.1015625, 0.0625, -0.0078125, -0.0390625, 0.046875, 0.109375, 0.0, 0.015625, 0.0, 0.015625, 0.0078125, 0.0078125, -0.078125, 0.03125, 0.0390625, -0.015625, -0.0234375, 0.0078125, -0.0078125, -0.03125, -0.03125, -0.0390625, -0.0234375, 0.015625, -0.125, -0.1484375, 0.0078125, 0.0546875, -0.1328125, -0.15625, 0.0, 0.0390625, -0.0625, -0.078125, -0.078125, -0.0078125, -0.1328125, -0.140625, -0.03125, 0.015625, -0.09375, -0.078125, -0.1171875, -0.1015625, -0.09375, -0.1328125, -0.0703125, -0.0546875, -0.1796875, -0.09375, -0.0078125, -0.078125, -0.203125, -0.0859375, -0.046875, -0.140625, -0.1796875, -0.0546875, -0.109375, -0.125, -0.109375, 0.03125, -0.1640625, -0.1796875, -0.09375, -0.09375, -0.046875, 0.0234375, -0.078125, -0.15625, -0.03125, 0.0625, 0.03125, 0.0390625, -0.0625, -0.1953125, -0.171875, -0.1015625, 0.0078125, 0.0703125, 0.0546875, 0.03125, 0.0, -0.15625, -0.0625, 0.0234375, 0.078125, 0.1171875, 0.1484375, 0.0, -0.015625, 0.0546875, 0.0859375, 0.0703125, 0.0625, 0.0703125, 0.0546875, 0.0078125, 0.1484375, 0.3046875, 0.28125, 0.015625, 0.015625, 0.09375, 0.078125, -0.0234375, 0.015625, 0.0234375, -0.0078125, -0.0234375, 0.0546875, 0.203125, 0.265625, 0.1796875, 0.140625, 0.2109375, 0.109375, -0.0078125, 0.0703125, 0.09375, 0.0234375, 0.03125, 0.109375, 0.015625, 0.0, 0.15625, 0.28125, 0.203125, 0.234375, 0.1171875, 0.1015625, 0.171875, 0.1796875, 0.265625, 0.359375, 0.1875, 0.0, -0.1328125, -0.2265625, -0.25, -0.203125, -0.1328125, -0.09375, 0.140625, 0.3125, 0.390625, 0.3046875, 0.3046875, 0.1484375, 0.140625, 0.0078125, -0.1328125, -0.125, -0.125, -0.09375, -0.1640625, -0.0625, 0.0078125, 0.03125, -0.015625, 0.03125, 0.0625, 0.25, 0.125, 0.0, 0.0625, 0.0078125, -0.0390625, -0.0546875, -0.0859375, -0.1953125, -0.2421875, -0.265625, -0.328125, -0.265625, -0.2265625, -0.1953125, -0.34375, -0.203125, -0.203125, -0.25, -0.203125, -0.125, -0.2109375, -0.3671875, -0.2734375, -0.2890625, -0.1484375, -0.15625, -0.03125, 0.0546875, 0.0390625, -0.0390625, 0.0703125, 0.1640625, 0.046875, -0.1015625, -0.1015625, 0.0078125, -0.0625, -0.078125, -0.1796875, -0.1015625, -0.046875, 0.015625, -0.015625, -0.046875, -0.0625, -0.1875, -0.1640625, -0.25, -0.3359375, -0.2578125, -0.1015625, -0.0546875, 0.03125, 0.09375, 0.15625, 0.1484375, 0.1796875, 0.09375, 0.140625, 0.1171875, 0.1953125, 0.1328125, 0.0625, 0.046875, -0.015625, -0.0625, -0.21875, -0.0390625, -0.0859375, -0.0703125, 0.0, 0.0, -0.0390625, 0.0, -0.015625, -0.2734375, -0.15625, -0.1171875, -0.1484375, -0.21875, -0.1484375, -0.1328125, -0.0625, 0.09375, 0.203125, 0.2421875, 0.2421875, 0.4296875, 0.375, 0.28125, 0.390625, 0.3984375, 0.34375, 0.375, 0.3671875, 0.4453125, 0.40625, 0.4375, 0.4296875, 0.359375, 0.3828125, 0.2109375, 0.1875, 0.1484375, 0.1484375, 0.21875, 0.1953125, 0.1875, 0.21875, 0.1796875, 0.203125, 0.21875, 0.171875, 0.1875, 0.046875, -0.0390625, 0.0234375, -0.0078125, -0.25, -0.09375, -0.09375, -0.2265625, -0.1640625, -0.03125, -0.078125, -0.09375, -0.1953125, -0.2109375, -0.2265625, -0.28125, -0.171875, -0.125, -0.125, -0.3046875, -0.1171875, -0.1015625, -0.125, -0.109375, -0.25, -0.1796875, -0.0078125, -0.0625, -0.1796875, -0.09375, -0.0078125, 0.0546875, -0.0546875, 0.0390625, 0.0078125, -0.0703125, 0.015625, -0.0390625, -0.140625, -0.15625, -0.0625, -0.0703125, 0.09375, 0.03125, 0.0234375, -0.015625, -0.015625, 0.0078125, 0.0, -0.09375, -0.2265625, -0.171875, -0.046875, -0.0390625, -0.1171875, -0.0390625, 0.1328125, -0.0390625, -0.0078125, 0.09375, 0.0625, 0.0546875, 0.0703125, -0.0859375, 0.03125, 0.03125, 0.0546875, 0.1328125, 0.1484375, 0.046875, 0.09375, 0.0703125, 0.2109375, 0.2109375, 0.1015625, 0.0, 0.15625, 0.15625, 0.1171875, 0.140625, 0.1171875, 0.1796875, 0.1328125, 0.0859375, 0.0625, 0.09375, 0.0546875, 0.015625, 0.046875, 0.125, 0.109375, 0.1171875, 0.1328125, 0.140625, 0.1328125, 0.125, 0.0546875, 0.09375, 0.234375, 0.1640625, 0.1328125, 0.2109375, 0.1328125, 0.0390625, 0.046875, 0.21875, 0.15625, 0.078125, 0.125, 0.109375, 0.15625, 0.125, 0.1875, 0.0703125, 0.109375, 0.09375, 0.0546875, 0.0546875, 0.0859375, -0.0234375, 0.15625, 0.1015625, 0.0, -0.0703125, 0.0078125, 0.125, 0.0625, 0.0859375, 0.0546875, 0.1640625, 0.140625, 0.171875, 0.015625, 0.0078125, 0.0546875, -0.0625, 0.03125, 0.1015625, -0.0234375, -0.1796875, 0.0078125, 0.0390625, -0.078125, -0.1796875, -0.0859375, -0.078125, 0.0859375, -0.015625, -0.265625, -0.0546875, 0.0, -0.1015625, -0.0625, -0.1171875, -0.28125, -0.2578125, -0.1484375, -0.1328125, -0.2265625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.015625, 0.015625, -0.0078125, 0.0, 0.0, 0.0078125, 0.0, -0.015625, 0.015625, -0.0078125, 0.015625, 0.0, 0.0234375, -0.015625, 0.0078125, -0.0234375, 0.0078125, -0.015625, 0.0078125, 0.0546875, 0.0078125, -0.0078125, -0.0625, 0.0078125, -0.0078125, 0.0703125, 0.015625, 0.0, -0.0078125, 0.03125, -0.0078125, -0.03125, 0.0078125, 0.03125, -0.0078125, 0.0390625, 0.0703125, 0.0390625, -0.0625, 0.0234375, -0.0078125, 0.0546875, 0.03125, 0.0078125, -0.046875, 0.0703125, 0.140625, -0.015625, -0.09375, -0.0546875, 0.1171875, 0.0390625, -0.0078125, -0.0390625, 0.0234375, 0.0625, -0.015625, 0.0390625, -0.0390625, 0.0234375, -0.015625, 0.0703125, -0.0546875, -0.03125, 0.015625, 0.0234375, -0.03125, -0.0234375, 0.0390625, -0.03125, -0.03125, -0.046875, 0.0625, -0.0078125, -0.046875, -0.078125, 0.0078125, 0.03125, -0.0859375, -0.09375, -0.0390625, 0.109375, -0.046875, -0.0546875, -0.015625, 0.046875, -0.09375, -0.0859375, 0.046875, -0.0078125, 0.0078125, -0.0390625, -0.0078125, -0.078125, -0.015625, -0.0625, 0.0, -0.078125, -0.140625, -0.015625, 0.0625, 0.015625, -0.140625, -0.0625, -0.0546875, -0.03125, -0.0859375, -0.0390625, -0.0625, -0.0859375, -0.03125, 0.0078125, 0.0234375, -0.09375, -0.1015625, -0.125, 0.0, 0.0234375, 0.0, -0.1015625, -0.0546875, 0.0390625, 0.0546875, 0.0859375, 0.015625, -0.0703125, -0.1953125, -0.09375, -0.015625, 0.046875, 0.0546875, 0.0703125, 0.0546875, -0.109375, -0.1484375, -0.109375, 0.0234375, 0.03125, 0.1640625, 0.1015625, 0.0546875, -0.015625, 0.046875, 0.0, 0.0234375, 0.046875, 0.0390625, -0.0625, 0.0078125, 0.1796875, 0.1875, 0.0859375, 0.046875, 0.09375, 0.0390625, -0.015625, -0.09375, -0.0234375, -0.109375, -0.1171875, -0.125, 0.0703125, 0.140625, 0.171875, 0.1328125, 0.203125, 0.1015625, -0.0234375, -0.0625, -0.015625, -0.0546875, -0.0390625, 0.0078125, 0.03125, 0.015625, 0.0078125, 0.1015625, 0.140625, 0.15625, 0.0859375, 0.09375, 0.0625, 0.125, 0.171875, 0.3125, 0.2578125, 0.109375, -0.0390625, -0.1640625, -0.265625, -0.3203125, -0.234375, -0.2265625, -0.0859375, 0.1328125, 0.3671875, 0.3359375, 0.34375, 0.28125, 0.2265625, 0.09375, -0.046875, -0.171875, -0.1328125, -0.1171875, -0.1171875, -0.1015625, -0.03125, 0.0390625, 0.046875, 0.0234375, 0.0625, 0.1640625, 0.203125, 0.1484375, 0.078125, 0.140625, 0.09375, 0.0546875, -0.046875, -0.0625, -0.125, -0.203125, -0.28125, -0.2265625, -0.2265625, -0.1875, -0.2265625, -0.2109375, -0.1953125, -0.171875, -0.1015625, -0.078125, -0.109375, -0.21875, -0.203125, -0.21875, -0.1875, -0.15625, -0.0234375, -0.015625, 0.109375, 0.1015625, 0.15625, 0.1484375, 0.1796875, 0.09375, -0.015625, 0.046875, 0.0234375, 0.0546875, -0.1015625, -0.0625, 0.03125, 0.1171875, 0.0234375, -0.09375, -0.1171875, -0.1640625, -0.1640625, -0.2421875, -0.21875, -0.2265625, -0.1328125, -0.0546875, 0.0234375, 0.1015625, 0.09375, 0.1953125, 0.140625, 0.171875, 0.1171875, 0.171875, 0.109375, 0.1484375, 0.1015625, 0.0703125, -0.0546875, -0.078125, -0.1171875, -0.1640625, -0.171875, -0.109375, -0.1171875, -0.0859375, -0.03125, -0.0546875, -0.0703125, -0.1796875, -0.2421875, -0.2421875, -0.203125, -0.2734375, -0.234375, -0.25, -0.1875, -0.15625, 0.0390625, 0.1171875, 0.1953125, 0.21875, 0.328125, 0.328125, 0.2890625, 0.3046875, 0.3125, 0.3203125, 0.3125, 0.34375, 0.359375, 0.328125, 0.3359375, 0.34375, 0.2734375, 0.28125, 0.1171875, 0.1328125, 0.125, 0.1328125, 0.109375, 0.1796875, 0.1328125, 0.140625, 0.1015625, 0.1484375, 0.0859375, 0.140625, 0.125, -0.0234375, -0.09375, -0.0703125, -0.0625, -0.1953125, -0.15625, -0.1953125, -0.2734375, -0.1953125, -0.0859375, -0.1171875, -0.1796875, -0.203125, -0.234375, -0.2421875, -0.234375, -0.1953125, -0.203125, -0.15625, -0.2421875, -0.1328125, -0.0859375, -0.1640625, -0.1484375, -0.171875, -0.1015625, -0.0703125, -0.0625, -0.078125, -0.015625, 0.0234375, 0.078125, 0.0625, 0.0390625, 0.015625, 0.0234375, 0.0546875, -0.0234375, -0.078125, -0.0703125, 0.0546875, 0.0546875, 0.1484375, 0.0078125, 0.0625, 0.0390625, 0.0859375, 0.0234375, 0.046875, -0.0703125, -0.1171875, -0.09375, -0.046875, -0.0078125, 0.0703125, 0.1015625, 0.109375, 0.046875, 0.1484375, 0.109375, 0.0625, 0.078125, 0.1171875, -0.0078125, 0.109375, 0.0859375, 0.140625, 0.15625, 0.1796875, 0.09375, 0.09375, 0.1875, 0.21875, 0.203125, 0.078125, 0.1484375, 0.171875, 0.171875, 0.140625, 0.1796875, 0.1171875, 0.1328125, 0.109375, 0.0703125, 0.078125, 0.03125, 0.046875, -0.015625, 0.0703125, 0.0859375, 0.1171875, 0.109375, 0.078125, 0.09375, 0.1171875, 0.0546875, 0.0, 0.046875, 0.203125, 0.09375, 0.046875, 0.1484375, 0.125, 0.0078125, -0.0078125, 0.109375, 0.0390625, -0.0234375, 0.03125, 0.0703125, 0.09375, 0.0703125, 0.140625, 0.0078125, -0.046875, -0.03125, 0.03125, -0.0703125, -0.0703125, -0.03125, 0.0859375, -0.0078125, -0.109375, -0.1484375, -0.0234375, 0.0078125, -0.0390625, -0.03125, 0.0859375, 0.046875, 0.0625, 0.1015625, 0.046875, -0.09375, -0.0625, -0.109375, -0.0234375, 0.0078125, -0.0703125, -0.1484375, -0.1328125, -0.0546875, -0.1328125, -0.171875, -0.1328125, -0.0078125, -0.0234375, -0.046875, -0.1953125, -0.078125, -0.1328125, -0.1484375, -0.1171875, -0.140625, -0.234375, -0.2265625, -0.1640625, -0.0859375, -0.15625\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/aiff_stereo_8bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_8bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_8bit_48000.h}
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b aiff_stereo_8bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_48000::bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b aiff_stereo_8bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b aiff_stereo_8bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b aiff_stereo_8bit_48000::testBuffer} = \{\{-0.0078125, 0.0234375, -0.1015625, -0.0703125, -0.0234375, -0.0703125, 0.0625, 0.109375, 0.1015625, -0.0546875, -0.0078125, 0.046875, 0.015625, 0.0234375, 0.0625, -0.109375, -0.0625, 0.046875, -0.0390625, -0.1796875, -0.1015625, -0.046875, 0.2265625, 0.2421875, 0.1171875, -0.1484375, -0.1953125, -0.1015625, 0.015625, 0.1484375, 0.09375, 0.0859375, 0.0625, -0.0390625, -0.140625, -0.0859375, 0.0234375, -0.1328125, -0.0390625, 0.1171875, 0.1171875, 0.0546875, 0.09375, -0.03125, 0.0390625, 0.046875, 0.1015625, 0.0703125, -0.0078125, 0.015625, 0.015625, -0.0390625, -0.109375, -0.125, -0.1484375, 0.078125, 0.078125, 0.0859375, 0.046875, 0.03125, 0.0859375, -0.015625, -0.015625, -0.1171875, -0.0703125, 0.0546875, 0.0703125, 0.234375, 0.234375, 0.1015625, 0.0546875, 0.1171875, 0.109375, 0.03125, -0.0546875, -0.015625, -0.09375, -0.015625, -0.0234375, -0.0078125, -0.1015625, -0.1796875, -0.109375, -0.1171875, -0.1328125, -0.140625, -0.1484375, -0.0703125, -0.0234375, 0.0234375, -0.046875, -0.078125, 0.0078125, 0.03125, -0.1171875, -0.15625, 0.046875, 0.1328125, 0.03125, 0.109375, 0.03125, 0.09375, 0.0234375, -0.0546875, 0.109375, 0.125, -0.0703125, -0.0234375, -0.09375, -0.1484375, -0.03125, 0.0078125, 0.03125, -0.0625, -0.3671875, -0.34375, -0.3125, -0.3203125, -0.2890625, -0.2421875, -0.15625, -0.1328125, -0.203125, -0.1015625, -0.3046875, -0.328125, -0.21875, -0.03125, -0.109375, -0.265625, -0.265625, -0.0625, 0.0546875, 0.0234375, 0.1328125, 0.0390625, -0.09375, 0.1015625, 0.0078125, -0.0078125, 0.1015625, 0.046875, 0.2265625, 0.2109375, 0.1015625, 0.1484375, 0.09375, 0.046875, 0.2421875, 0.15625, 0.0234375, 0.0625, 0.171875, 0.15625, 0.2265625, 0.1328125, 0.0234375, -0.03125, -0.0390625, -0.0390625, -0.046875, -0.09375, -0.046875, 0.046875, 0.0390625, -0.1015625, 0.015625, 0.0390625, 0.0234375, 0.0234375, 0.1015625, 0.0390625, -0.1015625, -0.171875, -0.203125, -0.0703125, 0.1015625, 0.0234375, -0.0078125, 0.015625, 0.0625, 0.1796875, 0.1015625, 0.140625, 0.046875, 0.046875, 0.2734375, 0.0390625, 0.0625, 0.1875, 0.203125, 0.0546875, 0.09375, 0.2890625, 0.203125, 0.0859375, 0.21875, 0.2734375, 0.3125, 0.1875, 0.203125, 0.265625, 0.2109375, 0.296875, 0.2265625, 0.140625, 0.2734375, 0.2421875, 0.1640625, 0.3203125, 0.0703125, 0.125, 0.1328125, 0.171875, 0.265625, 0.171875, 0.2109375, 0.078125, 0.0078125, 0.0703125, -0.0546875, 0.0, 0.1796875, -0.03125, -0.09375, -0.1796875, 0.0, 0.0, -0.1640625, -0.1640625, -0.1640625, -0.03125, -0.09375, -0.171875, -0.1875, -0.3359375, -0.2109375, -0.1640625, -0.1953125, -0.265625, -0.265625, -0.234375, -0.1796875, -0.2109375, -0.1640625, -0.2109375, -0.1640625, -0.2421875, -0.3125, -0.1875, -0.3203125, -0.234375, -0.1796875, -0.1640625, -0.3203125, -0.1796875, 0.0, -0.078125, -0.078125, -0.046875, -0.21875, -0.28125, -0.140625, -0.0546875, 0.0390625, -0.1171875, -0.078125, -0.0859375, 0.0234375, 0.0234375, -0.109375, 0.0078125, -0.0078125, -0.078125, 0.03125, 0.109375, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.03125, 0.0078125, 0.0703125, 0.125, -0.109375, 0.0, 0.09375, 0.0546875, 0.03125, 0.0078125, 0.1015625, 0.046875, 0.0546875, 0.0390625, 0.1328125, 0.1328125, 0.1328125, 0.0, -0.015625, -0.1015625, -0.0546875, 0.0625, -0.0859375, 0.0234375, -0.0546875, 0.015625, 0.1640625, 0.1484375, 0.046875, 0.1015625, 0.03125, -0.125, -0.0859375, -0.046875, 0.015625, 0.0234375, 0.1171875, 0.171875, 0.09375, -0.078125, -0.0703125, 0.0625, 0.09375, -0.046875, -0.0859375, 0.078125, 0.1796875, 0.1015625, 0.0234375, 0.015625, 0.1015625, 0.2578125, 0.1171875, 0.0234375, -0.015625, 0.0078125, 0.1015625, 0.0703125, 0.1640625, 0.203125, 0.1484375, 0.1328125, 0.109375, 0.15625, 0.25, 0.0234375, 0.125, 0.2109375, 0.1171875, 0.1171875, 0.234375, 0.1796875, 0.09375, 0.0, 0.15625, 0.15625, 0.0703125, 0.25, 0.125, 0.1328125, 0.046875, 0.09375, 0.2109375, 0.1796875, 0.0546875, 0.03125, 0.1171875, 0.2421875, 0.1484375, -0.0390625, -0.015625, 0.0234375, 0.09375, -0.0234375, 0.09375, 0.0703125, 0.015625, 0.0, -0.1171875, -0.078125, -0.0390625, 0.0390625, -0.125, -0.0546875, 0.0390625, 0.0078125, -0.140625, -0.203125, -0.1796875, -0.109375, -0.078125, -0.1484375, -0.2109375, -0.09375, -0.125, -0.1953125, -0.25, -0.2421875, -0.140625, -0.1640625, -0.1953125, -0.1796875, -0.3125, -0.203125, -0.2578125, -0.203125, -0.109375, -0.1484375, -0.2890625, -0.2265625, -0.2109375, -0.171875, -0.28125, -0.21875, -0.2421875, -0.28125, -0.1796875, -0.140625, -0.2265625, -0.1015625, -0.140625, -0.25, -0.34375, -0.234375, 0.0, -0.1328125, -0.0234375, 0.0, -0.0859375, -0.1171875, -0.171875, -0.0546875, -0.0546875, -0.109375, -0.03125, -0.1015625, -0.09375, -0.0703125, 0.046875, 0.1640625, 0.03125, 0.0625, -0.0078125, -0.015625, 0.171875, 0.046875, 0.03125, -0.046875, -0.0078125, 0.171875, 0.1875, 0.1953125, 0.046875, 0.21875, 0.234375, 0.15625, 0.125, 0.15625, 0.0859375, 0.2265625, 0.1875, 0.1796875, 0.1484375, 0.234375, 0.1796875, 0.1953125, 0.390625, 0.3203125, 0.234375, 0.1015625, 0.203125, 0.234375, 0.25, 0.1796875, 0.2265625, 0.265625, 0.2421875, 0.171875, 0.15625, 0.2109375, 0.1015625, 0.2578125, 0.2734375, 0.3203125, 0.2578125, 0.109375, 0.0625, 0.2109375, 0.203125, 0.1875, 0.1796875, 0.03125, 0.0859375, 0.125, 0.171875, 0.078125, 0.0234375, 0.1015625, 0.0703125, 0.0546875\}, \{-0.0078125, 0.0234375, -0.09375, -0.0703125, -0.0078125, -0.078125, 0.078125, 0.0859375, 0.109375, -0.0625, 0.0, 0.0390625, 0.0234375, 0.0390625, 0.0390625, -0.125, -0.03125, 0.0859375, -0.0859375, -0.171875, -0.125, 0.0, 0.1953125, 0.2734375, 0.0859375, -0.1484375, -0.21875, -0.0546875, 0.03125, 0.1484375, 0.0703125, 0.0390625, 0.0625, -0.0234375, -0.1015625, -0.109375, 0.0546875, -0.1328125, -0.046875, 0.078125, 0.0859375, 0.09375, 0.0078125, -0.0078125, 0.0703125, 0.03125, 0.0859375, 0.046875, 0.0, 0.0078125, 0.03125, -0.078125, -0.1171875, -0.1953125, -0.1015625, 0.0078125, 0.1171875, 0.0546875, 0.0546875, 0.0703125, 0.0390625, 0.0, -0.109375, -0.09375, -0.1015625, 0.0625, 0.09375, 0.1796875, 0.2421875, 0.1171875, 0.078125, 0.0625, 0.1640625, -0.0546875, 0.0546875, -0.03125, -0.078125, -0.0625, -0.0390625, -0.0078125, -0.1328125, -0.1640625, -0.140625, -0.1015625, -0.171875, -0.1796875, -0.1328125, -0.0703125, -0.078125, 0.046875, -0.0546875, -0.0546875, 0.0625, 0.0234375, 0.03125, -0.1484375, 0.1484375, 0.1796875, 0.0703125, 0.1328125, 0.109375, 0.1484375, 0.046875, 0.0234375, 0.171875, 0.203125, -0.0546875, 0.0078125, -0.0625, -0.0546875, -0.015625, 0.046875, 0.078125, -0.046875, -0.265625, -0.3359375, -0.2109375, -0.3046875, -0.203125, -0.1796875, -0.109375, -0.109375, -0.125, -0.09375, -0.2578125, -0.2890625, -0.1640625, 0.0, -0.0703125, -0.1640625, -0.2421875, 0.0, 0.078125, 0.0546875, 0.171875, 0.03125, -0.015625, 0.125, 0.0625, 0.0234375, 0.125, 0.0625, 0.21875, 0.2265625, 0.109375, 0.1640625, 0.109375, 0.09375, 0.2109375, 0.1953125, -0.046875, 0.1328125, 0.109375, 0.1640625, 0.1875, 0.1171875, 0.0078125, -0.0546875, -0.0859375, -0.0625, -0.1171875, -0.1015625, -0.1171875, 0.0078125, 0.0, -0.15625, -0.03125, -0.03125, -0.0234375, -0.03125, 0.0390625, -0.0390625, -0.15625, -0.2578125, -0.25, -0.1640625, 0.0625, -0.0859375, -0.0546875, -0.078125, -0.015625, 0.0859375, 0.015625, 0.0546875, -0.03125, -0.0234375, 0.1796875, -0.015625, -0.03125, 0.140625, 0.09375, 0.015625, -0.015625, 0.2421875, 0.1015625, 0.03125, 0.1328125, 0.2265625, 0.2265625, 0.140625, 0.140625, 0.21875, 0.1640625, 0.234375, 0.203125, 0.0625, 0.2734375, 0.1640625, 0.1796875, 0.25, 0.0859375, 0.0703125, 0.140625, 0.1328125, 0.265625, 0.1484375, 0.203125, 0.078125, -0.0078125, 0.09375, -0.078125, 0.0234375, 0.15625, 0.0, -0.1015625, -0.1484375, 0.0078125, 0.03125, -0.15625, -0.125, -0.1484375, 0.0078125, -0.0703125, -0.1328125, -0.1640625, -0.28125, -0.1953125, -0.1015625, -0.1875, -0.1796875, -0.2578125, -0.15625, -0.15625, -0.1484375, -0.109375, -0.1640625, -0.0859375, -0.2109375, -0.2265625, -0.171875, -0.2109375, -0.2265625, -0.0703125, -0.1484375, -0.21875, -0.1484375, 0.09375, -0.0390625, -0.015625, 0.03125, -0.1796875, -0.171875, -0.1328125, 0.0703125, 0.0390625, -0.015625, -0.0546875, -0.0078125, 0.0703125, 0.0703125, -0.0390625, 0.0390625, 0.078125, -0.0546875, 0.1171875, 0.125, 0.0859375, 0.0546875, 0.1328125, 0.1953125, 0.0546875, 0.0625, 0.0859375, 0.1640625, -0.0859375, 0.0234375, 0.1171875, 0.078125, 0.0390625, 0.0390625, 0.078125, 0.09375, 0.0078125, 0.09375, 0.0859375, 0.15625, 0.1015625, -0.0078125, -0.0234375, -0.1328125, -0.0390625, 0.0, -0.0703125, -0.0546875, -0.046875, -0.0625, 0.15625, 0.078125, 0.0234375, 0.03125, 0.0, -0.1875, -0.125, -0.1015625, -0.046875, -0.03125, 0.046875, 0.1171875, 0.015625, -0.1328125, -0.1484375, 0.0, 0.015625, -0.109375, -0.1640625, 0.0078125, 0.09375, 0.0390625, -0.0625, -0.0546875, 0.015625, 0.1953125, 0.03125, -0.03125, -0.109375, -0.0390625, 0.0, 0.0234375, 0.0703125, 0.140625, 0.078125, 0.0625, 0.046875, 0.09375, 0.1796875, -0.03125, 0.0625, 0.171875, 0.046875, 0.078125, 0.171875, 0.140625, 0.046875, -0.0390625, 0.1171875, 0.125, 0.0390625, 0.21875, 0.109375, 0.1015625, 0.0390625, 0.0546875, 0.21875, 0.1484375, 0.0625, 0.0078125, 0.125, 0.25, 0.1484375, -0.0234375, -0.015625, 0.0625, 0.09375, 0.015625, 0.109375, 0.109375, 0.0390625, 0.03125, -0.0703125, -0.046875, 0.0078125, 0.078125, -0.0859375, 0.0078125, 0.0703125, 0.0859375, -0.109375, -0.125, -0.1328125, -0.03125, -0.0234375, -0.078125, -0.1484375, -0.0234375, -0.0546875, -0.125, -0.1796875, -0.1640625, -0.078125, -0.0859375, -0.1328125, -0.109375, -0.2421875, -0.125, -0.1953125, -0.1328125, -0.046875, -0.078125, -0.2265625, -0.1640625, -0.140625, -0.125, -0.1875, -0.1953125, -0.140625, -0.265625, -0.09375, -0.109375, -0.15625, -0.0703125, -0.0859375, -0.2109375, -0.3046875, -0.1796875, 0.015625, -0.0703125, -0.0234375, 0.0546875, -0.0859375, -0.078125, -0.1640625, -0.0234375, -0.0546875, -0.09375, -0.03125, -0.09375, -0.09375, -0.0703125, 0.03125, 0.1640625, 0.0078125, 0.0625, -0.03125, -0.03125, 0.1484375, 0.0234375, 0.0, -0.0703125, -0.0390625, 0.1328125, 0.1640625, 0.1484375, 0.015625, 0.1640625, 0.1875, 0.1015625, 0.0703125, 0.09375, 0.03125, 0.1640625, 0.1328125, 0.1171875, 0.0859375, 0.171875, 0.1015625, 0.1484375, 0.296875, 0.28125, 0.125, 0.0859375, 0.0859375, 0.203125, 0.1484375, 0.140625, 0.140625, 0.203125, 0.171875, 0.09375, 0.1015625, 0.125, 0.0625, 0.15625, 0.2421875, 0.21875, 0.2265625, 0.015625, 0.03125, 0.1328125, 0.171875, 0.125, 0.140625, -0.0234375, 0.046875, 0.0703125, 0.1328125, 0.03125, -0.015625, 0.0703125, 0.0390625, 0.0234375\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
aiff_stereo_8bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/aiff_stereo_8bit_48000.h}
{\xe \v AudioFile/tests/test-headers/aiff_stereo_8bit_48000.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }aiff_stereo_8bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 8;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.0078125, 0.0234375, -0.1015625, -0.0703125, -0.0234375, -0.0703125, 0.0625, 0.109375, 0.1015625, -0.0546875, -0.0078125, 0.046875, 0.015625, 0.0234375, 0.0625, -0.109375, -0.0625, 0.046875, -0.0390625, -0.1796875, -0.1015625, -0.046875, 0.2265625, 0.2421875, 0.1171875, -0.1484375, -0.1953125, -0.1015625, 0.015625, 0.1484375, 0.09375, 0.0859375, 0.0625, -0.0390625, -0.140625, -0.0859375, 0.0234375, -0.1328125, -0.0390625, 0.1171875, 0.1171875, 0.0546875, 0.09375, -0.03125, 0.0390625, 0.046875, 0.1015625, 0.0703125, -0.0078125, 0.015625, 0.015625, -0.0390625, -0.109375, -0.125, -0.1484375, 0.078125, 0.078125, 0.0859375, 0.046875, 0.03125, 0.0859375, -0.015625, -0.015625, -0.1171875, -0.0703125, 0.0546875, 0.0703125, 0.234375, 0.234375, 0.1015625, 0.0546875, 0.1171875, 0.109375, 0.03125, -0.0546875, -0.015625, -0.09375, -0.015625, -0.0234375, -0.0078125, -0.1015625, -0.1796875, -0.109375, -0.1171875, -0.1328125, -0.140625, -0.1484375, -0.0703125, -0.0234375, 0.0234375, -0.046875, -0.078125, 0.0078125, 0.03125, -0.1171875, -0.15625, 0.046875, 0.1328125, 0.03125, 0.109375, 0.03125, 0.09375, 0.0234375, -0.0546875, 0.109375, 0.125, -0.0703125, -0.0234375, -0.09375, -0.1484375, -0.03125, 0.0078125, 0.03125, -0.0625, -0.3671875, -0.34375, -0.3125, -0.3203125, -0.2890625, -0.2421875, -0.15625, -0.1328125, -0.203125, -0.1015625, -0.3046875, -0.328125, -0.21875, -0.03125, -0.109375, -0.265625, -0.265625, -0.0625, 0.0546875, 0.0234375, 0.1328125, 0.0390625, -0.09375, 0.1015625, 0.0078125, -0.0078125, 0.1015625, 0.046875, 0.2265625, 0.2109375, 0.1015625, 0.1484375, 0.09375, 0.046875, 0.2421875, 0.15625, 0.0234375, 0.0625, 0.171875, 0.15625, 0.2265625, 0.1328125, 0.0234375, -0.03125, -0.0390625, -0.0390625, -0.046875, -0.09375, -0.046875, 0.046875, 0.0390625, -0.1015625, 0.015625, 0.0390625, 0.0234375, 0.0234375, 0.1015625, 0.0390625, -0.1015625, -0.171875, -0.203125, -0.0703125, 0.1015625, 0.0234375, -0.0078125, 0.015625, 0.0625, 0.1796875, 0.1015625, 0.140625, 0.046875, 0.046875, 0.2734375, 0.0390625, 0.0625, 0.1875, 0.203125, 0.0546875, 0.09375, 0.2890625, 0.203125, 0.0859375, 0.21875, 0.2734375, 0.3125, 0.1875, 0.203125, 0.265625, 0.2109375, 0.296875, 0.2265625, 0.140625, 0.2734375, 0.2421875, 0.1640625, 0.3203125, 0.0703125, 0.125, 0.1328125, 0.171875, 0.265625, 0.171875, 0.2109375, 0.078125, 0.0078125, 0.0703125, -0.0546875, 0.0, 0.1796875, -0.03125, -0.09375, -0.1796875, 0.0, 0.0, -0.1640625, -0.1640625, -0.1640625, -0.03125, -0.09375, -0.171875, -0.1875, -0.3359375, -0.2109375, -0.1640625, -0.1953125, -0.265625, -0.265625, -0.234375, -0.1796875, -0.2109375, -0.1640625, -0.2109375, -0.1640625, -0.2421875, -0.3125, -0.1875, -0.3203125, -0.234375, -0.1796875, -0.1640625, -0.3203125, -0.1796875, 0.0, -0.078125, -0.078125, -0.046875, -0.21875, -0.28125, -0.140625, -0.0546875, 0.0390625, -0.1171875, -0.078125, -0.0859375, 0.0234375, 0.0234375, -0.109375, 0.0078125, -0.0078125, -0.078125, 0.03125, 0.109375, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.03125, 0.0078125, 0.0703125, 0.125, -0.109375, 0.0, 0.09375, 0.0546875, 0.03125, 0.0078125, 0.1015625, 0.046875, 0.0546875, 0.0390625, 0.1328125, 0.1328125, 0.1328125, 0.0, -0.015625, -0.1015625, -0.0546875, 0.0625, -0.0859375, 0.0234375, -0.0546875, 0.015625, 0.1640625, 0.1484375, 0.046875, 0.1015625, 0.03125, -0.125, -0.0859375, -0.046875, 0.015625, 0.0234375, 0.1171875, 0.171875, 0.09375, -0.078125, -0.0703125, 0.0625, 0.09375, -0.046875, -0.0859375, 0.078125, 0.1796875, 0.1015625, 0.0234375, 0.015625, 0.1015625, 0.2578125, 0.1171875, 0.0234375, -0.015625, 0.0078125, 0.1015625, 0.0703125, 0.1640625, 0.203125, 0.1484375, 0.1328125, 0.109375, 0.15625, 0.25, 0.0234375, 0.125, 0.2109375, 0.1171875, 0.1171875, 0.234375, 0.1796875, 0.09375, 0.0, 0.15625, 0.15625, 0.0703125, 0.25, 0.125, 0.1328125, 0.046875, 0.09375, 0.2109375, 0.1796875, 0.0546875, 0.03125, 0.1171875, 0.2421875, 0.1484375, -0.0390625, -0.015625, 0.0234375, 0.09375, -0.0234375, 0.09375, 0.0703125, 0.015625, 0.0, -0.1171875, -0.078125, -0.0390625, 0.0390625, -0.125, -0.0546875, 0.0390625, 0.0078125, -0.140625, -0.203125, -0.1796875, -0.109375, -0.078125, -0.1484375, -0.2109375, -0.09375, -0.125, -0.1953125, -0.25, -0.2421875, -0.140625, -0.1640625, -0.1953125, -0.1796875, -0.3125, -0.203125, -0.2578125, -0.203125, -0.109375, -0.1484375, -0.2890625, -0.2265625, -0.2109375, -0.171875, -0.28125, -0.21875, -0.2421875, -0.28125, -0.1796875, -0.140625, -0.2265625, -0.1015625, -0.140625, -0.25, -0.34375, -0.234375, 0.0, -0.1328125, -0.0234375, 0.0, -0.0859375, -0.1171875, -0.171875, -0.0546875, -0.0546875, -0.109375, -0.03125, -0.1015625, -0.09375, -0.0703125, 0.046875, 0.1640625, 0.03125, 0.0625, -0.0078125, -0.015625, 0.171875, 0.046875, 0.03125, -0.046875, -0.0078125, 0.171875, 0.1875, 0.1953125, 0.046875, 0.21875, 0.234375, 0.15625, 0.125, 0.15625, 0.0859375, 0.2265625, 0.1875, 0.1796875, 0.1484375, 0.234375, 0.1796875, 0.1953125, 0.390625, 0.3203125, 0.234375, 0.1015625, 0.203125, 0.234375, 0.25, 0.1796875, 0.2265625, 0.265625, 0.2421875, 0.171875, 0.15625, 0.2109375, 0.1015625, 0.2578125, 0.2734375, 0.3203125, 0.2578125, 0.109375, 0.0625, 0.2109375, 0.203125, 0.1875, 0.1796875, 0.03125, 0.0859375, 0.125, 0.171875, 0.078125, 0.0234375, 0.1015625, 0.0703125, 0.0546875\}, \{-0.0078125, 0.0234375, -0.09375, -0.0703125, -0.0078125, -0.078125, 0.078125, 0.0859375, 0.109375, -0.0625, 0.0, 0.0390625, 0.0234375, 0.0390625, 0.0390625, -0.125, -0.03125, 0.0859375, -0.0859375, -0.171875, -0.125, 0.0, 0.1953125, 0.2734375, 0.0859375, -0.1484375, -0.21875, -0.0546875, 0.03125, 0.1484375, 0.0703125, 0.0390625, 0.0625, -0.0234375, -0.1015625, -0.109375, 0.0546875, -0.1328125, -0.046875, 0.078125, 0.0859375, 0.09375, 0.0078125, -0.0078125, 0.0703125, 0.03125, 0.0859375, 0.046875, 0.0, 0.0078125, 0.03125, -0.078125, -0.1171875, -0.1953125, -0.1015625, 0.0078125, 0.1171875, 0.0546875, 0.0546875, 0.0703125, 0.0390625, 0.0, -0.109375, -0.09375, -0.1015625, 0.0625, 0.09375, 0.1796875, 0.2421875, 0.1171875, 0.078125, 0.0625, 0.1640625, -0.0546875, 0.0546875, -0.03125, -0.078125, -0.0625, -0.0390625, -0.0078125, -0.1328125, -0.1640625, -0.140625, -0.1015625, -0.171875, -0.1796875, -0.1328125, -0.0703125, -0.078125, 0.046875, -0.0546875, -0.0546875, 0.0625, 0.0234375, 0.03125, -0.1484375, 0.1484375, 0.1796875, 0.0703125, 0.1328125, 0.109375, 0.1484375, 0.046875, 0.0234375, 0.171875, 0.203125, -0.0546875, 0.0078125, -0.0625, -0.0546875, -0.015625, 0.046875, 0.078125, -0.046875, -0.265625, -0.3359375, -0.2109375, -0.3046875, -0.203125, -0.1796875, -0.109375, -0.109375, -0.125, -0.09375, -0.2578125, -0.2890625, -0.1640625, 0.0, -0.0703125, -0.1640625, -0.2421875, 0.0, 0.078125, 0.0546875, 0.171875, 0.03125, -0.015625, 0.125, 0.0625, 0.0234375, 0.125, 0.0625, 0.21875, 0.2265625, 0.109375, 0.1640625, 0.109375, 0.09375, 0.2109375, 0.1953125, -0.046875, 0.1328125, 0.109375, 0.1640625, 0.1875, 0.1171875, 0.0078125, -0.0546875, -0.0859375, -0.0625, -0.1171875, -0.1015625, -0.1171875, 0.0078125, 0.0, -0.15625, -0.03125, -0.03125, -0.0234375, -0.03125, 0.0390625, -0.0390625, -0.15625, -0.2578125, -0.25, -0.1640625, 0.0625, -0.0859375, -0.0546875, -0.078125, -0.015625, 0.0859375, 0.015625, 0.0546875, -0.03125, -0.0234375, 0.1796875, -0.015625, -0.03125, 0.140625, 0.09375, 0.015625, -0.015625, 0.2421875, 0.1015625, 0.03125, 0.1328125, 0.2265625, 0.2265625, 0.140625, 0.140625, 0.21875, 0.1640625, 0.234375, 0.203125, 0.0625, 0.2734375, 0.1640625, 0.1796875, 0.25, 0.0859375, 0.0703125, 0.140625, 0.1328125, 0.265625, 0.1484375, 0.203125, 0.078125, -0.0078125, 0.09375, -0.078125, 0.0234375, 0.15625, 0.0, -0.1015625, -0.1484375, 0.0078125, 0.03125, -0.15625, -0.125, -0.1484375, 0.0078125, -0.0703125, -0.1328125, -0.1640625, -0.28125, -0.1953125, -0.1015625, -0.1875, -0.1796875, -0.2578125, -0.15625, -0.15625, -0.1484375, -0.109375, -0.1640625, -0.0859375, -0.2109375, -0.2265625, -0.171875, -0.2109375, -0.2265625, -0.0703125, -0.1484375, -0.21875, -0.1484375, 0.09375, -0.0390625, -0.015625, 0.03125, -0.1796875, -0.171875, -0.1328125, 0.0703125, 0.0390625, -0.015625, -0.0546875, -0.0078125, 0.0703125, 0.0703125, -0.0390625, 0.0390625, 0.078125, -0.0546875, 0.1171875, 0.125, 0.0859375, 0.0546875, 0.1328125, 0.1953125, 0.0546875, 0.0625, 0.0859375, 0.1640625, -0.0859375, 0.0234375, 0.1171875, 0.078125, 0.0390625, 0.0390625, 0.078125, 0.09375, 0.0078125, 0.09375, 0.0859375, 0.15625, 0.1015625, -0.0078125, -0.0234375, -0.1328125, -0.0390625, 0.0, -0.0703125, -0.0546875, -0.046875, -0.0625, 0.15625, 0.078125, 0.0234375, 0.03125, 0.0, -0.1875, -0.125, -0.1015625, -0.046875, -0.03125, 0.046875, 0.1171875, 0.015625, -0.1328125, -0.1484375, 0.0, 0.015625, -0.109375, -0.1640625, 0.0078125, 0.09375, 0.0390625, -0.0625, -0.0546875, 0.015625, 0.1953125, 0.03125, -0.03125, -0.109375, -0.0390625, 0.0, 0.0234375, 0.0703125, 0.140625, 0.078125, 0.0625, 0.046875, 0.09375, 0.1796875, -0.03125, 0.0625, 0.171875, 0.046875, 0.078125, 0.171875, 0.140625, 0.046875, -0.0390625, 0.1171875, 0.125, 0.0390625, 0.21875, 0.109375, 0.1015625, 0.0390625, 0.0546875, 0.21875, 0.1484375, 0.0625, 0.0078125, 0.125, 0.25, 0.1484375, -0.0234375, -0.015625, 0.0625, 0.09375, 0.015625, 0.109375, 0.109375, 0.0390625, 0.03125, -0.0703125, -0.046875, 0.0078125, 0.078125, -0.0859375, 0.0078125, 0.0703125, 0.0859375, -0.109375, -0.125, -0.1328125, -0.03125, -0.0234375, -0.078125, -0.1484375, -0.0234375, -0.0546875, -0.125, -0.1796875, -0.1640625, -0.078125, -0.0859375, -0.1328125, -0.109375, -0.2421875, -0.125, -0.1953125, -0.1328125, -0.046875, -0.078125, -0.2265625, -0.1640625, -0.140625, -0.125, -0.1875, -0.1953125, -0.140625, -0.265625, -0.09375, -0.109375, -0.15625, -0.0703125, -0.0859375, -0.2109375, -0.3046875, -0.1796875, 0.015625, -0.0703125, -0.0234375, 0.0546875, -0.0859375, -0.078125, -0.1640625, -0.0234375, -0.0546875, -0.09375, -0.03125, -0.09375, -0.09375, -0.0703125, 0.03125, 0.1640625, 0.0078125, 0.0625, -0.03125, -0.03125, 0.1484375, 0.0234375, 0.0, -0.0703125, -0.0390625, 0.1328125, 0.1640625, 0.1484375, 0.015625, 0.1640625, 0.1875, 0.1015625, 0.0703125, 0.09375, 0.03125, 0.1640625, 0.1328125, 0.1171875, 0.0859375, 0.171875, 0.1015625, 0.1484375, 0.296875, 0.28125, 0.125, 0.0859375, 0.0859375, 0.203125, 0.1484375, 0.140625, 0.140625, 0.203125, 0.171875, 0.09375, 0.1015625, 0.125, 0.0625, 0.15625, 0.2421875, 0.21875, 0.2265625, 0.015625, 0.03125, 0.1328125, 0.171875, 0.125, 0.140625, -0.0234375, 0.046875, 0.0703125, 0.1328125, 0.03125, -0.015625, 0.0703125, 0.0390625, 0.0234375\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_8chan_24bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_8chan_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_8chan_24bit_48000.h}
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_8chan_24bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_8chan_24bit_48000::numSamplesPerChannel} = 191524\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_8chan_24bit_48000::bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_8chan_24bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_8chan_24bit_48000::numChannels} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_8chan_24bit_48000::testBuffer} = \{\{0.00112915039062, 0.00247192382812, 0.00570678710938, 0.007080078125, 0.00711059570312, 0.00714111328125, 0.00674438476562, 0.00582885742188, 0.00418090820312, 0.0023193359375, 0.00079345703125, 0.000701904296875, 0.00323486328125, 0.00433349609375, 0.00201416015625, 9.1552734375e-05, 0.000274658203125, 0.00192260742188, 0.0028076171875, 0.00228881835938, 0.00302124023438, 0.00491333007812, 0.00616455078125, 0.0048828125, 0.00164794921875, 0.00018310546875, 0.000579833984375, 0.0025634765625, 0.00582885742188, 0.00631713867188, 0.0050048828125, 0.0062255859375, 0.0103454589844, 0.0140686035156, 0.0157165527344, 0.0171813964844, 0.0186462402344, 0.0191955566406, 0.0193786621094, 0.0194396972656, 0.0196838378906, 0.0190124511719, 0.0177612304688, 0.0190124511719, 0.0223999023438, 0.0241088867188, 0.0224304199219, 0.0197143554688, 0.0186157226562, 0.02001953125, 0.02197265625, 0.0217590332031, 0.0204467773438, 0.0202941894531, 0.0215454101562, 0.0221557617188, 0.0212707519531, 0.018798828125, 0.0136108398438, 0.00970458984375, 0.0101318359375, 0.0115356445312, 0.0110473632812, 0.00894165039062, 0.00927734375, 0.0102844238281, 0.0062255859375, 0.0029296875, 0.00509643554688, 0.00823974609375, 0.00875854492188, 0.00759887695312, 0.0079345703125, 0.00827026367188, 0.0084228515625, 0.00970458984375, 0.00802612304688, 0.00479125976562, 0.00399780273438, 0.0042724609375, 0.00341796875, 0.0028076171875, 0.00582885742188, 0.00802612304688, 0.00521850585938, 0.00277709960938, 0.00299072265625, 0.00387573242188, 0.00442504882812, 0.00369262695312, 0.0028076171875, 0.00238037109375, 0.00204467773438, 0.001708984375, 0.00241088867188, 0.00473022460938, 0.00457763671875, -6.103515625e-05, -0.00344848632812, -0.00189208984375, 0.000701904296875, 0.00079345703125, -0.00079345703125, -0.00103759765625, 0.000335693359375, -0.0006103515625, -0.00347900390625, -0.00360107421875, -0.00222778320312, -0.00299072265625, -0.004638671875, -0.0052490234375, -0.00640869140625, -0.00900268554688, -0.0112609863281, -0.0128784179688, -0.0135498046875, -0.0115661621094, -0.0103759765625, -0.0130920410156, -0.0149536132812, -0.0120239257812, -0.00973510742188, -0.0126647949219, -0.0153503417969, -0.0133666992188, -0.0106506347656, -0.0104370117188, -0.0114135742188, -0.0111694335938, -0.00970458984375, -0.00814819335938, -0.00543212890625, -0.00311279296875, -0.00442504882812, -0.0074462890625, -0.0089111328125, -0.00778198242188, -0.0047607421875, -0.00341796875, -0.00540161132812, -0.0068359375, -0.00421142578125, -0.0020751953125, -0.00445556640625, -0.00564575195312, -0.00473022460938, -0.0064697265625, -0.008544921875, -0.00900268554688, -0.00888061523438, -0.00906372070312, -0.0102233886719, -0.00942993164062, -0.0068359375, -0.00576782226562, -0.00497436523438, -0.0042724609375, -0.00543212890625, -0.00802612304688, -0.0106811523438, -0.01318359375, -0.0177612304688, -0.02197265625, -0.0209045410156, -0.0183715820312, -0.0194091796875, -0.0216369628906, -0.0208435058594, -0.0160522460938, -0.0114440917969, -0.0118103027344, -0.0149230957031, -0.0141906738281, -0.00906372070312, -0.00601196289062, -0.00839233398438, -0.0123291015625, -0.0127563476562, -0.00830078125, -0.00283813476562, -0.00079345703125, -0.00167846679688, -0.00299072265625, -0.00234985351562, -0.000396728515625, -0.00180053710938, -0.00503540039062, -0.00390625, 0.0001220703125, 0.0018310546875, 0.00143432617188, 0.000762939453125, 9.1552734375e-05, 0.00137329101562, 0.00515747070312, 0.007568359375, 0.00653076171875, 0.005126953125, 0.00564575195312, 0.00650024414062, 0.00729370117188, 0.0076904296875, 0.005615234375, 0.003662109375, 0.00552368164062, 0.00942993164062, 0.0111999511719, 0.00897216796875, 0.008056640625, 0.0116271972656, 0.0142517089844, 0.014404296875, 0.0147094726562, 0.0154418945312, 0.0144958496094, 0.0111083984375, 0.010498046875, 0.0132751464844, 0.0144653320312, 0.0154724121094, 0.0166931152344, 0.0150451660156, 0.0126342773438, 0.0126342773438, 0.013916015625, 0.0123291015625, 0.00888061523438, 0.00906372070312, 0.0110168457031, 0.0104370117188, 0.0098876953125, 0.0116882324219, 0.0148010253906, 0.0161743164062, 0.0147705078125, 0.0145568847656, 0.015625, 0.0148315429688, 0.0132751464844, 0.0116577148438, 0.00967407226562, 0.00851440429688, 0.00927734375, 0.0108032226562, 0.0107421875, 0.011962890625, 0.0158081054688, 0.0163879394531, 0.0133666992188, 0.0118713378906, 0.0133056640625, 0.013916015625, 0.0107116699219, 0.00802612304688, 0.00860595703125, 0.0103454589844, 0.0117797851562, 0.0123291015625, 0.0125122070312, 0.0119018554688, 0.0103454589844, 0.00885009765625, 0.0064697265625, 0.0045166015625, 0.00595092773438, 0.00888061523438, 0.00942993164062, 0.0086669921875, 0.0096435546875, 0.00997924804688, 0.0089111328125, 0.0104370117188, 0.0133666992188, 0.0143127441406, 0.0142211914062, 0.0152893066406, 0.0159606933594, 0.0126037597656, 0.00778198242188, 0.006103515625, 0.00582885742188, 0.004638671875, 0.0045166015625, 0.00643920898438, 0.0067138671875, 0.004150390625, 0.00274658203125, 0.00369262695312, 0.00390625, 0.00387573242188, 0.00537109375, 0.00491333007812, 0.00253295898438, 0.0030517578125, 0.00433349609375, 0.00274658203125, 0.00167846679688, 0.00408935546875, 0.00613403320312, 0.00335693359375, -0.00091552734375, -0.00152587890625, 0.0001220703125, 0.0003662109375, -0.00054931640625, 0.0006103515625, 0.00198364257812, 0.000274658203125, 0.000640869140625, 0.00445556640625, 0.00454711914062, 0.00091552734375, 0.000335693359375, 0.00390625, 0.0059814453125, 0.00534057617188, 0.00552368164062, 0.00595092773438, 0.0057373046875, 0.00634765625, 0.0076904296875, 0.00912475585938, 0.00955200195312, 0.00830078125, 0.00625610351562, 0.00482177734375, 0.00527954101562, 0.00396728515625, 0.0003662109375, 0.00149536132812, 0.0064697265625, 0.00802612304688, 0.00534057617188, 0.00396728515625, 0.00753784179688, 0.0110778808594, 0.00985717773438, 0.0062255859375, 0.0045166015625, 0.00653076171875, 0.008056640625, 0.0054931640625, 0.00177001953125, 0.000946044921875, 0.00381469726562, 0.0062255859375, 0.00521850585938, 0.00408935546875, 0.0072021484375, 0.0123596191406, 0.0127563476562, 0.00732421875, 0.0015869140625, -0.000152587890625, 0.001708984375, 0.0042724609375, 0.00653076171875, 0.00750732421875, 0.0067138671875, 0.00714111328125, 0.00949096679688, 0.00973510742188, 0.00729370117188, 0.00704956054688, 0.00808715820312, 0.00588989257812, 0.00408935546875, 0.00521850585938, 0.00628662109375, 0.00677490234375, 0.00772094726562, 0.00811767578125, 0.0062255859375, 0.00405883789062, 0.00418090820312, 0.005126953125, 0.0054931640625, 0.00335693359375, 0.00186157226562, 0.005126953125, 0.00732421875, 0.00582885742188, 0.00515747070312, 0.00543212890625, 0.005126953125, 0.00469970703125, 0.00457763671875, 0.00424194335938, 0.00445556640625, 0.00552368164062, 0.00430297851562, 0.00161743164062, 0.00143432617188, 0.00335693359375, 0.005126953125, 0.00582885742188, 0.00628662109375, 0.00668334960938, 0.00479125976562, 0.00106811523438, -0.00054931640625, 0.00216674804688, 0.00509643554688, 0.00314331054688, 0.000701904296875, 0.00274658203125, 0.00656127929688, 0.00885009765625, 0.00714111328125, 0.00347900390625, 0.00286865234375, 0.0037841796875, 0.00384521484375, 0.00384521484375, 0.00485229492188, 0.00674438476562, 0.00674438476562, 0.004638671875, 0.00161743164062, -0.00186157226562, -0.00308227539062, -0.002685546875, -0.00384521484375, -0.006103515625, -0.00787353515625, -0.00912475585938, -0.0101013183594, -0.0104675292969, -0.0116882324219, -0.0133972167969, -0.0140075683594, -0.0157775878906, -0.0169372558594, -0.0152893066406, -0.0151672363281, -0.0177917480469, -0.0206909179688, -0.0221862792969, -0.0228576660156, -0.0233154296875, -0.021728515625, -0.020751953125, -0.0218811035156, -0.0210266113281, -0.0186767578125, -0.0163269042969, -0.0150146484375, -0.0170593261719, -0.0192565917969, -0.0184326171875, -0.0161743164062, -0.013916015625, -0.01220703125, -0.010498046875, -0.00741577148438, -0.00335693359375, -0.00192260742188, -0.00567626953125, -0.00946044921875, -0.00881958007812, -0.00820922851562, -0.0101013183594, -0.0112915039062, -0.00991821289062, -0.006591796875, -0.00457763671875, -0.00588989257812, -0.00848388671875, -0.00955200195312, -0.00875854492188, -0.00985717773438, -0.01318359375, -0.015625, -0.0177917480469, -0.0191040039062, -0.019287109375, -0.0198974609375, -0.0197448730469, -0.0194396972656, -0.0189208984375, -0.0178527832031, -0.0184020996094, -0.0185241699219, -0.0164489746094, -0.0153198242188, -0.016845703125, -0.0198669433594, -0.0223999023438, -0.0236206054688, -0.0225524902344, -0.0199279785156, -0.0190124511719, -0.0186767578125, -0.0170288085938, -0.0152587890625, -0.0137634277344, -0.0141906738281, -0.0158081054688, -0.0149841308594\}, \{0.00750732421875, 0.00558471679688, 0.00167846679688, 0.000885009765625, 0.0068359375, 0.0120849609375, 0.00875854492188, 0.00350952148438, 0.00457763671875, 0.00701904296875, 0.00250244140625, -0.00241088867188, 0.00393676757812, 0.0133361816406, 0.0116882324219, 0.00286865234375, -0.00189208984375, -0.000244140625, -0.00100708007812, -0.007568359375, -0.00872802734375, 0.000152587890625, 0.00509643554688, -0.00570678710938, -0.0169982910156, -0.00836181640625, 0.00616455078125, 0.00393676757812, -0.00833129882812, -0.0124816894531, -0.00677490234375, -0.00430297851562, -0.0103454589844, -0.0155029296875, -0.0123596191406, -0.00506591796875, -0.00326538085938, -0.008056640625, -0.0110168457031, -0.00631713867188, 0.002685546875, 0.0047607421875, -0.00360107421875, -0.00955200195312, -0.00335693359375, 0.00592041015625, 0.00576782226562, 0.000640869140625, 0.00228881835938, 0.00994873046875, 0.0137023925781, 0.0124206542969, 0.012451171875, 0.0125427246094, 0.0102233886719, 0.0100402832031, 0.01318359375, 0.0123291015625, 0.00531005859375, 0.00234985351562, 0.00662231445312, 0.0118713378906, 0.0152282714844, 0.0128173828125, 0.0064697265625, 0.00439453125, 0.00881958007812, 0.0155334472656, 0.0157470703125, 0.0104675292969, 0.0104675292969, 0.0164184570312, 0.0190734863281, 0.0113220214844, 0.00234985351562, 0.00448608398438, 0.0105285644531, 0.0104675292969, 0.00732421875, 0.00848388671875, 0.0119323730469, 0.00985717773438, 0.00579833984375, 0.00537109375, 0.00714111328125, 0.00909423828125, 0.00802612304688, 0.00445556640625, 0.00125122070312, -0.00112915039062, -0.00067138671875, 0.00241088867188, 0.003662109375, 0.000701904296875, -0.00247192382812, -0.00173950195312, -0.00128173828125, -0.00436401367188, -0.00518798828125, -0.000274658203125, 0.00640869140625, 0.00936889648438, 0.00439453125, -0.004150390625, -0.00454711914062, 0.0035400390625, 0.00845336914062, 0.00485229492188, -0.0001220703125, 0.00372314453125, 0.013427734375, 0.0133666992188, 0.000457763671875, -0.00637817382812, 0.004638671875, 0.0160522460938, 0.010986328125, 0.000823974609375, 0.0003662109375, 0.00372314453125, 0.00155639648438, -0.0006103515625, 0.00411987304688, 0.00839233398438, 0.00466918945312, -0.00054931640625, 0.00180053710938, 0.00714111328125, 0.00595092773438, 0.00347900390625, 0.00772094726562, 0.0111694335938, 0.00784301757812, 0.00372314453125, 0.00363159179688, 0.00588989257812, 0.00634765625, 0.00503540039062, 0.00640869140625, 0.00906372070312, 0.00665283203125, 0.001220703125, 0.00320434570312, 0.0108032226562, 0.0109252929688, 0.00265502929688, -0.00399780273438, -0.0015869140625, 0.00558471679688, 0.0037841796875, -0.00457763671875, -0.00552368164062, -0.00198364257812, -0.00164794921875, -0.00274658203125, -0.00247192382812, -0.00271606445312, -0.00674438476562, -0.00997924804688, -0.00692749023438, -0.00161743164062, 3.0517578125e-05, -0.00296020507812, -0.00576782226562, -0.00506591796875, -0.00424194335938, -0.00299072265625, -9.1552734375e-05, -0.00250244140625, -0.0112915039062, -0.0143737792969, -0.005859375, 0.0029296875, 0.00054931640625, -0.00619506835938, -0.00457763671875, 0.002197265625, 0.00091552734375, -0.00735473632812, -0.0084228515625, -0.00054931640625, 0.00674438476562, 0.00897216796875, 0.005615234375, 0.00152587890625, 0.00360107421875, 0.00576782226562, 0.00128173828125, -0.00054931640625, 0.00692749023438, 0.0127563476562, 0.00738525390625, -0.00119018554688, -0.00125122070312, 0.00405883789062, 0.00399780273438, 0.00048828125, 0.0020751953125, 0.00433349609375, -0.00106811523438, -0.00503540039062, 0.0052490234375, 0.0169982910156, 0.0104370117188, -0.0020751953125, 0.00177001953125, 0.0140686035156, 0.0133972167969, -0.000335693359375, -0.0068359375, 0.000244140625, 0.00631713867188, 0.00665283203125, 0.00933837890625, 0.0158996582031, 0.0172119140625, 0.00851440429688, 0.00244140625, 0.00717163085938, 0.0127868652344, 0.0118713378906, 0.00689697265625, 0.0037841796875, 0.006591796875, 0.0125732421875, 0.0169677734375, 0.0178833007812, 0.0177612304688, 0.0182189941406, 0.0140991210938, 0.00747680664062, 0.00909423828125, 0.0168151855469, 0.0187072753906, 0.0125732421875, 0.00820922851562, 0.0135498046875, 0.0196838378906, 0.01611328125, 0.00982666015625, 0.0107727050781, 0.015380859375, 0.0125122070312, 0.00335693359375, 0.00326538085938, 0.0141296386719, 0.0191955566406, 0.0100708007812, 0.001953125, 0.009521484375, 0.0187377929688, 0.01416015625, 0.00836181640625, 0.014404296875, 0.0222778320312, 0.0165405273438, 0.00234985351562, -0.00430297851562, -0.00131225585938, 0.00332641601562, 0.00393676757812, 0.00259399414062, 0.00381469726562, 0.00534057617188, 0.00503540039062, 0.00491333007812, 0.00433349609375, 0.00250244140625, 0.0040283203125, 0.0102844238281, 0.0119323730469, 0.00677490234375, 0.00344848632812, 0.00241088867188, 0.00125122070312, 0.00509643554688, 0.0158081054688, 0.0224304199219, 0.0148620605469, 0.00262451171875, 0.000732421875, 0.0050048828125, 0.0032958984375, -0.0009765625, 0.00360107421875, 0.0130004882812, 0.0134887695312, 0.00619506835938, 0.00311279296875, 0.00613403320312, 0.00909423828125, 0.0102844238281, 0.0102233886719, 0.00912475585938, 0.0067138671875, 0.00137329101562, -0.00274658203125, -0.00131225585938, 0.000457763671875, -0.00192260742188, -0.0045166015625, -0.00387573242188, -0.00296020507812, -0.00408935546875, -0.0057373046875, -0.00750732421875, -0.0076904296875, -0.00704956054688, -0.00869750976562, -0.00912475585938, -0.00689697265625, -0.00701904296875, -0.00936889648438, -0.0086669921875, -0.00216674804688, 0.0050048828125, 0.00494384765625, -0.001220703125, -0.00433349609375, 0.00112915039062, 0.00894165039062, 0.0112609863281, 0.00967407226562, 0.006103515625, 0.00210571289062, 0.00332641601562, 0.01025390625, 0.0146179199219, 0.00851440429688, -0.000732421875, 0.001220703125, 0.0101928710938, 0.0113525390625, 0.0015869140625, -0.005615234375, 0.0037841796875, 0.0188293457031, 0.0177307128906, 0.0032958984375, -0.001953125, 0.0086669921875, 0.0172424316406, 0.0134582519531, 0.00567626953125, 0.00213623046875, 0.00601196289062, 0.0143737792969, 0.017333984375, 0.0103759765625, 0.00314331054688, 0.00747680664062, 0.0191040039062, 0.0230712890625, 0.0137329101562, 0.00347900390625, 0.00497436523438, 0.0113830566406, 0.0113525390625, 0.00778198242188, 0.0074462890625, 0.00759887695312, 0.00296020507812, -0.00186157226562, 0.00167846679688, 0.0122375488281, 0.0168762207031, 0.0103149414062, 0.00509643554688, 0.00759887695312, 0.0107116699219, 0.0101623535156, 0.00765991210938, 0.00714111328125, 0.00994873046875, 0.0137023925781, 0.0140686035156, 0.0116882324219, 0.0120239257812, 0.0128784179688, 0.0137939453125, 0.0187377929688, 0.0203247070312, 0.0146179199219, 0.0115966796875, 0.0186157226562, 0.0300903320312, 0.0322265625, 0.0238037109375, 0.021484375, 0.0321960449219, 0.0382385253906, 0.0276489257812, 0.018310546875, 0.0237426757812, 0.0303039550781, 0.0279846191406, 0.0234069824219, 0.020751953125, 0.0169982910156, 0.0133972167969, 0.0159301757812, 0.0235595703125, 0.0287170410156, 0.0272827148438, 0.0226440429688, 0.0214233398438, 0.0218505859375, 0.0212097167969, 0.0240173339844, 0.0262756347656, 0.0225524902344, 0.0203552246094, 0.0232849121094, 0.0256958007812, 0.0248718261719, 0.0245666503906, 0.0257568359375, 0.0239562988281, 0.0201721191406, 0.0156555175781, 0.00830078125, 0.0032958984375, 0.00442504882812, 0.0069580078125, 0.00668334960938, 0.0037841796875, 0.000213623046875, -0.00180053710938, -0.0018310546875, -0.00360107421875, -0.00564575195312, -0.00436401367188, -0.00579833984375, -0.0102233886719, -0.00973510742188, -0.0068359375, -0.009033203125, -0.0160217285156, -0.0189514160156, -0.0152282714844, -0.0129089355469, -0.0158081054688, -0.0207824707031, -0.0213012695312, -0.0169067382812, -0.0180358886719, -0.0237121582031, -0.0230407714844, -0.0184936523438, -0.0201110839844, -0.0289306640625, -0.0331115722656, -0.0247497558594, -0.015869140625, -0.0184631347656, -0.0227355957031, -0.017822265625, -0.0147399902344, -0.0236206054688, -0.0282897949219, -0.0181274414062, -0.0143737792969, -0.0291137695312, -0.0411987304688, -0.0341491699219, -0.0229797363281, -0.0277404785156, -0.0383911132812, -0.0347595214844, -0.0256958007812, -0.0315551757812, -0.0447692871094, -0.0404052734375, -0.0244140625, -0.0266723632812, -0.0425109863281, -0.0425109863281, -0.0261840820312, -0.0191345214844, -0.0310668945312, -0.0402221679688, -0.0331115722656, -0.0264587402344, -0.0289916992188, -0.0293273925781, -0.0242919921875, -0.0224304199219, -0.0247192382812, -0.0232543945312, -0.018798828125, -0.0184020996094, -0.0215759277344, -0.0232238769531, -0.0223999023438, -0.0237121582031, -0.0249328613281, -0.0191040039062, -0.0142822265625, -0.0196533203125, -0.0273742675781\}, \{-0.006591796875, -0.00961303710938, -0.0096435546875, -0.00491333007812, 0.00225830078125, 0.00442504882812, 0.000762939453125, -0.0010986328125, -0.0006103515625, -0.00344848632812, -0.0104370117188, -0.0138244628906, -0.00689697265625, 0.001708984375, 0.00067138671875, -0.00650024414062, -0.00967407226562, -0.00689697265625, -0.00814819335938, -0.0147705078125, -0.0120239257812, 0.0008544921875, 0.00460815429688, -0.009521484375, -0.0225219726562, -0.0155944824219, -0.00262451171875, -0.00225830078125, -0.00933837890625, -0.0120544433594, -0.00897216796875, -0.00747680664062, -0.00997924804688, -0.0101318359375, -0.00466918945312, 0.0013427734375, 0.00042724609375, -0.00506591796875, -0.00540161132812, 0.00210571289062, 0.0100402832031, 0.00814819335938, -0.0013427734375, -0.00323486328125, 0.00765991210938, 0.0177307128906, 0.0155944824219, 0.00863647460938, 0.00933837890625, 0.0164489746094, 0.0198669433594, 0.01806640625, 0.0172424316406, 0.0171508789062, 0.0160217285156, 0.0173950195312, 0.0209655761719, 0.0180969238281, 0.00656127929688, 0.00054931640625, 0.00665283203125, 0.0142822265625, 0.0155944824219, 0.0105590820312, 0.00662231445312, 0.00814819335938, 0.0108642578125, 0.0133056640625, 0.0131530761719, 0.0110778808594, 0.0131530761719, 0.0189208984375, 0.0214538574219, 0.0142211914062, 0.0054931640625, 0.00799560546875, 0.0147705078125, 0.0146789550781, 0.00881958007812, 0.00555419921875, 0.007568359375, 0.00982666015625, 0.0126342773438, 0.0156555175781, 0.0157165527344, 0.0142822265625, 0.0116882324219, 0.00949096679688, 0.00888061523438, 0.00717163085938, 0.00482177734375, 0.00408935546875, 0.00473022460938, 0.00506591796875, 0.00537109375, 0.0069580078125, 0.00570678710938, 0.000335693359375, -0.0008544921875, 0.00555419921875, 0.01220703125, 0.0129089355469, 0.0081787109375, 0.00326538085938, 0.00350952148438, 0.00674438476562, 0.00811767578125, 0.00747680664062, 0.00762939453125, 0.0115051269531, 0.0162658691406, 0.0137329101562, 0.00405883789062, -0.0010986328125, 0.00457763671875, 0.0107727050781, 0.00775146484375, 0.00167846679688, 0.00079345703125, 0.00323486328125, 0.00384521484375, 0.00341796875, 0.00613403320312, 0.00924682617188, 0.00668334960938, 0.00067138671875, -6.103515625e-05, 0.00466918945312, 0.00607299804688, 0.0050048828125, 0.00762939453125, 0.00961303710938, 0.00830078125, 0.00851440429688, 0.00985717773438, 0.00759887695312, 0.00213623046875, 0.000244140625, 0.00521850585938, 0.00982666015625, 0.00668334960938, -0.0001220703125, 0.00106811523438, 0.00933837890625, 0.0107116699219, 0.00262451171875, -0.00503540039062, -0.00442504882812, 0.00167846679688, 0.000640869140625, -0.0072021484375, -0.00997924804688, -0.00762939453125, -0.00540161132812, -0.00546264648438, -0.0064697265625, -0.00558471679688, -0.00576782226562, -0.00796508789062, -0.00830078125, -0.00717163085938, -0.00820922851562, -0.0126647949219, -0.0162658691406, -0.0151977539062, -0.0123596191406, -0.00961303710938, -0.00900268554688, -0.0144653320312, -0.0201110839844, -0.0162353515625, -0.00640869140625, -0.0020751953125, -0.00579833984375, -0.00936889648438, -0.0064697265625, -0.00164794921875, -0.00372314453125, -0.0106201171875, -0.0104370117188, -0.00210571289062, 0.00418090820312, 0.00485229492188, 0.00241088867188, 0.000457763671875, 0.00100708007812, -0.000244140625, -0.00387573242188, -0.00189208984375, 0.00637817382812, 0.0100402832031, 0.00357055664062, -0.00473022460938, -0.00540161132812, -0.000244140625, 0.00262451171875, 0.00180053710938, 0.00204467773438, 0.00314331054688, 0.00152587890625, 0.00048828125, 0.00613403320312, 0.010986328125, 0.00326538085938, -0.00637817382812, -0.00164794921875, 0.00958251953125, 0.00933837890625, -0.00167846679688, -0.00469970703125, 0.00485229492188, 0.0110168457031, 0.0093994140625, 0.00958251953125, 0.0151062011719, 0.0172729492188, 0.00869750976562, 0.000823974609375, 0.00473022460938, 0.0121765136719, 0.0142517089844, 0.0112915039062, 0.00827026367188, 0.008544921875, 0.010986328125, 0.0145263671875, 0.0161743164062, 0.0143737792969, 0.0129089355469, 0.0111999511719, 0.00912475585938, 0.0119934082031, 0.0172729492188, 0.0176086425781, 0.0136413574219, 0.0130310058594, 0.0191650390625, 0.023193359375, 0.0187683105469, 0.0132141113281, 0.0124816894531, 0.0141906738281, 0.0116271972656, 0.00485229492188, 0.00515747070312, 0.0151977539062, 0.0221252441406, 0.0174255371094, 0.0119323730469, 0.0180053710938, 0.0238952636719, 0.0179138183594, 0.0130615234375, 0.0198059082031, 0.0267944335938, 0.0199584960938, 0.00625610351562, 0.00167846679688, 0.00601196289062, 0.0103759765625, 0.0111389160156, 0.0106506347656, 0.0103759765625, 0.00759887695312, 0.00482177734375, 0.00656127929688, 0.009521484375, 0.00924682617188, 0.00909423828125, 0.0133666992188, 0.0165710449219, 0.0145568847656, 0.0113830566406, 0.00924682617188, 0.0098876953125, 0.0152282714844, 0.0231323242188, 0.0274047851562, 0.0216674804688, 0.00991821289062, 0.00396728515625, 0.00637817382812, 0.0086669921875, 0.00686645507812, 0.00772094726562, 0.0130920410156, 0.014892578125, 0.0104675292969, 0.00631713867188, 0.005859375, 0.00772094726562, 0.0106811523438, 0.0120544433594, 0.0106506347656, 0.0072021484375, 0.0010986328125, -0.00228881835938, 0.0020751953125, 0.00674438476562, 0.00396728515625, -0.00213623046875, -0.00384521484375, -0.00265502929688, -0.00384521484375, -0.00732421875, -0.010986328125, -0.0114135742188, -0.00906372070312, -0.00881958007812, -0.00885009765625, -0.006591796875, -0.00613403320312, -0.00875854492188, -0.00909423828125, -0.00341796875, 0.00192260742188, -0.000457763671875, -0.00595092773438, -0.0062255859375, -3.0517578125e-05, 0.00619506835938, 0.0069580078125, 0.00411987304688, 0.00042724609375, -0.0010986328125, 0.00228881835938, 0.00729370117188, 0.0084228515625, 0.00213623046875, -0.005615234375, -0.0040283203125, 0.00308227539062, 0.00405883789062, -0.0020751953125, -0.00460815429688, 0.00497436523438, 0.0161437988281, 0.0137329101562, 0.00146484375, -0.00396728515625, 0.0042724609375, 0.0132141113281, 0.0103759765625, 0.00054931640625, -0.00387573242188, 0.00277709960938, 0.0117492675781, 0.0115356445312, 0.00509643554688, 0.00469970703125, 0.0134887695312, 0.020751953125, 0.01708984375, 0.005859375, -0.00100708007812, 0.002685546875, 0.00845336914062, 0.009033203125, 0.00860595703125, 0.0112915039062, 0.0127563476562, 0.00778198242188, 0.000732421875, 0.00103759765625, 0.0108032226562, 0.0182800292969, 0.0135803222656, 0.00564575195312, 0.00445556640625, 0.00775146484375, 0.0102233886719, 0.0106811523438, 0.011962890625, 0.0141906738281, 0.0153198242188, 0.0142517089844, 0.0125122070312, 0.013916015625, 0.0149841308594, 0.0145263671875, 0.0176696777344, 0.0204467773438, 0.0187683105469, 0.0164184570312, 0.0179748535156, 0.0240783691406, 0.0271911621094, 0.0238647460938, 0.0234069824219, 0.030517578125, 0.033203125, 0.0232543945312, 0.015380859375, 0.0206604003906, 0.0275268554688, 0.0270385742188, 0.0241088867188, 0.0223693847656, 0.0186157226562, 0.0125427246094, 0.0113525390625, 0.0179748535156, 0.02587890625, 0.0267944335938, 0.0205383300781, 0.0166625976562, 0.0180358886719, 0.02001953125, 0.0234375, 0.02587890625, 0.0236511230469, 0.0201721191406, 0.0186767578125, 0.0215759277344, 0.0268859863281, 0.0275573730469, 0.0226440429688, 0.0189819335938, 0.0215454101562, 0.0215759277344, 0.0110168457031, 0.00131225585938, 0.0023193359375, 0.00762939453125, 0.00946044921875, 0.00674438476562, 0.00140380859375, -0.0025634765625, -0.00164794921875, -0.00100708007812, -0.0042724609375, -0.00680541992188, -0.00830078125, -0.00894165039062, -0.00726318359375, -0.00582885742188, -0.00711059570312, -0.0123901367188, -0.0177307128906, -0.0182800292969, -0.0165405273438, -0.0165100097656, -0.0203247070312, -0.02294921875, -0.01904296875, -0.0156555175781, -0.0158386230469, -0.0149536132812, -0.0152282714844, -0.02001953125, -0.0263671875, -0.0263366699219, -0.0172424316406, -0.0103149414062, -0.0129089355469, -0.0144653320312, -0.00711059570312, -0.00326538085938, -0.0138549804688, -0.0226745605469, -0.015625, -0.0101928710938, -0.0206298828125, -0.0310974121094, -0.0259704589844, -0.0157470703125, -0.0177001953125, -0.0259094238281, -0.0259094238281, -0.0220947265625, -0.0259094238281, -0.0347595214844, -0.0354919433594, -0.0282897949219, -0.0291137695312, -0.0380859375, -0.0399475097656, -0.0311889648438, -0.0246276855469, -0.0308227539062, -0.0380249023438, -0.0344543457031, -0.0314331054688, -0.03466796875, -0.0333251953125, -0.0258483886719, -0.0242309570312, -0.0314025878906, -0.0352172851562, -0.0311279296875, -0.0271606445312, -0.0282592773438, -0.0314331054688, -0.0310668945312, -0.0285339355469, -0.0273742675781, -0.0254516601562, -0.0250244140625, -0.0286560058594, -0.0312805175781\}, \{0.00906372070312, 0.00912475585938, 0.00918579101562, 0.00921630859375, 0.00927734375, 0.00933837890625, 0.00936889648438, 0.00942993164062, 0.00946044921875, 0.009521484375, 0.00955200195312, 0.00961303710938, 0.0096435546875, 0.00970458984375, 0.00973510742188, 0.009765625, 0.00982666015625, 0.00985717773438, 0.0098876953125, 0.00994873046875, 0.00997924804688, 0.010009765625, 0.0100402832031, 0.0100708007812, 0.0101318359375, 0.0101623535156, 0.0101928710938, 0.0102233886719, 0.01025390625, 0.0102844238281, 0.0103149414062, 0.0103149414062, 0.0103454589844, 0.0103759765625, 0.0104064941406, 0.0104370117188, 0.0104370117188, 0.0104675292969, 0.010498046875, 0.010498046875, 0.0105285644531, 0.0105590820312, 0.0105590820312, 0.0105895996094, 0.0105895996094, 0.0106201171875, 0.0106201171875, 0.0106201171875, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106201171875, 0.0106201171875, 0.0105895996094, 0.0105895996094, 0.0105590820312, 0.0105590820312, 0.0105285644531, 0.0105285644531, 0.010498046875, 0.0104675292969, 0.0104675292969, 0.0104370117188, 0.0104064941406, 0.0103759765625, 0.0103454589844, 0.0103454589844, 0.0103149414062, 0.0102844238281, 0.01025390625, 0.0102233886719, 0.0101928710938, 0.0101623535156, 0.0101013183594, 0.0100708007812, 0.0100402832031, 0.010009765625, 0.00997924804688, 0.00991821289062, 0.0098876953125, 0.00985717773438, 0.00979614257812, 0.009765625, 0.00970458984375, 0.00967407226562, 0.00961303710938, 0.00958251953125, 0.009521484375, 0.00946044921875, 0.00942993164062, 0.00936889648438, 0.00930786132812, 0.00927734375, 0.00921630859375, 0.0091552734375, 0.00909423828125, 0.009033203125, 0.00897216796875, 0.0089111328125, 0.00885009765625, 0.0087890625, 0.00872802734375, 0.0086669921875, 0.00860595703125, 0.008544921875, 0.00848388671875, 0.0084228515625, 0.00836181640625, 0.00827026367188, 0.00820922851562, 0.00814819335938, 0.00808715820312, 0.00799560546875, 0.0079345703125, 0.00787353515625, 0.00778198242188, 0.00772094726562, 0.00762939453125, 0.007568359375, 0.00747680664062, 0.00741577148438, 0.00732421875, 0.00726318359375, 0.00717163085938, 0.007080078125, 0.00701904296875, 0.00692749023438, 0.0068359375, 0.00677490234375, 0.00668334960938, 0.006591796875, 0.00650024414062, 0.00643920898438, 0.00634765625, 0.00625610351562, 0.00616455078125, 0.00607299804688, 0.0059814453125, 0.00592041015625, 0.00582885742188, 0.0057373046875, 0.00564575195312, 0.00555419921875, 0.00546264648438, 0.00537109375, 0.00527954101562, 0.00518798828125, 0.00509643554688, 0.0050048828125, 0.00491333007812, 0.00479125976562, 0.00469970703125, 0.00460815429688, 0.0045166015625, 0.00442504882812, 0.00433349609375, 0.00424194335938, 0.00411987304688, 0.0040283203125, 0.00393676757812, 0.00384521484375, 0.00375366210938, 0.00363159179688, 0.0035400390625, 0.00344848632812, 0.00335693359375, 0.00323486328125, 0.00314331054688, 0.0030517578125, 0.0029296875, 0.00283813476562, 0.00274658203125, 0.00262451171875, 0.00253295898438, 0.00244140625, 0.0023193359375, 0.00222778320312, 0.00210571289062, 0.00201416015625, 0.00192260742188, 0.00180053710938, 0.001708984375, 0.0015869140625, 0.00149536132812, 0.00137329101562, 0.00128173828125, 0.00115966796875, 0.00106811523438, 0.0009765625, 0.0008544921875, 0.000762939453125, 0.000640869140625, 0.00054931640625, 0.00042724609375, 0.000335693359375, 0.000213623046875, 0.0001220703125, 0.0, -9.1552734375e-05, -0.000213623046875, -0.00030517578125, -0.00042724609375, -0.000518798828125, -0.000640869140625, -0.000732421875, -0.0008544921875, -0.000946044921875, -0.00106811523438, -0.00115966796875, -0.00128173828125, -0.00137329101562, -0.00149536132812, -0.0015869140625, -0.001708984375, -0.00180053710938, -0.00192260742188, -0.00201416015625, -0.00210571289062, -0.00222778320312, -0.0023193359375, -0.00244140625, -0.00253295898438, -0.00265502929688, -0.00274658203125, -0.00283813476562, -0.00296020507812, -0.0030517578125, -0.003173828125, -0.00326538085938, -0.00335693359375, -0.00347900390625, -0.00357055664062, -0.003662109375, -0.00375366210938, -0.00387573242188, -0.00396728515625, -0.00405883789062, -0.004150390625, -0.00424194335938, -0.00436401367188, -0.00445556640625, -0.00454711914062, -0.004638671875, -0.00473022460938, -0.00482177734375, -0.00491333007812, -0.0050048828125, -0.00509643554688, -0.00518798828125, -0.00527954101562, -0.00537109375, -0.00546264648438, -0.00555419921875, -0.00564575195312, -0.0057373046875, -0.00582885742188, -0.00592041015625, -0.00601196289062, -0.00607299804688, -0.00616455078125, -0.00625610351562, -0.00631713867188, -0.00640869140625, -0.00650024414062, -0.00656127929688, -0.00665283203125, -0.00674438476562, -0.00680541992188, -0.00689697265625, -0.0069580078125, -0.00704956054688, -0.00711059570312, -0.00717163085938, -0.00726318359375, -0.00732421875, -0.00741577148438, -0.00747680664062, -0.00753784179688, -0.00759887695312, -0.0076904296875, -0.00775146484375, -0.0078125, -0.00787353515625, -0.0079345703125, -0.00799560546875, -0.008056640625, -0.00811767578125, -0.0081787109375, -0.00823974609375, -0.00830078125, -0.00836181640625, -0.0084228515625, -0.00845336914062, -0.00851440429688, -0.00857543945312, -0.00863647460938, -0.0086669921875, -0.00872802734375, -0.0087890625, -0.00881958007812, -0.00888061523438, -0.0089111328125, -0.00897216796875, -0.00900268554688, -0.00906372070312, -0.00909423828125, -0.0091552734375, -0.00918579101562, -0.00921630859375, -0.00927734375, -0.00930786132812, -0.00933837890625, -0.0093994140625, -0.00942993164062, -0.00946044921875, -0.00949096679688, -0.009521484375, -0.00955200195312, -0.00958251953125, -0.00961303710938, -0.0096435546875, -0.00967407226562, -0.00970458984375, -0.00973510742188, -0.009765625, -0.00979614257812, -0.00982666015625, -0.00985717773438, -0.00985717773438, -0.0098876953125, -0.00991821289062, -0.00994873046875, -0.00994873046875, -0.00997924804688, -0.010009765625, -0.010009765625, -0.0100402832031, -0.0100402832031, -0.0100708007812, -0.0101013183594, -0.0101013183594, -0.0101318359375, -0.0101318359375, -0.0101623535156, -0.0101623535156, -0.0101623535156, -0.0101928710938, -0.0101928710938, -0.0101928710938, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.0101928710938, -0.0101928710938, -0.0101623535156, -0.0101623535156, -0.0101318359375, -0.0101318359375, -0.0101013183594, -0.0101013183594, -0.0100708007812, -0.0100402832031, -0.0100402832031, -0.010009765625, -0.00997924804688, -0.00997924804688, -0.00994873046875, -0.00991821289062, -0.0098876953125, -0.00985717773438, -0.00982666015625, -0.00979614257812, -0.00979614257812, -0.009765625, -0.00973510742188, -0.00970458984375, -0.0096435546875, -0.00961303710938, -0.00958251953125, -0.00955200195312, -0.009521484375, -0.00949096679688, -0.00946044921875, -0.0093994140625, -0.00936889648438, -0.00933837890625, -0.00927734375, -0.00924682617188, -0.00921630859375, -0.0091552734375, -0.00912475585938, -0.00909423828125, -0.009033203125, -0.00900268554688, -0.00894165039062, -0.0089111328125, -0.00885009765625, -0.0087890625, -0.00875854492188, -0.00869750976562, -0.0086669921875, -0.00860595703125, -0.008544921875, -0.00848388671875, -0.00845336914062, -0.00839233398438, -0.00833129882812, -0.00827026367188, -0.00823974609375, -0.0081787109375, -0.00811767578125, -0.008056640625, -0.00799560546875, -0.0079345703125, -0.00790405273438, -0.00784301757812, -0.00778198242188, -0.00772094726562, -0.00765991210938, -0.00759887695312, -0.00753784179688, -0.00747680664062, -0.00741577148438, -0.00735473632812, -0.00729370117188, -0.0072021484375, -0.00714111328125, -0.007080078125, -0.00701904296875, -0.0069580078125, -0.00689697265625, -0.0068359375, -0.00674438476562, -0.00668334960938, -0.00662231445312, -0.00656127929688, -0.00650024414062, -0.00640869140625, -0.00634765625, -0.00628662109375, -0.00619506835938, -0.00613403320312, -0.00607299804688, -0.0059814453125, -0.00592041015625, -0.005859375, -0.00576782226562, -0.00570678710938, -0.005615234375, -0.00555419921875, -0.0054931640625, -0.00540161132812, -0.00534057617188, -0.0052490234375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_8chan_24bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_8chan_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_8chan_24bit_48000.h}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_8chan_24bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 191524;\par
6 {\cf18 int} bitDepth = 24;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 8;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.00112915039062, 0.00247192382812, 0.00570678710938, 0.007080078125, 0.00711059570312, 0.00714111328125, 0.00674438476562, 0.00582885742188, 0.00418090820312, 0.0023193359375, 0.00079345703125, 0.000701904296875, 0.00323486328125, 0.00433349609375, 0.00201416015625, 9.1552734375e-05, 0.000274658203125, 0.00192260742188, 0.0028076171875, 0.00228881835938, 0.00302124023438, 0.00491333007812, 0.00616455078125, 0.0048828125, 0.00164794921875, 0.00018310546875, 0.000579833984375, 0.0025634765625, 0.00582885742188, 0.00631713867188, 0.0050048828125, 0.0062255859375, 0.0103454589844, 0.0140686035156, 0.0157165527344, 0.0171813964844, 0.0186462402344, 0.0191955566406, 0.0193786621094, 0.0194396972656, 0.0196838378906, 0.0190124511719, 0.0177612304688, 0.0190124511719, 0.0223999023438, 0.0241088867188, 0.0224304199219, 0.0197143554688, 0.0186157226562, 0.02001953125, 0.02197265625, 0.0217590332031, 0.0204467773438, 0.0202941894531, 0.0215454101562, 0.0221557617188, 0.0212707519531, 0.018798828125, 0.0136108398438, 0.00970458984375, 0.0101318359375, 0.0115356445312, 0.0110473632812, 0.00894165039062, 0.00927734375, 0.0102844238281, 0.0062255859375, 0.0029296875, 0.00509643554688, 0.00823974609375, 0.00875854492188, 0.00759887695312, 0.0079345703125, 0.00827026367188, 0.0084228515625, 0.00970458984375, 0.00802612304688, 0.00479125976562, 0.00399780273438, 0.0042724609375, 0.00341796875, 0.0028076171875, 0.00582885742188, 0.00802612304688, 0.00521850585938, 0.00277709960938, 0.00299072265625, 0.00387573242188, 0.00442504882812, 0.00369262695312, 0.0028076171875, 0.00238037109375, 0.00204467773438, 0.001708984375, 0.00241088867188, 0.00473022460938, 0.00457763671875, -6.103515625e-05, -0.00344848632812, -0.00189208984375, 0.000701904296875, 0.00079345703125, -0.00079345703125, -0.00103759765625, 0.000335693359375, -0.0006103515625, -0.00347900390625, -0.00360107421875, -0.00222778320312, -0.00299072265625, -0.004638671875, -0.0052490234375, -0.00640869140625, -0.00900268554688, -0.0112609863281, -0.0128784179688, -0.0135498046875, -0.0115661621094, -0.0103759765625, -0.0130920410156, -0.0149536132812, -0.0120239257812, -0.00973510742188, -0.0126647949219, -0.0153503417969, -0.0133666992188, -0.0106506347656, -0.0104370117188, -0.0114135742188, -0.0111694335938, -0.00970458984375, -0.00814819335938, -0.00543212890625, -0.00311279296875, -0.00442504882812, -0.0074462890625, -0.0089111328125, -0.00778198242188, -0.0047607421875, -0.00341796875, -0.00540161132812, -0.0068359375, -0.00421142578125, -0.0020751953125, -0.00445556640625, -0.00564575195312, -0.00473022460938, -0.0064697265625, -0.008544921875, -0.00900268554688, -0.00888061523438, -0.00906372070312, -0.0102233886719, -0.00942993164062, -0.0068359375, -0.00576782226562, -0.00497436523438, -0.0042724609375, -0.00543212890625, -0.00802612304688, -0.0106811523438, -0.01318359375, -0.0177612304688, -0.02197265625, -0.0209045410156, -0.0183715820312, -0.0194091796875, -0.0216369628906, -0.0208435058594, -0.0160522460938, -0.0114440917969, -0.0118103027344, -0.0149230957031, -0.0141906738281, -0.00906372070312, -0.00601196289062, -0.00839233398438, -0.0123291015625, -0.0127563476562, -0.00830078125, -0.00283813476562, -0.00079345703125, -0.00167846679688, -0.00299072265625, -0.00234985351562, -0.000396728515625, -0.00180053710938, -0.00503540039062, -0.00390625, 0.0001220703125, 0.0018310546875, 0.00143432617188, 0.000762939453125, 9.1552734375e-05, 0.00137329101562, 0.00515747070312, 0.007568359375, 0.00653076171875, 0.005126953125, 0.00564575195312, 0.00650024414062, 0.00729370117188, 0.0076904296875, 0.005615234375, 0.003662109375, 0.00552368164062, 0.00942993164062, 0.0111999511719, 0.00897216796875, 0.008056640625, 0.0116271972656, 0.0142517089844, 0.014404296875, 0.0147094726562, 0.0154418945312, 0.0144958496094, 0.0111083984375, 0.010498046875, 0.0132751464844, 0.0144653320312, 0.0154724121094, 0.0166931152344, 0.0150451660156, 0.0126342773438, 0.0126342773438, 0.013916015625, 0.0123291015625, 0.00888061523438, 0.00906372070312, 0.0110168457031, 0.0104370117188, 0.0098876953125, 0.0116882324219, 0.0148010253906, 0.0161743164062, 0.0147705078125, 0.0145568847656, 0.015625, 0.0148315429688, 0.0132751464844, 0.0116577148438, 0.00967407226562, 0.00851440429688, 0.00927734375, 0.0108032226562, 0.0107421875, 0.011962890625, 0.0158081054688, 0.0163879394531, 0.0133666992188, 0.0118713378906, 0.0133056640625, 0.013916015625, 0.0107116699219, 0.00802612304688, 0.00860595703125, 0.0103454589844, 0.0117797851562, 0.0123291015625, 0.0125122070312, 0.0119018554688, 0.0103454589844, 0.00885009765625, 0.0064697265625, 0.0045166015625, 0.00595092773438, 0.00888061523438, 0.00942993164062, 0.0086669921875, 0.0096435546875, 0.00997924804688, 0.0089111328125, 0.0104370117188, 0.0133666992188, 0.0143127441406, 0.0142211914062, 0.0152893066406, 0.0159606933594, 0.0126037597656, 0.00778198242188, 0.006103515625, 0.00582885742188, 0.004638671875, 0.0045166015625, 0.00643920898438, 0.0067138671875, 0.004150390625, 0.00274658203125, 0.00369262695312, 0.00390625, 0.00387573242188, 0.00537109375, 0.00491333007812, 0.00253295898438, 0.0030517578125, 0.00433349609375, 0.00274658203125, 0.00167846679688, 0.00408935546875, 0.00613403320312, 0.00335693359375, -0.00091552734375, -0.00152587890625, 0.0001220703125, 0.0003662109375, -0.00054931640625, 0.0006103515625, 0.00198364257812, 0.000274658203125, 0.000640869140625, 0.00445556640625, 0.00454711914062, 0.00091552734375, 0.000335693359375, 0.00390625, 0.0059814453125, 0.00534057617188, 0.00552368164062, 0.00595092773438, 0.0057373046875, 0.00634765625, 0.0076904296875, 0.00912475585938, 0.00955200195312, 0.00830078125, 0.00625610351562, 0.00482177734375, 0.00527954101562, 0.00396728515625, 0.0003662109375, 0.00149536132812, 0.0064697265625, 0.00802612304688, 0.00534057617188, 0.00396728515625, 0.00753784179688, 0.0110778808594, 0.00985717773438, 0.0062255859375, 0.0045166015625, 0.00653076171875, 0.008056640625, 0.0054931640625, 0.00177001953125, 0.000946044921875, 0.00381469726562, 0.0062255859375, 0.00521850585938, 0.00408935546875, 0.0072021484375, 0.0123596191406, 0.0127563476562, 0.00732421875, 0.0015869140625, -0.000152587890625, 0.001708984375, 0.0042724609375, 0.00653076171875, 0.00750732421875, 0.0067138671875, 0.00714111328125, 0.00949096679688, 0.00973510742188, 0.00729370117188, 0.00704956054688, 0.00808715820312, 0.00588989257812, 0.00408935546875, 0.00521850585938, 0.00628662109375, 0.00677490234375, 0.00772094726562, 0.00811767578125, 0.0062255859375, 0.00405883789062, 0.00418090820312, 0.005126953125, 0.0054931640625, 0.00335693359375, 0.00186157226562, 0.005126953125, 0.00732421875, 0.00582885742188, 0.00515747070312, 0.00543212890625, 0.005126953125, 0.00469970703125, 0.00457763671875, 0.00424194335938, 0.00445556640625, 0.00552368164062, 0.00430297851562, 0.00161743164062, 0.00143432617188, 0.00335693359375, 0.005126953125, 0.00582885742188, 0.00628662109375, 0.00668334960938, 0.00479125976562, 0.00106811523438, -0.00054931640625, 0.00216674804688, 0.00509643554688, 0.00314331054688, 0.000701904296875, 0.00274658203125, 0.00656127929688, 0.00885009765625, 0.00714111328125, 0.00347900390625, 0.00286865234375, 0.0037841796875, 0.00384521484375, 0.00384521484375, 0.00485229492188, 0.00674438476562, 0.00674438476562, 0.004638671875, 0.00161743164062, -0.00186157226562, -0.00308227539062, -0.002685546875, -0.00384521484375, -0.006103515625, -0.00787353515625, -0.00912475585938, -0.0101013183594, -0.0104675292969, -0.0116882324219, -0.0133972167969, -0.0140075683594, -0.0157775878906, -0.0169372558594, -0.0152893066406, -0.0151672363281, -0.0177917480469, -0.0206909179688, -0.0221862792969, -0.0228576660156, -0.0233154296875, -0.021728515625, -0.020751953125, -0.0218811035156, -0.0210266113281, -0.0186767578125, -0.0163269042969, -0.0150146484375, -0.0170593261719, -0.0192565917969, -0.0184326171875, -0.0161743164062, -0.013916015625, -0.01220703125, -0.010498046875, -0.00741577148438, -0.00335693359375, -0.00192260742188, -0.00567626953125, -0.00946044921875, -0.00881958007812, -0.00820922851562, -0.0101013183594, -0.0112915039062, -0.00991821289062, -0.006591796875, -0.00457763671875, -0.00588989257812, -0.00848388671875, -0.00955200195312, -0.00875854492188, -0.00985717773438, -0.01318359375, -0.015625, -0.0177917480469, -0.0191040039062, -0.019287109375, -0.0198974609375, -0.0197448730469, -0.0194396972656, -0.0189208984375, -0.0178527832031, -0.0184020996094, -0.0185241699219, -0.0164489746094, -0.0153198242188, -0.016845703125, -0.0198669433594, -0.0223999023438, -0.0236206054688, -0.0225524902344, -0.0199279785156, -0.0190124511719, -0.0186767578125, -0.0170288085938, -0.0152587890625, -0.0137634277344, -0.0141906738281, -0.0158081054688, -0.0149841308594\}, \{0.00750732421875, 0.00558471679688, 0.00167846679688, 0.000885009765625, 0.0068359375, 0.0120849609375, 0.00875854492188, 0.00350952148438, 0.00457763671875, 0.00701904296875, 0.00250244140625, -0.00241088867188, 0.00393676757812, 0.0133361816406, 0.0116882324219, 0.00286865234375, -0.00189208984375, -0.000244140625, -0.00100708007812, -0.007568359375, -0.00872802734375, 0.000152587890625, 0.00509643554688, -0.00570678710938, -0.0169982910156, -0.00836181640625, 0.00616455078125, 0.00393676757812, -0.00833129882812, -0.0124816894531, -0.00677490234375, -0.00430297851562, -0.0103454589844, -0.0155029296875, -0.0123596191406, -0.00506591796875, -0.00326538085938, -0.008056640625, -0.0110168457031, -0.00631713867188, 0.002685546875, 0.0047607421875, -0.00360107421875, -0.00955200195312, -0.00335693359375, 0.00592041015625, 0.00576782226562, 0.000640869140625, 0.00228881835938, 0.00994873046875, 0.0137023925781, 0.0124206542969, 0.012451171875, 0.0125427246094, 0.0102233886719, 0.0100402832031, 0.01318359375, 0.0123291015625, 0.00531005859375, 0.00234985351562, 0.00662231445312, 0.0118713378906, 0.0152282714844, 0.0128173828125, 0.0064697265625, 0.00439453125, 0.00881958007812, 0.0155334472656, 0.0157470703125, 0.0104675292969, 0.0104675292969, 0.0164184570312, 0.0190734863281, 0.0113220214844, 0.00234985351562, 0.00448608398438, 0.0105285644531, 0.0104675292969, 0.00732421875, 0.00848388671875, 0.0119323730469, 0.00985717773438, 0.00579833984375, 0.00537109375, 0.00714111328125, 0.00909423828125, 0.00802612304688, 0.00445556640625, 0.00125122070312, -0.00112915039062, -0.00067138671875, 0.00241088867188, 0.003662109375, 0.000701904296875, -0.00247192382812, -0.00173950195312, -0.00128173828125, -0.00436401367188, -0.00518798828125, -0.000274658203125, 0.00640869140625, 0.00936889648438, 0.00439453125, -0.004150390625, -0.00454711914062, 0.0035400390625, 0.00845336914062, 0.00485229492188, -0.0001220703125, 0.00372314453125, 0.013427734375, 0.0133666992188, 0.000457763671875, -0.00637817382812, 0.004638671875, 0.0160522460938, 0.010986328125, 0.000823974609375, 0.0003662109375, 0.00372314453125, 0.00155639648438, -0.0006103515625, 0.00411987304688, 0.00839233398438, 0.00466918945312, -0.00054931640625, 0.00180053710938, 0.00714111328125, 0.00595092773438, 0.00347900390625, 0.00772094726562, 0.0111694335938, 0.00784301757812, 0.00372314453125, 0.00363159179688, 0.00588989257812, 0.00634765625, 0.00503540039062, 0.00640869140625, 0.00906372070312, 0.00665283203125, 0.001220703125, 0.00320434570312, 0.0108032226562, 0.0109252929688, 0.00265502929688, -0.00399780273438, -0.0015869140625, 0.00558471679688, 0.0037841796875, -0.00457763671875, -0.00552368164062, -0.00198364257812, -0.00164794921875, -0.00274658203125, -0.00247192382812, -0.00271606445312, -0.00674438476562, -0.00997924804688, -0.00692749023438, -0.00161743164062, 3.0517578125e-05, -0.00296020507812, -0.00576782226562, -0.00506591796875, -0.00424194335938, -0.00299072265625, -9.1552734375e-05, -0.00250244140625, -0.0112915039062, -0.0143737792969, -0.005859375, 0.0029296875, 0.00054931640625, -0.00619506835938, -0.00457763671875, 0.002197265625, 0.00091552734375, -0.00735473632812, -0.0084228515625, -0.00054931640625, 0.00674438476562, 0.00897216796875, 0.005615234375, 0.00152587890625, 0.00360107421875, 0.00576782226562, 0.00128173828125, -0.00054931640625, 0.00692749023438, 0.0127563476562, 0.00738525390625, -0.00119018554688, -0.00125122070312, 0.00405883789062, 0.00399780273438, 0.00048828125, 0.0020751953125, 0.00433349609375, -0.00106811523438, -0.00503540039062, 0.0052490234375, 0.0169982910156, 0.0104370117188, -0.0020751953125, 0.00177001953125, 0.0140686035156, 0.0133972167969, -0.000335693359375, -0.0068359375, 0.000244140625, 0.00631713867188, 0.00665283203125, 0.00933837890625, 0.0158996582031, 0.0172119140625, 0.00851440429688, 0.00244140625, 0.00717163085938, 0.0127868652344, 0.0118713378906, 0.00689697265625, 0.0037841796875, 0.006591796875, 0.0125732421875, 0.0169677734375, 0.0178833007812, 0.0177612304688, 0.0182189941406, 0.0140991210938, 0.00747680664062, 0.00909423828125, 0.0168151855469, 0.0187072753906, 0.0125732421875, 0.00820922851562, 0.0135498046875, 0.0196838378906, 0.01611328125, 0.00982666015625, 0.0107727050781, 0.015380859375, 0.0125122070312, 0.00335693359375, 0.00326538085938, 0.0141296386719, 0.0191955566406, 0.0100708007812, 0.001953125, 0.009521484375, 0.0187377929688, 0.01416015625, 0.00836181640625, 0.014404296875, 0.0222778320312, 0.0165405273438, 0.00234985351562, -0.00430297851562, -0.00131225585938, 0.00332641601562, 0.00393676757812, 0.00259399414062, 0.00381469726562, 0.00534057617188, 0.00503540039062, 0.00491333007812, 0.00433349609375, 0.00250244140625, 0.0040283203125, 0.0102844238281, 0.0119323730469, 0.00677490234375, 0.00344848632812, 0.00241088867188, 0.00125122070312, 0.00509643554688, 0.0158081054688, 0.0224304199219, 0.0148620605469, 0.00262451171875, 0.000732421875, 0.0050048828125, 0.0032958984375, -0.0009765625, 0.00360107421875, 0.0130004882812, 0.0134887695312, 0.00619506835938, 0.00311279296875, 0.00613403320312, 0.00909423828125, 0.0102844238281, 0.0102233886719, 0.00912475585938, 0.0067138671875, 0.00137329101562, -0.00274658203125, -0.00131225585938, 0.000457763671875, -0.00192260742188, -0.0045166015625, -0.00387573242188, -0.00296020507812, -0.00408935546875, -0.0057373046875, -0.00750732421875, -0.0076904296875, -0.00704956054688, -0.00869750976562, -0.00912475585938, -0.00689697265625, -0.00701904296875, -0.00936889648438, -0.0086669921875, -0.00216674804688, 0.0050048828125, 0.00494384765625, -0.001220703125, -0.00433349609375, 0.00112915039062, 0.00894165039062, 0.0112609863281, 0.00967407226562, 0.006103515625, 0.00210571289062, 0.00332641601562, 0.01025390625, 0.0146179199219, 0.00851440429688, -0.000732421875, 0.001220703125, 0.0101928710938, 0.0113525390625, 0.0015869140625, -0.005615234375, 0.0037841796875, 0.0188293457031, 0.0177307128906, 0.0032958984375, -0.001953125, 0.0086669921875, 0.0172424316406, 0.0134582519531, 0.00567626953125, 0.00213623046875, 0.00601196289062, 0.0143737792969, 0.017333984375, 0.0103759765625, 0.00314331054688, 0.00747680664062, 0.0191040039062, 0.0230712890625, 0.0137329101562, 0.00347900390625, 0.00497436523438, 0.0113830566406, 0.0113525390625, 0.00778198242188, 0.0074462890625, 0.00759887695312, 0.00296020507812, -0.00186157226562, 0.00167846679688, 0.0122375488281, 0.0168762207031, 0.0103149414062, 0.00509643554688, 0.00759887695312, 0.0107116699219, 0.0101623535156, 0.00765991210938, 0.00714111328125, 0.00994873046875, 0.0137023925781, 0.0140686035156, 0.0116882324219, 0.0120239257812, 0.0128784179688, 0.0137939453125, 0.0187377929688, 0.0203247070312, 0.0146179199219, 0.0115966796875, 0.0186157226562, 0.0300903320312, 0.0322265625, 0.0238037109375, 0.021484375, 0.0321960449219, 0.0382385253906, 0.0276489257812, 0.018310546875, 0.0237426757812, 0.0303039550781, 0.0279846191406, 0.0234069824219, 0.020751953125, 0.0169982910156, 0.0133972167969, 0.0159301757812, 0.0235595703125, 0.0287170410156, 0.0272827148438, 0.0226440429688, 0.0214233398438, 0.0218505859375, 0.0212097167969, 0.0240173339844, 0.0262756347656, 0.0225524902344, 0.0203552246094, 0.0232849121094, 0.0256958007812, 0.0248718261719, 0.0245666503906, 0.0257568359375, 0.0239562988281, 0.0201721191406, 0.0156555175781, 0.00830078125, 0.0032958984375, 0.00442504882812, 0.0069580078125, 0.00668334960938, 0.0037841796875, 0.000213623046875, -0.00180053710938, -0.0018310546875, -0.00360107421875, -0.00564575195312, -0.00436401367188, -0.00579833984375, -0.0102233886719, -0.00973510742188, -0.0068359375, -0.009033203125, -0.0160217285156, -0.0189514160156, -0.0152282714844, -0.0129089355469, -0.0158081054688, -0.0207824707031, -0.0213012695312, -0.0169067382812, -0.0180358886719, -0.0237121582031, -0.0230407714844, -0.0184936523438, -0.0201110839844, -0.0289306640625, -0.0331115722656, -0.0247497558594, -0.015869140625, -0.0184631347656, -0.0227355957031, -0.017822265625, -0.0147399902344, -0.0236206054688, -0.0282897949219, -0.0181274414062, -0.0143737792969, -0.0291137695312, -0.0411987304688, -0.0341491699219, -0.0229797363281, -0.0277404785156, -0.0383911132812, -0.0347595214844, -0.0256958007812, -0.0315551757812, -0.0447692871094, -0.0404052734375, -0.0244140625, -0.0266723632812, -0.0425109863281, -0.0425109863281, -0.0261840820312, -0.0191345214844, -0.0310668945312, -0.0402221679688, -0.0331115722656, -0.0264587402344, -0.0289916992188, -0.0293273925781, -0.0242919921875, -0.0224304199219, -0.0247192382812, -0.0232543945312, -0.018798828125, -0.0184020996094, -0.0215759277344, -0.0232238769531, -0.0223999023438, -0.0237121582031, -0.0249328613281, -0.0191040039062, -0.0142822265625, -0.0196533203125, -0.0273742675781\}, \{-0.006591796875, -0.00961303710938, -0.0096435546875, -0.00491333007812, 0.00225830078125, 0.00442504882812, 0.000762939453125, -0.0010986328125, -0.0006103515625, -0.00344848632812, -0.0104370117188, -0.0138244628906, -0.00689697265625, 0.001708984375, 0.00067138671875, -0.00650024414062, -0.00967407226562, -0.00689697265625, -0.00814819335938, -0.0147705078125, -0.0120239257812, 0.0008544921875, 0.00460815429688, -0.009521484375, -0.0225219726562, -0.0155944824219, -0.00262451171875, -0.00225830078125, -0.00933837890625, -0.0120544433594, -0.00897216796875, -0.00747680664062, -0.00997924804688, -0.0101318359375, -0.00466918945312, 0.0013427734375, 0.00042724609375, -0.00506591796875, -0.00540161132812, 0.00210571289062, 0.0100402832031, 0.00814819335938, -0.0013427734375, -0.00323486328125, 0.00765991210938, 0.0177307128906, 0.0155944824219, 0.00863647460938, 0.00933837890625, 0.0164489746094, 0.0198669433594, 0.01806640625, 0.0172424316406, 0.0171508789062, 0.0160217285156, 0.0173950195312, 0.0209655761719, 0.0180969238281, 0.00656127929688, 0.00054931640625, 0.00665283203125, 0.0142822265625, 0.0155944824219, 0.0105590820312, 0.00662231445312, 0.00814819335938, 0.0108642578125, 0.0133056640625, 0.0131530761719, 0.0110778808594, 0.0131530761719, 0.0189208984375, 0.0214538574219, 0.0142211914062, 0.0054931640625, 0.00799560546875, 0.0147705078125, 0.0146789550781, 0.00881958007812, 0.00555419921875, 0.007568359375, 0.00982666015625, 0.0126342773438, 0.0156555175781, 0.0157165527344, 0.0142822265625, 0.0116882324219, 0.00949096679688, 0.00888061523438, 0.00717163085938, 0.00482177734375, 0.00408935546875, 0.00473022460938, 0.00506591796875, 0.00537109375, 0.0069580078125, 0.00570678710938, 0.000335693359375, -0.0008544921875, 0.00555419921875, 0.01220703125, 0.0129089355469, 0.0081787109375, 0.00326538085938, 0.00350952148438, 0.00674438476562, 0.00811767578125, 0.00747680664062, 0.00762939453125, 0.0115051269531, 0.0162658691406, 0.0137329101562, 0.00405883789062, -0.0010986328125, 0.00457763671875, 0.0107727050781, 0.00775146484375, 0.00167846679688, 0.00079345703125, 0.00323486328125, 0.00384521484375, 0.00341796875, 0.00613403320312, 0.00924682617188, 0.00668334960938, 0.00067138671875, -6.103515625e-05, 0.00466918945312, 0.00607299804688, 0.0050048828125, 0.00762939453125, 0.00961303710938, 0.00830078125, 0.00851440429688, 0.00985717773438, 0.00759887695312, 0.00213623046875, 0.000244140625, 0.00521850585938, 0.00982666015625, 0.00668334960938, -0.0001220703125, 0.00106811523438, 0.00933837890625, 0.0107116699219, 0.00262451171875, -0.00503540039062, -0.00442504882812, 0.00167846679688, 0.000640869140625, -0.0072021484375, -0.00997924804688, -0.00762939453125, -0.00540161132812, -0.00546264648438, -0.0064697265625, -0.00558471679688, -0.00576782226562, -0.00796508789062, -0.00830078125, -0.00717163085938, -0.00820922851562, -0.0126647949219, -0.0162658691406, -0.0151977539062, -0.0123596191406, -0.00961303710938, -0.00900268554688, -0.0144653320312, -0.0201110839844, -0.0162353515625, -0.00640869140625, -0.0020751953125, -0.00579833984375, -0.00936889648438, -0.0064697265625, -0.00164794921875, -0.00372314453125, -0.0106201171875, -0.0104370117188, -0.00210571289062, 0.00418090820312, 0.00485229492188, 0.00241088867188, 0.000457763671875, 0.00100708007812, -0.000244140625, -0.00387573242188, -0.00189208984375, 0.00637817382812, 0.0100402832031, 0.00357055664062, -0.00473022460938, -0.00540161132812, -0.000244140625, 0.00262451171875, 0.00180053710938, 0.00204467773438, 0.00314331054688, 0.00152587890625, 0.00048828125, 0.00613403320312, 0.010986328125, 0.00326538085938, -0.00637817382812, -0.00164794921875, 0.00958251953125, 0.00933837890625, -0.00167846679688, -0.00469970703125, 0.00485229492188, 0.0110168457031, 0.0093994140625, 0.00958251953125, 0.0151062011719, 0.0172729492188, 0.00869750976562, 0.000823974609375, 0.00473022460938, 0.0121765136719, 0.0142517089844, 0.0112915039062, 0.00827026367188, 0.008544921875, 0.010986328125, 0.0145263671875, 0.0161743164062, 0.0143737792969, 0.0129089355469, 0.0111999511719, 0.00912475585938, 0.0119934082031, 0.0172729492188, 0.0176086425781, 0.0136413574219, 0.0130310058594, 0.0191650390625, 0.023193359375, 0.0187683105469, 0.0132141113281, 0.0124816894531, 0.0141906738281, 0.0116271972656, 0.00485229492188, 0.00515747070312, 0.0151977539062, 0.0221252441406, 0.0174255371094, 0.0119323730469, 0.0180053710938, 0.0238952636719, 0.0179138183594, 0.0130615234375, 0.0198059082031, 0.0267944335938, 0.0199584960938, 0.00625610351562, 0.00167846679688, 0.00601196289062, 0.0103759765625, 0.0111389160156, 0.0106506347656, 0.0103759765625, 0.00759887695312, 0.00482177734375, 0.00656127929688, 0.009521484375, 0.00924682617188, 0.00909423828125, 0.0133666992188, 0.0165710449219, 0.0145568847656, 0.0113830566406, 0.00924682617188, 0.0098876953125, 0.0152282714844, 0.0231323242188, 0.0274047851562, 0.0216674804688, 0.00991821289062, 0.00396728515625, 0.00637817382812, 0.0086669921875, 0.00686645507812, 0.00772094726562, 0.0130920410156, 0.014892578125, 0.0104675292969, 0.00631713867188, 0.005859375, 0.00772094726562, 0.0106811523438, 0.0120544433594, 0.0106506347656, 0.0072021484375, 0.0010986328125, -0.00228881835938, 0.0020751953125, 0.00674438476562, 0.00396728515625, -0.00213623046875, -0.00384521484375, -0.00265502929688, -0.00384521484375, -0.00732421875, -0.010986328125, -0.0114135742188, -0.00906372070312, -0.00881958007812, -0.00885009765625, -0.006591796875, -0.00613403320312, -0.00875854492188, -0.00909423828125, -0.00341796875, 0.00192260742188, -0.000457763671875, -0.00595092773438, -0.0062255859375, -3.0517578125e-05, 0.00619506835938, 0.0069580078125, 0.00411987304688, 0.00042724609375, -0.0010986328125, 0.00228881835938, 0.00729370117188, 0.0084228515625, 0.00213623046875, -0.005615234375, -0.0040283203125, 0.00308227539062, 0.00405883789062, -0.0020751953125, -0.00460815429688, 0.00497436523438, 0.0161437988281, 0.0137329101562, 0.00146484375, -0.00396728515625, 0.0042724609375, 0.0132141113281, 0.0103759765625, 0.00054931640625, -0.00387573242188, 0.00277709960938, 0.0117492675781, 0.0115356445312, 0.00509643554688, 0.00469970703125, 0.0134887695312, 0.020751953125, 0.01708984375, 0.005859375, -0.00100708007812, 0.002685546875, 0.00845336914062, 0.009033203125, 0.00860595703125, 0.0112915039062, 0.0127563476562, 0.00778198242188, 0.000732421875, 0.00103759765625, 0.0108032226562, 0.0182800292969, 0.0135803222656, 0.00564575195312, 0.00445556640625, 0.00775146484375, 0.0102233886719, 0.0106811523438, 0.011962890625, 0.0141906738281, 0.0153198242188, 0.0142517089844, 0.0125122070312, 0.013916015625, 0.0149841308594, 0.0145263671875, 0.0176696777344, 0.0204467773438, 0.0187683105469, 0.0164184570312, 0.0179748535156, 0.0240783691406, 0.0271911621094, 0.0238647460938, 0.0234069824219, 0.030517578125, 0.033203125, 0.0232543945312, 0.015380859375, 0.0206604003906, 0.0275268554688, 0.0270385742188, 0.0241088867188, 0.0223693847656, 0.0186157226562, 0.0125427246094, 0.0113525390625, 0.0179748535156, 0.02587890625, 0.0267944335938, 0.0205383300781, 0.0166625976562, 0.0180358886719, 0.02001953125, 0.0234375, 0.02587890625, 0.0236511230469, 0.0201721191406, 0.0186767578125, 0.0215759277344, 0.0268859863281, 0.0275573730469, 0.0226440429688, 0.0189819335938, 0.0215454101562, 0.0215759277344, 0.0110168457031, 0.00131225585938, 0.0023193359375, 0.00762939453125, 0.00946044921875, 0.00674438476562, 0.00140380859375, -0.0025634765625, -0.00164794921875, -0.00100708007812, -0.0042724609375, -0.00680541992188, -0.00830078125, -0.00894165039062, -0.00726318359375, -0.00582885742188, -0.00711059570312, -0.0123901367188, -0.0177307128906, -0.0182800292969, -0.0165405273438, -0.0165100097656, -0.0203247070312, -0.02294921875, -0.01904296875, -0.0156555175781, -0.0158386230469, -0.0149536132812, -0.0152282714844, -0.02001953125, -0.0263671875, -0.0263366699219, -0.0172424316406, -0.0103149414062, -0.0129089355469, -0.0144653320312, -0.00711059570312, -0.00326538085938, -0.0138549804688, -0.0226745605469, -0.015625, -0.0101928710938, -0.0206298828125, -0.0310974121094, -0.0259704589844, -0.0157470703125, -0.0177001953125, -0.0259094238281, -0.0259094238281, -0.0220947265625, -0.0259094238281, -0.0347595214844, -0.0354919433594, -0.0282897949219, -0.0291137695312, -0.0380859375, -0.0399475097656, -0.0311889648438, -0.0246276855469, -0.0308227539062, -0.0380249023438, -0.0344543457031, -0.0314331054688, -0.03466796875, -0.0333251953125, -0.0258483886719, -0.0242309570312, -0.0314025878906, -0.0352172851562, -0.0311279296875, -0.0271606445312, -0.0282592773438, -0.0314331054688, -0.0310668945312, -0.0285339355469, -0.0273742675781, -0.0254516601562, -0.0250244140625, -0.0286560058594, -0.0312805175781\}, \{0.00906372070312, 0.00912475585938, 0.00918579101562, 0.00921630859375, 0.00927734375, 0.00933837890625, 0.00936889648438, 0.00942993164062, 0.00946044921875, 0.009521484375, 0.00955200195312, 0.00961303710938, 0.0096435546875, 0.00970458984375, 0.00973510742188, 0.009765625, 0.00982666015625, 0.00985717773438, 0.0098876953125, 0.00994873046875, 0.00997924804688, 0.010009765625, 0.0100402832031, 0.0100708007812, 0.0101318359375, 0.0101623535156, 0.0101928710938, 0.0102233886719, 0.01025390625, 0.0102844238281, 0.0103149414062, 0.0103149414062, 0.0103454589844, 0.0103759765625, 0.0104064941406, 0.0104370117188, 0.0104370117188, 0.0104675292969, 0.010498046875, 0.010498046875, 0.0105285644531, 0.0105590820312, 0.0105590820312, 0.0105895996094, 0.0105895996094, 0.0106201171875, 0.0106201171875, 0.0106201171875, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106811523438, 0.0106506347656, 0.0106506347656, 0.0106506347656, 0.0106201171875, 0.0106201171875, 0.0105895996094, 0.0105895996094, 0.0105590820312, 0.0105590820312, 0.0105285644531, 0.0105285644531, 0.010498046875, 0.0104675292969, 0.0104675292969, 0.0104370117188, 0.0104064941406, 0.0103759765625, 0.0103454589844, 0.0103454589844, 0.0103149414062, 0.0102844238281, 0.01025390625, 0.0102233886719, 0.0101928710938, 0.0101623535156, 0.0101013183594, 0.0100708007812, 0.0100402832031, 0.010009765625, 0.00997924804688, 0.00991821289062, 0.0098876953125, 0.00985717773438, 0.00979614257812, 0.009765625, 0.00970458984375, 0.00967407226562, 0.00961303710938, 0.00958251953125, 0.009521484375, 0.00946044921875, 0.00942993164062, 0.00936889648438, 0.00930786132812, 0.00927734375, 0.00921630859375, 0.0091552734375, 0.00909423828125, 0.009033203125, 0.00897216796875, 0.0089111328125, 0.00885009765625, 0.0087890625, 0.00872802734375, 0.0086669921875, 0.00860595703125, 0.008544921875, 0.00848388671875, 0.0084228515625, 0.00836181640625, 0.00827026367188, 0.00820922851562, 0.00814819335938, 0.00808715820312, 0.00799560546875, 0.0079345703125, 0.00787353515625, 0.00778198242188, 0.00772094726562, 0.00762939453125, 0.007568359375, 0.00747680664062, 0.00741577148438, 0.00732421875, 0.00726318359375, 0.00717163085938, 0.007080078125, 0.00701904296875, 0.00692749023438, 0.0068359375, 0.00677490234375, 0.00668334960938, 0.006591796875, 0.00650024414062, 0.00643920898438, 0.00634765625, 0.00625610351562, 0.00616455078125, 0.00607299804688, 0.0059814453125, 0.00592041015625, 0.00582885742188, 0.0057373046875, 0.00564575195312, 0.00555419921875, 0.00546264648438, 0.00537109375, 0.00527954101562, 0.00518798828125, 0.00509643554688, 0.0050048828125, 0.00491333007812, 0.00479125976562, 0.00469970703125, 0.00460815429688, 0.0045166015625, 0.00442504882812, 0.00433349609375, 0.00424194335938, 0.00411987304688, 0.0040283203125, 0.00393676757812, 0.00384521484375, 0.00375366210938, 0.00363159179688, 0.0035400390625, 0.00344848632812, 0.00335693359375, 0.00323486328125, 0.00314331054688, 0.0030517578125, 0.0029296875, 0.00283813476562, 0.00274658203125, 0.00262451171875, 0.00253295898438, 0.00244140625, 0.0023193359375, 0.00222778320312, 0.00210571289062, 0.00201416015625, 0.00192260742188, 0.00180053710938, 0.001708984375, 0.0015869140625, 0.00149536132812, 0.00137329101562, 0.00128173828125, 0.00115966796875, 0.00106811523438, 0.0009765625, 0.0008544921875, 0.000762939453125, 0.000640869140625, 0.00054931640625, 0.00042724609375, 0.000335693359375, 0.000213623046875, 0.0001220703125, 0.0, -9.1552734375e-05, -0.000213623046875, -0.00030517578125, -0.00042724609375, -0.000518798828125, -0.000640869140625, -0.000732421875, -0.0008544921875, -0.000946044921875, -0.00106811523438, -0.00115966796875, -0.00128173828125, -0.00137329101562, -0.00149536132812, -0.0015869140625, -0.001708984375, -0.00180053710938, -0.00192260742188, -0.00201416015625, -0.00210571289062, -0.00222778320312, -0.0023193359375, -0.00244140625, -0.00253295898438, -0.00265502929688, -0.00274658203125, -0.00283813476562, -0.00296020507812, -0.0030517578125, -0.003173828125, -0.00326538085938, -0.00335693359375, -0.00347900390625, -0.00357055664062, -0.003662109375, -0.00375366210938, -0.00387573242188, -0.00396728515625, -0.00405883789062, -0.004150390625, -0.00424194335938, -0.00436401367188, -0.00445556640625, -0.00454711914062, -0.004638671875, -0.00473022460938, -0.00482177734375, -0.00491333007812, -0.0050048828125, -0.00509643554688, -0.00518798828125, -0.00527954101562, -0.00537109375, -0.00546264648438, -0.00555419921875, -0.00564575195312, -0.0057373046875, -0.00582885742188, -0.00592041015625, -0.00601196289062, -0.00607299804688, -0.00616455078125, -0.00625610351562, -0.00631713867188, -0.00640869140625, -0.00650024414062, -0.00656127929688, -0.00665283203125, -0.00674438476562, -0.00680541992188, -0.00689697265625, -0.0069580078125, -0.00704956054688, -0.00711059570312, -0.00717163085938, -0.00726318359375, -0.00732421875, -0.00741577148438, -0.00747680664062, -0.00753784179688, -0.00759887695312, -0.0076904296875, -0.00775146484375, -0.0078125, -0.00787353515625, -0.0079345703125, -0.00799560546875, -0.008056640625, -0.00811767578125, -0.0081787109375, -0.00823974609375, -0.00830078125, -0.00836181640625, -0.0084228515625, -0.00845336914062, -0.00851440429688, -0.00857543945312, -0.00863647460938, -0.0086669921875, -0.00872802734375, -0.0087890625, -0.00881958007812, -0.00888061523438, -0.0089111328125, -0.00897216796875, -0.00900268554688, -0.00906372070312, -0.00909423828125, -0.0091552734375, -0.00918579101562, -0.00921630859375, -0.00927734375, -0.00930786132812, -0.00933837890625, -0.0093994140625, -0.00942993164062, -0.00946044921875, -0.00949096679688, -0.009521484375, -0.00955200195312, -0.00958251953125, -0.00961303710938, -0.0096435546875, -0.00967407226562, -0.00970458984375, -0.00973510742188, -0.009765625, -0.00979614257812, -0.00982666015625, -0.00985717773438, -0.00985717773438, -0.0098876953125, -0.00991821289062, -0.00994873046875, -0.00994873046875, -0.00997924804688, -0.010009765625, -0.010009765625, -0.0100402832031, -0.0100402832031, -0.0100708007812, -0.0101013183594, -0.0101013183594, -0.0101318359375, -0.0101318359375, -0.0101623535156, -0.0101623535156, -0.0101623535156, -0.0101928710938, -0.0101928710938, -0.0101928710938, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.0102844238281, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.01025390625, -0.0102233886719, -0.0102233886719, -0.0102233886719, -0.0101928710938, -0.0101928710938, -0.0101623535156, -0.0101623535156, -0.0101318359375, -0.0101318359375, -0.0101013183594, -0.0101013183594, -0.0100708007812, -0.0100402832031, -0.0100402832031, -0.010009765625, -0.00997924804688, -0.00997924804688, -0.00994873046875, -0.00991821289062, -0.0098876953125, -0.00985717773438, -0.00982666015625, -0.00979614257812, -0.00979614257812, -0.009765625, -0.00973510742188, -0.00970458984375, -0.0096435546875, -0.00961303710938, -0.00958251953125, -0.00955200195312, -0.009521484375, -0.00949096679688, -0.00946044921875, -0.0093994140625, -0.00936889648438, -0.00933837890625, -0.00927734375, -0.00924682617188, -0.00921630859375, -0.0091552734375, -0.00912475585938, -0.00909423828125, -0.009033203125, -0.00900268554688, -0.00894165039062, -0.0089111328125, -0.00885009765625, -0.0087890625, -0.00875854492188, -0.00869750976562, -0.0086669921875, -0.00860595703125, -0.008544921875, -0.00848388671875, -0.00845336914062, -0.00839233398438, -0.00833129882812, -0.00827026367188, -0.00823974609375, -0.0081787109375, -0.00811767578125, -0.008056640625, -0.00799560546875, -0.0079345703125, -0.00790405273438, -0.00784301757812, -0.00778198242188, -0.00772094726562, -0.00765991210938, -0.00759887695312, -0.00753784179688, -0.00747680664062, -0.00741577148438, -0.00735473632812, -0.00729370117188, -0.0072021484375, -0.00714111328125, -0.007080078125, -0.00701904296875, -0.0069580078125, -0.00689697265625, -0.0068359375, -0.00674438476562, -0.00668334960938, -0.00662231445312, -0.00656127929688, -0.00650024414062, -0.00640869140625, -0.00634765625, -0.00628662109375, -0.00619506835938, -0.00613403320312, -0.00607299804688, -0.0059814453125, -0.00592041015625, -0.005859375, -0.00576782226562, -0.00570678710938, -0.005615234375, -0.00555419921875, -0.0054931640625, -0.00540161132812, -0.00534057617188, -0.0052490234375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}, \{-0.0137634277344, -0.0150756835938, -0.015869140625, -0.0154113769531, -0.014892578125, -0.0154418945312, -0.0154113769531, -0.0146484375, -0.0158081054688, -0.0160217285156, -0.0138244628906, -0.014892578125, -0.01953125, -0.0215454101562, -0.0183715820312, -0.0155639648438, -0.0179443359375, -0.0206909179688, -0.0208435058594, -0.0207824707031, -0.0200500488281, -0.0187683105469, -0.0177917480469, -0.017333984375, -0.0167541503906, -0.0147705078125, -0.0140075683594, -0.0145874023438, -0.0145874023438, -0.0152893066406, -0.0149230957031, -0.0123291015625, -0.0101928710938, -0.00958251953125, -0.00924682617188, -0.00747680664062, -0.00497436523438, -0.00262451171875, -0.00119018554688, -0.00201416015625, -0.00344848632812, -0.00335693359375, -0.00030517578125, 0.0050048828125, 0.00714111328125, 0.00408935546875, 0.00198364257812, 0.00393676757812, 0.00445556640625, 0.002197265625, 0.00247192382812, 0.00485229492188, 0.00387573242188, -0.000396728515625, -0.00244140625, -0.00164794921875, -0.000335693359375, 0.00192260742188, 0.00399780273438, 0.0054931640625, 0.005859375, 0.00503540039062, 0.0054931640625, 0.005615234375, 0.00552368164062, 0.00588989257812, 0.00411987304688, 0.00210571289062, 0.00103759765625, 0.00198364257812, 0.00540161132812, 0.00665283203125, 0.0054931640625, 0.00497436523438, 0.00750732421875, 0.0116271972656, 0.0118408203125, 0.00967407226562, 0.00836181640625, 0.00796508789062, 0.00860595703125, 0.00863647460938, 0.00881958007812, 0.00848388671875, 0.00698852539062, 0.007568359375, 0.00933837890625, 0.0102233886719, 0.00967407226562, 0.00827026367188, 0.0089111328125, 0.0102233886719, 0.00933837890625, 0.0079345703125, 0.00820922851562, 0.00927734375, 0.00909423828125, 0.00912475585938, 0.0111389160156, 0.0117492675781, 0.009521484375, 0.00860595703125, 0.00906372070312, 0.00799560546875, 0.00650024414062, 0.0054931640625, 0.00454711914062, 0.00479125976562, 0.00595092773438, 0.0067138671875, 0.00634765625, 0.00454711914062, 0.00186157226562, -0.000518798828125, -0.001220703125, -0.00125122070312, -0.00228881835938, -0.00314331054688, -0.00259399414062, -0.000274658203125, 0.00253295898438, 0.00302124023438, 0.00125122070312, -6.103515625e-05, 0.000518798828125, 0.00128173828125, 0.00143432617188, 0.00198364257812, 0.0015869140625, 0.000518798828125, 0.00131225585938, 0.0037841796875, 0.006591796875, 0.00689697265625, 0.00308227539062, -0.0001220703125, 0.000335693359375, 0.00149536132812, 0.00128173828125, 0.00106811523438, 0.00204467773438, 0.003173828125, 0.00506591796875, 0.0072021484375, 0.00714111328125, 0.00741577148438, 0.00930786132812, 0.0102844238281, 0.00958251953125, 0.00531005859375, 0.00018310546875, -0.00119018554688, -0.000946044921875, -0.00079345703125, -0.00222778320312, -0.0062255859375, -0.00759887695312, -0.00454711914062, -0.0018310546875, -0.0030517578125, -0.00564575195312, -0.00457763671875, -0.00262451171875, -0.00390625, -0.00668334960938, -0.00961303710938, -0.0107421875, -0.008544921875, -0.00662231445312, -0.00735473632812, -0.00839233398438, -0.00799560546875, -0.0076904296875, -0.0086669921875, -0.00900268554688, -0.007080078125, -0.00448608398438, -0.003662109375, -0.00485229492188, -0.00607299804688, -0.00729370117188, -0.00857543945312, -0.00845336914062, -0.00888061523438, -0.0104675292969, -0.00994873046875, -0.00839233398438, -0.00814819335938, -0.0076904296875, -0.0067138671875, -0.00701904296875, -0.008056640625, -0.00820922851562, -0.00741577148438, -0.00656127929688, -0.00686645507812, -0.008544921875, -0.00927734375, -0.00689697265625, -0.00308227539062, -0.00161743164062, -0.0025634765625, -0.00430297851562, -0.00692749023438, -0.0079345703125, -0.00653076171875, -0.00494384765625, -0.00335693359375, -0.00253295898438, -0.001708984375, 3.0517578125e-05, 0.00140380859375, 0.00259399414062, 0.00164794921875, -0.0015869140625, -0.00299072265625, -0.00347900390625, -0.00442504882812, -0.0047607421875, -0.00360107421875, -9.1552734375e-05, 0.00167846679688, 0.000274658203125, 0.000457763671875, 0.003173828125, 0.00625610351562, 0.00765991210938, 0.00625610351562, 0.004150390625, 0.00210571289062, 0.000274658203125, -0.0001220703125, 0.00042724609375, 0.00225830078125, 0.00473022460938, 0.00527954101562, 0.00564575195312, 0.00653076171875, 0.00698852539062, 0.00836181640625, 0.00924682617188, 0.0081787109375, 0.00643920898438, 0.00555419921875, 0.00579833984375, 0.00582885742188, 0.00753784179688, 0.0110473632812, 0.011962890625, 0.0106506347656, 0.00912475585938, 0.00811767578125, 0.0079345703125, 0.00625610351562, 0.00360107421875, 0.00253295898438, 0.00396728515625, 0.00595092773438, 0.00540161132812, 0.00439453125, 0.00494384765625, 0.006103515625, 0.00839233398438, 0.0110168457031, 0.0123596191406, 0.0116882324219, 0.00961303710938, 0.00802612304688, 0.00765991210938, 0.00790405273438, 0.00686645507812, 0.0057373046875, 0.00628662109375, 0.00564575195312, 0.00369262695312, 0.00259399414062, 0.00222778320312, 0.00289916992188, 0.00418090820312, 0.004638671875, 0.00390625, 0.00308227539062, 0.00274658203125, 0.00189208984375, 0.00198364257812, 0.00411987304688, 0.00506591796875, 0.00344848632812, 0.00289916992188, 0.00393676757812, 0.00350952148438, 0.00155639648438, -0.000885009765625, -0.00289916992188, -0.00384521484375, -0.00473022460938, -0.00424194335938, -0.001220703125, 0.000732421875, -9.1552734375e-05, -0.000885009765625, 0.000640869140625, 0.00180053710938, -3.0517578125e-05, -0.00253295898438, -0.00424194335938, -0.00479125976562, -0.00405883789062, -0.00341796875, -0.00277709960938, -0.00283813476562, -0.00341796875, -0.00189208984375, 0.000518798828125, 0.00054931640625, -0.00247192382812, -0.00579833984375, -0.0059814453125, -0.0045166015625, -0.00454711914062, -0.006591796875, -0.00833129882812, -0.00692749023438, -0.00411987304688, -0.00189208984375, -0.000396728515625, -0.0009765625, -0.002197265625, -0.00302124023438, -0.00393676757812, -0.00357055664062, -0.00390625, -0.00616455078125, -0.00839233398438, -0.00881958007812, -0.00668334960938, -0.00454711914062, -0.00289916992188, -0.00067138671875, -0.00042724609375, -0.00265502929688, -0.00515747070312, -0.0067138671875, -0.00787353515625, -0.00930786132812, -0.00924682617188, -0.0069580078125, -0.00308227539062, 0.00048828125, 0.0003662109375, -0.0020751953125, -0.00186157226562, 0.000518798828125, -0.0006103515625, -0.00436401367188, -0.00558471679688, -0.00616455078125, -0.0074462890625, -0.0059814453125, -0.00283813476562, -0.00189208984375, -0.00222778320312, -0.00161743164062, -0.00222778320312, -0.00411987304688, -0.0052490234375, -0.00564575195312, -0.00418090820312, -0.00201416015625, -0.00173950195312, -0.00250244140625, -0.00250244140625, -0.000762939453125, 0.00106811523438, 0.00186157226562, 0.00128173828125, -0.000762939453125, -0.00119018554688, -0.001708984375, -0.00381469726562, -0.0037841796875, -0.002197265625, -0.000244140625, 0.001708984375, 0.00186157226562, 0.00167846679688, 0.00155639648438, 0.000396728515625, -0.00048828125, 0.00103759765625, 0.00335693359375, 0.00244140625, -0.0003662109375, -0.00146484375, -0.000518798828125, 0.00225830078125, 0.00408935546875, 0.00332641601562, 0.003173828125, 0.00534057617188, 0.00762939453125, 0.00860595703125, 0.0104370117188, 0.0126647949219, 0.0115356445312, 0.00997924804688, 0.0102233886719, 0.0093994140625, 0.0089111328125, 0.0103759765625, 0.0131530761719, 0.0160827636719, 0.0161743164062, 0.0149536132812, 0.0146789550781, 0.0137634277344, 0.0115661621094, 0.00845336914062, 0.00653076171875, 0.00637817382812, 0.0068359375, 0.009033203125, 0.0111999511719, 0.0113525390625, 0.0113525390625, 0.0106201171875, 0.00729370117188, 0.00421142578125, 0.00430297851562, 0.00271606445312, -0.00173950195312, -0.00238037109375, 0.00030517578125, 0.00238037109375, 0.0028076171875, 0.00125122070312, -0.000335693359375, -0.00180053710938, -0.00277709960938, -0.0028076171875, -0.00326538085938, -0.00274658203125, -0.00143432617188, 3.0517578125e-05, 0.00244140625, 0.00277709960938, 0.00189208984375, 0.00244140625, 0.00198364257812, 0.0009765625, 0.000823974609375, 0.000762939453125, 0.00198364257812, 0.00393676757812, 0.00442504882812, 0.00347900390625, 0.00357055664062, 0.0048828125, 0.00436401367188, 0.003173828125, 0.0037841796875, 0.003173828125, 0.000885009765625, -0.000244140625, 6.103515625e-05, 0.00106811523438, 0.00100708007812, -0.00048828125, -0.00228881835938, -0.00421142578125, -0.00531005859375, -0.00491333007812, -0.001953125, 0.00152587890625, 0.0, -0.00390625, -0.00592041015625, -0.0069580078125, -0.00656127929688, -0.00616455078125, -0.00686645507812, -0.00787353515625, -0.00958251953125, -0.0098876953125, -0.00906372070312, -0.00967407226562, -0.0104064941406, -0.009521484375, -0.0074462890625, -0.00643920898438, -0.00704956054688, -0.00799560546875, -0.00924682617188, -0.00845336914062, -0.005859375, -0.00509643554688, -0.00506591796875, -0.00457763671875, -0.00326538085938, -0.00238037109375\}, \{-0.00445556640625, -0.00384521484375, -0.00350952148438, -0.00299072265625, -0.00189208984375, -0.00216674804688, -0.00408935546875, -0.00506591796875, -0.00460815429688, -0.00357055664062, -0.00326538085938, -0.00503540039062, -0.00680541992188, -0.0062255859375, -0.00393676757812, -0.0029296875, -0.0050048828125, -0.00762939453125, -0.00930786132812, -0.0111694335938, -0.0129089355469, -0.01416015625, -0.0150451660156, -0.0154113769531, -0.0149536132812, -0.0147705078125, -0.0173645019531, -0.0199890136719, -0.0194702148438, -0.0191040039062, -0.02001953125, -0.019775390625, -0.0188903808594, -0.0191040039062, -0.0194396972656, -0.0180053710938, -0.015869140625, -0.0144348144531, -0.0134887695312, -0.0126342773438, -0.0115051269531, -0.0109558105469, -0.0107421875, -0.00933837890625, -0.0084228515625, -0.00982666015625, -0.0105285644531, -0.00894165039062, -0.0091552734375, -0.0117797851562, -0.0123291015625, -0.0106811523438, -0.0104675292969, -0.0115966796875, -0.0109252929688, -0.00830078125, -0.005859375, -0.00445556640625, -0.0037841796875, -0.00314331054688, -0.00314331054688, -0.00357055664062, -0.00265502929688, -0.00228881835938, -0.00311279296875, -0.00363159179688, -0.00381469726562, -0.00289916992188, -0.0020751953125, -0.00186157226562, -0.000457763671875, 0.00140380859375, 0.00222778320312, 0.0020751953125, 0.0030517578125, 0.00482177734375, 0.004150390625, 0.00311279296875, 0.0042724609375, 0.004638671875, 0.002197265625, -6.103515625e-05, 0.000640869140625, 0.0006103515625, -0.00180053710938, -0.00173950195312, 0.00048828125, 0.00100708007812, 0.0, -0.00048828125, 0.0, 0.000457763671875, 0.000701904296875, 0.0009765625, 0.000640869140625, -0.00030517578125, -0.00112915039062, -0.000579833984375, 0.0013427734375, 0.00222778320312, 0.00225830078125, 0.00399780273438, 0.00570678710938, 0.00497436523438, 0.00375366210938, 0.00277709960938, 0.001708984375, 0.00244140625, 0.00405883789062, 0.00363159179688, 0.00198364257812, 0.00140380859375, 0.00131225585938, 0.000885009765625, 0.00106811523438, 0.00167846679688, 0.00192260742188, 0.00216674804688, 0.0025634765625, 0.0030517578125, 0.00347900390625, 0.00286865234375, 0.00173950195312, 0.001953125, 0.00332641601562, 0.00360107421875, 0.0035400390625, 0.00460815429688, 0.004638671875, 0.00399780273438, 0.005126953125, 0.00613403320312, 0.00546264648438, 0.00439453125, 0.00320434570312, 0.00277709960938, 0.00384521484375, 0.00457763671875, 0.00418090820312, 0.00399780273438, 0.00436401367188, 0.00466918945312, 0.00479125976562, 0.0032958984375, 0.000152587890625, -0.0009765625, -9.1552734375e-05, 0.000762939453125, 0.00192260742188, 0.00186157226562, 0.00103759765625, 0.00155639648438, 0.00155639648438, 0.0013427734375, 0.00222778320312, 0.0023193359375, 0.00119018554688, -0.00018310546875, -0.00131225585938, -0.00189208984375, -0.00167846679688, -0.00054931640625, 0.000274658203125, 0.00067138671875, 0.00079345703125, -0.00042724609375, -0.000732421875, 0.00155639648438, 0.00259399414062, 0.00112915039062, 0.000640869140625, 0.000823974609375, -0.00018310546875, -0.000396728515625, 0.00143432617188, 0.0035400390625, 0.00570678710938, 0.00750732421875, 0.0069580078125, 0.00515747070312, 0.0040283203125, 0.00311279296875, 0.00152587890625, -0.00091552734375, -0.00201416015625, -0.000823974609375, -0.000762939453125, -0.00180053710938, -0.000396728515625, 0.00149536132812, 0.000885009765625, 0.000274658203125, 0.00067138671875, 3.0517578125e-05, -0.00152587890625, -0.00326538085938, -0.005615234375, -0.00677490234375, -0.00518798828125, -0.0029296875, -0.00155639648438, 6.103515625e-05, 0.00079345703125, -0.00091552734375, -0.00164794921875, 3.0517578125e-05, 0.00054931640625, -0.000244140625, -0.00091552734375, -0.00173950195312, -0.0023193359375, -0.00140380859375, 0.000335693359375, -0.000335693359375, -0.0018310546875, -0.00018310546875, 0.00213623046875, 0.0025634765625, 0.00302124023438, 0.00482177734375, 0.00704956054688, 0.00729370117188, 0.00567626953125, 0.0050048828125, 0.00582885742188, 0.00723266601562, 0.00833129882812, 0.00906372070312, 0.0096435546875, 0.00839233398438, 0.006103515625, 0.00582885742188, 0.0064697265625, 0.00616455078125, 0.00531005859375, 0.0048828125, 0.005859375, 0.00732421875, 0.008544921875, 0.0110473632812, 0.0137634277344, 0.0146484375, 0.0141296386719, 0.0132141113281, 0.01220703125, 0.0110778808594, 0.0108947753906, 0.0112915039062, 0.0107116699219, 0.00982666015625, 0.0087890625, 0.0079345703125, 0.00823974609375, 0.0076904296875, 0.00534057617188, 0.00381469726562, 0.00460815429688, 0.00515747070312, 0.00357055664062, 0.00271606445312, 0.00347900390625, 0.00390625, 0.0048828125, 0.00704956054688, 0.00872802734375, 0.00881958007812, 0.00732421875, 0.005126953125, 0.00442504882812, 0.0054931640625, 0.00491333007812, 0.00253295898438, 0.001953125, 0.00286865234375, 0.00344848632812, 0.00357055664062, 0.00393676757812, 0.005615234375, 0.00787353515625, 0.00927734375, 0.0103149414062, 0.0120239257812, 0.0129089355469, 0.0110473632812, 0.00827026367188, 0.007080078125, 0.00668334960938, 0.00619506835938, 0.00607299804688, 0.00579833984375, 0.00506591796875, 0.00494384765625, 0.00491333007812, 0.00421142578125, 0.00283813476562, -9.1552734375e-05, -0.00302124023438, -0.00357055664062, -0.00393676757812, -0.00552368164062, -0.00637817382812, -0.00674438476562, -0.00833129882812, -0.0087890625, -0.00741577148438, -0.00845336914062, -0.0113830566406, -0.0120239257812, -0.0114135742188, -0.0110778808594, -0.0104370117188, -0.00946044921875, -0.00823974609375, -0.00729370117188, -0.00711059570312, -0.00811767578125, -0.00946044921875, -0.0086669921875, -0.00637817382812, -0.00601196289062, -0.00881958007812, -0.0118713378906, -0.0123291015625, -0.0116271972656, -0.0111999511719, -0.0105590820312, -0.0103454589844, -0.0103454589844, -0.00967407226562, -0.00811767578125, -0.00689697265625, -0.00885009765625, -0.0125427246094, -0.0138244628906, -0.0130004882812, -0.0123901367188, -0.0126647949219, -0.0123291015625, -0.0105590820312, -0.00848388671875, -0.00701904296875, -0.007080078125, -0.00863647460938, -0.0104370117188, -0.0119018554688, -0.0123291015625, -0.0122985839844, -0.0130004882812, -0.0137023925781, -0.0137634277344, -0.0138549804688, -0.0141296386719, -0.0141906738281, -0.0151977539062, -0.016845703125, -0.0172119140625, -0.0176391601562, -0.0191345214844, -0.0197448730469, -0.0193481445312, -0.0195617675781, -0.0201721191406, -0.02001953125, -0.0193176269531, -0.0185546875, -0.0188903808594, -0.0198974609375, -0.0181579589844, -0.0155334472656, -0.0164489746094, -0.0186157226562, -0.0180969238281, -0.0153198242188, -0.0130615234375, -0.0123596191406, -0.0127563476562, -0.0119934082031, -0.00872802734375, -0.0069580078125, -0.00640869140625, -0.00259399414062, 0.00137329101562, 0.00238037109375, 0.00225830078125, 0.00106811523438, -0.00048828125, -0.0003662109375, 0.0006103515625, 0.00112915039062, 0.00259399414062, 0.00479125976562, 0.00509643554688, 0.00485229492188, 0.00540161132812, 0.00506591796875, 0.00552368164062, 0.00808715820312, 0.009765625, 0.0101013183594, 0.0120849609375, 0.0153198242188, 0.0173950195312, 0.019775390625, 0.0231628417969, 0.0245361328125, 0.0241394042969, 0.0235290527344, 0.0223999023438, 0.02197265625, 0.022216796875, 0.0223083496094, 0.0232238769531, 0.0240173339844, 0.0236511230469, 0.02294921875, 0.0228271484375, 0.0231323242188, 0.0225524902344, 0.0216674804688, 0.0214233398438, 0.0215759277344, 0.022705078125, 0.0231018066406, 0.0215148925781, 0.0205993652344, 0.021484375, 0.0215148925781, 0.0204162597656, 0.0203857421875, 0.0202331542969, 0.0188598632812, 0.0176391601562, 0.01611328125, 0.0151672363281, 0.0153503417969, 0.0143737792969, 0.0134582519531, 0.0144653320312, 0.0148620605469, 0.0130004882812, 0.01171875, 0.01318359375, 0.0144653320312, 0.0150756835938, 0.0162963867188, 0.0151062011719, 0.0128173828125, 0.0132141113281, 0.0135192871094, 0.0121765136719, 0.0115966796875, 0.0118713378906, 0.0118713378906, 0.0116577148438, 0.0107421875, 0.00845336914062, 0.00640869140625, 0.00625610351562, 0.0062255859375, 0.00527954101562, 0.00393676757812, 0.00186157226562, 3.0517578125e-05, -0.000244140625, 0.000762939453125, 0.0028076171875, 0.00390625, 0.00241088867188, 0.0, -0.00186157226562, -0.0035400390625, -0.00473022460938, -0.0035400390625, -0.00186157226562, -0.002685546875, -0.00277709960938, -0.0010986328125, -0.00091552734375, -0.000946044921875, 3.0517578125e-05, 0.00115966796875, 0.00265502929688, 0.00350952148438, 0.0028076171875, 0.00100708007812, -0.000823974609375, -0.0013427734375, -0.00106811523438, -0.0003662109375, 0.000885009765625, 0.00198364257812, 0.00149536132812, 0.000244140625, 0.0008544921875, 0.00180053710938, 0.00103759765625, 0.000885009765625, 0.00112915039062, 0.000274658203125, -0.000823974609375\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_mono_16bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_mono_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_mono_16bit_44100.h}
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_mono_16bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_44100::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_mono_16bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_44100::numChannels} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< double > {\b wav_mono_16bit_44100::testBuffer} = \{-3.0517578125e-05, -0.0001220703125, -0.001251220703125, -0.002655029296875, -0.003082275390625, 0.00384521484375, 0.02276611328125, 0.032806396484375, 0.02392578125, -0.006927490234375, -0.044647216796875, -0.03363037109375, 0.013580322265625, 0.030853271484375, 0.017547607421875, 0.00823974609375, 0.004669189453125, -0.00555419921875, -0.0089111328125, -0.014495849609375, -0.01409912109375, -0.04644775390625, -0.087615966796875, -0.070159912109375, -0.066192626953125, -0.03851318359375, 0.079010009765625, -0.015350341796875, 0.08154296875, 0.04486083984375, 0.1390380859375, 0.130859375, 0.13897705078125, 0.170257568359375, 0.177337646484375, 0.200958251953125, 0.1513671875, 0.172027587890625, 0.06463623046875, 0.018524169921875, -0.0003662109375, -0.040283203125, 0.0504150390625, 0.1331787109375, -0.0211181640625, 0.0137939453125, -0.061004638671875, 0.03656005859375, 0.14935302734375, -0.0780029296875, -0.030181884765625, -0.13665771484375, 0.083526611328125, 0.14727783203125, 0.075286865234375, 0.043701171875, 0.04949951171875, 0.259674072265625, 0.239288330078125, 0.32977294921875, 0.241302490234375, 0.261627197265625, 0.145355224609375, 0.16058349609375, 0.23248291015625, 0.09307861328125, 0.117095947265625, 0.01812744140625, 0.08355712890625, 0.208099365234375, 0.23675537109375, 0.148284912109375, 0.197235107421875, 0.167083740234375, 0.1513671875, 0.0177001953125, -0.095672607421875, 0.00750732421875, -0.12213134765625, 0.01165771484375, 0.134368896484375, 0.1112060546875, 0.019775390625, 0.019287109375, 0.140533447265625, 0.315887451171875, 0.263671875, 0.111663818359375, 0.12506103515625, 0.083709716796875, 0.076751708984375, -0.1580810546875, -0.16351318359375, -0.114227294921875, -0.08740234375, 0.03411865234375, 0.100738525390625, 0.043792724609375, 0.1314697265625, 0.170318603515625, 0.1011962890625, 0.285430908203125, 0.0733642578125, 0.17108154296875, 0.169342041015625, 0.201751708984375, 0.209381103515625, -0.068695068359375, -0.00189208984375, -0.048553466796875, -0.002410888671875, -0.113494873046875, -0.08819580078125, -0.159271240234375, -0.11395263671875, -0.0447998046875, -0.076934814453125, 0.038970947265625, -0.08612060546875, -0.12738037109375, -0.132049560546875, -0.071685791015625, -0.06298828125, 0.072174072265625, 0.043243408203125, 0.007568359375, -0.112457275390625, -0.235748291015625, -0.246368408203125, -0.339935302734375, -0.268218994140625, -0.31976318359375, -0.125457763671875, -0.166229248046875, -0.169342041015625, -0.165557861328125, -0.165771484375, -0.108154296875, -0.197784423828125, -0.05487060546875, -0.187103271484375, -0.0615234375, -0.077484130859375, -0.140899658203125, -0.017364501953125, -0.040069580078125, 0.063690185546875, 0.06719970703125, 0.06475830078125, 0.032562255859375, 0.03277587890625, -0.020660400390625, -0.0535888671875, -0.097900390625, -0.1622314453125, -0.149749755859375, -0.14080810546875, -0.1466064453125, -0.172393798828125, -0.20135498046875, -0.15380859375, -0.077911376953125, -0.14532470703125, -0.114990234375, -0.110107421875, -0.087249755859375, -0.079376220703125, -0.099761962890625, -0.044403076171875, -0.052398681640625, -0.05029296875, -0.087615966796875, -0.118804931640625, -0.11163330078125, -0.091033935546875, -0.074859619140625, -0.058197021484375, -0.12762451171875, -0.08990478515625, -0.052398681640625, -0.050567626953125, -0.067047119140625, -0.115203857421875, -0.04034423828125, -0.054412841796875, 0.00579833984375, 0.04461669921875, 0.1109619140625, 0.163970947265625, 0.249969482421875, 0.233154296875, 0.126220703125, 0.254669189453125, 0.20391845703125, 0.18463134765625, 0.14215087890625, 0.053375244140625, 0.025787353515625, 0.011260986328125, -0.00982666015625, -0.040985107421875, -0.039093017578125, -0.04107666015625, 0.0111083984375, -0.042633056640625, 0.018280029296875, -0.01263427734375, -0.032440185546875, 0.087493896484375, 0.089385986328125, 0.0784912109375, 0.095489501953125, 0.125396728515625, 0.07867431640625, 0.109405517578125, 0.113433837890625, 0.100341796875, 0.098480224609375, 0.13330078125, 0.127777099609375, 0.0899658203125, 0.091033935546875, -0.0078125, 0.000946044921875, -0.027252197265625, -0.080718994140625, -0.082244873046875, -0.039581298828125, 0.011260986328125, -0.0389404296875, -0.069580078125, -0.035614013671875, 0.00152587890625, 0.039520263671875, 0.08514404296875, 0.023284912109375, 0.035247802734375, 0.055084228515625, 0.064361572265625, 0.10723876953125, 0.067230224609375, 0.121002197265625, 0.124298095703125, 0.124237060546875, 0.168914794921875, 0.125244140625, 0.145721435546875, 0.1474609375, 0.110626220703125, 0.08642578125, 0.05352783203125, 0.090911865234375, 0.1287841796875, 0.094451904296875, 0.071075439453125, 0.073577880859375, 0.036285400390625, 0.031402587890625, 0.025360107421875, 0.029571533203125, -0.00909423828125, -0.032989501953125, -0.02886962890625, -0.080413818359375, -0.02471923828125, -0.0498046875, -0.069122314453125, -0.06512451171875, -0.054931640625, -0.085296630859375, -0.101531982421875, -0.0321044921875, -0.068634033203125, -0.040435791015625, -0.1119384765625, -0.07354736328125, -0.0289306640625, -0.00732421875, -0.004608154296875, -0.037261962890625, 0.025726318359375, -0.076171875, -0.030426025390625, -0.03961181640625, 0.0057373046875, -0.006256103515625, -0.04412841796875, 0.003082275390625, -0.1204833984375, -0.090789794921875, -0.074981689453125, -0.063934326171875, -0.10467529296875, -0.133026123046875, -0.1632080078125, -0.13623046875, -0.151519775390625, -0.208465576171875, -0.132965087890625, -0.143890380859375, -0.152862548828125, -0.16778564453125, -0.08392333984375, -0.1307373046875, -0.16351318359375, -0.1253662109375, -0.1890869140625, -0.19110107421875, -0.175323486328125, -0.10791015625, -0.107330322265625, -0.127532958984375, -0.08636474609375, -0.115692138671875, -0.12982177734375, -0.10577392578125, -0.16046142578125, -0.080841064453125, -0.1798095703125, -0.21697998046875, -0.139892578125, -0.14263916015625, -0.10260009765625, -0.204376220703125, -0.10614013671875, -0.15338134765625, -0.106536865234375, -0.061859130859375, -0.020843505859375, 0.046478271484375, 0.009552001953125, 0.153717041015625, 0.0352783203125, 0.136566162109375, 0.116912841796875, 0.128326416015625, 0.154541015625, 0.01678466796875, 0.0965576171875, 0.057830810546875, 0.154266357421875, 0.115325927734375, 0.07916259765625, 0.126068115234375, 0.06011962890625, 0.051483154296875, 0.06878662109375, 0.047393798828125, 0.059906005859375, -0.018707275390625, -0.022064208984375, 0.0264892578125, -0.020355224609375, 0.04156494140625, -0.001739501953125, 0.0784912109375, 0.01312255859375, 0.0772705078125, 0.13177490234375, 0.009033203125, 0.064544677734375, -0.021148681640625, 0.04193115234375, 0.0037841796875, -0.0091552734375, 0.03631591796875, 0.061859130859375, 0.071258544921875, 0.010162353515625, 0.026885986328125, 0.042266845703125, 0.01922607421875, -0.022613525390625, 0.0460205078125, 0.031341552734375, 0.033538818359375, 0.014251708984375, 0.01312255859375, 0.010284423828125, 0.00469970703125, -0.01556396484375, 0.062286376953125, 0.085968017578125, 0.09210205078125, 0.201751708984375, 0.007476806640625, 0.08587646484375, 0.015777587890625, 0.0203857421875, 0.106353759765625, -0.019561767578125, 0.097381591796875, 0.09967041015625, 0.057342529296875, 0.000701904296875, 0.041290283203125, 0.02935791015625, 0.126434326171875, 0.05072021484375, 0.079559326171875, 0.16424560546875, 0.085968017578125, 0.180694580078125, 0.13385009765625, 0.1304931640625, 0.02130126953125, 0.134429931640625, 0.046234130859375, -0.004425048828125, 0.01910400390625, -0.038604736328125, 0.040802001953125, -0.093536376953125, -0.070404052734375, -0.09259033203125, -0.01220703125, -0.063751220703125, -0.0347900390625, 0.033111572265625, 0.01263427734375, 0.02178955078125, -0.035491943359375, 0.066558837890625, 0.004791259765625, 0.02777099609375, 0.014129638671875, -0.073516845703125, -0.098846435546875, -0.0360107421875, -0.0831298828125, -0.09454345703125, -0.12896728515625, -0.15985107421875, -0.059417724609375, -0.185394287109375, -0.12420654296875, -0.19830322265625, -0.125274658203125, -0.12945556640625, -0.2213134765625, -0.095977783203125, -0.159637451171875, -0.096466064453125, -0.13299560546875, -0.119171142578125, -0.088775634765625, -0.08599853515625, -0.1082763671875, -0.08697509765625, -0.0390625, -0.108489990234375, -0.06884765625, -0.076690673828125, -0.10101318359375, -0.116058349609375, -0.097747802734375, -0.0970458984375, -0.16552734375, -0.170654296875, -0.123992919921875, -0.179107666015625, -0.132415771484375, -0.12921142578125, -0.126708984375, -0.052337646484375, -0.12774658203125, -0.05712890625, -0.055755615234375, -0.043853759765625, -0.05029296875, -0.04345703125, -0.010162353515625, -0.05126953125, -0.0245361328125, -0.05657958984375, -0.01922607421875, -0.0189208984375, 0.00103759765625, 0.001068115234375, -0.010498046875, 0.02166748046875, 0.03521728515625, 0.021820068359375, -0.000579833984375, -0.051055908203125, -0.098114013671875, -0.046630859375, -0.090850830078125, -0.047882080078125, -0.052764892578125, -0.1024169921875, -0.06805419921875, -0.05572509765625, -0.0196533203125, 0.0538330078125, 0.051605224609375, -0.02459716796875, -0.003875732421875, -0.027984619140625, 0.0260009765625\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_mono_16bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_mono_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_mono_16bit_44100.h}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_mono_16bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 1;\par
9 \par
10 std::vector<double> testBuffer = \{-3.0517578125e-05, -0.0001220703125, -0.001251220703125, -0.002655029296875, -0.003082275390625, 0.00384521484375, 0.02276611328125, 0.032806396484375, 0.02392578125, -0.006927490234375, -0.044647216796875, -0.03363037109375, 0.013580322265625, 0.030853271484375, 0.017547607421875, 0.00823974609375, 0.004669189453125, -0.00555419921875, -0.0089111328125, -0.014495849609375, -0.01409912109375, -0.04644775390625, -0.087615966796875, -0.070159912109375, -0.066192626953125, -0.03851318359375, 0.079010009765625, -0.015350341796875, 0.08154296875, 0.04486083984375, 0.1390380859375, 0.130859375, 0.13897705078125, 0.170257568359375, 0.177337646484375, 0.200958251953125, 0.1513671875, 0.172027587890625, 0.06463623046875, 0.018524169921875, -0.0003662109375, -0.040283203125, 0.0504150390625, 0.1331787109375, -0.0211181640625, 0.0137939453125, -0.061004638671875, 0.03656005859375, 0.14935302734375, -0.0780029296875, -0.030181884765625, -0.13665771484375, 0.083526611328125, 0.14727783203125, 0.075286865234375, 0.043701171875, 0.04949951171875, 0.259674072265625, 0.239288330078125, 0.32977294921875, 0.241302490234375, 0.261627197265625, 0.145355224609375, 0.16058349609375, 0.23248291015625, 0.09307861328125, 0.117095947265625, 0.01812744140625, 0.08355712890625, 0.208099365234375, 0.23675537109375, 0.148284912109375, 0.197235107421875, 0.167083740234375, 0.1513671875, 0.0177001953125, -0.095672607421875, 0.00750732421875, -0.12213134765625, 0.01165771484375, 0.134368896484375, 0.1112060546875, 0.019775390625, 0.019287109375, 0.140533447265625, 0.315887451171875, 0.263671875, 0.111663818359375, 0.12506103515625, 0.083709716796875, 0.076751708984375, -0.1580810546875, -0.16351318359375, -0.114227294921875, -0.08740234375, 0.03411865234375, 0.100738525390625, 0.043792724609375, 0.1314697265625, 0.170318603515625, 0.1011962890625, 0.285430908203125, 0.0733642578125, 0.17108154296875, 0.169342041015625, 0.201751708984375, 0.209381103515625, -0.068695068359375, -0.00189208984375, -0.048553466796875, -0.002410888671875, -0.113494873046875, -0.08819580078125, -0.159271240234375, -0.11395263671875, -0.0447998046875, -0.076934814453125, 0.038970947265625, -0.08612060546875, -0.12738037109375, -0.132049560546875, -0.071685791015625, -0.06298828125, 0.072174072265625, 0.043243408203125, 0.007568359375, -0.112457275390625, -0.235748291015625, -0.246368408203125, -0.339935302734375, -0.268218994140625, -0.31976318359375, -0.125457763671875, -0.166229248046875, -0.169342041015625, -0.165557861328125, -0.165771484375, -0.108154296875, -0.197784423828125, -0.05487060546875, -0.187103271484375, -0.0615234375, -0.077484130859375, -0.140899658203125, -0.017364501953125, -0.040069580078125, 0.063690185546875, 0.06719970703125, 0.06475830078125, 0.032562255859375, 0.03277587890625, -0.020660400390625, -0.0535888671875, -0.097900390625, -0.1622314453125, -0.149749755859375, -0.14080810546875, -0.1466064453125, -0.172393798828125, -0.20135498046875, -0.15380859375, -0.077911376953125, -0.14532470703125, -0.114990234375, -0.110107421875, -0.087249755859375, -0.079376220703125, -0.099761962890625, -0.044403076171875, -0.052398681640625, -0.05029296875, -0.087615966796875, -0.118804931640625, -0.11163330078125, -0.091033935546875, -0.074859619140625, -0.058197021484375, -0.12762451171875, -0.08990478515625, -0.052398681640625, -0.050567626953125, -0.067047119140625, -0.115203857421875, -0.04034423828125, -0.054412841796875, 0.00579833984375, 0.04461669921875, 0.1109619140625, 0.163970947265625, 0.249969482421875, 0.233154296875, 0.126220703125, 0.254669189453125, 0.20391845703125, 0.18463134765625, 0.14215087890625, 0.053375244140625, 0.025787353515625, 0.011260986328125, -0.00982666015625, -0.040985107421875, -0.039093017578125, -0.04107666015625, 0.0111083984375, -0.042633056640625, 0.018280029296875, -0.01263427734375, -0.032440185546875, 0.087493896484375, 0.089385986328125, 0.0784912109375, 0.095489501953125, 0.125396728515625, 0.07867431640625, 0.109405517578125, 0.113433837890625, 0.100341796875, 0.098480224609375, 0.13330078125, 0.127777099609375, 0.0899658203125, 0.091033935546875, -0.0078125, 0.000946044921875, -0.027252197265625, -0.080718994140625, -0.082244873046875, -0.039581298828125, 0.011260986328125, -0.0389404296875, -0.069580078125, -0.035614013671875, 0.00152587890625, 0.039520263671875, 0.08514404296875, 0.023284912109375, 0.035247802734375, 0.055084228515625, 0.064361572265625, 0.10723876953125, 0.067230224609375, 0.121002197265625, 0.124298095703125, 0.124237060546875, 0.168914794921875, 0.125244140625, 0.145721435546875, 0.1474609375, 0.110626220703125, 0.08642578125, 0.05352783203125, 0.090911865234375, 0.1287841796875, 0.094451904296875, 0.071075439453125, 0.073577880859375, 0.036285400390625, 0.031402587890625, 0.025360107421875, 0.029571533203125, -0.00909423828125, -0.032989501953125, -0.02886962890625, -0.080413818359375, -0.02471923828125, -0.0498046875, -0.069122314453125, -0.06512451171875, -0.054931640625, -0.085296630859375, -0.101531982421875, -0.0321044921875, -0.068634033203125, -0.040435791015625, -0.1119384765625, -0.07354736328125, -0.0289306640625, -0.00732421875, -0.004608154296875, -0.037261962890625, 0.025726318359375, -0.076171875, -0.030426025390625, -0.03961181640625, 0.0057373046875, -0.006256103515625, -0.04412841796875, 0.003082275390625, -0.1204833984375, -0.090789794921875, -0.074981689453125, -0.063934326171875, -0.10467529296875, -0.133026123046875, -0.1632080078125, -0.13623046875, -0.151519775390625, -0.208465576171875, -0.132965087890625, -0.143890380859375, -0.152862548828125, -0.16778564453125, -0.08392333984375, -0.1307373046875, -0.16351318359375, -0.1253662109375, -0.1890869140625, -0.19110107421875, -0.175323486328125, -0.10791015625, -0.107330322265625, -0.127532958984375, -0.08636474609375, -0.115692138671875, -0.12982177734375, -0.10577392578125, -0.16046142578125, -0.080841064453125, -0.1798095703125, -0.21697998046875, -0.139892578125, -0.14263916015625, -0.10260009765625, -0.204376220703125, -0.10614013671875, -0.15338134765625, -0.106536865234375, -0.061859130859375, -0.020843505859375, 0.046478271484375, 0.009552001953125, 0.153717041015625, 0.0352783203125, 0.136566162109375, 0.116912841796875, 0.128326416015625, 0.154541015625, 0.01678466796875, 0.0965576171875, 0.057830810546875, 0.154266357421875, 0.115325927734375, 0.07916259765625, 0.126068115234375, 0.06011962890625, 0.051483154296875, 0.06878662109375, 0.047393798828125, 0.059906005859375, -0.018707275390625, -0.022064208984375, 0.0264892578125, -0.020355224609375, 0.04156494140625, -0.001739501953125, 0.0784912109375, 0.01312255859375, 0.0772705078125, 0.13177490234375, 0.009033203125, 0.064544677734375, -0.021148681640625, 0.04193115234375, 0.0037841796875, -0.0091552734375, 0.03631591796875, 0.061859130859375, 0.071258544921875, 0.010162353515625, 0.026885986328125, 0.042266845703125, 0.01922607421875, -0.022613525390625, 0.0460205078125, 0.031341552734375, 0.033538818359375, 0.014251708984375, 0.01312255859375, 0.010284423828125, 0.00469970703125, -0.01556396484375, 0.062286376953125, 0.085968017578125, 0.09210205078125, 0.201751708984375, 0.007476806640625, 0.08587646484375, 0.015777587890625, 0.0203857421875, 0.106353759765625, -0.019561767578125, 0.097381591796875, 0.09967041015625, 0.057342529296875, 0.000701904296875, 0.041290283203125, 0.02935791015625, 0.126434326171875, 0.05072021484375, 0.079559326171875, 0.16424560546875, 0.085968017578125, 0.180694580078125, 0.13385009765625, 0.1304931640625, 0.02130126953125, 0.134429931640625, 0.046234130859375, -0.004425048828125, 0.01910400390625, -0.038604736328125, 0.040802001953125, -0.093536376953125, -0.070404052734375, -0.09259033203125, -0.01220703125, -0.063751220703125, -0.0347900390625, 0.033111572265625, 0.01263427734375, 0.02178955078125, -0.035491943359375, 0.066558837890625, 0.004791259765625, 0.02777099609375, 0.014129638671875, -0.073516845703125, -0.098846435546875, -0.0360107421875, -0.0831298828125, -0.09454345703125, -0.12896728515625, -0.15985107421875, -0.059417724609375, -0.185394287109375, -0.12420654296875, -0.19830322265625, -0.125274658203125, -0.12945556640625, -0.2213134765625, -0.095977783203125, -0.159637451171875, -0.096466064453125, -0.13299560546875, -0.119171142578125, -0.088775634765625, -0.08599853515625, -0.1082763671875, -0.08697509765625, -0.0390625, -0.108489990234375, -0.06884765625, -0.076690673828125, -0.10101318359375, -0.116058349609375, -0.097747802734375, -0.0970458984375, -0.16552734375, -0.170654296875, -0.123992919921875, -0.179107666015625, -0.132415771484375, -0.12921142578125, -0.126708984375, -0.052337646484375, -0.12774658203125, -0.05712890625, -0.055755615234375, -0.043853759765625, -0.05029296875, -0.04345703125, -0.010162353515625, -0.05126953125, -0.0245361328125, -0.05657958984375, -0.01922607421875, -0.0189208984375, 0.00103759765625, 0.001068115234375, -0.010498046875, 0.02166748046875, 0.03521728515625, 0.021820068359375, -0.000579833984375, -0.051055908203125, -0.098114013671875, -0.046630859375, -0.090850830078125, -0.047882080078125, -0.052764892578125, -0.1024169921875, -0.06805419921875, -0.05572509765625, -0.0196533203125, 0.0538330078125, 0.051605224609375, -0.02459716796875, -0.003875732421875, -0.027984619140625, 0.0260009765625\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_mono_16bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_mono_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_mono_16bit_48000.h}
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_mono_16bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_48000::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_mono_16bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_mono_16bit_48000::numChannels} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< double > {\b wav_mono_16bit_48000::testBuffer} = \{0.0177001953125, 0.003509521484375, -0.01373291015625, 0.01617431640625, 0.0201416015625, -0.03125, -0.07720947265625, 0.00177001953125, 0.021759033203125, -0.09649658203125, -0.01483154296875, 0.02691650390625, -0.03948974609375, -0.021728515625, -0.11358642578125, -0.109344482421875, -0.012664794921875, 0.000244140625, -0.035552978515625, -0.044647216796875, 0.0345458984375, -0.050140380859375, -0.052947998046875, 0.04705810546875, 0.06439208984375, 0.20098876953125, 0.1834716796875, 0.118438720703125, 0.127838134765625, 0.078704833984375, 0.0621337890625, 0.064178466796875, 0.1717529296875, 0.16400146484375, 0.032257080078125, -0.095550537109375, -0.201629638671875, -0.08441162109375, -0.009063720703125, -0.030792236328125, -0.04974365234375, -0.107269287109375, -0.1378173828125, -0.22943115234375, -0.220977783203125, -0.056884765625, 0.090606689453125, 0.14532470703125, 0.176605224609375, 0.151885986328125, -0.004058837890625, 0.02093505859375, 0.098541259765625, 0.046630859375, 0.0382080078125, 0.068389892578125, 0.165924072265625, 0.112762451171875, 0.13385009765625, 0.354095458984375, 0.310577392578125, 0.154510498046875, -0.049560546875, -0.14569091796875, -0.0330810546875, -0.027008056640625, 0.02398681640625, 0.038421630859375, 0.0145263671875, 0.072357177734375, 0.01226806640625, -0.04656982421875, -0.083831787109375, -0.100921630859375, -0.037078857421875, -0.013153076171875, -0.09112548828125, -0.115753173828125, 0.033416748046875, 0.091033935546875, 0.021514892578125, -0.07977294921875, -0.193359375, -0.134796142578125, -0.052398681640625, -0.096649169921875, -0.150726318359375, -0.145751953125, -0.034820556640625, 0.01708984375, -0.11181640625, -0.23297119140625, -0.234130859375, -0.10552978515625, -0.006805419921875, -0.058502197265625, -0.151763916015625, -0.157928466796875, 0.041595458984375, 0.064300537109375, -0.1041259765625, 0.07110595703125, 0.2601318359375, 0.109344482421875, -0.192413330078125, -0.324188232421875, -0.21563720703125, -0.094482421875, -0.000701904296875, -0.032012939453125, -0.01324462890625, 0.015472412109375, -0.1949462890625, -0.19189453125, -0.01409912109375, 0.091461181640625, 0.147796630859375, 0.100982666015625, 0.214202880859375, 0.206634521484375, -0.046356201171875, -0.13409423828125, -0.12939453125, -0.06060791015625, -0.05914306640625, -0.022369384765625, 0.16217041015625, 0.09503173828125, -0.009918212890625, 0.02069091796875, 0.139862060546875, 0.32208251953125, 0.30682373046875, 0.13201904296875, -0.1802978515625, -0.2109375, 0.2222900390625, 0.429168701171875, 0.340484619140625, 0.22589111328125, 0.08831787109375, -0.016448974609375, -0.06585693359375, -0.123382568359375, -0.15350341796875, 0.03057861328125, 0.248626708984375, 0.25494384765625, 0.2288818359375, 0.209930419921875, 0.033203125, -0.201904296875, -0.179534912109375, 0.0074462890625, 0.081817626953125, 0.155242919921875, 0.162811279296875, 0.08917236328125, 0.02777099609375, -0.054046630859375, 0.027740478515625, 0.048431396484375, -0.06085205078125, 0.002166748046875, 0.033782958984375, -0.0426025390625, -0.125335693359375, -0.0592041015625, 0.14520263671875, 0.062835693359375, -0.087738037109375, 0.0467529296875, 0.18975830078125, 0.304962158203125, 0.2059326171875, -0.258514404296875, -0.469390869140625, -0.3907470703125, -0.424407958984375, -0.448394775390625, -0.29132080078125, -0.07977294921875, 0.06341552734375, 0.1956787109375, 0.1392822265625, 0.054229736328125, 0.05419921875, -0.101531982421875, -0.180206298828125, -0.301300048828125, -0.444488525390625, -0.3128662109375, -0.1505126953125, -0.0086669921875, 0.10284423828125, 0.007293701171875, -0.270599365234375, -0.329437255859375, -0.1015625, 0.014739990234375, 0.1168212890625, 0.183380126953125, -0.06170654296875, -0.392120361328125, -0.29052734375, 0.177032470703125, 0.442352294921875, 0.494171142578125, 0.221710205078125, -0.4381103515625, -0.811370849609375, -0.74688720703125, -0.5858154296875, -0.41314697265625, -0.187713623046875, -0.120635986328125, -0.321563720703125, -0.226409912109375, 0.222442626953125, 0.48468017578125, 0.592803955078125, 0.578094482421875, 0.206817626953125, -0.21771240234375, -0.277130126953125, -0.157623291015625, -0.12664794921875, -0.15045166015625, -0.1463623046875, -0.149810791015625, -0.12579345703125, 0.004791259765625, 0.157470703125, 0.27960205078125, 0.3077392578125, 0.22271728515625, 0.21905517578125, 0.341583251953125, 0.361053466796875, 0.287689208984375, 0.298126220703125, 0.329925537109375, 0.331024169921875, 0.235626220703125, 0.114227294921875, 0.17572021484375, 0.170989990234375, -0.060577392578125, -0.2164306640625, -0.295440673828125, -0.233551025390625, 0.1085205078125, 0.2120361328125, 0.00384521484375, -0.070343017578125, -0.096221923828125, -0.103759765625, 0.0655517578125, 0.18218994140625, 0.03778076171875, -0.053924560546875, -0.116119384765625, -0.258453369140625, -0.034820556640625, 0.249664306640625, 0.247955322265625, 0.33013916015625, 0.4422607421875, 0.442291259765625, 0.407135009765625, 0.386993408203125, 0.45220947265625, 0.527740478515625, 0.545745849609375, 0.428497314453125, 0.128662109375, -0.055877685546875, -0.028594970703125, -0.0426025390625, -0.076141357421875, -0.02142333984375, 0.050384521484375, 0.05133056640625, -0.001495361328125, -0.032684326171875, -0.05157470703125, -0.084686279296875, -0.091339111328125, -0.205780029296875, -0.436737060546875, -0.518096923828125, -0.445220947265625, -0.262725830078125, -0.109161376953125, -0.013702392578125, 0.119354248046875, -0.044769287109375, -0.169158935546875, 0.030426025390625, 0.128173828125, 0.2552490234375, 0.337310791015625, 0.29351806640625, 0.191925048828125, -0.023223876953125, 0.017791748046875, 0.079498291015625, -0.211181640625, -0.438568115234375, -0.518524169921875, -0.664703369140625, -0.551300048828125, -0.142242431640625, -0.050689697265625, -0.283935546875, -0.484405517578125, -0.529541015625, -0.469970703125, -0.37457275390625, -0.168609619140625, -0.264984130859375, -0.591033935546875, -0.62158203125, -0.727752685546875, -0.85272216796875, -0.608245849609375, -0.332000732421875, -0.2779541015625, -0.322967529296875, -0.325592041015625, -0.243927001953125, -0.014495849609375, 0.252777099609375, 0.35235595703125, 0.355499267578125, 0.442352294921875, 0.51495361328125, 0.32513427734375, 0.11834716796875, 0.128387451171875, 0.227996826171875, 0.365753173828125, 0.34832763671875, 0.265380859375, 0.377716064453125, 0.579803466796875, 0.680389404296875, 0.633392333984375, 0.482757568359375, 0.143218994140625, -0.0994873046875, -0.1571044921875, -0.160400390625, 0.14752197265625, 0.328399658203125, 0.34173583984375, 0.50335693359375, 0.517486572265625, 0.29034423828125, -0.11956787109375, -0.08306884765625, 0.224365234375, 0.1968994140625, 0.1746826171875, 0.032440185546875, -0.0792236328125, -0.121307373046875, -0.250396728515625, -0.2518310546875, -0.2427978515625, -0.14068603515625, -0.0711669921875, -0.08074951171875, -0.1668701171875, -0.2625732421875, -0.227630615234375, -0.364288330078125, -0.3048095703125, -0.073760986328125, -0.084625244140625, -0.09783935546875, -0.06524658203125, -0.037322998046875, -0.052764892578125, -0.0020751953125, 0.1044921875, 0.11383056640625, -0.0050048828125, -0.13726806640625, -0.060791015625, 0.102020263671875, 0.174163818359375, 0.0224609375, -0.06365966796875, 0.040069580078125, 0.036224365234375, 0.10809326171875, 0.25335693359375, 0.397552490234375, 0.319793701171875, 0.04486083984375, -0.00787353515625, -0.0826416015625, -0.0626220703125, 0.06475830078125, 0.132720947265625, 0.315338134765625, 0.348236083984375, 0.31103515625, 0.206939697265625, 0.02978515625, 0.090789794921875, 0.126129150390625, 0.11895751953125, 0.151031494140625, 0.134246826171875, 0.064666748046875, -0.159576416015625, -0.248260498046875, -0.130096435546875, -0.128997802734375, -0.0440673828125, 0.29901123046875, 0.400848388671875, 0.212158203125, 0.164154052734375, 0.1925048828125, 0.204833984375, 0.1300048828125, 0.062042236328125, 0.0621337890625, -0.005645751953125, 0.132110595703125, 0.30535888671875, 0.342926025390625, 0.3685302734375, 0.19403076171875, 0.014495849609375, -0.05145263671875, -0.026153564453125, 0.110809326171875, 0.175689697265625, 0.14898681640625, 0.099853515625, 0.160797119140625, 0.28460693359375, 0.21795654296875, 0.096435546875, 0.131011962890625, 0.139617919921875, 0.1119384765625, 0.140167236328125, 0.063446044921875, -0.051788330078125, -0.066497802734375, 0.053070068359375, 0.16845703125, 0.178131103515625, 0.2095947265625, 0.20892333984375, 0.1214599609375, -0.0062255859375, 0.02252197265625, 0.169281005859375, 0.146575927734375, 0.116607666015625, 0.17706298828125, 0.263519287109375, 0.167572021484375, -0.074493408203125, -0.002838134765625, 0.178253173828125, 0.18597412109375, 0.158233642578125, 0.1856689453125, 0.194671630859375, 0.05572509765625, 0.025421142578125, 0.125823974609375, 0.096099853515625, 0.094635009765625, 0.1485595703125, 0.17242431640625, 0.22265625, 0.100067138671875, -0.07476806640625, -0.045166015625, -0.031402587890625, 0.003570556640625, 0.085357666015625, 0.031341552734375, -0.04022216796875, -0.052459716796875, -0.01885986328125, 0.015228271484375, -0.012725830078125, -0.11968994140625, -0.247406005859375, -0.270721435546875, -0.24151611328125\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_mono_16bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_mono_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_mono_16bit_48000.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_mono_16bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 1;\par
9 \par
10 std::vector<double> testBuffer = \{0.0177001953125, 0.003509521484375, -0.01373291015625, 0.01617431640625, 0.0201416015625, -0.03125, -0.07720947265625, 0.00177001953125, 0.021759033203125, -0.09649658203125, -0.01483154296875, 0.02691650390625, -0.03948974609375, -0.021728515625, -0.11358642578125, -0.109344482421875, -0.012664794921875, 0.000244140625, -0.035552978515625, -0.044647216796875, 0.0345458984375, -0.050140380859375, -0.052947998046875, 0.04705810546875, 0.06439208984375, 0.20098876953125, 0.1834716796875, 0.118438720703125, 0.127838134765625, 0.078704833984375, 0.0621337890625, 0.064178466796875, 0.1717529296875, 0.16400146484375, 0.032257080078125, -0.095550537109375, -0.201629638671875, -0.08441162109375, -0.009063720703125, -0.030792236328125, -0.04974365234375, -0.107269287109375, -0.1378173828125, -0.22943115234375, -0.220977783203125, -0.056884765625, 0.090606689453125, 0.14532470703125, 0.176605224609375, 0.151885986328125, -0.004058837890625, 0.02093505859375, 0.098541259765625, 0.046630859375, 0.0382080078125, 0.068389892578125, 0.165924072265625, 0.112762451171875, 0.13385009765625, 0.354095458984375, 0.310577392578125, 0.154510498046875, -0.049560546875, -0.14569091796875, -0.0330810546875, -0.027008056640625, 0.02398681640625, 0.038421630859375, 0.0145263671875, 0.072357177734375, 0.01226806640625, -0.04656982421875, -0.083831787109375, -0.100921630859375, -0.037078857421875, -0.013153076171875, -0.09112548828125, -0.115753173828125, 0.033416748046875, 0.091033935546875, 0.021514892578125, -0.07977294921875, -0.193359375, -0.134796142578125, -0.052398681640625, -0.096649169921875, -0.150726318359375, -0.145751953125, -0.034820556640625, 0.01708984375, -0.11181640625, -0.23297119140625, -0.234130859375, -0.10552978515625, -0.006805419921875, -0.058502197265625, -0.151763916015625, -0.157928466796875, 0.041595458984375, 0.064300537109375, -0.1041259765625, 0.07110595703125, 0.2601318359375, 0.109344482421875, -0.192413330078125, -0.324188232421875, -0.21563720703125, -0.094482421875, -0.000701904296875, -0.032012939453125, -0.01324462890625, 0.015472412109375, -0.1949462890625, -0.19189453125, -0.01409912109375, 0.091461181640625, 0.147796630859375, 0.100982666015625, 0.214202880859375, 0.206634521484375, -0.046356201171875, -0.13409423828125, -0.12939453125, -0.06060791015625, -0.05914306640625, -0.022369384765625, 0.16217041015625, 0.09503173828125, -0.009918212890625, 0.02069091796875, 0.139862060546875, 0.32208251953125, 0.30682373046875, 0.13201904296875, -0.1802978515625, -0.2109375, 0.2222900390625, 0.429168701171875, 0.340484619140625, 0.22589111328125, 0.08831787109375, -0.016448974609375, -0.06585693359375, -0.123382568359375, -0.15350341796875, 0.03057861328125, 0.248626708984375, 0.25494384765625, 0.2288818359375, 0.209930419921875, 0.033203125, -0.201904296875, -0.179534912109375, 0.0074462890625, 0.081817626953125, 0.155242919921875, 0.162811279296875, 0.08917236328125, 0.02777099609375, -0.054046630859375, 0.027740478515625, 0.048431396484375, -0.06085205078125, 0.002166748046875, 0.033782958984375, -0.0426025390625, -0.125335693359375, -0.0592041015625, 0.14520263671875, 0.062835693359375, -0.087738037109375, 0.0467529296875, 0.18975830078125, 0.304962158203125, 0.2059326171875, -0.258514404296875, -0.469390869140625, -0.3907470703125, -0.424407958984375, -0.448394775390625, -0.29132080078125, -0.07977294921875, 0.06341552734375, 0.1956787109375, 0.1392822265625, 0.054229736328125, 0.05419921875, -0.101531982421875, -0.180206298828125, -0.301300048828125, -0.444488525390625, -0.3128662109375, -0.1505126953125, -0.0086669921875, 0.10284423828125, 0.007293701171875, -0.270599365234375, -0.329437255859375, -0.1015625, 0.014739990234375, 0.1168212890625, 0.183380126953125, -0.06170654296875, -0.392120361328125, -0.29052734375, 0.177032470703125, 0.442352294921875, 0.494171142578125, 0.221710205078125, -0.4381103515625, -0.811370849609375, -0.74688720703125, -0.5858154296875, -0.41314697265625, -0.187713623046875, -0.120635986328125, -0.321563720703125, -0.226409912109375, 0.222442626953125, 0.48468017578125, 0.592803955078125, 0.578094482421875, 0.206817626953125, -0.21771240234375, -0.277130126953125, -0.157623291015625, -0.12664794921875, -0.15045166015625, -0.1463623046875, -0.149810791015625, -0.12579345703125, 0.004791259765625, 0.157470703125, 0.27960205078125, 0.3077392578125, 0.22271728515625, 0.21905517578125, 0.341583251953125, 0.361053466796875, 0.287689208984375, 0.298126220703125, 0.329925537109375, 0.331024169921875, 0.235626220703125, 0.114227294921875, 0.17572021484375, 0.170989990234375, -0.060577392578125, -0.2164306640625, -0.295440673828125, -0.233551025390625, 0.1085205078125, 0.2120361328125, 0.00384521484375, -0.070343017578125, -0.096221923828125, -0.103759765625, 0.0655517578125, 0.18218994140625, 0.03778076171875, -0.053924560546875, -0.116119384765625, -0.258453369140625, -0.034820556640625, 0.249664306640625, 0.247955322265625, 0.33013916015625, 0.4422607421875, 0.442291259765625, 0.407135009765625, 0.386993408203125, 0.45220947265625, 0.527740478515625, 0.545745849609375, 0.428497314453125, 0.128662109375, -0.055877685546875, -0.028594970703125, -0.0426025390625, -0.076141357421875, -0.02142333984375, 0.050384521484375, 0.05133056640625, -0.001495361328125, -0.032684326171875, -0.05157470703125, -0.084686279296875, -0.091339111328125, -0.205780029296875, -0.436737060546875, -0.518096923828125, -0.445220947265625, -0.262725830078125, -0.109161376953125, -0.013702392578125, 0.119354248046875, -0.044769287109375, -0.169158935546875, 0.030426025390625, 0.128173828125, 0.2552490234375, 0.337310791015625, 0.29351806640625, 0.191925048828125, -0.023223876953125, 0.017791748046875, 0.079498291015625, -0.211181640625, -0.438568115234375, -0.518524169921875, -0.664703369140625, -0.551300048828125, -0.142242431640625, -0.050689697265625, -0.283935546875, -0.484405517578125, -0.529541015625, -0.469970703125, -0.37457275390625, -0.168609619140625, -0.264984130859375, -0.591033935546875, -0.62158203125, -0.727752685546875, -0.85272216796875, -0.608245849609375, -0.332000732421875, -0.2779541015625, -0.322967529296875, -0.325592041015625, -0.243927001953125, -0.014495849609375, 0.252777099609375, 0.35235595703125, 0.355499267578125, 0.442352294921875, 0.51495361328125, 0.32513427734375, 0.11834716796875, 0.128387451171875, 0.227996826171875, 0.365753173828125, 0.34832763671875, 0.265380859375, 0.377716064453125, 0.579803466796875, 0.680389404296875, 0.633392333984375, 0.482757568359375, 0.143218994140625, -0.0994873046875, -0.1571044921875, -0.160400390625, 0.14752197265625, 0.328399658203125, 0.34173583984375, 0.50335693359375, 0.517486572265625, 0.29034423828125, -0.11956787109375, -0.08306884765625, 0.224365234375, 0.1968994140625, 0.1746826171875, 0.032440185546875, -0.0792236328125, -0.121307373046875, -0.250396728515625, -0.2518310546875, -0.2427978515625, -0.14068603515625, -0.0711669921875, -0.08074951171875, -0.1668701171875, -0.2625732421875, -0.227630615234375, -0.364288330078125, -0.3048095703125, -0.073760986328125, -0.084625244140625, -0.09783935546875, -0.06524658203125, -0.037322998046875, -0.052764892578125, -0.0020751953125, 0.1044921875, 0.11383056640625, -0.0050048828125, -0.13726806640625, -0.060791015625, 0.102020263671875, 0.174163818359375, 0.0224609375, -0.06365966796875, 0.040069580078125, 0.036224365234375, 0.10809326171875, 0.25335693359375, 0.397552490234375, 0.319793701171875, 0.04486083984375, -0.00787353515625, -0.0826416015625, -0.0626220703125, 0.06475830078125, 0.132720947265625, 0.315338134765625, 0.348236083984375, 0.31103515625, 0.206939697265625, 0.02978515625, 0.090789794921875, 0.126129150390625, 0.11895751953125, 0.151031494140625, 0.134246826171875, 0.064666748046875, -0.159576416015625, -0.248260498046875, -0.130096435546875, -0.128997802734375, -0.0440673828125, 0.29901123046875, 0.400848388671875, 0.212158203125, 0.164154052734375, 0.1925048828125, 0.204833984375, 0.1300048828125, 0.062042236328125, 0.0621337890625, -0.005645751953125, 0.132110595703125, 0.30535888671875, 0.342926025390625, 0.3685302734375, 0.19403076171875, 0.014495849609375, -0.05145263671875, -0.026153564453125, 0.110809326171875, 0.175689697265625, 0.14898681640625, 0.099853515625, 0.160797119140625, 0.28460693359375, 0.21795654296875, 0.096435546875, 0.131011962890625, 0.139617919921875, 0.1119384765625, 0.140167236328125, 0.063446044921875, -0.051788330078125, -0.066497802734375, 0.053070068359375, 0.16845703125, 0.178131103515625, 0.2095947265625, 0.20892333984375, 0.1214599609375, -0.0062255859375, 0.02252197265625, 0.169281005859375, 0.146575927734375, 0.116607666015625, 0.17706298828125, 0.263519287109375, 0.167572021484375, -0.074493408203125, -0.002838134765625, 0.178253173828125, 0.18597412109375, 0.158233642578125, 0.1856689453125, 0.194671630859375, 0.05572509765625, 0.025421142578125, 0.125823974609375, 0.096099853515625, 0.094635009765625, 0.1485595703125, 0.17242431640625, 0.22265625, 0.100067138671875, -0.07476806640625, -0.045166015625, -0.031402587890625, 0.003570556640625, 0.085357666015625, 0.031341552734375, -0.04022216796875, -0.052459716796875, -0.01885986328125, 0.015228271484375, -0.012725830078125, -0.11968994140625, -0.247406005859375, -0.270721435546875, -0.24151611328125\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_16bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_16bit_44100.h}
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_16bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_44100::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_16bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_16bit_44100::testBuffer} = \{\{0.0, -9.1552734375e-05, -0.00054931640625, -0.001190185546875, -0.00128173828125, 0.001983642578125, 0.01055908203125, 0.014495849609375, 0.009765625, -0.004638671875, -0.02252197265625, -0.016510009765625, 0.00762939453125, 0.016693115234375, 0.00927734375, 0.003326416015625, 0.00128173828125, -0.00262451171875, -0.002960205078125, -0.0047607421875, -0.004425048828125, -0.020904541015625, -0.0406494140625, -0.0335693359375, -0.029541015625, -0.028472900390625, -0.021820068359375, -0.018157958984375, -0.0096435546875, 0.011688232421875, 0.035186767578125, 0.0457763671875, 0.045166015625, 0.0595703125, 0.073455810546875, 0.06561279296875, 0.071868896484375, 0.059326171875, 0.0093994140625, -0.032958984375, 0.01373291015625, -0.051055908203125, 0.033660888671875, 0.107086181640625, -0.042236328125, 0.0374755859375, -0.07269287109375, 0.036834716796875, 0.106475830078125, -0.051483154296875, 0.010162353515625, -0.06182861328125, 0.085662841796875, 0.104461669921875, 0.077178955078125, 0.05010986328125, 0.0333251953125, 0.138336181640625, 0.124298095703125, 0.1722412109375, 0.084716796875, 0.10321044921875, 0.0732421875, 0.063934326171875, 0.107696533203125, 0.063140869140625, 0.046356201171875, -0.013458251953125, 0.04345703125, 0.08270263671875, 0.109619140625, 0.06256103515625, 0.08746337890625, 0.10504150390625, 0.060577392578125, 0.035430908203125, -0.045196533203125, -0.02105712890625, -0.054901123046875, 0.001068115234375, 0.08062744140625, 0.044830322265625, 0.015380859375, 0.031585693359375, 0.10845947265625, 0.187469482421875, 0.161468505859375, 0.066253662109375, 0.061431884765625, 0.078826904296875, 0.073211669921875, -0.054290771484375, -0.057708740234375, -0.00146484375, -0.047943115234375, 0.0653076171875, 0.079925537109375, 0.001190185546875, 0.08831787109375, 0.05804443359375, 0.05072021484375, 0.14404296875, 0.022003173828125, 0.084014892578125, 0.122406005859375, 0.1221923828125, 0.154815673828125, 0.001495361328125, 0.0361328125, 0.013519287109375, 0.0263671875, 0.02099609375, -0.058013916015625, -0.041015625, -0.0712890625, -0.0126953125, 0.002899169921875, 0.00677490234375, -0.008544921875, -0.0557861328125, -0.06121826171875, -0.035369873046875, -0.00250244140625, 0.034912109375, 0.065673828125, 0.001373291015625, -0.031219482421875, -0.12091064453125, -0.159271240234375, -0.15771484375, -0.233642578125, -0.17938232421875, -0.133697509765625, -0.10784912109375, -0.122406005859375, -0.138427734375, -0.06597900390625, -0.088623046875, -0.07586669921875, -0.0291748046875, -0.079498291015625, -0.04180908203125, -0.024627685546875, -0.07989501953125, -0.000457763671875, 0.0233154296875, 0.02703857421875, 0.05950927734375, -0.001220703125, 0.000335693359375, -0.00848388671875, -0.030029296875, -0.0479736328125, -0.06280517578125, -0.078399658203125, -0.080474853515625, -0.001434326171875, -0.050018310546875, -0.086517333984375, -0.074462890625, -0.07928466796875, -0.04638671875, -0.088226318359375, -0.094512939453125, -0.093353271484375, -0.112884521484375, -0.0833740234375, -0.084808349609375, -0.093902587890625, -0.056304931640625, -0.0721435546875, -0.095947265625, -0.060394287109375, -0.07598876953125, -0.063140869140625, -0.03704833984375, -0.05523681640625, -0.052490234375, -0.055877685546875, -0.058929443359375, -0.055877685546875, -0.055999755859375, -0.063873291015625, -0.058563232421875, -0.03863525390625, -0.0389404296875, 0.011322021484375, 0.057708740234375, 0.072113037109375, 0.15484619140625, 0.141021728515625, 0.098785400390625, 0.16357421875, 0.13140869140625, 0.0897216796875, 0.082122802734375, 0.01055908203125, -0.009429931640625, -0.013092041015625, -0.03692626953125, -0.05224609375, -0.0833740234375, -0.05377197265625, -0.037689208984375, -0.065216064453125, -0.02923583984375, -0.040863037109375, -0.05072021484375, 0.026336669921875, 0.047149658203125, 0.03546142578125, 0.035003662109375, 0.06072998046875, 0.070892333984375, 0.039794921875, 0.064453125, 0.032562255859375, 0.016143798828125, 0.048583984375, 0.0120849609375, 0.0284423828125, 0.023223876953125, -0.013641357421875, 0.003326416015625, -0.006072998046875, -0.02593994140625, -0.017791748046875, 0.003631591796875, 0.000701904296875, -0.03082275390625, -0.019744873046875, -0.012237548828125, -0.021820068359375, 0.02117919921875, 0.037139892578125, -0.001495361328125, 0.01947021484375, 0.03375244140625, 0.0155029296875, 0.063751220703125, 0.052947998046875, 0.092254638671875, 0.12091064453125, 0.09771728515625, 0.142486572265625, 0.088104248046875, 0.10980224609375, 0.12286376953125, 0.092498779296875, 0.078521728515625, 0.04241943359375, 0.088592529296875, 0.10113525390625, 0.091949462890625, 0.093505859375, 0.086029052734375, 0.069000244140625, 0.098785400390625, 0.087310791015625, 0.082794189453125, 0.063873291015625, 0.038330078125, 0.047210693359375, 0.013427734375, 0.04443359375, 0.007080078125, 0.009979248046875, -0.01641845703125, -0.010986328125, -0.01239013671875, -0.031463623046875, 0.023834228515625, -0.0289306640625, 0.00579833984375, -0.046722412109375, -0.0147705078125, 0.018157958984375, 0.021514892578125, 0.02850341796875, -0.006866455078125, 0.051239013671875, -0.05078125, -0.0111083984375, -0.009368896484375, 0.01312255859375, 0.01922607421875, -0.013427734375, 0.0438232421875, -0.078399658203125, -0.049041748046875, -0.033538818359375, -0.045867919921875, -0.03564453125, -0.04864501953125, -0.064666748046875, -0.068359375, -0.071746826171875, -0.0931396484375, -0.0380859375, -0.08538818359375, -0.065704345703125, -0.082061767578125, -0.069549560546875, -0.054931640625, -0.1007080078125, -0.057586669921875, -0.1146240234375, -0.09619140625, -0.12591552734375, -0.116729736328125, -0.075653076171875, -0.114990234375, -0.05810546875, -0.1025390625, -0.073577880859375, -0.085601806640625, -0.13800048828125, -0.0701904296875, -0.14849853515625, -0.15142822265625, -0.131988525390625, -0.11383056640625, -0.11053466796875, -0.161376953125, -0.11029052734375, -0.135498046875, -0.116943359375, -0.084228515625, -0.019439697265625, -0.03717041015625, -0.04473876953125, 0.0430908203125, -0.01092529296875, 0.066375732421875, 0.055511474609375, 0.062225341796875, 0.06390380859375, -0.02301025390625, 0.037445068359375, 0.024993896484375, 0.06573486328125, 0.0367431640625, 0.006378173828125, 0.045318603515625, -0.033905029296875, 0.015960693359375, 0.010162353515625, -0.035064697265625, 0.039886474609375, -0.04119873046875, -0.00555419921875, 0.0078125, -0.04998779296875, 0.005584716796875, -0.042724609375, 0.0107421875, -0.001617431640625, 0.00384521484375, 0.037322998046875, -0.012786865234375, 0.012603759765625, -0.022430419921875, -0.017059326171875, -0.021392822265625, -0.047943115234375, -0.02191162109375, 0.014495849609375, -0.003997802734375, -0.014862060546875, -0.01690673828125, -0.008880615234375, 0.005340576171875, -0.02423095703125, 0.018096923828125, 0.00567626953125, -0.0106201171875, -0.00958251953125, -0.016845703125, 0.006622314453125, 0.000335693359375, 0.0013427734375, 0.068084716796875, 0.046722412109375, 0.05419921875, 0.14739990234375, 0.0347900390625, 0.083740234375, 0.0494384765625, 0.01873779296875, 0.119903564453125, -0.026214599609375, 0.084625244140625, 0.11651611328125, 0.040252685546875, 0.07470703125, 0.0350341796875, 0.080535888671875, 0.08270263671875, 0.053741455078125, 0.071441650390625, 0.12750244140625, 0.133880615234375, 0.13836669921875, 0.129852294921875, 0.0904541015625, 0.086181640625, 0.09222412109375, 0.074462890625, 0.0079345703125, 0.036224365234375, -0.00897216796875, -0.015411376953125, 0.017425537109375, -0.053070068359375, -0.012725830078125, -0.008758544921875, 0.009490966796875, 0.02520751953125, 0.035400390625, 0.061309814453125, 0.028106689453125, 0.064971923828125, 0.09173583984375, 0.064239501953125, 0.037445068359375, 0.071044921875, -0.00439453125, -0.029083251953125, 0.012908935546875, -0.022979736328125, 0.025634765625, -0.047943115234375, -0.017364501953125, 0.01617431640625, -0.0498046875, -0.022247314453125, -0.02459716796875, 0.016326904296875, -0.0391845703125, -0.05670166015625, -0.028350830078125, -0.029266357421875, -0.01300048828125, -0.062591552734375, -0.062042236328125, -0.054351806640625, -0.049468994140625, -0.054534912109375, -0.054779052734375, -0.028778076171875, -0.03436279296875, -0.0391845703125, -0.037445068359375, -0.062835693359375, -0.08154296875, -0.06982421875, -0.092529296875, -0.117095947265625, -0.108154296875, -0.1209716796875, -0.14031982421875, -0.1102294921875, -0.109161376953125, -0.09857177734375, -0.05816650390625, -0.067169189453125, -0.06890869140625, -0.06353759765625, -0.0526123046875, -0.036224365234375, -0.0203857421875, -0.011322021484375, -0.02117919921875, -0.03900146484375, -0.04412841796875, -0.032806396484375, -0.043609619140625, -0.033721923828125, -0.018157958984375, -0.041748046875, -0.017578125, 0.0009765625, -0.018310546875, -0.0189208984375, -0.06451416015625, -0.072662353515625, -0.055694580078125, -0.0848388671875, -0.07269287109375, -0.07049560546875, -0.099334716796875, -0.07208251953125, -0.063446044921875, -0.067291259765625, -0.012725830078125, -0.031158447265625, -0.066314697265625, -0.07171630859375, -0.064361572265625, -0.035369873046875\}, \{0.0, -9.1552734375e-05, -0.000640869140625, -0.00152587890625, -0.001739501953125, 0.0018310546875, 0.01220703125, 0.018310546875, 0.01416015625, -0.002288818359375, -0.022125244140625, -0.017120361328125, 0.00592041015625, 0.01422119140625, 0.008209228515625, 0.004974365234375, 0.003326416015625, -0.002899169921875, -0.005950927734375, -0.009735107421875, -0.00970458984375, -0.025482177734375, -0.047027587890625, -0.036529541015625, -0.036712646484375, -0.010009765625, 0.100830078125, 0.0028076171875, 0.0911865234375, 0.03314208984375, 0.103912353515625, 0.08502197265625, 0.0938720703125, 0.110626220703125, 0.103912353515625, 0.1353759765625, 0.079437255859375, 0.11279296875, 0.05511474609375, 0.051605224609375, -0.014190673828125, 0.010833740234375, 0.0167236328125, 0.026123046875, 0.02105712890625, -0.023590087890625, 0.011566162109375, -0.000152587890625, 0.04278564453125, -0.026458740234375, -0.040374755859375, -0.0748291015625, -0.002105712890625, 0.042755126953125, -0.0018310546875, -0.006439208984375, 0.016204833984375, 0.12127685546875, 0.11505126953125, 0.157501220703125, 0.156585693359375, 0.158447265625, 0.072052001953125, 0.096710205078125, 0.124755859375, 0.029937744140625, 0.070770263671875, 0.031524658203125, 0.0401611328125, 0.1253662109375, 0.12713623046875, 0.08575439453125, 0.1097412109375, 0.06207275390625, 0.09075927734375, -0.0177001953125, -0.050506591796875, 0.028594970703125, -0.067230224609375, 0.01055908203125, 0.053802490234375, 0.066314697265625, 0.004425048828125, -0.0123291015625, 0.032135009765625, 0.12835693359375, 0.10223388671875, 0.04541015625, 0.0635986328125, 0.004974365234375, 0.00341796875, -0.10369873046875, -0.10589599609375, -0.112640380859375, -0.039581298828125, -0.03106689453125, 0.02069091796875, 0.042694091796875, 0.0430908203125, 0.1123046875, 0.05047607421875, 0.141387939453125, 0.051361083984375, 0.087066650390625, 0.04693603515625, 0.079559326171875, 0.0545654296875, -0.0701904296875, -0.03802490234375, -0.06207275390625, -0.028778076171875, -0.13446044921875, -0.030242919921875, -0.1181640625, -0.04278564453125, -0.031982421875, -0.079925537109375, 0.032257080078125, -0.07757568359375, -0.0716552734375, -0.07073974609375, -0.036407470703125, -0.0604248046875, 0.037261962890625, -0.022491455078125, 0.00628662109375, -0.081329345703125, -0.11474609375, -0.087158203125, -0.18218994140625, -0.034576416015625, -0.14044189453125, 0.008331298828125, -0.058441162109375, -0.046905517578125, -0.027130126953125, -0.099822998046875, -0.019500732421875, -0.1219482421875, -0.025665283203125, -0.107635498046875, -0.0196533203125, -0.052947998046875, -0.060943603515625, -0.01690673828125, -0.063446044921875, 0.036773681640625, 0.007537841796875, 0.06610107421875, 0.03216552734375, 0.041290283203125, 0.009368896484375, -0.005645751953125, -0.035064697265625, -0.0838623046875, -0.0692138671875, -0.139434814453125, -0.0965576171875, -0.08587646484375, -0.126922607421875, -0.074462890625, -0.0316162109375, -0.056976318359375, -0.020599365234375, -0.01666259765625, 0.025604248046875, 0.003936767578125, -0.01483154296875, 0.04937744140625, 0.003997802734375, 0.02178955078125, 0.00836181640625, -0.05841064453125, -0.03564453125, -0.02789306640625, -0.037811279296875, -0.00299072265625, -0.075042724609375, -0.034149169921875, 0.00665283203125, 0.005218505859375, -0.010986328125, -0.051361083984375, 0.018218994140625, -0.015777587890625, 0.04473876953125, 0.033294677734375, 0.053253173828125, 0.091888427734375, 0.09503173828125, 0.092254638671875, 0.02728271484375, 0.09124755859375, 0.072418212890625, 0.094940185546875, 0.060028076171875, 0.04278564453125, 0.035247802734375, 0.02435302734375, 0.027069091796875, 0.011322021484375, 0.044219970703125, 0.012725830078125, 0.048828125, 0.022491455078125, 0.047637939453125, 0.028106689453125, 0.01837158203125, 0.061126708984375, 0.042205810546875, 0.043121337890625, 0.06036376953125, 0.06475830078125, 0.007720947265625, 0.06964111328125, 0.048980712890625, 0.067779541015625, 0.08233642578125, 0.084686279296875, 0.11572265625, 0.0615234375, 0.067779541015625, 0.005889892578125, -0.002471923828125, -0.021087646484375, -0.054840087890625, -0.064422607421875, -0.043212890625, 0.010528564453125, -0.008087158203125, -0.049835205078125, -0.023406982421875, 0.02337646484375, 0.018341064453125, 0.048004150390625, 0.0247802734375, 0.0157470703125, 0.021392822265625, 0.048797607421875, 0.043548583984375, 0.014251708984375, 0.02874755859375, 0.00341796875, 0.026458740234375, 0.0264892578125, 0.037078857421875, 0.0360107421875, 0.02447509765625, 0.018218994140625, 0.007843017578125, 0.01116943359375, 0.00225830078125, 0.0277099609375, 0.002410888671875, -0.022308349609375, -0.0125732421875, -0.032623291015625, -0.06744384765625, -0.0618896484375, -0.05328369140625, -0.072906494140625, -0.071380615234375, -0.076019287109375, -0.093902587890625, -0.069091796875, -0.05694580078125, -0.079010009765625, -0.048797607421875, -0.04388427734375, -0.07293701171875, -0.070068359375, -0.055908203125, -0.03973388671875, -0.046234130859375, -0.065216064453125, -0.05877685546875, -0.047088623046875, -0.02880859375, -0.03314208984375, -0.0303955078125, -0.0255126953125, -0.025390625, -0.019287109375, -0.030303955078125, -0.007293701171875, -0.025604248046875, -0.03057861328125, -0.040863037109375, -0.0419921875, -0.04180908203125, -0.0413818359375, -0.018157958984375, -0.068939208984375, -0.08447265625, -0.09844970703125, -0.067962646484375, -0.079681396484375, -0.11541748046875, -0.09478759765625, -0.05859375, -0.08709716796875, -0.08575439453125, -0.01434326171875, -0.0758056640625, -0.0628662109375, -0.06768798828125, -0.074554443359375, -0.094818115234375, -0.0494384765625, 0.008758544921875, -0.031585693359375, -0.01263427734375, -0.028167724609375, -0.013214111328125, -0.05621337890625, -0.02020263671875, -0.022430419921875, -0.01068115234375, -0.03125, -0.06561279296875, -0.00787353515625, -0.028839111328125, 0.00799560546875, -0.0430908203125, 0.004302978515625, -0.018096923828125, 0.0106201171875, 0.022186279296875, -0.00128173828125, 0.083587646484375, 0.0543212890625, 0.110626220703125, 0.046173095703125, 0.070220947265625, 0.061370849609375, 0.066131591796875, 0.09063720703125, 0.039764404296875, 0.059173583984375, 0.03277587890625, 0.08856201171875, 0.07855224609375, 0.072845458984375, 0.0806884765625, 0.094085693359375, 0.03546142578125, 0.05865478515625, 0.08245849609375, 0.02001953125, 0.022491455078125, -0.016510009765625, 0.018646240234375, 0.0296630859375, 0.035980224609375, 0.040985107421875, 0.0677490234375, 0.01470947265625, 0.07342529296875, 0.094482421875, 0.02178955078125, 0.05194091796875, 0.001312255859375, 0.0589599609375, 0.025177001953125, 0.038818359375, 0.058135986328125, 0.0474853515625, 0.075164794921875, 0.02508544921875, 0.04376220703125, 0.051177978515625, 0.013824462890625, 0.001708984375, 0.027801513671875, 0.02581787109375, 0.04400634765625, 0.023956298828125, 0.029876708984375, 0.00372314453125, 0.004364013671875, -0.016937255859375, -0.00579833984375, 0.039276123046875, 0.037841796875, 0.054412841796875, -0.02734375, 0.00213623046875, -0.03363037109375, 0.001617431640625, -0.013580322265625, 0.0067138671875, 0.0126953125, -0.01678466796875, 0.01702880859375, -0.073944091796875, 0.00616455078125, -0.051055908203125, 0.043609619140625, -0.0029296875, 0.008056640625, 0.0367431640625, -0.0478515625, 0.042236328125, 0.00408935546875, 0.03997802734375, -0.064849853515625, 0.042205810546875, -0.02825927734375, -0.012298583984375, -0.017181396484375, -0.029571533203125, 0.05615234375, -0.11090087890625, -0.017364501953125, -0.079833984375, -0.00347900390625, -0.073211669921875, -0.060028076171875, -0.002288818359375, -0.04864501953125, -0.006378173828125, -0.100372314453125, -0.0252685546875, -0.05938720703125, -0.009735107421875, -0.056854248046875, -0.069183349609375, -0.069732666015625, -0.04888916015625, -0.060211181640625, -0.1201171875, -0.081085205078125, -0.1424560546875, -0.075592041015625, -0.13555908203125, -0.102020263671875, -0.17364501953125, -0.14166259765625, -0.0902099609375, -0.1646728515625, -0.067596435546875, -0.13037109375, -0.083465576171875, -0.07037353515625, -0.05718994140625, -0.03436279296875, -0.03662109375, -0.0535888671875, -0.0323486328125, -0.010162353515625, -0.074188232421875, -0.0296630859375, -0.039215087890625, -0.0382080078125, -0.034515380859375, -0.02789306640625, -0.0045166015625, -0.0484619140625, -0.0625, -0.00299072265625, -0.038848876953125, -0.0220947265625, -0.0201416015625, -0.028045654296875, 0.0057373046875, -0.060516357421875, 0.01171875, 0.007843017578125, 0.00872802734375, -0.014068603515625, -0.0230712890625, 0.00115966796875, -0.03009033203125, 0.01446533203125, -0.012451171875, 0.0135498046875, 0.024749755859375, 0.034698486328125, 0.019287109375, 0.03118896484375, 0.039306640625, 0.0341796875, 0.0401611328125, 0.01837158203125, 0.013397216796875, -0.025390625, 0.009002685546875, -0.0059814453125, 0.024810791015625, 0.0177001953125, -0.003021240234375, 0.00396728515625, 0.00775146484375, 0.047637939453125, 0.066558837890625, 0.082763671875, 0.041717529296875, 0.067840576171875, 0.036376953125, 0.061370849609375\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_16bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_16bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_16bit_44100.h}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_16bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, -9.1552734375e-05, -0.00054931640625, -0.001190185546875, -0.00128173828125, 0.001983642578125, 0.01055908203125, 0.014495849609375, 0.009765625, -0.004638671875, -0.02252197265625, -0.016510009765625, 0.00762939453125, 0.016693115234375, 0.00927734375, 0.003326416015625, 0.00128173828125, -0.00262451171875, -0.002960205078125, -0.0047607421875, -0.004425048828125, -0.020904541015625, -0.0406494140625, -0.0335693359375, -0.029541015625, -0.028472900390625, -0.021820068359375, -0.018157958984375, -0.0096435546875, 0.011688232421875, 0.035186767578125, 0.0457763671875, 0.045166015625, 0.0595703125, 0.073455810546875, 0.06561279296875, 0.071868896484375, 0.059326171875, 0.0093994140625, -0.032958984375, 0.01373291015625, -0.051055908203125, 0.033660888671875, 0.107086181640625, -0.042236328125, 0.0374755859375, -0.07269287109375, 0.036834716796875, 0.106475830078125, -0.051483154296875, 0.010162353515625, -0.06182861328125, 0.085662841796875, 0.104461669921875, 0.077178955078125, 0.05010986328125, 0.0333251953125, 0.138336181640625, 0.124298095703125, 0.1722412109375, 0.084716796875, 0.10321044921875, 0.0732421875, 0.063934326171875, 0.107696533203125, 0.063140869140625, 0.046356201171875, -0.013458251953125, 0.04345703125, 0.08270263671875, 0.109619140625, 0.06256103515625, 0.08746337890625, 0.10504150390625, 0.060577392578125, 0.035430908203125, -0.045196533203125, -0.02105712890625, -0.054901123046875, 0.001068115234375, 0.08062744140625, 0.044830322265625, 0.015380859375, 0.031585693359375, 0.10845947265625, 0.187469482421875, 0.161468505859375, 0.066253662109375, 0.061431884765625, 0.078826904296875, 0.073211669921875, -0.054290771484375, -0.057708740234375, -0.00146484375, -0.047943115234375, 0.0653076171875, 0.079925537109375, 0.001190185546875, 0.08831787109375, 0.05804443359375, 0.05072021484375, 0.14404296875, 0.022003173828125, 0.084014892578125, 0.122406005859375, 0.1221923828125, 0.154815673828125, 0.001495361328125, 0.0361328125, 0.013519287109375, 0.0263671875, 0.02099609375, -0.058013916015625, -0.041015625, -0.0712890625, -0.0126953125, 0.002899169921875, 0.00677490234375, -0.008544921875, -0.0557861328125, -0.06121826171875, -0.035369873046875, -0.00250244140625, 0.034912109375, 0.065673828125, 0.001373291015625, -0.031219482421875, -0.12091064453125, -0.159271240234375, -0.15771484375, -0.233642578125, -0.17938232421875, -0.133697509765625, -0.10784912109375, -0.122406005859375, -0.138427734375, -0.06597900390625, -0.088623046875, -0.07586669921875, -0.0291748046875, -0.079498291015625, -0.04180908203125, -0.024627685546875, -0.07989501953125, -0.000457763671875, 0.0233154296875, 0.02703857421875, 0.05950927734375, -0.001220703125, 0.000335693359375, -0.00848388671875, -0.030029296875, -0.0479736328125, -0.06280517578125, -0.078399658203125, -0.080474853515625, -0.001434326171875, -0.050018310546875, -0.086517333984375, -0.074462890625, -0.07928466796875, -0.04638671875, -0.088226318359375, -0.094512939453125, -0.093353271484375, -0.112884521484375, -0.0833740234375, -0.084808349609375, -0.093902587890625, -0.056304931640625, -0.0721435546875, -0.095947265625, -0.060394287109375, -0.07598876953125, -0.063140869140625, -0.03704833984375, -0.05523681640625, -0.052490234375, -0.055877685546875, -0.058929443359375, -0.055877685546875, -0.055999755859375, -0.063873291015625, -0.058563232421875, -0.03863525390625, -0.0389404296875, 0.011322021484375, 0.057708740234375, 0.072113037109375, 0.15484619140625, 0.141021728515625, 0.098785400390625, 0.16357421875, 0.13140869140625, 0.0897216796875, 0.082122802734375, 0.01055908203125, -0.009429931640625, -0.013092041015625, -0.03692626953125, -0.05224609375, -0.0833740234375, -0.05377197265625, -0.037689208984375, -0.065216064453125, -0.02923583984375, -0.040863037109375, -0.05072021484375, 0.026336669921875, 0.047149658203125, 0.03546142578125, 0.035003662109375, 0.06072998046875, 0.070892333984375, 0.039794921875, 0.064453125, 0.032562255859375, 0.016143798828125, 0.048583984375, 0.0120849609375, 0.0284423828125, 0.023223876953125, -0.013641357421875, 0.003326416015625, -0.006072998046875, -0.02593994140625, -0.017791748046875, 0.003631591796875, 0.000701904296875, -0.03082275390625, -0.019744873046875, -0.012237548828125, -0.021820068359375, 0.02117919921875, 0.037139892578125, -0.001495361328125, 0.01947021484375, 0.03375244140625, 0.0155029296875, 0.063751220703125, 0.052947998046875, 0.092254638671875, 0.12091064453125, 0.09771728515625, 0.142486572265625, 0.088104248046875, 0.10980224609375, 0.12286376953125, 0.092498779296875, 0.078521728515625, 0.04241943359375, 0.088592529296875, 0.10113525390625, 0.091949462890625, 0.093505859375, 0.086029052734375, 0.069000244140625, 0.098785400390625, 0.087310791015625, 0.082794189453125, 0.063873291015625, 0.038330078125, 0.047210693359375, 0.013427734375, 0.04443359375, 0.007080078125, 0.009979248046875, -0.01641845703125, -0.010986328125, -0.01239013671875, -0.031463623046875, 0.023834228515625, -0.0289306640625, 0.00579833984375, -0.046722412109375, -0.0147705078125, 0.018157958984375, 0.021514892578125, 0.02850341796875, -0.006866455078125, 0.051239013671875, -0.05078125, -0.0111083984375, -0.009368896484375, 0.01312255859375, 0.01922607421875, -0.013427734375, 0.0438232421875, -0.078399658203125, -0.049041748046875, -0.033538818359375, -0.045867919921875, -0.03564453125, -0.04864501953125, -0.064666748046875, -0.068359375, -0.071746826171875, -0.0931396484375, -0.0380859375, -0.08538818359375, -0.065704345703125, -0.082061767578125, -0.069549560546875, -0.054931640625, -0.1007080078125, -0.057586669921875, -0.1146240234375, -0.09619140625, -0.12591552734375, -0.116729736328125, -0.075653076171875, -0.114990234375, -0.05810546875, -0.1025390625, -0.073577880859375, -0.085601806640625, -0.13800048828125, -0.0701904296875, -0.14849853515625, -0.15142822265625, -0.131988525390625, -0.11383056640625, -0.11053466796875, -0.161376953125, -0.11029052734375, -0.135498046875, -0.116943359375, -0.084228515625, -0.019439697265625, -0.03717041015625, -0.04473876953125, 0.0430908203125, -0.01092529296875, 0.066375732421875, 0.055511474609375, 0.062225341796875, 0.06390380859375, -0.02301025390625, 0.037445068359375, 0.024993896484375, 0.06573486328125, 0.0367431640625, 0.006378173828125, 0.045318603515625, -0.033905029296875, 0.015960693359375, 0.010162353515625, -0.035064697265625, 0.039886474609375, -0.04119873046875, -0.00555419921875, 0.0078125, -0.04998779296875, 0.005584716796875, -0.042724609375, 0.0107421875, -0.001617431640625, 0.00384521484375, 0.037322998046875, -0.012786865234375, 0.012603759765625, -0.022430419921875, -0.017059326171875, -0.021392822265625, -0.047943115234375, -0.02191162109375, 0.014495849609375, -0.003997802734375, -0.014862060546875, -0.01690673828125, -0.008880615234375, 0.005340576171875, -0.02423095703125, 0.018096923828125, 0.00567626953125, -0.0106201171875, -0.00958251953125, -0.016845703125, 0.006622314453125, 0.000335693359375, 0.0013427734375, 0.068084716796875, 0.046722412109375, 0.05419921875, 0.14739990234375, 0.0347900390625, 0.083740234375, 0.0494384765625, 0.01873779296875, 0.119903564453125, -0.026214599609375, 0.084625244140625, 0.11651611328125, 0.040252685546875, 0.07470703125, 0.0350341796875, 0.080535888671875, 0.08270263671875, 0.053741455078125, 0.071441650390625, 0.12750244140625, 0.133880615234375, 0.13836669921875, 0.129852294921875, 0.0904541015625, 0.086181640625, 0.09222412109375, 0.074462890625, 0.0079345703125, 0.036224365234375, -0.00897216796875, -0.015411376953125, 0.017425537109375, -0.053070068359375, -0.012725830078125, -0.008758544921875, 0.009490966796875, 0.02520751953125, 0.035400390625, 0.061309814453125, 0.028106689453125, 0.064971923828125, 0.09173583984375, 0.064239501953125, 0.037445068359375, 0.071044921875, -0.00439453125, -0.029083251953125, 0.012908935546875, -0.022979736328125, 0.025634765625, -0.047943115234375, -0.017364501953125, 0.01617431640625, -0.0498046875, -0.022247314453125, -0.02459716796875, 0.016326904296875, -0.0391845703125, -0.05670166015625, -0.028350830078125, -0.029266357421875, -0.01300048828125, -0.062591552734375, -0.062042236328125, -0.054351806640625, -0.049468994140625, -0.054534912109375, -0.054779052734375, -0.028778076171875, -0.03436279296875, -0.0391845703125, -0.037445068359375, -0.062835693359375, -0.08154296875, -0.06982421875, -0.092529296875, -0.117095947265625, -0.108154296875, -0.1209716796875, -0.14031982421875, -0.1102294921875, -0.109161376953125, -0.09857177734375, -0.05816650390625, -0.067169189453125, -0.06890869140625, -0.06353759765625, -0.0526123046875, -0.036224365234375, -0.0203857421875, -0.011322021484375, -0.02117919921875, -0.03900146484375, -0.04412841796875, -0.032806396484375, -0.043609619140625, -0.033721923828125, -0.018157958984375, -0.041748046875, -0.017578125, 0.0009765625, -0.018310546875, -0.0189208984375, -0.06451416015625, -0.072662353515625, -0.055694580078125, -0.0848388671875, -0.07269287109375, -0.07049560546875, -0.099334716796875, -0.07208251953125, -0.063446044921875, -0.067291259765625, -0.012725830078125, -0.031158447265625, -0.066314697265625, -0.07171630859375, -0.064361572265625, -0.035369873046875\}, \{0.0, -9.1552734375e-05, -0.000640869140625, -0.00152587890625, -0.001739501953125, 0.0018310546875, 0.01220703125, 0.018310546875, 0.01416015625, -0.002288818359375, -0.022125244140625, -0.017120361328125, 0.00592041015625, 0.01422119140625, 0.008209228515625, 0.004974365234375, 0.003326416015625, -0.002899169921875, -0.005950927734375, -0.009735107421875, -0.00970458984375, -0.025482177734375, -0.047027587890625, -0.036529541015625, -0.036712646484375, -0.010009765625, 0.100830078125, 0.0028076171875, 0.0911865234375, 0.03314208984375, 0.103912353515625, 0.08502197265625, 0.0938720703125, 0.110626220703125, 0.103912353515625, 0.1353759765625, 0.079437255859375, 0.11279296875, 0.05511474609375, 0.051605224609375, -0.014190673828125, 0.010833740234375, 0.0167236328125, 0.026123046875, 0.02105712890625, -0.023590087890625, 0.011566162109375, -0.000152587890625, 0.04278564453125, -0.026458740234375, -0.040374755859375, -0.0748291015625, -0.002105712890625, 0.042755126953125, -0.0018310546875, -0.006439208984375, 0.016204833984375, 0.12127685546875, 0.11505126953125, 0.157501220703125, 0.156585693359375, 0.158447265625, 0.072052001953125, 0.096710205078125, 0.124755859375, 0.029937744140625, 0.070770263671875, 0.031524658203125, 0.0401611328125, 0.1253662109375, 0.12713623046875, 0.08575439453125, 0.1097412109375, 0.06207275390625, 0.09075927734375, -0.0177001953125, -0.050506591796875, 0.028594970703125, -0.067230224609375, 0.01055908203125, 0.053802490234375, 0.066314697265625, 0.004425048828125, -0.0123291015625, 0.032135009765625, 0.12835693359375, 0.10223388671875, 0.04541015625, 0.0635986328125, 0.004974365234375, 0.00341796875, -0.10369873046875, -0.10589599609375, -0.112640380859375, -0.039581298828125, -0.03106689453125, 0.02069091796875, 0.042694091796875, 0.0430908203125, 0.1123046875, 0.05047607421875, 0.141387939453125, 0.051361083984375, 0.087066650390625, 0.04693603515625, 0.079559326171875, 0.0545654296875, -0.0701904296875, -0.03802490234375, -0.06207275390625, -0.028778076171875, -0.13446044921875, -0.030242919921875, -0.1181640625, -0.04278564453125, -0.031982421875, -0.079925537109375, 0.032257080078125, -0.07757568359375, -0.0716552734375, -0.07073974609375, -0.036407470703125, -0.0604248046875, 0.037261962890625, -0.022491455078125, 0.00628662109375, -0.081329345703125, -0.11474609375, -0.087158203125, -0.18218994140625, -0.034576416015625, -0.14044189453125, 0.008331298828125, -0.058441162109375, -0.046905517578125, -0.027130126953125, -0.099822998046875, -0.019500732421875, -0.1219482421875, -0.025665283203125, -0.107635498046875, -0.0196533203125, -0.052947998046875, -0.060943603515625, -0.01690673828125, -0.063446044921875, 0.036773681640625, 0.007537841796875, 0.06610107421875, 0.03216552734375, 0.041290283203125, 0.009368896484375, -0.005645751953125, -0.035064697265625, -0.0838623046875, -0.0692138671875, -0.139434814453125, -0.0965576171875, -0.08587646484375, -0.126922607421875, -0.074462890625, -0.0316162109375, -0.056976318359375, -0.020599365234375, -0.01666259765625, 0.025604248046875, 0.003936767578125, -0.01483154296875, 0.04937744140625, 0.003997802734375, 0.02178955078125, 0.00836181640625, -0.05841064453125, -0.03564453125, -0.02789306640625, -0.037811279296875, -0.00299072265625, -0.075042724609375, -0.034149169921875, 0.00665283203125, 0.005218505859375, -0.010986328125, -0.051361083984375, 0.018218994140625, -0.015777587890625, 0.04473876953125, 0.033294677734375, 0.053253173828125, 0.091888427734375, 0.09503173828125, 0.092254638671875, 0.02728271484375, 0.09124755859375, 0.072418212890625, 0.094940185546875, 0.060028076171875, 0.04278564453125, 0.035247802734375, 0.02435302734375, 0.027069091796875, 0.011322021484375, 0.044219970703125, 0.012725830078125, 0.048828125, 0.022491455078125, 0.047637939453125, 0.028106689453125, 0.01837158203125, 0.061126708984375, 0.042205810546875, 0.043121337890625, 0.06036376953125, 0.06475830078125, 0.007720947265625, 0.06964111328125, 0.048980712890625, 0.067779541015625, 0.08233642578125, 0.084686279296875, 0.11572265625, 0.0615234375, 0.067779541015625, 0.005889892578125, -0.002471923828125, -0.021087646484375, -0.054840087890625, -0.064422607421875, -0.043212890625, 0.010528564453125, -0.008087158203125, -0.049835205078125, -0.023406982421875, 0.02337646484375, 0.018341064453125, 0.048004150390625, 0.0247802734375, 0.0157470703125, 0.021392822265625, 0.048797607421875, 0.043548583984375, 0.014251708984375, 0.02874755859375, 0.00341796875, 0.026458740234375, 0.0264892578125, 0.037078857421875, 0.0360107421875, 0.02447509765625, 0.018218994140625, 0.007843017578125, 0.01116943359375, 0.00225830078125, 0.0277099609375, 0.002410888671875, -0.022308349609375, -0.0125732421875, -0.032623291015625, -0.06744384765625, -0.0618896484375, -0.05328369140625, -0.072906494140625, -0.071380615234375, -0.076019287109375, -0.093902587890625, -0.069091796875, -0.05694580078125, -0.079010009765625, -0.048797607421875, -0.04388427734375, -0.07293701171875, -0.070068359375, -0.055908203125, -0.03973388671875, -0.046234130859375, -0.065216064453125, -0.05877685546875, -0.047088623046875, -0.02880859375, -0.03314208984375, -0.0303955078125, -0.0255126953125, -0.025390625, -0.019287109375, -0.030303955078125, -0.007293701171875, -0.025604248046875, -0.03057861328125, -0.040863037109375, -0.0419921875, -0.04180908203125, -0.0413818359375, -0.018157958984375, -0.068939208984375, -0.08447265625, -0.09844970703125, -0.067962646484375, -0.079681396484375, -0.11541748046875, -0.09478759765625, -0.05859375, -0.08709716796875, -0.08575439453125, -0.01434326171875, -0.0758056640625, -0.0628662109375, -0.06768798828125, -0.074554443359375, -0.094818115234375, -0.0494384765625, 0.008758544921875, -0.031585693359375, -0.01263427734375, -0.028167724609375, -0.013214111328125, -0.05621337890625, -0.02020263671875, -0.022430419921875, -0.01068115234375, -0.03125, -0.06561279296875, -0.00787353515625, -0.028839111328125, 0.00799560546875, -0.0430908203125, 0.004302978515625, -0.018096923828125, 0.0106201171875, 0.022186279296875, -0.00128173828125, 0.083587646484375, 0.0543212890625, 0.110626220703125, 0.046173095703125, 0.070220947265625, 0.061370849609375, 0.066131591796875, 0.09063720703125, 0.039764404296875, 0.059173583984375, 0.03277587890625, 0.08856201171875, 0.07855224609375, 0.072845458984375, 0.0806884765625, 0.094085693359375, 0.03546142578125, 0.05865478515625, 0.08245849609375, 0.02001953125, 0.022491455078125, -0.016510009765625, 0.018646240234375, 0.0296630859375, 0.035980224609375, 0.040985107421875, 0.0677490234375, 0.01470947265625, 0.07342529296875, 0.094482421875, 0.02178955078125, 0.05194091796875, 0.001312255859375, 0.0589599609375, 0.025177001953125, 0.038818359375, 0.058135986328125, 0.0474853515625, 0.075164794921875, 0.02508544921875, 0.04376220703125, 0.051177978515625, 0.013824462890625, 0.001708984375, 0.027801513671875, 0.02581787109375, 0.04400634765625, 0.023956298828125, 0.029876708984375, 0.00372314453125, 0.004364013671875, -0.016937255859375, -0.00579833984375, 0.039276123046875, 0.037841796875, 0.054412841796875, -0.02734375, 0.00213623046875, -0.03363037109375, 0.001617431640625, -0.013580322265625, 0.0067138671875, 0.0126953125, -0.01678466796875, 0.01702880859375, -0.073944091796875, 0.00616455078125, -0.051055908203125, 0.043609619140625, -0.0029296875, 0.008056640625, 0.0367431640625, -0.0478515625, 0.042236328125, 0.00408935546875, 0.03997802734375, -0.064849853515625, 0.042205810546875, -0.02825927734375, -0.012298583984375, -0.017181396484375, -0.029571533203125, 0.05615234375, -0.11090087890625, -0.017364501953125, -0.079833984375, -0.00347900390625, -0.073211669921875, -0.060028076171875, -0.002288818359375, -0.04864501953125, -0.006378173828125, -0.100372314453125, -0.0252685546875, -0.05938720703125, -0.009735107421875, -0.056854248046875, -0.069183349609375, -0.069732666015625, -0.04888916015625, -0.060211181640625, -0.1201171875, -0.081085205078125, -0.1424560546875, -0.075592041015625, -0.13555908203125, -0.102020263671875, -0.17364501953125, -0.14166259765625, -0.0902099609375, -0.1646728515625, -0.067596435546875, -0.13037109375, -0.083465576171875, -0.07037353515625, -0.05718994140625, -0.03436279296875, -0.03662109375, -0.0535888671875, -0.0323486328125, -0.010162353515625, -0.074188232421875, -0.0296630859375, -0.039215087890625, -0.0382080078125, -0.034515380859375, -0.02789306640625, -0.0045166015625, -0.0484619140625, -0.0625, -0.00299072265625, -0.038848876953125, -0.0220947265625, -0.0201416015625, -0.028045654296875, 0.0057373046875, -0.060516357421875, 0.01171875, 0.007843017578125, 0.00872802734375, -0.014068603515625, -0.0230712890625, 0.00115966796875, -0.03009033203125, 0.01446533203125, -0.012451171875, 0.0135498046875, 0.024749755859375, 0.034698486328125, 0.019287109375, 0.03118896484375, 0.039306640625, 0.0341796875, 0.0401611328125, 0.01837158203125, 0.013397216796875, -0.025390625, 0.009002685546875, -0.0059814453125, 0.024810791015625, 0.0177001953125, -0.003021240234375, 0.00396728515625, 0.00775146484375, 0.047637939453125, 0.066558837890625, 0.082763671875, 0.041717529296875, 0.067840576171875, 0.036376953125, 0.061370849609375\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_16bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_16bit_48000.h}
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_16bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_48000::bitDepth} = 16\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_16bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_16bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_16bit_48000::testBuffer} = \{\{0.009552001953125, 0.0015869140625, -0.0078125, 0.010101318359375, 0.015838623046875, -0.0091552734375, -0.03271484375, 0.012451171875, 0.024200439453125, -0.041015625, 0.00286865234375, 0.0247802734375, -0.011444091796875, -0.0018310546875, -0.053619384765625, -0.053497314453125, -0.00543212890625, -0.003875732421875, -0.02850341796875, -0.038543701171875, -0.0006103515625, -0.059417724609375, -0.076080322265625, -0.024627685546875, -0.008544921875, 0.067718505859375, 0.060882568359375, 0.0457763671875, 0.07611083984375, 0.05322265625, 0.03656005859375, 0.038330078125, 0.104095458984375, 0.115631103515625, 0.072357177734375, 0.028594970703125, -0.024505615234375, 0.027862548828125, 0.06280517578125, 0.042327880859375, -0.00823974609375, -0.079071044921875, -0.095672607421875, -0.14447021484375, -0.1536865234375, -0.06884765625, -0.00634765625, -0.017547607421875, -0.019195556640625, -0.017913818359375, -0.0867919921875, -0.058135986328125, 0.014312744140625, 0.002349853515625, -0.029998779296875, -0.01702880859375, 0.101715087890625, 0.124664306640625, 0.10516357421875, 0.167205810546875, 0.144317626953125, 0.11053466796875, 0.026947021484375, -0.04449462890625, -0.00347900390625, 0.0157470703125, 0.073699951171875, 0.08599853515625, 0.073974609375, 0.12091064453125, 0.08251953125, 0.03070068359375, 0.022186279296875, 0.03271484375, 0.043975830078125, 0.026641845703125, -0.00518798828125, -0.00439453125, 0.05633544921875, 0.064910888671875, 0.030487060546875, -0.00836181640625, -0.07415771484375, -0.077545166015625, -0.04986572265625, -0.04522705078125, -0.056732177734375, -0.085662841796875, -0.06280517578125, -0.021484375, -0.04278564453125, -0.101104736328125, -0.155517578125, -0.124176025390625, -0.035064697265625, -0.00750732421875, -0.07073974609375, -0.123687744140625, -0.000152587890625, 0.059356689453125, -0.06842041015625, -0.031280517578125, 0.10589599609375, 0.0687255859375, -0.110198974609375, -0.18499755859375, -0.11370849609375, -0.054718017578125, -0.004791259765625, -0.037841796875, -0.04937744140625, -0.0015869140625, -0.0987548828125, -0.160125732421875, -0.09619140625, 0.014801025390625, 0.071868896484375, 0.0018310546875, 0.035736083984375, 0.05902099609375, -0.062286376953125, -0.1287841796875, -0.130462646484375, -0.073516845703125, -0.072784423828125, -0.073394775390625, 0.0230712890625, 0.00372314453125, -0.04766845703125, -0.03338623046875, 0.0394287109375, 0.1282958984375, 0.09771728515625, 0.02508544921875, -0.09869384765625, -0.12109375, 0.075653076171875, 0.1900634765625, 0.168914794921875, 0.11016845703125, 0.03326416015625, -0.010040283203125, -0.02618408203125, -0.06951904296875, -0.10546875, -0.00164794921875, 0.1368408203125, 0.147186279296875, 0.119659423828125, 0.10919189453125, 0.049591064453125, -0.062286376953125, -0.0689697265625, 0.0321044921875, 0.073089599609375, 0.090545654296875, 0.085784912109375, 0.052978515625, 0.02081298828125, -0.023681640625, 0.031646728515625, 0.06005859375, 0.00341796875, 0.017913818359375, 0.0389404296875, 0.0357666015625, -0.0186767578125, -0.037506103515625, 0.08551025390625, 0.10662841796875, 0.029052734375, 0.04766845703125, 0.101593017578125, 0.19451904296875, 0.18646240234375, -0.0447998046875, -0.17230224609375, -0.128021240234375, -0.120513916015625, -0.140777587890625, -0.098114013671875, -0.01129150390625, 0.07672119140625, 0.165313720703125, 0.10693359375, 0.02984619140625, 0.060333251953125, 0.014678955078125, -0.044403076171875, -0.136688232421875, -0.201812744140625, -0.1259765625, -0.0650634765625, -0.00689697265625, 0.05084228515625, -0.000335693359375, -0.142791748046875, -0.166229248046875, -0.046112060546875, 0.0142822265625, 0.078857421875, 0.110107421875, -0.0355224609375, -0.19854736328125, -0.138946533203125, 0.069854736328125, 0.191558837890625, 0.25177001953125, 0.127105712890625, -0.2283935546875, -0.421295166015625, -0.373291015625, -0.28814697265625, -0.2061767578125, -0.085052490234375, -0.047576904296875, -0.176544189453125, -0.15478515625, 0.081573486328125, 0.2298583984375, 0.281982421875, 0.2686767578125, 0.080902099609375, -0.117950439453125, -0.122314453125, -0.0638427734375, -0.079559326171875, -0.1121826171875, -0.1019287109375, -0.10064697265625, -0.107330322265625, -0.05731201171875, 0.015625, 0.083038330078125, 0.101776123046875, 0.041229248046875, 0.0211181640625, 0.09796142578125, 0.126800537109375, 0.074920654296875, 0.05908203125, 0.073822021484375, 0.08807373046875, 0.06243896484375, 0.0130615234375, 0.03302001953125, 0.024993896484375, -0.07000732421875, -0.1373291015625, -0.197052001953125, -0.171844482421875, 0.026580810546875, 0.0965576171875, -0.010711669921875, -0.04388427734375, -0.0458984375, -0.06494140625, -0.001617431640625, 0.07379150390625, 0.03271484375, -0.004180908203125, -0.047210693359375, -0.12298583984375, 0.003326416015625, 0.147247314453125, 0.130767822265625, 0.1695556640625, 0.235626220703125, 0.239105224609375, 0.21185302734375, 0.1990966796875, 0.246368408203125, 0.300537109375, 0.3109130859375, 0.2421875, 0.082183837890625, -0.01959228515625, -9.1552734375e-05, 0.018768310546875, 0.01885986328125, 0.024169921875, 0.026458740234375, 0.056488037109375, 0.101837158203125, 0.10894775390625, 0.08154296875, 0.059356689453125, 0.060516357421875, 0.000244140625, -0.133453369140625, -0.200775146484375, -0.181915283203125, -0.08795166015625, -0.01397705078125, 0.0185546875, 0.091705322265625, 0.020263671875, -0.04205322265625, 0.059478759765625, 0.107666015625, 0.171142578125, 0.205352783203125, 0.18194580078125, 0.14117431640625, 0.02252197265625, 0.030181884765625, 0.070587158203125, -0.05975341796875, -0.18084716796875, -0.244293212890625, -0.320098876953125, -0.251617431640625, -0.054229736328125, -0.018463134765625, -0.125518798828125, -0.232025146484375, -0.279693603515625, -0.247772216796875, -0.1702880859375, -0.0498046875, -0.118682861328125, -0.30462646484375, -0.311309814453125, -0.362091064453125, -0.433197021484375, -0.312255859375, -0.1749267578125, -0.144317626953125, -0.169464111328125, -0.177154541015625, -0.135162353515625, -0.023284912109375, 0.10821533203125, 0.157501220703125, 0.149810791015625, 0.190277099609375, 0.241485595703125, 0.150634765625, 0.03094482421875, 0.0299072265625, 0.087677001953125, 0.152130126953125, 0.1353759765625, 0.104095458984375, 0.16558837890625, 0.257171630859375, 0.3074951171875, 0.286773681640625, 0.2109375, 0.028167724609375, -0.116851806640625, -0.14923095703125, -0.1326904296875, 0.029022216796875, 0.1065673828125, 0.118865966796875, 0.217376708984375, 0.22393798828125, 0.1204833984375, -0.079345703125, -0.078521728515625, 0.060028076171875, 0.05572509765625, 0.0697021484375, -0.0111083984375, -0.0888671875, -0.10675048828125, -0.156219482421875, -0.143646240234375, -0.13800048828125, -0.0911865234375, -0.071319580078125, -0.080596923828125, -0.10809326171875, -0.14617919921875, -0.1256103515625, -0.19732666015625, -0.169189453125, -0.058258056640625, -0.064849853515625, -0.05877685546875, -0.033721923828125, -0.016204833984375, -0.03680419921875, -0.02386474609375, 0.049957275390625, 0.08245849609375, 0.020355224609375, -0.069580078125, -0.035797119140625, 0.062042236328125, 0.1090087890625, 0.029937744140625, -0.01580810546875, 0.038177490234375, 0.0303955078125, 0.06951904296875, 0.162689208984375, 0.260223388671875, 0.225921630859375, 0.071990966796875, 0.049835205078125, 0.035736083984375, 0.056365966796875, 0.10784912109375, 0.12786865234375, 0.22332763671875, 0.242401123046875, 0.22943115234375, 0.189666748046875, 0.09967041015625, 0.12066650390625, 0.13116455078125, 0.126678466796875, 0.13763427734375, 0.124664306640625, 0.09564208984375, -0.025970458984375, -0.087005615234375, -0.0201416015625, -0.021209716796875, -0.00762939453125, 0.15771484375, 0.230712890625, 0.136444091796875, 0.096099853515625, 0.118072509765625, 0.1395263671875, 0.092926025390625, 0.045013427734375, 0.04302978515625, 0.0050048828125, 0.062896728515625, 0.131866455078125, 0.1470947265625, 0.175201416015625, 0.094818115234375, -0.000213623046875, -0.036224365234375, -0.027557373046875, 0.031707763671875, 0.07171630859375, 0.07440185546875, 0.0364990234375, 0.0478515625, 0.118438720703125, 0.095916748046875, 0.021484375, 0.025604248046875, 0.035308837890625, 0.030670166015625, 0.041656494140625, -0.0079345703125, -0.066253662109375, -0.07470703125, -0.02252197265625, 0.03021240234375, 0.0255126953125, 0.03350830078125, 0.030975341796875, -0.014495849609375, -0.082794189453125, -0.06915283203125, 0.013824462890625, 0.001068115234375, -0.0189208984375, 0.022308349609375, 0.068878173828125, 0.00653076171875, -0.11773681640625, -0.064849853515625, 0.031707763671875, 0.0272216796875, 0.01507568359375, 0.04547119140625, 0.060638427734375, -0.01031494140625, -0.01934814453125, 0.047210693359375, 0.038360595703125, 0.031097412109375, 0.05364990234375, 0.06817626953125, 0.103668212890625, 0.049224853515625, -0.03436279296875, -0.00872802734375, 0.000457763671875, 0.01220703125, 0.052032470703125, 0.028594970703125, 0.002655029296875, -0.0074462890625, 0.001617431640625, 0.03961181640625, 0.047576904296875, -0.0181884765625, -0.10174560546875, -0.114532470703125, -0.092498779296875\}, \{0.008148193359375, 0.001922607421875, -0.00592041015625, 0.006072998046875, 0.00433349609375, -0.02215576171875, -0.044464111328125, -0.01068115234375, -0.00244140625, -0.05548095703125, -0.0177001953125, 0.002105712890625, -0.02801513671875, -0.019866943359375, -0.06005859375, -0.055755615234375, -0.007293701171875, 0.004150390625, -0.007049560546875, -0.006103515625, 0.03515625, 0.00927734375, 0.02313232421875, 0.071685791015625, 0.07293701171875, 0.133270263671875, 0.122589111328125, 0.072662353515625, 0.051727294921875, 0.025482177734375, 0.02557373046875, 0.025848388671875, 0.067657470703125, 0.048370361328125, -0.04010009765625, -0.1241455078125, -0.1771240234375, -0.112274169921875, -0.071868896484375, -0.0731201171875, -0.041473388671875, -0.02825927734375, -0.0421142578125, -0.0849609375, -0.06732177734375, 0.01202392578125, 0.096893310546875, 0.162933349609375, 0.19573974609375, 0.169830322265625, 0.08270263671875, 0.079132080078125, 0.08416748046875, 0.044342041015625, 0.068115234375, 0.085540771484375, 0.0640869140625, -0.01177978515625, 0.028564453125, 0.186981201171875, 0.166229248046875, 0.0439453125, -0.076416015625, -0.101318359375, -0.02947998046875, -0.042877197265625, -0.049591064453125, -0.047698974609375, -0.059356689453125, -0.048614501953125, -0.070220947265625, -0.0772705078125, -0.10601806640625, -0.1336669921875, -0.081024169921875, -0.039794921875, -0.085968017578125, -0.111297607421875, -0.022979736328125, 0.026153564453125, -0.009002685546875, -0.07135009765625, -0.1192626953125, -0.05718994140625, -0.002593994140625, -0.051422119140625, -0.09393310546875, -0.060150146484375, 0.028045654296875, 0.038482666015625, -0.068939208984375, -0.1319580078125, -0.078521728515625, 0.01861572265625, 0.028228759765625, -0.05096435546875, -0.081024169921875, -0.034271240234375, 0.04180908203125, 0.0048828125, -0.035675048828125, 0.102386474609375, 0.15423583984375, 0.04058837890625, -0.082183837890625, -0.13922119140625, -0.101898193359375, -0.039794921875, 0.004150390625, 0.0057373046875, 0.03619384765625, 0.017059326171875, -0.09625244140625, -0.0316162109375, 0.0819091796875, 0.076812744140625, 0.0758056640625, 0.0992431640625, 0.17840576171875, 0.147674560546875, 0.015838623046875, -0.00518798828125, 0.00091552734375, 0.0130615234375, 0.01348876953125, 0.0511474609375, 0.1390380859375, 0.091339111328125, 0.037750244140625, 0.054046630859375, 0.1004638671875, 0.193756103515625, 0.20916748046875, 0.10687255859375, -0.081573486328125, -0.08984375, 0.1466064453125, 0.2391357421875, 0.17156982421875, 0.115692138671875, 0.055084228515625, -0.006439208984375, -0.039642333984375, -0.05389404296875, -0.0479736328125, 0.032135009765625, 0.111846923828125, 0.10772705078125, 0.109222412109375, 0.100799560546875, -0.0164794921875, -0.139556884765625, -0.110595703125, -0.024688720703125, 0.008819580078125, 0.064605712890625, 0.07708740234375, 0.0361328125, 0.00701904296875, -0.030426025390625, -0.00384521484375, -0.011688232421875, -0.064239501953125, -0.0157470703125, -0.005157470703125, -0.078369140625, -0.106658935546875, -0.021697998046875, 0.059661865234375, -0.04376220703125, -0.116790771484375, -0.00091552734375, 0.088134765625, 0.110504150390625, 0.01934814453125, -0.21356201171875, -0.297210693359375, -0.2626953125, -0.3038330078125, -0.307708740234375, -0.193145751953125, -0.068511962890625, -0.0133056640625, 0.0303955078125, 0.0323486328125, 0.024322509765625, -0.00604248046875, -0.1163330078125, -0.135650634765625, -0.16473388671875, -0.24261474609375, -0.186920166015625, -0.085418701171875, -0.001800537109375, 0.052032470703125, 0.00762939453125, -0.127838134765625, -0.16314697265625, -0.055511474609375, 0.00048828125, 0.037994384765625, 0.073211669921875, -0.026123046875, -0.193634033203125, -0.15155029296875, 0.107208251953125, 0.250732421875, 0.242431640625, 0.0946044921875, -0.209747314453125, -0.3900146484375, -0.3736572265625, -0.297637939453125, -0.20697021484375, -0.1026611328125, -0.073089599609375, -0.14495849609375, -0.07171630859375, 0.140960693359375, 0.254791259765625, 0.310791015625, 0.309478759765625, 0.125823974609375, -0.09967041015625, -0.154876708984375, -0.09375, -0.047088623046875, -0.038299560546875, -0.044403076171875, -0.0491943359375, -0.0184326171875, 0.06207275390625, 0.14190673828125, 0.19647216796875, 0.206024169921875, 0.18145751953125, 0.19793701171875, 0.243682861328125, 0.234130859375, 0.212921142578125, 0.238861083984375, 0.25628662109375, 0.242828369140625, 0.173248291015625, 0.101165771484375, 0.14263916015625, 0.14605712890625, 0.009429931640625, -0.079132080078125, -0.09832763671875, -0.061798095703125, 0.082000732421875, 0.115478515625, 0.014495849609375, -0.026336669921875, -0.050506591796875, -0.03863525390625, 0.067047119140625, 0.10845947265625, 0.00506591796875, -0.049774169921875, -0.06890869140625, -0.135406494140625, -0.038238525390625, 0.1025390625, 0.1170654296875, 0.16070556640625, 0.206512451171875, 0.203277587890625, 0.195220947265625, 0.18792724609375, 0.20587158203125, 0.22711181640625, 0.23492431640625, 0.186248779296875, 0.046478271484375, -0.036224365234375, -0.028594970703125, -0.061279296875, -0.0950927734375, -0.045501708984375, 0.02386474609375, -0.005126953125, -0.103363037109375, -0.1416015625, -0.13311767578125, -0.14404296875, -0.15185546875, -0.2060546875, -0.30322265625, -0.3173828125, -0.263214111328125, -0.174896240234375, -0.095062255859375, -0.032379150390625, 0.02777099609375, -0.065155029296875, -0.126953125, -0.029205322265625, 0.0206298828125, 0.083984375, 0.132049560546875, 0.11151123046875, 0.050811767578125, -0.045806884765625, -0.0123291015625, 0.00885009765625, -0.1513671875, -0.257781982421875, -0.274200439453125, -0.344573974609375, -0.299774169921875, -0.087860107421875, -0.03240966796875, -0.158233642578125, -0.252532958984375, -0.249725341796875, -0.2222900390625, -0.2042236328125, -0.11883544921875, -0.14630126953125, -0.286346435546875, -0.310394287109375, -0.365478515625, -0.419708251953125, -0.295867919921875, -0.157135009765625, -0.13360595703125, -0.15350341796875, -0.148468017578125, -0.10870361328125, 0.008697509765625, 0.1446533203125, 0.194793701171875, 0.2056884765625, 0.25213623046875, 0.27337646484375, 0.174560546875, 0.08740234375, 0.09844970703125, 0.140380859375, 0.2135009765625, 0.213104248046875, 0.1611328125, 0.2122802734375, 0.322479248046875, 0.373016357421875, 0.3465576171875, 0.2718505859375, 0.115020751953125, 0.017364501953125, -0.00787353515625, -0.02764892578125, 0.118408203125, 0.221923828125, 0.2227783203125, 0.286041259765625, 0.293548583984375, 0.169830322265625, -0.040191650390625, -0.00457763671875, 0.164337158203125, 0.141204833984375, 0.104949951171875, 0.0435791015625, 0.00958251953125, -0.01446533203125, -0.09429931640625, -0.108062744140625, -0.104888916015625, -0.049468994140625, 0.00018310546875, -0.000213623046875, -0.058685302734375, -0.11651611328125, -0.1019287109375, -0.1669921875, -0.1356201171875, -0.015472412109375, -0.01983642578125, -0.039031982421875, -0.031494140625, -0.02117919921875, -0.015869140625, 0.021697998046875, 0.054595947265625, 0.031341552734375, -0.025360107421875, -0.067657470703125, -0.0250244140625, 0.040008544921875, 0.06512451171875, -0.0074462890625, -0.04791259765625, 0.001983642578125, 0.005706787109375, 0.038726806640625, 0.09051513671875, 0.137451171875, 0.093780517578125, -0.027069091796875, -0.0577392578125, -0.11834716796875, -0.1190185546875, -0.043060302734375, 0.004791259765625, 0.092071533203125, 0.105804443359375, 0.08160400390625, 0.017333984375, -0.07000732421875, -0.02978515625, -0.00506591796875, -0.00775146484375, 0.013458251953125, 0.009552001953125, -0.031005859375, -0.133544921875, -0.16131591796875, -0.109893798828125, -0.10784912109375, -0.036376953125, 0.141265869140625, 0.170135498046875, 0.07574462890625, 0.068023681640625, 0.074462890625, 0.065277099609375, 0.037109375, 0.016998291015625, 0.0191650390625, -0.010711669921875, 0.069244384765625, 0.1734619140625, 0.195892333984375, 0.193267822265625, 0.099273681640625, 0.0146484375, -0.01519775390625, 0.00140380859375, 0.0791015625, 0.10394287109375, 0.074676513671875, 0.063232421875, 0.113067626953125, 0.16607666015625, 0.1220703125, 0.074951171875, 0.105438232421875, 0.104248046875, 0.08135986328125, 0.098388671875, 0.071502685546875, 0.014373779296875, 0.00823974609375, 0.07562255859375, 0.13818359375, 0.1527099609375, 0.175994873046875, 0.178009033203125, 0.13592529296875, 0.07659912109375, 0.091644287109375, 0.155487060546875, 0.1455078125, 0.135498046875, 0.154815673828125, 0.194549560546875, 0.1611328125, 0.043212890625, 0.06201171875, 0.146514892578125, 0.1588134765625, 0.143096923828125, 0.1402587890625, 0.134002685546875, 0.066009521484375, 0.044830322265625, 0.078582763671875, 0.0577392578125, 0.063568115234375, 0.0948486328125, 0.10430908203125, 0.11895751953125, 0.05084228515625, -0.040374755859375, -0.036468505859375, -0.0318603515625, -0.008636474609375, 0.033355712890625, 0.002685546875, -0.042816162109375, -0.0450439453125, -0.020477294921875, -0.02435302734375, -0.06036376953125, -0.101470947265625, -0.1456298828125, -0.156219482421875, -0.149017333984375\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_16bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_16bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_16bit_48000.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_16bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 16;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.009552001953125, 0.0015869140625, -0.0078125, 0.010101318359375, 0.015838623046875, -0.0091552734375, -0.03271484375, 0.012451171875, 0.024200439453125, -0.041015625, 0.00286865234375, 0.0247802734375, -0.011444091796875, -0.0018310546875, -0.053619384765625, -0.053497314453125, -0.00543212890625, -0.003875732421875, -0.02850341796875, -0.038543701171875, -0.0006103515625, -0.059417724609375, -0.076080322265625, -0.024627685546875, -0.008544921875, 0.067718505859375, 0.060882568359375, 0.0457763671875, 0.07611083984375, 0.05322265625, 0.03656005859375, 0.038330078125, 0.104095458984375, 0.115631103515625, 0.072357177734375, 0.028594970703125, -0.024505615234375, 0.027862548828125, 0.06280517578125, 0.042327880859375, -0.00823974609375, -0.079071044921875, -0.095672607421875, -0.14447021484375, -0.1536865234375, -0.06884765625, -0.00634765625, -0.017547607421875, -0.019195556640625, -0.017913818359375, -0.0867919921875, -0.058135986328125, 0.014312744140625, 0.002349853515625, -0.029998779296875, -0.01702880859375, 0.101715087890625, 0.124664306640625, 0.10516357421875, 0.167205810546875, 0.144317626953125, 0.11053466796875, 0.026947021484375, -0.04449462890625, -0.00347900390625, 0.0157470703125, 0.073699951171875, 0.08599853515625, 0.073974609375, 0.12091064453125, 0.08251953125, 0.03070068359375, 0.022186279296875, 0.03271484375, 0.043975830078125, 0.026641845703125, -0.00518798828125, -0.00439453125, 0.05633544921875, 0.064910888671875, 0.030487060546875, -0.00836181640625, -0.07415771484375, -0.077545166015625, -0.04986572265625, -0.04522705078125, -0.056732177734375, -0.085662841796875, -0.06280517578125, -0.021484375, -0.04278564453125, -0.101104736328125, -0.155517578125, -0.124176025390625, -0.035064697265625, -0.00750732421875, -0.07073974609375, -0.123687744140625, -0.000152587890625, 0.059356689453125, -0.06842041015625, -0.031280517578125, 0.10589599609375, 0.0687255859375, -0.110198974609375, -0.18499755859375, -0.11370849609375, -0.054718017578125, -0.004791259765625, -0.037841796875, -0.04937744140625, -0.0015869140625, -0.0987548828125, -0.160125732421875, -0.09619140625, 0.014801025390625, 0.071868896484375, 0.0018310546875, 0.035736083984375, 0.05902099609375, -0.062286376953125, -0.1287841796875, -0.130462646484375, -0.073516845703125, -0.072784423828125, -0.073394775390625, 0.0230712890625, 0.00372314453125, -0.04766845703125, -0.03338623046875, 0.0394287109375, 0.1282958984375, 0.09771728515625, 0.02508544921875, -0.09869384765625, -0.12109375, 0.075653076171875, 0.1900634765625, 0.168914794921875, 0.11016845703125, 0.03326416015625, -0.010040283203125, -0.02618408203125, -0.06951904296875, -0.10546875, -0.00164794921875, 0.1368408203125, 0.147186279296875, 0.119659423828125, 0.10919189453125, 0.049591064453125, -0.062286376953125, -0.0689697265625, 0.0321044921875, 0.073089599609375, 0.090545654296875, 0.085784912109375, 0.052978515625, 0.02081298828125, -0.023681640625, 0.031646728515625, 0.06005859375, 0.00341796875, 0.017913818359375, 0.0389404296875, 0.0357666015625, -0.0186767578125, -0.037506103515625, 0.08551025390625, 0.10662841796875, 0.029052734375, 0.04766845703125, 0.101593017578125, 0.19451904296875, 0.18646240234375, -0.0447998046875, -0.17230224609375, -0.128021240234375, -0.120513916015625, -0.140777587890625, -0.098114013671875, -0.01129150390625, 0.07672119140625, 0.165313720703125, 0.10693359375, 0.02984619140625, 0.060333251953125, 0.014678955078125, -0.044403076171875, -0.136688232421875, -0.201812744140625, -0.1259765625, -0.0650634765625, -0.00689697265625, 0.05084228515625, -0.000335693359375, -0.142791748046875, -0.166229248046875, -0.046112060546875, 0.0142822265625, 0.078857421875, 0.110107421875, -0.0355224609375, -0.19854736328125, -0.138946533203125, 0.069854736328125, 0.191558837890625, 0.25177001953125, 0.127105712890625, -0.2283935546875, -0.421295166015625, -0.373291015625, -0.28814697265625, -0.2061767578125, -0.085052490234375, -0.047576904296875, -0.176544189453125, -0.15478515625, 0.081573486328125, 0.2298583984375, 0.281982421875, 0.2686767578125, 0.080902099609375, -0.117950439453125, -0.122314453125, -0.0638427734375, -0.079559326171875, -0.1121826171875, -0.1019287109375, -0.10064697265625, -0.107330322265625, -0.05731201171875, 0.015625, 0.083038330078125, 0.101776123046875, 0.041229248046875, 0.0211181640625, 0.09796142578125, 0.126800537109375, 0.074920654296875, 0.05908203125, 0.073822021484375, 0.08807373046875, 0.06243896484375, 0.0130615234375, 0.03302001953125, 0.024993896484375, -0.07000732421875, -0.1373291015625, -0.197052001953125, -0.171844482421875, 0.026580810546875, 0.0965576171875, -0.010711669921875, -0.04388427734375, -0.0458984375, -0.06494140625, -0.001617431640625, 0.07379150390625, 0.03271484375, -0.004180908203125, -0.047210693359375, -0.12298583984375, 0.003326416015625, 0.147247314453125, 0.130767822265625, 0.1695556640625, 0.235626220703125, 0.239105224609375, 0.21185302734375, 0.1990966796875, 0.246368408203125, 0.300537109375, 0.3109130859375, 0.2421875, 0.082183837890625, -0.01959228515625, -9.1552734375e-05, 0.018768310546875, 0.01885986328125, 0.024169921875, 0.026458740234375, 0.056488037109375, 0.101837158203125, 0.10894775390625, 0.08154296875, 0.059356689453125, 0.060516357421875, 0.000244140625, -0.133453369140625, -0.200775146484375, -0.181915283203125, -0.08795166015625, -0.01397705078125, 0.0185546875, 0.091705322265625, 0.020263671875, -0.04205322265625, 0.059478759765625, 0.107666015625, 0.171142578125, 0.205352783203125, 0.18194580078125, 0.14117431640625, 0.02252197265625, 0.030181884765625, 0.070587158203125, -0.05975341796875, -0.18084716796875, -0.244293212890625, -0.320098876953125, -0.251617431640625, -0.054229736328125, -0.018463134765625, -0.125518798828125, -0.232025146484375, -0.279693603515625, -0.247772216796875, -0.1702880859375, -0.0498046875, -0.118682861328125, -0.30462646484375, -0.311309814453125, -0.362091064453125, -0.433197021484375, -0.312255859375, -0.1749267578125, -0.144317626953125, -0.169464111328125, -0.177154541015625, -0.135162353515625, -0.023284912109375, 0.10821533203125, 0.157501220703125, 0.149810791015625, 0.190277099609375, 0.241485595703125, 0.150634765625, 0.03094482421875, 0.0299072265625, 0.087677001953125, 0.152130126953125, 0.1353759765625, 0.104095458984375, 0.16558837890625, 0.257171630859375, 0.3074951171875, 0.286773681640625, 0.2109375, 0.028167724609375, -0.116851806640625, -0.14923095703125, -0.1326904296875, 0.029022216796875, 0.1065673828125, 0.118865966796875, 0.217376708984375, 0.22393798828125, 0.1204833984375, -0.079345703125, -0.078521728515625, 0.060028076171875, 0.05572509765625, 0.0697021484375, -0.0111083984375, -0.0888671875, -0.10675048828125, -0.156219482421875, -0.143646240234375, -0.13800048828125, -0.0911865234375, -0.071319580078125, -0.080596923828125, -0.10809326171875, -0.14617919921875, -0.1256103515625, -0.19732666015625, -0.169189453125, -0.058258056640625, -0.064849853515625, -0.05877685546875, -0.033721923828125, -0.016204833984375, -0.03680419921875, -0.02386474609375, 0.049957275390625, 0.08245849609375, 0.020355224609375, -0.069580078125, -0.035797119140625, 0.062042236328125, 0.1090087890625, 0.029937744140625, -0.01580810546875, 0.038177490234375, 0.0303955078125, 0.06951904296875, 0.162689208984375, 0.260223388671875, 0.225921630859375, 0.071990966796875, 0.049835205078125, 0.035736083984375, 0.056365966796875, 0.10784912109375, 0.12786865234375, 0.22332763671875, 0.242401123046875, 0.22943115234375, 0.189666748046875, 0.09967041015625, 0.12066650390625, 0.13116455078125, 0.126678466796875, 0.13763427734375, 0.124664306640625, 0.09564208984375, -0.025970458984375, -0.087005615234375, -0.0201416015625, -0.021209716796875, -0.00762939453125, 0.15771484375, 0.230712890625, 0.136444091796875, 0.096099853515625, 0.118072509765625, 0.1395263671875, 0.092926025390625, 0.045013427734375, 0.04302978515625, 0.0050048828125, 0.062896728515625, 0.131866455078125, 0.1470947265625, 0.175201416015625, 0.094818115234375, -0.000213623046875, -0.036224365234375, -0.027557373046875, 0.031707763671875, 0.07171630859375, 0.07440185546875, 0.0364990234375, 0.0478515625, 0.118438720703125, 0.095916748046875, 0.021484375, 0.025604248046875, 0.035308837890625, 0.030670166015625, 0.041656494140625, -0.0079345703125, -0.066253662109375, -0.07470703125, -0.02252197265625, 0.03021240234375, 0.0255126953125, 0.03350830078125, 0.030975341796875, -0.014495849609375, -0.082794189453125, -0.06915283203125, 0.013824462890625, 0.001068115234375, -0.0189208984375, 0.022308349609375, 0.068878173828125, 0.00653076171875, -0.11773681640625, -0.064849853515625, 0.031707763671875, 0.0272216796875, 0.01507568359375, 0.04547119140625, 0.060638427734375, -0.01031494140625, -0.01934814453125, 0.047210693359375, 0.038360595703125, 0.031097412109375, 0.05364990234375, 0.06817626953125, 0.103668212890625, 0.049224853515625, -0.03436279296875, -0.00872802734375, 0.000457763671875, 0.01220703125, 0.052032470703125, 0.028594970703125, 0.002655029296875, -0.0074462890625, 0.001617431640625, 0.03961181640625, 0.047576904296875, -0.0181884765625, -0.10174560546875, -0.114532470703125, -0.092498779296875\}, \{0.008148193359375, 0.001922607421875, -0.00592041015625, 0.006072998046875, 0.00433349609375, -0.02215576171875, -0.044464111328125, -0.01068115234375, -0.00244140625, -0.05548095703125, -0.0177001953125, 0.002105712890625, -0.02801513671875, -0.019866943359375, -0.06005859375, -0.055755615234375, -0.007293701171875, 0.004150390625, -0.007049560546875, -0.006103515625, 0.03515625, 0.00927734375, 0.02313232421875, 0.071685791015625, 0.07293701171875, 0.133270263671875, 0.122589111328125, 0.072662353515625, 0.051727294921875, 0.025482177734375, 0.02557373046875, 0.025848388671875, 0.067657470703125, 0.048370361328125, -0.04010009765625, -0.1241455078125, -0.1771240234375, -0.112274169921875, -0.071868896484375, -0.0731201171875, -0.041473388671875, -0.02825927734375, -0.0421142578125, -0.0849609375, -0.06732177734375, 0.01202392578125, 0.096893310546875, 0.162933349609375, 0.19573974609375, 0.169830322265625, 0.08270263671875, 0.079132080078125, 0.08416748046875, 0.044342041015625, 0.068115234375, 0.085540771484375, 0.0640869140625, -0.01177978515625, 0.028564453125, 0.186981201171875, 0.166229248046875, 0.0439453125, -0.076416015625, -0.101318359375, -0.02947998046875, -0.042877197265625, -0.049591064453125, -0.047698974609375, -0.059356689453125, -0.048614501953125, -0.070220947265625, -0.0772705078125, -0.10601806640625, -0.1336669921875, -0.081024169921875, -0.039794921875, -0.085968017578125, -0.111297607421875, -0.022979736328125, 0.026153564453125, -0.009002685546875, -0.07135009765625, -0.1192626953125, -0.05718994140625, -0.002593994140625, -0.051422119140625, -0.09393310546875, -0.060150146484375, 0.028045654296875, 0.038482666015625, -0.068939208984375, -0.1319580078125, -0.078521728515625, 0.01861572265625, 0.028228759765625, -0.05096435546875, -0.081024169921875, -0.034271240234375, 0.04180908203125, 0.0048828125, -0.035675048828125, 0.102386474609375, 0.15423583984375, 0.04058837890625, -0.082183837890625, -0.13922119140625, -0.101898193359375, -0.039794921875, 0.004150390625, 0.0057373046875, 0.03619384765625, 0.017059326171875, -0.09625244140625, -0.0316162109375, 0.0819091796875, 0.076812744140625, 0.0758056640625, 0.0992431640625, 0.17840576171875, 0.147674560546875, 0.015838623046875, -0.00518798828125, 0.00091552734375, 0.0130615234375, 0.01348876953125, 0.0511474609375, 0.1390380859375, 0.091339111328125, 0.037750244140625, 0.054046630859375, 0.1004638671875, 0.193756103515625, 0.20916748046875, 0.10687255859375, -0.081573486328125, -0.08984375, 0.1466064453125, 0.2391357421875, 0.17156982421875, 0.115692138671875, 0.055084228515625, -0.006439208984375, -0.039642333984375, -0.05389404296875, -0.0479736328125, 0.032135009765625, 0.111846923828125, 0.10772705078125, 0.109222412109375, 0.100799560546875, -0.0164794921875, -0.139556884765625, -0.110595703125, -0.024688720703125, 0.008819580078125, 0.064605712890625, 0.07708740234375, 0.0361328125, 0.00701904296875, -0.030426025390625, -0.00384521484375, -0.011688232421875, -0.064239501953125, -0.0157470703125, -0.005157470703125, -0.078369140625, -0.106658935546875, -0.021697998046875, 0.059661865234375, -0.04376220703125, -0.116790771484375, -0.00091552734375, 0.088134765625, 0.110504150390625, 0.01934814453125, -0.21356201171875, -0.297210693359375, -0.2626953125, -0.3038330078125, -0.307708740234375, -0.193145751953125, -0.068511962890625, -0.0133056640625, 0.0303955078125, 0.0323486328125, 0.024322509765625, -0.00604248046875, -0.1163330078125, -0.135650634765625, -0.16473388671875, -0.24261474609375, -0.186920166015625, -0.085418701171875, -0.001800537109375, 0.052032470703125, 0.00762939453125, -0.127838134765625, -0.16314697265625, -0.055511474609375, 0.00048828125, 0.037994384765625, 0.073211669921875, -0.026123046875, -0.193634033203125, -0.15155029296875, 0.107208251953125, 0.250732421875, 0.242431640625, 0.0946044921875, -0.209747314453125, -0.3900146484375, -0.3736572265625, -0.297637939453125, -0.20697021484375, -0.1026611328125, -0.073089599609375, -0.14495849609375, -0.07171630859375, 0.140960693359375, 0.254791259765625, 0.310791015625, 0.309478759765625, 0.125823974609375, -0.09967041015625, -0.154876708984375, -0.09375, -0.047088623046875, -0.038299560546875, -0.044403076171875, -0.0491943359375, -0.0184326171875, 0.06207275390625, 0.14190673828125, 0.19647216796875, 0.206024169921875, 0.18145751953125, 0.19793701171875, 0.243682861328125, 0.234130859375, 0.212921142578125, 0.238861083984375, 0.25628662109375, 0.242828369140625, 0.173248291015625, 0.101165771484375, 0.14263916015625, 0.14605712890625, 0.009429931640625, -0.079132080078125, -0.09832763671875, -0.061798095703125, 0.082000732421875, 0.115478515625, 0.014495849609375, -0.026336669921875, -0.050506591796875, -0.03863525390625, 0.067047119140625, 0.10845947265625, 0.00506591796875, -0.049774169921875, -0.06890869140625, -0.135406494140625, -0.038238525390625, 0.1025390625, 0.1170654296875, 0.16070556640625, 0.206512451171875, 0.203277587890625, 0.195220947265625, 0.18792724609375, 0.20587158203125, 0.22711181640625, 0.23492431640625, 0.186248779296875, 0.046478271484375, -0.036224365234375, -0.028594970703125, -0.061279296875, -0.0950927734375, -0.045501708984375, 0.02386474609375, -0.005126953125, -0.103363037109375, -0.1416015625, -0.13311767578125, -0.14404296875, -0.15185546875, -0.2060546875, -0.30322265625, -0.3173828125, -0.263214111328125, -0.174896240234375, -0.095062255859375, -0.032379150390625, 0.02777099609375, -0.065155029296875, -0.126953125, -0.029205322265625, 0.0206298828125, 0.083984375, 0.132049560546875, 0.11151123046875, 0.050811767578125, -0.045806884765625, -0.0123291015625, 0.00885009765625, -0.1513671875, -0.257781982421875, -0.274200439453125, -0.344573974609375, -0.299774169921875, -0.087860107421875, -0.03240966796875, -0.158233642578125, -0.252532958984375, -0.249725341796875, -0.2222900390625, -0.2042236328125, -0.11883544921875, -0.14630126953125, -0.286346435546875, -0.310394287109375, -0.365478515625, -0.419708251953125, -0.295867919921875, -0.157135009765625, -0.13360595703125, -0.15350341796875, -0.148468017578125, -0.10870361328125, 0.008697509765625, 0.1446533203125, 0.194793701171875, 0.2056884765625, 0.25213623046875, 0.27337646484375, 0.174560546875, 0.08740234375, 0.09844970703125, 0.140380859375, 0.2135009765625, 0.213104248046875, 0.1611328125, 0.2122802734375, 0.322479248046875, 0.373016357421875, 0.3465576171875, 0.2718505859375, 0.115020751953125, 0.017364501953125, -0.00787353515625, -0.02764892578125, 0.118408203125, 0.221923828125, 0.2227783203125, 0.286041259765625, 0.293548583984375, 0.169830322265625, -0.040191650390625, -0.00457763671875, 0.164337158203125, 0.141204833984375, 0.104949951171875, 0.0435791015625, 0.00958251953125, -0.01446533203125, -0.09429931640625, -0.108062744140625, -0.104888916015625, -0.049468994140625, 0.00018310546875, -0.000213623046875, -0.058685302734375, -0.11651611328125, -0.1019287109375, -0.1669921875, -0.1356201171875, -0.015472412109375, -0.01983642578125, -0.039031982421875, -0.031494140625, -0.02117919921875, -0.015869140625, 0.021697998046875, 0.054595947265625, 0.031341552734375, -0.025360107421875, -0.067657470703125, -0.0250244140625, 0.040008544921875, 0.06512451171875, -0.0074462890625, -0.04791259765625, 0.001983642578125, 0.005706787109375, 0.038726806640625, 0.09051513671875, 0.137451171875, 0.093780517578125, -0.027069091796875, -0.0577392578125, -0.11834716796875, -0.1190185546875, -0.043060302734375, 0.004791259765625, 0.092071533203125, 0.105804443359375, 0.08160400390625, 0.017333984375, -0.07000732421875, -0.02978515625, -0.00506591796875, -0.00775146484375, 0.013458251953125, 0.009552001953125, -0.031005859375, -0.133544921875, -0.16131591796875, -0.109893798828125, -0.10784912109375, -0.036376953125, 0.141265869140625, 0.170135498046875, 0.07574462890625, 0.068023681640625, 0.074462890625, 0.065277099609375, 0.037109375, 0.016998291015625, 0.0191650390625, -0.010711669921875, 0.069244384765625, 0.1734619140625, 0.195892333984375, 0.193267822265625, 0.099273681640625, 0.0146484375, -0.01519775390625, 0.00140380859375, 0.0791015625, 0.10394287109375, 0.074676513671875, 0.063232421875, 0.113067626953125, 0.16607666015625, 0.1220703125, 0.074951171875, 0.105438232421875, 0.104248046875, 0.08135986328125, 0.098388671875, 0.071502685546875, 0.014373779296875, 0.00823974609375, 0.07562255859375, 0.13818359375, 0.1527099609375, 0.175994873046875, 0.178009033203125, 0.13592529296875, 0.07659912109375, 0.091644287109375, 0.155487060546875, 0.1455078125, 0.135498046875, 0.154815673828125, 0.194549560546875, 0.1611328125, 0.043212890625, 0.06201171875, 0.146514892578125, 0.1588134765625, 0.143096923828125, 0.1402587890625, 0.134002685546875, 0.066009521484375, 0.044830322265625, 0.078582763671875, 0.0577392578125, 0.063568115234375, 0.0948486328125, 0.10430908203125, 0.11895751953125, 0.05084228515625, -0.040374755859375, -0.036468505859375, -0.0318603515625, -0.008636474609375, 0.033355712890625, 0.002685546875, -0.042816162109375, -0.0450439453125, -0.020477294921875, -0.02435302734375, -0.06036376953125, -0.101470947265625, -0.1456298828125, -0.156219482421875, -0.149017333984375\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_24bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_24bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_24bit_44100.h}
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_24bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_44100::bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_24bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_24bit_44100::testBuffer} = \{\{7.772445678710938e-05, 0.0004398822784423828, 0.006743192672729492, 0.01638209819793701, 0.015148758888244629, 0.003415822982788086, -0.012502312660217285, -0.02174532413482666, -0.022707462310791016, -0.01782703399658203, -0.000893712043762207, 0.010785818099975586, 0.007664799690246582, -0.0017873048782348633, -0.006292223930358887, 0.0017839670181274414, 0.03135275840759277, 0.02077305316925049, -0.022290825843811035, 0.00968170166015625, -0.0037343502044677734, -0.04702770709991455, 0.014231562614440918, 0.025177717208862305, -0.002476334571838379, 0.0208892822265625, -0.010953903198242188, -0.03929746150970459, -0.009381890296936035, -0.016600728034973145, -0.053926944732666016, -0.0511249303817749, 0.012263298034667969, 0.10370278358459473, 0.10517358779907227, 0.06131696701049805, 0.10799956321716309, 0.026469826698303223, -0.08833801746368408, -0.04072582721710205, -0.010347366333007812, -0.008848786354064941, 0.07863211631774902, -0.011377096176147461, -0.08304083347320557, 0.14268147945404053, 0.019171833992004395, -0.02190697193145752, 0.024938583374023438, -0.05969548225402832, 0.05296933650970459, -0.02652561664581299, 0.04038584232330322, -0.0020700693130493164, 0.03850662708282471, 0.20856308937072754, 0.09956228733062744, 0.17125451564788818, 0.1496039628982544, 0.13909387588500977, 0.14089739322662354, 0.0962514877319336, 0.04986727237701416, 0.02048802375793457, 0.0566558837890625, 0.09959805011749268, 0.09493052959442139, 0.036646127700805664, 0.11851608753204346, 0.09835231304168701, 0.09826183319091797, 0.05072355270385742, 0.0033426284790039062, -0.06493532657623291, -0.07894647121429443, 0.005789637565612793, -0.013865947723388672, 0.021342992782592773, -0.012151718139648438, -0.004226088523864746, -0.02786850929260254, 0.09692883491516113, 0.11129248142242432, 0.05087876319885254, 0.1409435272216797, 0.08547282218933105, 0.07452201843261719, 0.06534135341644287, 0.11802232265472412, 0.08807814121246338, 0.04501223564147949, -0.008744359016418457, -0.047516584396362305, 0.01402890682220459, -0.05588829517364502, 0.0301285982131958, 0.004475831985473633, -0.04382979869842529, 0.09533393383026123, -0.011836409568786621, 0.016367316246032715, 0.15248620510101318, 0.10806906223297119, 0.1622295379638672, 0.10599386692047119, 0.057660579681396484, 0.11620891094207764, 0.042479872703552246, 0.12323212623596191, -0.008516907691955566, -0.03785204887390137, 0.04009568691253662, -0.06582355499267578, 0.041135311126708984, -0.022390007972717285, -0.04398488998413086, 0.02522444725036621, 0.013634681701660156, -0.06991755962371826, 0.005938410758972168, -0.05128169059753418, -0.15547513961791992, -0.038370490074157715, -0.06447291374206543, -0.06329619884490967, 0.025112509727478027, 0.013485550880432129, -0.1583108901977539, -0.14777565002441406, -0.07871747016906738, -0.004330277442932129, -0.023392677307128906, -0.028845548629760742, -0.15916478633880615, -0.1702878475189209, -0.07268369197845459, -0.030699610710144043, 0.04839169979095459, -0.13267171382904053, -0.05659747123718262, -0.07804441452026367, -0.07250046730041504, -0.0420839786529541, 0.009454727172851562, 0.0044231414794921875, -0.0782996416091919, 0.12100696563720703, 0.10586345195770264, 0.13628458976745605, 0.08055365085601807, -0.059798598289489746, -0.012486696243286133, -0.045432209968566895, -0.030544757843017578, -0.009402155876159668, -0.16086816787719727, -0.13744628429412842, -0.13416564464569092, -0.1451784372329712, -0.06093001365661621, -0.04240572452545166, -0.08354818820953369, -0.24525511264801025, -0.20385456085205078, -0.16884958744049072, -0.17037129402160645, -0.2208331823348999, -0.17389047145843506, -0.05583536624908447, -0.06288135051727295, -0.001920938491821289, -0.059445738792419434, -0.03829348087310791, 0.007696986198425293, 0.023210763931274414, 0.06338143348693848, 0.042083024978637695, -0.04947829246520996, -0.058402299880981445, -0.009893536567687988, -0.05562102794647217, 0.017005443572998047, 0.05759775638580322, 0.011791110038757324, 0.009711623191833496, 0.014118432998657227, 0.08127009868621826, 0.104591965675354, 0.03410696983337402, 0.11503005027770996, 0.10374283790588379, 0.05804848670959473, 0.1612861156463623, 0.13553106784820557, 0.0641927719116211, -0.021430134773254395, -0.06853151321411133, -0.04921913146972656, -0.08648741245269775, -0.09437549114227295, 0.009367108345031738, -0.11895644664764404, -0.1315290927886963, -0.059738993644714355, -0.02378249168395996, 0.09388375282287598, -0.08167862892150879, -0.04953038692474365, -0.022271275520324707, 0.031540632247924805, 0.046356916427612305, 0.030506610870361328, -0.009370803833007812, -0.14389240741729736, -0.05150902271270752, -0.04874718189239502, 0.12016379833221436, 0.08701252937316895, 0.06670725345611572, 0.09199368953704834, -0.02392101287841797, 0.0029305219650268555, 0.020512819290161133, -0.012623906135559082, -0.11215317249298096, -0.13250315189361572, -0.07563507556915283, 0.16805803775787354, 0.11204671859741211, -0.08967649936676025, 0.01865208148956299, -0.0014612674713134766, -0.06678366661071777, 0.09464156627655029, 0.036797285079956055, -0.13109350204467773, -0.07675790786743164, -0.0292508602142334, 0.028480887413024902, 0.042666077613830566, 0.12598037719726562, 0.20616328716278076, 0.13286590576171875, 0.030478239059448242, 0.09143495559692383, 0.09783267974853516, 0.05633056163787842, 0.06166732311248779, 0.02894425392150879, 0.08850526809692383, 0.10513806343078613, 0.1469053030014038, 0.13902509212493896, 0.10053157806396484, 0.07451224327087402, 0.14704430103302002, 0.09977459907531738, 0.08720541000366211, 0.1354900598526001, 0.03182387351989746, 0.09245073795318604, 0.04966402053833008, 0.028046607971191406, -0.003153562545776367, 0.07754969596862793, 0.09218788146972656, 0.03981149196624756, 0.13070297241210938, -0.04679226875305176, -0.06851482391357422, 0.08562469482421875, 0.13417303562164307, 0.11722826957702637, 0.08451175689697266, 0.07737910747528076, 0.07056164741516113, 0.04733157157897949, 0.03259634971618652, -0.02635324001312256, -0.034725069999694824, -0.013739824295043945, -0.09675395488739014, -0.07172870635986328, -0.017947673797607422, -0.08871150016784668, -0.12103724479675293, 0.00458216667175293, 0.02868354320526123, -0.005054116249084473, -0.03126931190490723, 0.006526350975036621, 0.08465361595153809, -0.10705184936523438, -0.2045072317123413, -0.15299832820892334, -0.10345721244812012, -0.10416686534881592, -0.15007221698760986, -0.10555052757263184, -0.10171198844909668, -0.044877052307128906, 0.09200990200042725, 0.08595049381256104, 0.017150402069091797, -0.07854771614074707, -0.15437519550323486, -0.08307826519012451, -0.09273636341094971, -0.04710745811462402, -0.09569931030273438, -0.14513301849365234, -0.060158371925354004, -0.08331036567687988, -0.020992636680603027, -0.04927635192871094, -0.03493046760559082, -0.09201478958129883, -0.19229352474212646, -0.11125481128692627, -0.17124629020690918, -0.16532135009765625, -0.08842384815216064, -0.09226536750793457, -0.13955974578857422, -0.08941650390625, -0.08104157447814941, -0.1617288589477539, -0.06526148319244385, -0.06567585468292236, -0.09695005416870117, -0.08749604225158691, -0.05502212047576904, -0.02487766742706299, -0.010029435157775879, 0.051400184631347656, -0.05158281326293945, -0.16222476959228516, 0.013801217079162598, 0.21317052841186523, 0.16003811359405518, 0.053701162338256836, -0.07303762435913086, -0.18421411514282227, -0.15222477912902832, -0.005701780319213867, -0.004059195518493652, 0.09779715538024902, 0.1908048391342163, 0.0834038257598877, 0.0755777359008789, 0.06660938262939453, 0.07782065868377686, 0.0016276836395263672, 0.052121877670288086, -0.06304931640625, -0.07101106643676758, 0.283036470413208, 0.23420226573944092, 0.11509418487548828, 0.07007575035095215, 0.10632443428039551, 0.09322202205657959, -0.009222149848937988, -0.0775613784790039, -0.15642118453979492, -0.15477323532104492, -0.22873127460479736, -0.09078001976013184, -0.019733071327209473, -0.07302188873291016, 0.019240498542785645, -0.043523192405700684, -0.08997869491577148, -0.1429065465927124, -0.17169725894927979, 0.0011061429977416992, 0.04186892509460449, -0.03519797325134277, -0.1503528356552124, -0.2305161952972412, -0.12338101863861084, -0.13310003280639648, -0.08669531345367432, -0.010907173156738281, 0.09250295162200928, 0.3262755870819092, 0.3633342981338501, 0.31913018226623535, 0.2944319248199463, 0.15929710865020752, 0.03830099105834961, 0.13411331176757812, 0.26100456714630127, 0.23708152770996094, -0.020155787467956543, -0.1350693702697754, -0.05746173858642578, -0.0189056396484375, 0.0511472225189209, 0.13150262832641602, 0.06261634826660156, 0.0357588529586792, 0.15615522861480713, 0.06488323211669922, 0.1347740888595581, 0.1938924789428711, 0.16320264339447021, 0.0455857515335083, -0.10741567611694336, -0.06749045848846436, -0.08584213256835938, -0.167250394821167, -0.286704421043396, -0.21827661991119385, 0.06567072868347168, 0.3111051321029663, 0.28112244606018066, 0.22265136241912842, 0.041222333908081055, -0.0840843915939331, -0.1026303768157959, -0.15429818630218506, -0.02058279514312744, -0.08935832977294922, -0.0821298360824585, 0.004825115203857422, 0.016100049018859863, 0.08710324764251709, 0.12260019779205322, 0.17987537384033203, 0.06927883625030518, -0.0010390281677246094, 0.04574692249298096, 0.035332560539245605, -0.004963874816894531, -0.04323470592498779, 0.09513819217681885, 0.07587885856628418, -0.036042094230651855, -0.14196562767028809, -0.13315391540527344, 0.06393778324127197, 0.0827789306640625, 0.0330204963684082, -0.11815404891967773, -0.10106527805328369, 0.058075547218322754, 0.1603459119796753, 0.10678362846374512, -0.005323886871337891, 0.06901776790618896, 0.1205282211303711, 0.1670818328857422, 0.013057351112365723, -0.22411012649536133, -0.32327795028686523, -0.3463834524154663, -0.2790212631225586, -0.19580376148223877, -0.15061545372009277, -0.1303313970565796, -0.2070552110671997, -0.2472902536392212, -0.2602022886276245, -0.20493102073669434, 0.025650858879089355, -0.003476381301879883, -0.06905138492584229, -0.023279547691345215, -0.04260969161987305, -0.054593682289123535, 0.0778958797454834, 0.06443548202514648, -0.05693972110748291, 0.005445003509521484, -0.08362078666687012, -0.16733992099761963, -0.18423688411712646, -0.0517193078994751, 0.033306241035461426, -0.08193027973175049, -0.11993145942687988, -0.10234415531158447, 0.0061043500900268555, 0.07484579086303711, -0.05073535442352295, -0.08442938327789307, -0.08484184741973877, -0.15062463283538818, -0.008023262023925781, 0.05667006969451904, -0.008153676986694336, -0.15402865409851074, -0.2023838758468628, -0.11574554443359375, -0.0822218656539917, -0.014519333839416504, 0.024001240730285645, 0.030484795570373535, -0.1094663143157959\}, \{0.00014531612396240234, 0.0003026723861694336, 0.0061228275299072266, 0.01531529426574707, 0.014214873313903809, 0.005872130393981934, -0.003571629524230957, -0.011501073837280273, -0.0217818021774292, -0.02349567413330078, -0.0021892786026000977, 0.009360551834106445, 0.0019000768661499023, -0.0047607421875, -0.00045371055603027344, 0.011203885078430176, 0.028331518173217773, 0.011770963668823242, -0.032657504081726074, -0.0038737058639526367, -0.003230452537536621, -0.054546236991882324, 0.0016318559646606445, 0.043387651443481445, 0.018745899200439453, 0.033548593521118164, 0.007503986358642578, -0.035471320152282715, -0.03578329086303711, -0.04156792163848877, -0.03262460231781006, -0.07966649532318115, 0.0022858381271362305, 0.11960327625274658, 0.17072904109954834, 0.13358569145202637, 0.10121607780456543, 0.12370002269744873, 0.014243841171264648, -0.04270625114440918, -0.007448792457580566, 0.021951794624328613, 0.02632308006286621, 0.012888193130493164, -0.03148782253265381, 0.015161752700805664, 0.00898754596710205, 0.0010167360305786133, 0.039624929428100586, -0.027303457260131836, 0.0076944828033447266, -0.06281912326812744, -0.03747844696044922, -0.051398396492004395, 0.023775935173034668, 0.18034601211547852, 0.09792137145996094, 0.2142629623413086, 0.14957165718078613, 0.12811613082885742, 0.24105870723724365, 0.1438659429550171, 0.047646522521972656, 0.0452275276184082, 0.03128981590270996, 0.03966724872589111, 0.08848786354064941, 0.13390421867370605, 0.1761789321899414, 0.1665400266647339, 0.1325986385345459, -0.0062408447265625, 0.009238958358764648, -0.10025954246520996, -0.08755910396575928, -0.027674317359924316, -0.05386149883270264, -0.014961481094360352, -0.1329728364944458, -0.049570322036743164, -0.0948643684387207, -0.04607105255126953, 0.017781972885131836, 0.030459284782409668, 0.029267311096191406, 0.033022284507751465, 0.06600737571716309, 0.02454078197479248, 0.10619509220123291, -0.02482008934020996, 0.020810604095458984, -0.03023087978363037, -0.11976230144500732, -0.055702924728393555, -0.11338329315185547, -0.047113776206970215, -0.016416311264038086, 0.05975151062011719, 0.027684569358825684, 0.018033742904663086, 0.12152421474456787, 0.13441455364227295, 0.11325681209564209, 0.10796773433685303, 0.12257766723632812, 0.09334337711334229, 0.03721284866333008, -0.053385257720947266, 0.034006357192993164, -0.012964844703674316, -0.04612410068511963, 0.03693878650665283, -0.02908039093017578, -0.024319171905517578, -0.0758582353591919, -0.11957776546478271, -0.027537941932678223, -0.05850076675415039, -0.12008631229400635, 0.026453375816345215, -0.09930944442749023, -0.14972960948944092, -0.11608529090881348, -0.06361627578735352, -0.05357074737548828, -0.07091999053955078, 0.02643716335296631, -0.10877501964569092, -0.10226273536682129, -0.021042823791503906, 0.09982955455780029, 0.08040308952331543, 0.05795574188232422, -0.1541132926940918, -0.12092244625091553, -0.03849589824676514, -0.04191231727600098, 0.09772062301635742, -0.12899017333984375, -0.12862694263458252, -0.10501980781555176, 0.039525508880615234, -0.0442347526550293, -0.016072988510131836, -0.037876248359680176, -0.11103498935699463, 0.11035466194152832, 0.032811522483825684, 0.18132483959197998, 0.14637386798858643, 0.0159071683883667, 0.013512611389160156, 0.0213625431060791, -0.017754316329956055, -0.003086090087890625, -0.0926826000213623, -0.16442131996154785, -0.08979856967926025, -0.15116703510284424, -0.041053056716918945, -0.0322650671005249, -0.0714561939239502, -0.14662301540374756, -0.1331472396850586, -0.06467413902282715, -0.10977935791015625, -0.18236768245697021, -0.14627957344055176, -0.04047083854675293, 0.050158143043518066, 0.03616786003112793, -0.006065845489501953, 0.01762568950653076, -0.029483437538146973, 0.06909382343292236, 0.017613530158996582, 0.1411212682723999, -0.0004214048385620117, -0.11188042163848877, 0.0959094762802124, -0.012173056602478027, 0.026494622230529785, 0.06489241123199463, 0.07623898983001709, 0.07761132717132568, 0.04770660400390625, 0.015567779541015625, 0.0996851921081543, 0.004631996154785156, 0.02761220932006836, 0.05128300189971924, -0.012336969375610352, 0.16547024250030518, 0.12702488899230957, 0.16686749458312988, -0.0023344755172729492, -0.057866454124450684, 0.028400897979736328, 0.013679027557373047, 0.05764281749725342, 0.029740571975708008, -0.027033567428588867, -0.02772843837738037, 0.05683267116546631, 0.06291651725769043, 0.1472402811050415, 0.031247258186340332, 0.002817988395690918, 0.052356719970703125, 0.05753350257873535, 0.02772510051727295, 0.0367664098739624, -0.000621795654296875, -0.11895751953125, -0.07552659511566162, -0.09563326835632324, 0.057701945304870605, 0.12588179111480713, 0.14808166027069092, 0.0775977373123169, 0.03882777690887451, -0.056693196296691895, -0.04770064353942871, -0.059575557708740234, -0.1674025058746338, -0.04993391036987305, -0.14888012409210205, 0.14030754566192627, 0.14607632160186768, -0.0367206335067749, -0.010816693305969238, -0.05927073955535889, 0.05057668685913086, 0.09573769569396973, 0.06161010265350342, -0.12335312366485596, -0.15832948684692383, -0.08543610572814941, 0.025018692016601562, 0.04983663558959961, 0.11459195613861084, 0.13610219955444336, 0.06955468654632568, 0.08442318439483643, 0.04231274127960205, 0.07518088817596436, 0.047752976417541504, 0.0092390775680542, 0.012347817420959473, 0.07412326335906982, 0.04498732089996338, 0.052185654640197754, 0.0561290979385376, 0.016014933586120605, 0.009300827980041504, 0.011299371719360352, -0.026348352432250977, -0.07991170883178711, 0.00456082820892334, -0.07255637645721436, -0.0662146806716919, -0.06942272186279297, -0.11140179634094238, -0.0777508020401001, -0.01154017448425293, 0.022281289100646973, -0.02172696590423584, -0.007172942161560059, -0.12752747535705566, -0.15928196907043457, -0.02195429801940918, 0.06171274185180664, 0.024596810340881348, 0.02268040180206299, 0.014704227447509766, -0.04373776912689209, -0.04601633548736572, -0.024355411529541016, -0.046300292015075684, -0.04499781131744385, -0.010166168212890625, -0.046591997146606445, -0.06600236892700195, -0.11835086345672607, -0.13773322105407715, -0.1660672426223755, -0.08911430835723877, 0.0007213354110717773, -0.029314517974853516, -0.03780770301818848, -0.001434326171875, 0.07385039329528809, -0.10922801494598389, -0.1780637502670288, -0.11420047283172607, -0.05511748790740967, -0.012658238410949707, -0.1439073085784912, -0.06996595859527588, -0.023008108139038086, 0.009072542190551758, 0.14282965660095215, 0.05195295810699463, -0.05921435356140137, -0.1279923915863037, -0.18509018421173096, -0.09284543991088867, -0.062430500984191895, -0.020524024963378906, -0.03549039363861084, -0.06731200218200684, -0.007006645202636719, -0.0338667631149292, 0.018387436866760254, 0.020735859870910645, 0.06530976295471191, 0.0013363361358642578, -0.09083878993988037, -0.056249260902404785, -0.07698309421539307, -0.016828417778015137, -0.009676098823547363, 0.0411602258682251, -0.03669464588165283, -0.04103195667266846, 0.03097820281982422, 0.03929567337036133, 0.06697344779968262, 0.018067240715026855, 0.04634296894073486, 0.0312809944152832, 0.0550159215927124, 0.019544243812561035, 0.07291030883789062, 0.047817349433898926, -0.07897686958312988, -0.04620826244354248, 0.1578766107559204, 0.21405291557312012, 0.134649395942688, 0.23505151271820068, 0.14573252201080322, 0.18817031383514404, 0.19115328788757324, 0.07130730152130127, -0.055851101875305176, 0.0889047384262085, 0.24372708797454834, 0.06527304649353027, -0.026049375534057617, -0.1920100450515747, -0.1887197494506836, -0.1230231523513794, -0.15177500247955322, -0.17393672466278076, -0.036741018295288086, 0.01209115982055664, 0.09482753276824951, 0.19767236709594727, 0.12888967990875244, 0.05918526649475098, -0.17664670944213867, -0.1450185775756836, -0.059859514236450195, 0.07130491733551025, 0.2006598711013794, 0.16137707233428955, 0.16134941577911377, 0.16017520427703857, 0.21886563301086426, 0.07416236400604248, 0.0008838176727294922, 0.020757675170898438, -0.08129191398620605, 0.07270872592926025, 0.24175703525543213, 0.1378624439239502, -0.04464840888977051, 0.013095855712890625, 0.20195841789245605, 0.009476661682128906, -0.1463150978088379, -0.18553638458251953, -0.03614664077758789, 0.14386296272277832, 0.005479097366333008, 0.06461405754089355, 0.14626193046569824, 0.11436605453491211, -0.13300037384033203, -0.17176222801208496, -0.03338766098022461, -0.008151650428771973, 0.08735406398773193, -0.023522615432739258, -0.06866192817687988, -0.08685517311096191, -0.10927093029022217, -0.04322373867034912, 0.10138273239135742, 0.1425774097442627, 0.05542862415313721, -0.0758368968963623, -0.144561767578125, -0.005609393119812012, -0.08104383945465088, -0.1415024995803833, -0.15574884414672852, -0.19782376289367676, -0.17292726039886475, -0.03877091407775879, 0.08620834350585938, -0.07055211067199707, -0.15339624881744385, -0.02893984317779541, 0.08021032810211182, 0.031609416007995605, 0.006580471992492676, 0.07689964771270752, 0.21531295776367188, 0.16154372692108154, 0.044898152351379395, 0.006253600120544434, -0.19837284088134766, -0.2151949405670166, -0.17036771774291992, -0.07629287242889404, 0.015300154685974121, -0.06160330772399902, -0.07866597175598145, -0.16221439838409424, -0.144822359085083, -0.09148359298706055, -0.14923810958862305, -0.02550041675567627, -0.06046855449676514, -0.2215942144393921, -0.11046421527862549, -0.0039054155349731445, 0.07030045986175537, 0.00940084457397461, -0.039721012115478516, -0.10050654411315918, -0.1359238624572754, -0.09123992919921875, -0.14342272281646729, -0.01744544506072998, -0.007034897804260254, -0.13935387134552002, -0.24030029773712158, -0.11399579048156738, -0.0422520637512207, 0.12081456184387207, 0.1172795295715332, -0.07949447631835938, 0.0266873836517334, -0.05616903305053711, 0.018961071968078613, -0.01629316806793213, 0.10182523727416992, 0.09769141674041748, -0.017367839813232422, -0.013981819152832031, -0.15589380264282227, 0.02320230007171631, 0.057131290435791016, 0.10260951519012451, 0.0043714046478271484, -0.061622023582458496, -0.10669302940368652, -0.06113171577453613, -0.0050241947174072266, -0.04991602897644043, 0.024848461151123047, -0.06206011772155762, -0.052773475646972656, -0.2108449935913086, -0.11649513244628906, 0.01307213306427002, 0.05459737777709961, 0.007590770721435547, -0.10294437408447266, 0.024706482887268066, 0.010705709457397461, 0.10431015491485596, 0.01610851287841797, 0.02116537094116211, 0.03261399269104004, 0.031459689140319824, 0.11359620094299316, 0.08095300197601318, 0.07681679725646973, -0.012017250061035156, -0.07649779319763184, -0.18218135833740234, -0.049326419830322266, 0.021213769912719727, 0.13950908184051514, 0.23577892780303955, 0.09651291370391846\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_24bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_24bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_24bit_44100.h}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_24bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 24;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{7.772445678710938e-05, 0.0004398822784423828, 0.006743192672729492, 0.01638209819793701, 0.015148758888244629, 0.003415822982788086, -0.012502312660217285, -0.02174532413482666, -0.022707462310791016, -0.01782703399658203, -0.000893712043762207, 0.010785818099975586, 0.007664799690246582, -0.0017873048782348633, -0.006292223930358887, 0.0017839670181274414, 0.03135275840759277, 0.02077305316925049, -0.022290825843811035, 0.00968170166015625, -0.0037343502044677734, -0.04702770709991455, 0.014231562614440918, 0.025177717208862305, -0.002476334571838379, 0.0208892822265625, -0.010953903198242188, -0.03929746150970459, -0.009381890296936035, -0.016600728034973145, -0.053926944732666016, -0.0511249303817749, 0.012263298034667969, 0.10370278358459473, 0.10517358779907227, 0.06131696701049805, 0.10799956321716309, 0.026469826698303223, -0.08833801746368408, -0.04072582721710205, -0.010347366333007812, -0.008848786354064941, 0.07863211631774902, -0.011377096176147461, -0.08304083347320557, 0.14268147945404053, 0.019171833992004395, -0.02190697193145752, 0.024938583374023438, -0.05969548225402832, 0.05296933650970459, -0.02652561664581299, 0.04038584232330322, -0.0020700693130493164, 0.03850662708282471, 0.20856308937072754, 0.09956228733062744, 0.17125451564788818, 0.1496039628982544, 0.13909387588500977, 0.14089739322662354, 0.0962514877319336, 0.04986727237701416, 0.02048802375793457, 0.0566558837890625, 0.09959805011749268, 0.09493052959442139, 0.036646127700805664, 0.11851608753204346, 0.09835231304168701, 0.09826183319091797, 0.05072355270385742, 0.0033426284790039062, -0.06493532657623291, -0.07894647121429443, 0.005789637565612793, -0.013865947723388672, 0.021342992782592773, -0.012151718139648438, -0.004226088523864746, -0.02786850929260254, 0.09692883491516113, 0.11129248142242432, 0.05087876319885254, 0.1409435272216797, 0.08547282218933105, 0.07452201843261719, 0.06534135341644287, 0.11802232265472412, 0.08807814121246338, 0.04501223564147949, -0.008744359016418457, -0.047516584396362305, 0.01402890682220459, -0.05588829517364502, 0.0301285982131958, 0.004475831985473633, -0.04382979869842529, 0.09533393383026123, -0.011836409568786621, 0.016367316246032715, 0.15248620510101318, 0.10806906223297119, 0.1622295379638672, 0.10599386692047119, 0.057660579681396484, 0.11620891094207764, 0.042479872703552246, 0.12323212623596191, -0.008516907691955566, -0.03785204887390137, 0.04009568691253662, -0.06582355499267578, 0.041135311126708984, -0.022390007972717285, -0.04398488998413086, 0.02522444725036621, 0.013634681701660156, -0.06991755962371826, 0.005938410758972168, -0.05128169059753418, -0.15547513961791992, -0.038370490074157715, -0.06447291374206543, -0.06329619884490967, 0.025112509727478027, 0.013485550880432129, -0.1583108901977539, -0.14777565002441406, -0.07871747016906738, -0.004330277442932129, -0.023392677307128906, -0.028845548629760742, -0.15916478633880615, -0.1702878475189209, -0.07268369197845459, -0.030699610710144043, 0.04839169979095459, -0.13267171382904053, -0.05659747123718262, -0.07804441452026367, -0.07250046730041504, -0.0420839786529541, 0.009454727172851562, 0.0044231414794921875, -0.0782996416091919, 0.12100696563720703, 0.10586345195770264, 0.13628458976745605, 0.08055365085601807, -0.059798598289489746, -0.012486696243286133, -0.045432209968566895, -0.030544757843017578, -0.009402155876159668, -0.16086816787719727, -0.13744628429412842, -0.13416564464569092, -0.1451784372329712, -0.06093001365661621, -0.04240572452545166, -0.08354818820953369, -0.24525511264801025, -0.20385456085205078, -0.16884958744049072, -0.17037129402160645, -0.2208331823348999, -0.17389047145843506, -0.05583536624908447, -0.06288135051727295, -0.001920938491821289, -0.059445738792419434, -0.03829348087310791, 0.007696986198425293, 0.023210763931274414, 0.06338143348693848, 0.042083024978637695, -0.04947829246520996, -0.058402299880981445, -0.009893536567687988, -0.05562102794647217, 0.017005443572998047, 0.05759775638580322, 0.011791110038757324, 0.009711623191833496, 0.014118432998657227, 0.08127009868621826, 0.104591965675354, 0.03410696983337402, 0.11503005027770996, 0.10374283790588379, 0.05804848670959473, 0.1612861156463623, 0.13553106784820557, 0.0641927719116211, -0.021430134773254395, -0.06853151321411133, -0.04921913146972656, -0.08648741245269775, -0.09437549114227295, 0.009367108345031738, -0.11895644664764404, -0.1315290927886963, -0.059738993644714355, -0.02378249168395996, 0.09388375282287598, -0.08167862892150879, -0.04953038692474365, -0.022271275520324707, 0.031540632247924805, 0.046356916427612305, 0.030506610870361328, -0.009370803833007812, -0.14389240741729736, -0.05150902271270752, -0.04874718189239502, 0.12016379833221436, 0.08701252937316895, 0.06670725345611572, 0.09199368953704834, -0.02392101287841797, 0.0029305219650268555, 0.020512819290161133, -0.012623906135559082, -0.11215317249298096, -0.13250315189361572, -0.07563507556915283, 0.16805803775787354, 0.11204671859741211, -0.08967649936676025, 0.01865208148956299, -0.0014612674713134766, -0.06678366661071777, 0.09464156627655029, 0.036797285079956055, -0.13109350204467773, -0.07675790786743164, -0.0292508602142334, 0.028480887413024902, 0.042666077613830566, 0.12598037719726562, 0.20616328716278076, 0.13286590576171875, 0.030478239059448242, 0.09143495559692383, 0.09783267974853516, 0.05633056163787842, 0.06166732311248779, 0.02894425392150879, 0.08850526809692383, 0.10513806343078613, 0.1469053030014038, 0.13902509212493896, 0.10053157806396484, 0.07451224327087402, 0.14704430103302002, 0.09977459907531738, 0.08720541000366211, 0.1354900598526001, 0.03182387351989746, 0.09245073795318604, 0.04966402053833008, 0.028046607971191406, -0.003153562545776367, 0.07754969596862793, 0.09218788146972656, 0.03981149196624756, 0.13070297241210938, -0.04679226875305176, -0.06851482391357422, 0.08562469482421875, 0.13417303562164307, 0.11722826957702637, 0.08451175689697266, 0.07737910747528076, 0.07056164741516113, 0.04733157157897949, 0.03259634971618652, -0.02635324001312256, -0.034725069999694824, -0.013739824295043945, -0.09675395488739014, -0.07172870635986328, -0.017947673797607422, -0.08871150016784668, -0.12103724479675293, 0.00458216667175293, 0.02868354320526123, -0.005054116249084473, -0.03126931190490723, 0.006526350975036621, 0.08465361595153809, -0.10705184936523438, -0.2045072317123413, -0.15299832820892334, -0.10345721244812012, -0.10416686534881592, -0.15007221698760986, -0.10555052757263184, -0.10171198844909668, -0.044877052307128906, 0.09200990200042725, 0.08595049381256104, 0.017150402069091797, -0.07854771614074707, -0.15437519550323486, -0.08307826519012451, -0.09273636341094971, -0.04710745811462402, -0.09569931030273438, -0.14513301849365234, -0.060158371925354004, -0.08331036567687988, -0.020992636680603027, -0.04927635192871094, -0.03493046760559082, -0.09201478958129883, -0.19229352474212646, -0.11125481128692627, -0.17124629020690918, -0.16532135009765625, -0.08842384815216064, -0.09226536750793457, -0.13955974578857422, -0.08941650390625, -0.08104157447814941, -0.1617288589477539, -0.06526148319244385, -0.06567585468292236, -0.09695005416870117, -0.08749604225158691, -0.05502212047576904, -0.02487766742706299, -0.010029435157775879, 0.051400184631347656, -0.05158281326293945, -0.16222476959228516, 0.013801217079162598, 0.21317052841186523, 0.16003811359405518, 0.053701162338256836, -0.07303762435913086, -0.18421411514282227, -0.15222477912902832, -0.005701780319213867, -0.004059195518493652, 0.09779715538024902, 0.1908048391342163, 0.0834038257598877, 0.0755777359008789, 0.06660938262939453, 0.07782065868377686, 0.0016276836395263672, 0.052121877670288086, -0.06304931640625, -0.07101106643676758, 0.283036470413208, 0.23420226573944092, 0.11509418487548828, 0.07007575035095215, 0.10632443428039551, 0.09322202205657959, -0.009222149848937988, -0.0775613784790039, -0.15642118453979492, -0.15477323532104492, -0.22873127460479736, -0.09078001976013184, -0.019733071327209473, -0.07302188873291016, 0.019240498542785645, -0.043523192405700684, -0.08997869491577148, -0.1429065465927124, -0.17169725894927979, 0.0011061429977416992, 0.04186892509460449, -0.03519797325134277, -0.1503528356552124, -0.2305161952972412, -0.12338101863861084, -0.13310003280639648, -0.08669531345367432, -0.010907173156738281, 0.09250295162200928, 0.3262755870819092, 0.3633342981338501, 0.31913018226623535, 0.2944319248199463, 0.15929710865020752, 0.03830099105834961, 0.13411331176757812, 0.26100456714630127, 0.23708152770996094, -0.020155787467956543, -0.1350693702697754, -0.05746173858642578, -0.0189056396484375, 0.0511472225189209, 0.13150262832641602, 0.06261634826660156, 0.0357588529586792, 0.15615522861480713, 0.06488323211669922, 0.1347740888595581, 0.1938924789428711, 0.16320264339447021, 0.0455857515335083, -0.10741567611694336, -0.06749045848846436, -0.08584213256835938, -0.167250394821167, -0.286704421043396, -0.21827661991119385, 0.06567072868347168, 0.3111051321029663, 0.28112244606018066, 0.22265136241912842, 0.041222333908081055, -0.0840843915939331, -0.1026303768157959, -0.15429818630218506, -0.02058279514312744, -0.08935832977294922, -0.0821298360824585, 0.004825115203857422, 0.016100049018859863, 0.08710324764251709, 0.12260019779205322, 0.17987537384033203, 0.06927883625030518, -0.0010390281677246094, 0.04574692249298096, 0.035332560539245605, -0.004963874816894531, -0.04323470592498779, 0.09513819217681885, 0.07587885856628418, -0.036042094230651855, -0.14196562767028809, -0.13315391540527344, 0.06393778324127197, 0.0827789306640625, 0.0330204963684082, -0.11815404891967773, -0.10106527805328369, 0.058075547218322754, 0.1603459119796753, 0.10678362846374512, -0.005323886871337891, 0.06901776790618896, 0.1205282211303711, 0.1670818328857422, 0.013057351112365723, -0.22411012649536133, -0.32327795028686523, -0.3463834524154663, -0.2790212631225586, -0.19580376148223877, -0.15061545372009277, -0.1303313970565796, -0.2070552110671997, -0.2472902536392212, -0.2602022886276245, -0.20493102073669434, 0.025650858879089355, -0.003476381301879883, -0.06905138492584229, -0.023279547691345215, -0.04260969161987305, -0.054593682289123535, 0.0778958797454834, 0.06443548202514648, -0.05693972110748291, 0.005445003509521484, -0.08362078666687012, -0.16733992099761963, -0.18423688411712646, -0.0517193078994751, 0.033306241035461426, -0.08193027973175049, -0.11993145942687988, -0.10234415531158447, 0.0061043500900268555, 0.07484579086303711, -0.05073535442352295, -0.08442938327789307, -0.08484184741973877, -0.15062463283538818, -0.008023262023925781, 0.05667006969451904, -0.008153676986694336, -0.15402865409851074, -0.2023838758468628, -0.11574554443359375, -0.0822218656539917, -0.014519333839416504, 0.024001240730285645, 0.030484795570373535, -0.1094663143157959\}, \{0.00014531612396240234, 0.0003026723861694336, 0.0061228275299072266, 0.01531529426574707, 0.014214873313903809, 0.005872130393981934, -0.003571629524230957, -0.011501073837280273, -0.0217818021774292, -0.02349567413330078, -0.0021892786026000977, 0.009360551834106445, 0.0019000768661499023, -0.0047607421875, -0.00045371055603027344, 0.011203885078430176, 0.028331518173217773, 0.011770963668823242, -0.032657504081726074, -0.0038737058639526367, -0.003230452537536621, -0.054546236991882324, 0.0016318559646606445, 0.043387651443481445, 0.018745899200439453, 0.033548593521118164, 0.007503986358642578, -0.035471320152282715, -0.03578329086303711, -0.04156792163848877, -0.03262460231781006, -0.07966649532318115, 0.0022858381271362305, 0.11960327625274658, 0.17072904109954834, 0.13358569145202637, 0.10121607780456543, 0.12370002269744873, 0.014243841171264648, -0.04270625114440918, -0.007448792457580566, 0.021951794624328613, 0.02632308006286621, 0.012888193130493164, -0.03148782253265381, 0.015161752700805664, 0.00898754596710205, 0.0010167360305786133, 0.039624929428100586, -0.027303457260131836, 0.0076944828033447266, -0.06281912326812744, -0.03747844696044922, -0.051398396492004395, 0.023775935173034668, 0.18034601211547852, 0.09792137145996094, 0.2142629623413086, 0.14957165718078613, 0.12811613082885742, 0.24105870723724365, 0.1438659429550171, 0.047646522521972656, 0.0452275276184082, 0.03128981590270996, 0.03966724872589111, 0.08848786354064941, 0.13390421867370605, 0.1761789321899414, 0.1665400266647339, 0.1325986385345459, -0.0062408447265625, 0.009238958358764648, -0.10025954246520996, -0.08755910396575928, -0.027674317359924316, -0.05386149883270264, -0.014961481094360352, -0.1329728364944458, -0.049570322036743164, -0.0948643684387207, -0.04607105255126953, 0.017781972885131836, 0.030459284782409668, 0.029267311096191406, 0.033022284507751465, 0.06600737571716309, 0.02454078197479248, 0.10619509220123291, -0.02482008934020996, 0.020810604095458984, -0.03023087978363037, -0.11976230144500732, -0.055702924728393555, -0.11338329315185547, -0.047113776206970215, -0.016416311264038086, 0.05975151062011719, 0.027684569358825684, 0.018033742904663086, 0.12152421474456787, 0.13441455364227295, 0.11325681209564209, 0.10796773433685303, 0.12257766723632812, 0.09334337711334229, 0.03721284866333008, -0.053385257720947266, 0.034006357192993164, -0.012964844703674316, -0.04612410068511963, 0.03693878650665283, -0.02908039093017578, -0.024319171905517578, -0.0758582353591919, -0.11957776546478271, -0.027537941932678223, -0.05850076675415039, -0.12008631229400635, 0.026453375816345215, -0.09930944442749023, -0.14972960948944092, -0.11608529090881348, -0.06361627578735352, -0.05357074737548828, -0.07091999053955078, 0.02643716335296631, -0.10877501964569092, -0.10226273536682129, -0.021042823791503906, 0.09982955455780029, 0.08040308952331543, 0.05795574188232422, -0.1541132926940918, -0.12092244625091553, -0.03849589824676514, -0.04191231727600098, 0.09772062301635742, -0.12899017333984375, -0.12862694263458252, -0.10501980781555176, 0.039525508880615234, -0.0442347526550293, -0.016072988510131836, -0.037876248359680176, -0.11103498935699463, 0.11035466194152832, 0.032811522483825684, 0.18132483959197998, 0.14637386798858643, 0.0159071683883667, 0.013512611389160156, 0.0213625431060791, -0.017754316329956055, -0.003086090087890625, -0.0926826000213623, -0.16442131996154785, -0.08979856967926025, -0.15116703510284424, -0.041053056716918945, -0.0322650671005249, -0.0714561939239502, -0.14662301540374756, -0.1331472396850586, -0.06467413902282715, -0.10977935791015625, -0.18236768245697021, -0.14627957344055176, -0.04047083854675293, 0.050158143043518066, 0.03616786003112793, -0.006065845489501953, 0.01762568950653076, -0.029483437538146973, 0.06909382343292236, 0.017613530158996582, 0.1411212682723999, -0.0004214048385620117, -0.11188042163848877, 0.0959094762802124, -0.012173056602478027, 0.026494622230529785, 0.06489241123199463, 0.07623898983001709, 0.07761132717132568, 0.04770660400390625, 0.015567779541015625, 0.0996851921081543, 0.004631996154785156, 0.02761220932006836, 0.05128300189971924, -0.012336969375610352, 0.16547024250030518, 0.12702488899230957, 0.16686749458312988, -0.0023344755172729492, -0.057866454124450684, 0.028400897979736328, 0.013679027557373047, 0.05764281749725342, 0.029740571975708008, -0.027033567428588867, -0.02772843837738037, 0.05683267116546631, 0.06291651725769043, 0.1472402811050415, 0.031247258186340332, 0.002817988395690918, 0.052356719970703125, 0.05753350257873535, 0.02772510051727295, 0.0367664098739624, -0.000621795654296875, -0.11895751953125, -0.07552659511566162, -0.09563326835632324, 0.057701945304870605, 0.12588179111480713, 0.14808166027069092, 0.0775977373123169, 0.03882777690887451, -0.056693196296691895, -0.04770064353942871, -0.059575557708740234, -0.1674025058746338, -0.04993391036987305, -0.14888012409210205, 0.14030754566192627, 0.14607632160186768, -0.0367206335067749, -0.010816693305969238, -0.05927073955535889, 0.05057668685913086, 0.09573769569396973, 0.06161010265350342, -0.12335312366485596, -0.15832948684692383, -0.08543610572814941, 0.025018692016601562, 0.04983663558959961, 0.11459195613861084, 0.13610219955444336, 0.06955468654632568, 0.08442318439483643, 0.04231274127960205, 0.07518088817596436, 0.047752976417541504, 0.0092390775680542, 0.012347817420959473, 0.07412326335906982, 0.04498732089996338, 0.052185654640197754, 0.0561290979385376, 0.016014933586120605, 0.009300827980041504, 0.011299371719360352, -0.026348352432250977, -0.07991170883178711, 0.00456082820892334, -0.07255637645721436, -0.0662146806716919, -0.06942272186279297, -0.11140179634094238, -0.0777508020401001, -0.01154017448425293, 0.022281289100646973, -0.02172696590423584, -0.007172942161560059, -0.12752747535705566, -0.15928196907043457, -0.02195429801940918, 0.06171274185180664, 0.024596810340881348, 0.02268040180206299, 0.014704227447509766, -0.04373776912689209, -0.04601633548736572, -0.024355411529541016, -0.046300292015075684, -0.04499781131744385, -0.010166168212890625, -0.046591997146606445, -0.06600236892700195, -0.11835086345672607, -0.13773322105407715, -0.1660672426223755, -0.08911430835723877, 0.0007213354110717773, -0.029314517974853516, -0.03780770301818848, -0.001434326171875, 0.07385039329528809, -0.10922801494598389, -0.1780637502670288, -0.11420047283172607, -0.05511748790740967, -0.012658238410949707, -0.1439073085784912, -0.06996595859527588, -0.023008108139038086, 0.009072542190551758, 0.14282965660095215, 0.05195295810699463, -0.05921435356140137, -0.1279923915863037, -0.18509018421173096, -0.09284543991088867, -0.062430500984191895, -0.020524024963378906, -0.03549039363861084, -0.06731200218200684, -0.007006645202636719, -0.0338667631149292, 0.018387436866760254, 0.020735859870910645, 0.06530976295471191, 0.0013363361358642578, -0.09083878993988037, -0.056249260902404785, -0.07698309421539307, -0.016828417778015137, -0.009676098823547363, 0.0411602258682251, -0.03669464588165283, -0.04103195667266846, 0.03097820281982422, 0.03929567337036133, 0.06697344779968262, 0.018067240715026855, 0.04634296894073486, 0.0312809944152832, 0.0550159215927124, 0.019544243812561035, 0.07291030883789062, 0.047817349433898926, -0.07897686958312988, -0.04620826244354248, 0.1578766107559204, 0.21405291557312012, 0.134649395942688, 0.23505151271820068, 0.14573252201080322, 0.18817031383514404, 0.19115328788757324, 0.07130730152130127, -0.055851101875305176, 0.0889047384262085, 0.24372708797454834, 0.06527304649353027, -0.026049375534057617, -0.1920100450515747, -0.1887197494506836, -0.1230231523513794, -0.15177500247955322, -0.17393672466278076, -0.036741018295288086, 0.01209115982055664, 0.09482753276824951, 0.19767236709594727, 0.12888967990875244, 0.05918526649475098, -0.17664670944213867, -0.1450185775756836, -0.059859514236450195, 0.07130491733551025, 0.2006598711013794, 0.16137707233428955, 0.16134941577911377, 0.16017520427703857, 0.21886563301086426, 0.07416236400604248, 0.0008838176727294922, 0.020757675170898438, -0.08129191398620605, 0.07270872592926025, 0.24175703525543213, 0.1378624439239502, -0.04464840888977051, 0.013095855712890625, 0.20195841789245605, 0.009476661682128906, -0.1463150978088379, -0.18553638458251953, -0.03614664077758789, 0.14386296272277832, 0.005479097366333008, 0.06461405754089355, 0.14626193046569824, 0.11436605453491211, -0.13300037384033203, -0.17176222801208496, -0.03338766098022461, -0.008151650428771973, 0.08735406398773193, -0.023522615432739258, -0.06866192817687988, -0.08685517311096191, -0.10927093029022217, -0.04322373867034912, 0.10138273239135742, 0.1425774097442627, 0.05542862415313721, -0.0758368968963623, -0.144561767578125, -0.005609393119812012, -0.08104383945465088, -0.1415024995803833, -0.15574884414672852, -0.19782376289367676, -0.17292726039886475, -0.03877091407775879, 0.08620834350585938, -0.07055211067199707, -0.15339624881744385, -0.02893984317779541, 0.08021032810211182, 0.031609416007995605, 0.006580471992492676, 0.07689964771270752, 0.21531295776367188, 0.16154372692108154, 0.044898152351379395, 0.006253600120544434, -0.19837284088134766, -0.2151949405670166, -0.17036771774291992, -0.07629287242889404, 0.015300154685974121, -0.06160330772399902, -0.07866597175598145, -0.16221439838409424, -0.144822359085083, -0.09148359298706055, -0.14923810958862305, -0.02550041675567627, -0.06046855449676514, -0.2215942144393921, -0.11046421527862549, -0.0039054155349731445, 0.07030045986175537, 0.00940084457397461, -0.039721012115478516, -0.10050654411315918, -0.1359238624572754, -0.09123992919921875, -0.14342272281646729, -0.01744544506072998, -0.007034897804260254, -0.13935387134552002, -0.24030029773712158, -0.11399579048156738, -0.0422520637512207, 0.12081456184387207, 0.1172795295715332, -0.07949447631835938, 0.0266873836517334, -0.05616903305053711, 0.018961071968078613, -0.01629316806793213, 0.10182523727416992, 0.09769141674041748, -0.017367839813232422, -0.013981819152832031, -0.15589380264282227, 0.02320230007171631, 0.057131290435791016, 0.10260951519012451, 0.0043714046478271484, -0.061622023582458496, -0.10669302940368652, -0.06113171577453613, -0.0050241947174072266, -0.04991602897644043, 0.024848461151123047, -0.06206011772155762, -0.052773475646972656, -0.2108449935913086, -0.11649513244628906, 0.01307213306427002, 0.05459737777709961, 0.007590770721435547, -0.10294437408447266, 0.024706482887268066, 0.010705709457397461, 0.10431015491485596, 0.01610851287841797, 0.02116537094116211, 0.03261399269104004, 0.031459689140319824, 0.11359620094299316, 0.08095300197601318, 0.07681679725646973, -0.012017250061035156, -0.07649779319763184, -0.18218135833740234, -0.049326419830322266, 0.021213769912719727, 0.13950908184051514, 0.23577892780303955, 0.09651291370391846\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_24bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_24bit_48000.h}
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_24bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_48000::bitDepth} = 24\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_24bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_24bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_24bit_48000::testBuffer} = \{\{-0.0005353689193725586, -0.0018157958984375, -0.0024815797805786133, -0.0017586946487426758, -0.0009694099426269531, -0.0005301237106323242, -0.00023984909057617188, -0.0006633996963500977, -0.0007344484329223633, 0.0013926029205322266, 0.004686951637268066, 0.005301952362060547, 0.001447916030883789, -0.003507852554321289, -0.005098938941955566, -0.0023632049560546875, 0.0019316673278808594, 0.003896951675415039, 0.0021713972091674805, -0.0007047653198242188, -0.0014480352401733398, -0.0008498430252075195, -0.001700282096862793, -0.0032678842544555664, -0.0038613080978393555, -0.0010759830474853516, 0.01182401180267334, 0.02786707878112793, 0.01855754852294922, -0.016994118690490723, -0.03550422191619873, -0.021430492401123047, -0.0009359121322631836, 0.018381357192993164, 0.02882969379425049, 0.007241487503051758, -0.018944501876831055, -0.00481104850769043, 0.01887667179107666, 0.002834796905517578, -0.023562073707580566, -0.008999109268188477, 0.01643657684326172, 0.0038520097732543945, -0.0024552345275878906, 0.033385276794433594, 0.04029250144958496, -0.007833361625671387, -0.03152954578399658, -0.00864863395690918, 0.010521411895751953, 0.021465659141540527, 0.027612924575805664, -0.004909515380859375, -0.041514039039611816, -0.0006999969482421875, 0.07184028625488281, 0.05355656147003174, -0.03894925117492676, -0.06949126720428467, -0.0004367828369140625, 0.05938148498535156, 0.03382563591003418, -0.021600723266601562, -0.02450406551361084, 0.018337607383728027, 0.035019755363464355, 0.009488821029663086, -0.002547740936279297, 0.005485415458679199, -0.004842281341552734, -0.010583758354187012, 0.013787388801574707, 0.016601920127868652, -0.018032312393188477, -0.02136683464050293, 0.01699841022491455, 0.03017401695251465, 0.007547736167907715, -0.004074692726135254, 0.00835728645324707, 0.014879941940307617, -0.007208824157714844, -0.026047229766845703, 0.0035952329635620117, 0.041936397552490234, 0.017410874366760254, -0.04070174694061279, -0.04405665397644043, 0.01763904094696045, 0.05734562873840332, 0.01208043098449707, -0.053052544593811035, -0.033879995346069336, 0.04517984390258789, 0.06426751613616943, 0.002217888832092285, -0.023540019989013672, 0.03292644023895264, 0.041263461112976074, -0.044199466705322266, -0.05868065357208252, 0.030320167541503906, 0.052309274673461914, 0.0027663707733154297, -0.0023293495178222656, 0.010164737701416016, 0.004391789436340332, 0.004195094108581543, -0.008912801742553711, -0.014009714126586914, 0.007948517799377441, -0.018178105354309082, -0.06131124496459961, 0.002528667449951172, 0.09173691272735596, 0.04485476016998291, -0.0588078498840332, -0.05958127975463867, 0.0005204677581787109, 0.005663275718688965, -0.024928927421569824, -0.023584365844726562, -0.008938193321228027, -0.01889955997467041, -0.02177739143371582, 0.011068344116210938, 0.027295351028442383, -0.011210322380065918, -0.051587700843811035, -0.053266286849975586, -0.039228200912475586, -0.014955282211303711, 0.022309303283691406, 0.02100658416748047, -0.03366053104400635, -0.05080461502075195, 0.012375712394714355, 0.07740390300750732, 0.08623313903808594, 0.04926800727844238, -0.02035236358642578, -0.1011120080947876, -0.14040255546569824, -0.10365068912506104, -0.023254036903381348, 0.03857135772705078, 0.05435192584991455, 0.03889870643615723, 0.012852787971496582, -0.030987024307250977, -0.08929860591888428, -0.09824728965759277, -0.0326007604598999, 0.030603647232055664, 0.05155456066131592, 0.0559309720993042, 0.030367136001586914, -0.024924635887145996, -0.05092668533325195, -0.024532198905944824, 0.011846780776977539, 0.013265013694763184, -0.00581967830657959, 0.0026712417602539062, 0.007601737976074219, -0.039343833923339844, -0.04319131374359131, 0.06665289402008057, 0.14398396015167236, 0.07255923748016357, -0.03774690628051758, -0.06214296817779541, -0.029167890548706055, -0.023360371589660645, -0.058979034423828125, -0.08780872821807861, -0.0894085168838501, -0.09925878047943115, -0.12716281414031982, -0.1099623441696167, -0.014007568359375, 0.088714599609375, 0.1116938591003418, 0.06560969352722168, 0.03189575672149658, 0.02760756015777588, -0.005571961402893066, -0.0620419979095459, -0.07850146293640137, -0.06346392631530762, -0.0638892650604248, -0.06543803215026855, -0.047734737396240234, -0.040279388427734375, -0.053655028343200684, -0.0394212007522583, 0.026441454887390137, 0.08167052268981934, 0.08292233943939209, 0.06283867359161377, 0.03786969184875488, 0.016643762588500977, 0.035663723945617676, 0.08345603942871094, 0.11807060241699219, 0.14475929737091064, 0.1512831449508667, 0.07611465454101562, -0.06967699527740479, -0.18366336822509766, -0.2215193510055542, -0.228063702583313, -0.21772289276123047, -0.17403638362884521, -0.10664904117584229, -0.012221217155456543, 0.11883389949798584, 0.23630857467651367, 0.26976871490478516, 0.2348005771636963, 0.19006073474884033, 0.14441847801208496, 0.08886027336120605, 0.013650059700012207, -0.07653796672821045, -0.1362673044204712, -0.13289117813110352, -0.09005904197692871, -0.05935049057006836, -0.04871571063995361, -0.022919416427612305, 0.023525714874267578, 0.060304999351501465, 0.06689858436584473, 0.06617927551269531, 0.09962904453277588, 0.15390539169311523, 0.16637468338012695, 0.1253190040588379, 0.08236527442932129, 0.06566929817199707, 0.06699633598327637, 0.0629422664642334, 0.021541595458984375, -0.042909860610961914, -0.07471799850463867, -0.08527469635009766, -0.12843263149261475, -0.16909754276275635, -0.15074551105499268, -0.10744369029998779, -0.08842837810516357, -0.08267450332641602, -0.06730234622955322, -0.06644761562347412, -0.0873953104019165, -0.07795059680938721, -0.03837764263153076, -0.034098267555236816, -0.07519185543060303, -0.11002027988433838, -0.10905241966247559, -0.08707404136657715, -0.06271755695343018, -0.03213071823120117, 0.016660451889038086, 0.07577764987945557, 0.12079823017120361, 0.14485979080200195, 0.16540908813476562, 0.18814897537231445, 0.18603217601776123, 0.14115381240844727, 0.078652024269104, 0.03346526622772217, 0.020048856735229492, 0.028243064880371094, 0.027113676071166992, -0.006494998931884766, -0.04590046405792236, -0.020364046096801758, 0.07584714889526367, 0.13061916828155518, 0.0785517692565918, -0.0022612810134887695, -0.04539132118225098, -0.07252788543701172, -0.10594463348388672, -0.14356112480163574, -0.16857707500457764, -0.15273058414459229, -0.10285747051239014, -0.055068254470825195, -0.012634634971618652, 0.039493441581726074, 0.08833456039428711, 0.11618483066558838, 0.12784481048583984, 0.13093805313110352, 0.12640225887298584, 0.12281036376953125, 0.12299621105194092, 0.1068580150604248, 0.07169830799102783, 0.048117876052856445, 0.03379940986633301, -0.01625370979309082, -0.09772813320159912, -0.14298546314239502, -0.134590744972229, -0.12811553478240967, -0.1353682279586792, -0.11606812477111816, -0.08822298049926758, -0.09889388084411621, -0.11676955223083496, -0.09562039375305176, -0.07921159267425537, -0.1261528730392456, -0.20061981678009033, -0.23133325576782227, -0.22429180145263672, -0.2265070676803589, -0.23732519149780273, -0.2323462963104248, -0.20833563804626465, -0.17016899585723877, -0.11388063430786133, -0.03736007213592529, 0.04158031940460205, 0.10008406639099121, 0.13604795932769775, 0.15819740295410156, 0.1686631441116333, 0.17503464221954346, 0.18374860286712646, 0.1799170970916748, 0.16497564315795898, 0.16522789001464844, 0.17826223373413086, 0.19110441207885742, 0.2133733034133911, 0.23157572746276855, 0.2186269760131836, 0.19382965564727783, 0.1786268949508667, 0.1509941816329956, 0.09754598140716553, 0.03965890407562256, 0.01019740104675293, 0.02343595027923584, 0.04391515254974365, 0.034508466720581055, 0.027436256408691406, 0.05022251605987549, 0.06523478031158447, 0.06500518321990967, 0.07601487636566162, 0.07491195201873779, 0.04451632499694824, 0.024481773376464844, 0.02528250217437744, -0.0024760961532592773, -0.07039666175842285, -0.12084364891052246, -0.12771594524383545, -0.129064679145813, -0.14493012428283691, -0.16004621982574463, -0.16779577732086182, -0.16288995742797852, -0.13577568531036377, -0.10431289672851562, -0.09752440452575684, -0.11126375198364258, -0.13270068168640137, -0.1605534553527832, -0.1712244749069214, -0.14864563941955566, -0.12050533294677734, -0.11020779609680176, -0.11559748649597168, -0.11937582492828369, -0.09243893623352051, -0.04015517234802246, -0.018019914627075195, -0.04698038101196289, -0.07125461101531982, -0.04965519905090332, -0.014166831970214844, -0.0044831037521362305, -0.010814666748046875, -0.0033524036407470703, 0.0196835994720459, 0.04633009433746338, 0.07793891429901123, 0.10954630374908447, 0.11985993385314941, 0.10022234916687012, 0.0797581672668457, 0.08235812187194824, 0.07843363285064697, 0.043930888175964355, 0.012169480323791504, 0.021724343299865723, 0.06522941589355469, 0.10875856876373291, 0.1341007947921753, 0.1399155855178833, 0.12991487979888916, 0.11990725994110107, 0.11670315265655518, 0.1050945520401001, 0.08710646629333496, 0.07422339916229248, 0.04929494857788086, 0.01374828815460205, 0.007164478302001953, 0.025658607482910156, 0.026568055152893066, 0.03109431266784668, 0.08767318725585938, 0.1506139039993286, 0.15682220458984375, 0.14418649673461914, 0.15093612670898438, 0.15042626857757568, 0.1358642578125, 0.11857342720031738, 0.09690451622009277, 0.08896052837371826, 0.1047893762588501, 0.11650681495666504, 0.12035048007965088, 0.14209628105163574, 0.16403353214263916, 0.15483248233795166, 0.1357945203781128, 0.13604998588562012, 0.14855635166168213, 0.1522594690322876, 0.1344432830810547, 0.11377418041229248, 0.12683308124542236, 0.15817606449127197, 0.15553045272827148, 0.12389230728149414, 0.10789799690246582, 0.11085271835327148, 0.10509026050567627, 0.08825063705444336, 0.07614541053771973, 0.05879080295562744, 0.034650444984436035, 0.036742568016052246, 0.05430877208709717, 0.04065108299255371, 0.013470053672790527, 0.01580369472503662, 0.027284622192382812, 0.023079514503479004, 0.027742385864257812, 0.04296374320983887, 0.03832972049713135, 0.02705836296081543, 0.03471183776855469, 0.038552165031433105, 0.028060317039489746, 0.03086388111114502, 0.03963184356689453, 0.028004884719848633, 0.01490938663482666, 0.014776945114135742, 0.0006202459335327148, -0.01997840404510498, -0.008894920349121094, 0.006175875663757324, -0.01719522476196289, -0.04103231430053711, -0.03052210807800293, -0.015636682510375977, -0.0078202486038208, 0.009159684181213379, 0.014788269996643066, -0.015173554420471191, -0.05453753471374512, -0.06772994995117188, -0.062456488609313965, -0.06600832939147949, -0.08294367790222168, -0.0989910364151001, -0.0930023193359375, -0.06335842609405518, -0.06311619281768799, -0.11351346969604492, -0.13675391674041748, -0.11063992977142334, -0.10651528835296631, -0.10274779796600342\}, \{-0.00019276142120361328, -0.0008546113967895508, -0.0011512041091918945, -0.0003414154052734375, 0.00031960010528564453, 0.00026595592498779297, -0.000202178955078125, -0.001486063003540039, -0.002101898193359375, 1.811981201171875e-05, 0.003612518310546875, 0.004551410675048828, 0.0009132623672485352, -0.0033173561096191406, -0.0034875869750976562, 6.556510925292969e-06, 0.003580451011657715, 0.005030274391174316, 0.0047149658203125, 0.0023479461669921875, -0.002699732780456543, -0.007408738136291504, -0.007855415344238281, -0.006338238716125488, -0.004579901695251465, 0.006789565086364746, 0.025725483894348145, 0.022507071495056152, -0.01045382022857666, -0.03273916244506836, -0.023112177848815918, -0.0021512508392333984, 0.01935100555419922, 0.02936422824859619, 0.008227109909057617, -0.015272736549377441, -0.0035239458084106445, 0.011955857276916504, -0.007554292678833008, -0.027881383895874023, -0.007137775421142578, 0.01538383960723877, -0.002095937728881836, -0.005031943321228027, 0.035779714584350586, 0.040422677993774414, -0.010872960090637207, -0.03330528736114502, -0.010599255561828613, 0.005516767501831055, 0.016508936882019043, 0.025953292846679688, -0.0038393735885620117, -0.03726637363433838, 0.006607174873352051, 0.07679438591003418, 0.050582289695739746, -0.04903602600097656, -0.08028292655944824, -0.005838274955749512, 0.06014561653137207, 0.03633856773376465, -0.023099780082702637, -0.03108060359954834, 0.011297345161437988, 0.03178298473358154, 0.01012730598449707, -0.002532958984375, 0.0007157325744628906, -0.009153008460998535, -0.004942774772644043, 0.025640368461608887, 0.021431326866149902, -0.021207213401794434, -0.023672103881835938, 0.014607787132263184, 0.019919633865356445, -0.0077359676361083984, -0.011949539184570312, 0.011954665184020996, 0.01865363121032715, -0.013427972793579102, -0.0347137451171875, 0.005061507225036621, 0.050296902656555176, 0.023358702659606934, -0.03509020805358887, -0.034333229064941406, 0.023107171058654785, 0.045990943908691406, -0.01065373420715332, -0.06581234931945801, -0.027550339698791504, 0.05623173713684082, 0.06109762191772461, -0.015583395957946777, -0.036693453788757324, 0.03572821617126465, 0.04913675785064697, -0.03798544406890869, -0.04867219924926758, 0.038854241371154785, 0.05463826656341553, 0.01032400131225586, 0.00984954833984375, 0.011184096336364746, -0.004972696304321289, -0.004260540008544922, -0.0103074312210083, -0.002702951431274414, 0.02236759662628174, -0.023937582969665527, -0.08607518672943115, -0.01564610004425049, 0.09415388107299805, 0.060933589935302734, -0.04587054252624512, -0.06493103504180908, -0.020270943641662598, -0.00892174243927002, -0.019640445709228516, -0.008898735046386719, -0.0026618242263793945, -0.0260392427444458, -0.03579521179199219, 0.0015512704849243164, 0.03997945785522461, 0.03140711784362793, -0.007421135902404785, -0.04778718948364258, -0.06973564624786377, -0.03937232494354248, 0.030640125274658203, 0.0492023229598999, -0.01496422290802002, -0.060074448585510254, -0.024803638458251953, 0.029970288276672363, 0.060141801834106445, 0.07193243503570557, 0.04773902893066406, -0.0312345027923584, -0.11586475372314453, -0.1246786117553711, -0.058272719383239746, 0.007813811302185059, 0.03402233123779297, 0.04491865634918213, 0.05979466438293457, 0.03185844421386719, -0.06257164478302002, -0.12773776054382324, -0.09966015815734863, -0.04123198986053467, 0.01120150089263916, 0.06698894500732422, 0.08770668506622314, 0.05374789237976074, 0.0075310468673706055, -0.013025760650634766, -0.008366823196411133, -0.008133411407470703, -0.012332320213317871, 0.008831977844238281, 0.011703729629516602, -0.04704737663269043, -0.06306934356689453, 0.03733408451080322, 0.12193751335144043, 0.08452796936035156, 0.01544797420501709, 0.008822917938232422, 0.027741670608520508, 0.004280686378479004, -0.058293938636779785, -0.09628283977508545, -0.08288919925689697, -0.08616721630096436, -0.14423513412475586, -0.16563522815704346, -0.0805734395980835, 0.04283595085144043, 0.09959423542022705, 0.08430111408233643, 0.08578622341156006, 0.10448980331420898, 0.04402446746826172, -0.05954265594482422, -0.08478283882141113, -0.05704939365386963, -0.0678093433380127, -0.08811557292938232, -0.06034541130065918, -0.020751476287841797, -0.01802682876586914, -0.030344247817993164, -0.008818507194519043, 0.042110562324523926, 0.07975828647613525, 0.07644355297088623, 0.03725326061248779, 0.017053604125976562, 0.03372490406036377, 0.04184901714324951, 0.07449650764465332, 0.16484880447387695, 0.2086268663406372, 0.14426195621490479, 0.03964376449584961, -0.060538291931152344, -0.1561272144317627, -0.228829026222229, -0.25271451473236084, -0.23596715927124023, -0.2032707929611206, -0.13231194019317627, 0.00919651985168457, 0.17594587802886963, 0.2688401937484741, 0.2683805227279663, 0.24067473411560059, 0.21136140823364258, 0.1679096221923828, 0.08660686016082764, -0.03515136241912842, -0.12369036674499512, -0.13155591487884521, -0.10489225387573242, -0.08960938453674316, -0.07591736316680908, -0.04494881629943848, 0.0006262063980102539, 0.04543006420135498, 0.05810260772705078, 0.047572970390319824, 0.07597637176513672, 0.13945400714874268, 0.16162514686584473, 0.13311779499053955, 0.11332476139068604, 0.11291730403900146, 0.10619139671325684, 0.08590149879455566, 0.04206740856170654, -0.01557159423828125, -0.04412078857421875, -0.05707597732543945, -0.11134445667266846, -0.16953599452972412, -0.1619105339050293, -0.12540876865386963, -0.12011933326721191, -0.12652587890625, -0.10605597496032715, -0.08773314952850342, -0.09902238845825195, -0.08056032657623291, -0.015919804573059082, 0.003995180130004883, -0.05193126201629639, -0.10588502883911133, -0.11218905448913574, -0.10307466983795166, -0.0995858907699585, -0.07815062999725342, -0.026581645011901855, 0.030030131340026855, 0.07472968101501465, 0.11796140670776367, 0.16021192073822021, 0.18784892559051514, 0.19012200832366943, 0.16503000259399414, 0.12352192401885986, 0.07967805862426758, 0.054854393005371094, 0.06149017810821533, 0.06472361087799072, 0.021869301795959473, -0.036287784576416016, -0.0190279483795166, 0.07918262481689453, 0.12698709964752197, 0.059715986251831055, -0.024969100952148438, -0.06018102169036865, -0.0839623212814331, -0.11879599094390869, -0.15084350109100342, -0.1678851842880249, -0.15017127990722656, -0.1017221212387085, -0.05564475059509277, -0.011201977729797363, 0.04347264766693115, 0.0857917070388794, 0.1058722734451294, 0.11930596828460693, 0.12347972393035889, 0.11101508140563965, 0.10329151153564453, 0.11336326599121094, 0.11137628555297852, 0.07915294170379639, 0.051343679428100586, 0.04898476600646973, 0.02268528938293457, -0.057979702949523926, -0.12369036674499512, -0.12723660469055176, -0.12671709060668945, -0.1443500518798828, -0.12954139709472656, -0.09769916534423828, -0.10130727291107178, -0.11140549182891846, -0.08407294750213623, -0.06281077861785889, -0.10980761051177979, -0.1911386251449585, -0.22972261905670166, -0.23002183437347412, -0.234694242477417, -0.24427258968353271, -0.2479795217514038, -0.2351667881011963, -0.2099541425704956, -0.1788642406463623, -0.11421144008636475, -0.025595426559448242, 0.05230224132537842, 0.11520254611968994, 0.15294742584228516, 0.17534947395324707, 0.2000635862350464, 0.21004951000213623, 0.1932692527770996, 0.17428350448608398, 0.179948091506958, 0.18530499935150146, 0.17960584163665771, 0.19712412357330322, 0.219488263130188, 0.21025347709655762, 0.19125282764434814, 0.18508470058441162, 0.1694704294204712, 0.12549221515655518, 0.07104885578155518, 0.04029583930969238, 0.05243551731109619, 0.07193624973297119, 0.05684053897857666, 0.03926825523376465, 0.050171613693237305, 0.057363033294677734, 0.049514055252075195, 0.04949069023132324, 0.045107126235961914, 0.026120424270629883, 0.024148941040039062, 0.03752493858337402, 0.0141066312789917, -0.05343949794769287, -0.10280013084411621, -0.10529124736785889, -0.10992920398712158, -0.14469683170318604, -0.1778407096862793, -0.19040298461914062, -0.1854931116104126, -0.15789580345153809, -0.12273216247558594, -0.11422383785247803, -0.1266012191772461, -0.13487815856933594, -0.15205121040344238, -0.17784321308135986, -0.1768789291381836, -0.15126550197601318, -0.1354731321334839, -0.14378559589385986, -0.15488409996032715, -0.12973201274871826, -0.0766911506652832, -0.054975152015686035, -0.08002400398254395, -0.09874999523162842, -0.07738864421844482, -0.04359161853790283, -0.029198527336120605, -0.028589606285095215, -0.02039027214050293, 0.00023305416107177734, 0.02946031093597412, 0.07000374794006348, 0.10936415195465088, 0.11771225929260254, 0.09067606925964355, 0.07157456874847412, 0.08761930465698242, 0.096099853515625, 0.06136214733123779, 0.01703023910522461, 0.010963082313537598, 0.04609501361846924, 0.0911339521408081, 0.12428069114685059, 0.13417983055114746, 0.11591219902038574, 0.0977945327758789, 0.10513758659362793, 0.1107625961303711, 0.09388995170593262, 0.07846200466156006, 0.06401729583740234, 0.029898762702941895, 0.004997134208679199, 0.013776302337646484, 0.020159244537353516, 0.021957039833068848, 0.06718671321868896, 0.12535429000854492, 0.13554716110229492, 0.13538765907287598, 0.15213918685913086, 0.13934075832366943, 0.10779285430908203, 0.1019829511642456, 0.09841740131378174, 0.07521116733551025, 0.06976711750030518, 0.10565197467803955, 0.1457512378692627, 0.15254628658294678, 0.14875996112823486, 0.16248536109924316, 0.16472065448760986, 0.14304983615875244, 0.145097017288208, 0.17108142375946045, 0.15649104118347168, 0.1066904067993164, 0.10265815258026123, 0.15045702457427979, 0.16820776462554932, 0.13838410377502441, 0.12171757221221924, 0.12875676155090332, 0.1176307201385498, 0.08721673488616943, 0.07331037521362305, 0.07018780708312988, 0.04355001449584961, 0.01278221607208252, 0.018721580505371094, 0.04105055332183838, 0.039315223693847656, 0.02689528465270996, 0.030165791511535645, 0.036980628967285156, 0.037801265716552734, 0.03967130184173584, 0.03875696659088135, 0.03334546089172363, 0.025502324104309082, 0.012368917465209961, 0.007869720458984375, 0.025928497314453125, 0.04088783264160156, 0.030080199241638184, 0.01993858814239502, 0.033383727073669434, 0.03838944435119629, 0.0026932954788208008, -0.02671802043914795, -0.0038722753524780273, 0.007236838340759277, -0.03801846504211426, -0.06738543510437012, -0.04260730743408203, -0.013179421424865723, -0.0030993223190307617, 0.0028181076049804688, -0.0020074844360351562, -0.037847280502319336, -0.08669781684875488, -0.10269773006439209, -0.08195006847381592, -0.06769907474517822, -0.08812320232391357, -0.11547243595123291, -0.09213685989379883, -0.04346668720245361, -0.07539713382720947, -0.15947413444519043, -0.1560577154159546, -0.09122884273529053, -0.07877826690673828, -0.08785176277160645\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_24bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_24bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_24bit_48000.h}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_24bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 24;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.0005353689193725586, -0.0018157958984375, -0.0024815797805786133, -0.0017586946487426758, -0.0009694099426269531, -0.0005301237106323242, -0.00023984909057617188, -0.0006633996963500977, -0.0007344484329223633, 0.0013926029205322266, 0.004686951637268066, 0.005301952362060547, 0.001447916030883789, -0.003507852554321289, -0.005098938941955566, -0.0023632049560546875, 0.0019316673278808594, 0.003896951675415039, 0.0021713972091674805, -0.0007047653198242188, -0.0014480352401733398, -0.0008498430252075195, -0.001700282096862793, -0.0032678842544555664, -0.0038613080978393555, -0.0010759830474853516, 0.01182401180267334, 0.02786707878112793, 0.01855754852294922, -0.016994118690490723, -0.03550422191619873, -0.021430492401123047, -0.0009359121322631836, 0.018381357192993164, 0.02882969379425049, 0.007241487503051758, -0.018944501876831055, -0.00481104850769043, 0.01887667179107666, 0.002834796905517578, -0.023562073707580566, -0.008999109268188477, 0.01643657684326172, 0.0038520097732543945, -0.0024552345275878906, 0.033385276794433594, 0.04029250144958496, -0.007833361625671387, -0.03152954578399658, -0.00864863395690918, 0.010521411895751953, 0.021465659141540527, 0.027612924575805664, -0.004909515380859375, -0.041514039039611816, -0.0006999969482421875, 0.07184028625488281, 0.05355656147003174, -0.03894925117492676, -0.06949126720428467, -0.0004367828369140625, 0.05938148498535156, 0.03382563591003418, -0.021600723266601562, -0.02450406551361084, 0.018337607383728027, 0.035019755363464355, 0.009488821029663086, -0.002547740936279297, 0.005485415458679199, -0.004842281341552734, -0.010583758354187012, 0.013787388801574707, 0.016601920127868652, -0.018032312393188477, -0.02136683464050293, 0.01699841022491455, 0.03017401695251465, 0.007547736167907715, -0.004074692726135254, 0.00835728645324707, 0.014879941940307617, -0.007208824157714844, -0.026047229766845703, 0.0035952329635620117, 0.041936397552490234, 0.017410874366760254, -0.04070174694061279, -0.04405665397644043, 0.01763904094696045, 0.05734562873840332, 0.01208043098449707, -0.053052544593811035, -0.033879995346069336, 0.04517984390258789, 0.06426751613616943, 0.002217888832092285, -0.023540019989013672, 0.03292644023895264, 0.041263461112976074, -0.044199466705322266, -0.05868065357208252, 0.030320167541503906, 0.052309274673461914, 0.0027663707733154297, -0.0023293495178222656, 0.010164737701416016, 0.004391789436340332, 0.004195094108581543, -0.008912801742553711, -0.014009714126586914, 0.007948517799377441, -0.018178105354309082, -0.06131124496459961, 0.002528667449951172, 0.09173691272735596, 0.04485476016998291, -0.0588078498840332, -0.05958127975463867, 0.0005204677581787109, 0.005663275718688965, -0.024928927421569824, -0.023584365844726562, -0.008938193321228027, -0.01889955997467041, -0.02177739143371582, 0.011068344116210938, 0.027295351028442383, -0.011210322380065918, -0.051587700843811035, -0.053266286849975586, -0.039228200912475586, -0.014955282211303711, 0.022309303283691406, 0.02100658416748047, -0.03366053104400635, -0.05080461502075195, 0.012375712394714355, 0.07740390300750732, 0.08623313903808594, 0.04926800727844238, -0.02035236358642578, -0.1011120080947876, -0.14040255546569824, -0.10365068912506104, -0.023254036903381348, 0.03857135772705078, 0.05435192584991455, 0.03889870643615723, 0.012852787971496582, -0.030987024307250977, -0.08929860591888428, -0.09824728965759277, -0.0326007604598999, 0.030603647232055664, 0.05155456066131592, 0.0559309720993042, 0.030367136001586914, -0.024924635887145996, -0.05092668533325195, -0.024532198905944824, 0.011846780776977539, 0.013265013694763184, -0.00581967830657959, 0.0026712417602539062, 0.007601737976074219, -0.039343833923339844, -0.04319131374359131, 0.06665289402008057, 0.14398396015167236, 0.07255923748016357, -0.03774690628051758, -0.06214296817779541, -0.029167890548706055, -0.023360371589660645, -0.058979034423828125, -0.08780872821807861, -0.0894085168838501, -0.09925878047943115, -0.12716281414031982, -0.1099623441696167, -0.014007568359375, 0.088714599609375, 0.1116938591003418, 0.06560969352722168, 0.03189575672149658, 0.02760756015777588, -0.005571961402893066, -0.0620419979095459, -0.07850146293640137, -0.06346392631530762, -0.0638892650604248, -0.06543803215026855, -0.047734737396240234, -0.040279388427734375, -0.053655028343200684, -0.0394212007522583, 0.026441454887390137, 0.08167052268981934, 0.08292233943939209, 0.06283867359161377, 0.03786969184875488, 0.016643762588500977, 0.035663723945617676, 0.08345603942871094, 0.11807060241699219, 0.14475929737091064, 0.1512831449508667, 0.07611465454101562, -0.06967699527740479, -0.18366336822509766, -0.2215193510055542, -0.228063702583313, -0.21772289276123047, -0.17403638362884521, -0.10664904117584229, -0.012221217155456543, 0.11883389949798584, 0.23630857467651367, 0.26976871490478516, 0.2348005771636963, 0.19006073474884033, 0.14441847801208496, 0.08886027336120605, 0.013650059700012207, -0.07653796672821045, -0.1362673044204712, -0.13289117813110352, -0.09005904197692871, -0.05935049057006836, -0.04871571063995361, -0.022919416427612305, 0.023525714874267578, 0.060304999351501465, 0.06689858436584473, 0.06617927551269531, 0.09962904453277588, 0.15390539169311523, 0.16637468338012695, 0.1253190040588379, 0.08236527442932129, 0.06566929817199707, 0.06699633598327637, 0.0629422664642334, 0.021541595458984375, -0.042909860610961914, -0.07471799850463867, -0.08527469635009766, -0.12843263149261475, -0.16909754276275635, -0.15074551105499268, -0.10744369029998779, -0.08842837810516357, -0.08267450332641602, -0.06730234622955322, -0.06644761562347412, -0.0873953104019165, -0.07795059680938721, -0.03837764263153076, -0.034098267555236816, -0.07519185543060303, -0.11002027988433838, -0.10905241966247559, -0.08707404136657715, -0.06271755695343018, -0.03213071823120117, 0.016660451889038086, 0.07577764987945557, 0.12079823017120361, 0.14485979080200195, 0.16540908813476562, 0.18814897537231445, 0.18603217601776123, 0.14115381240844727, 0.078652024269104, 0.03346526622772217, 0.020048856735229492, 0.028243064880371094, 0.027113676071166992, -0.006494998931884766, -0.04590046405792236, -0.020364046096801758, 0.07584714889526367, 0.13061916828155518, 0.0785517692565918, -0.0022612810134887695, -0.04539132118225098, -0.07252788543701172, -0.10594463348388672, -0.14356112480163574, -0.16857707500457764, -0.15273058414459229, -0.10285747051239014, -0.055068254470825195, -0.012634634971618652, 0.039493441581726074, 0.08833456039428711, 0.11618483066558838, 0.12784481048583984, 0.13093805313110352, 0.12640225887298584, 0.12281036376953125, 0.12299621105194092, 0.1068580150604248, 0.07169830799102783, 0.048117876052856445, 0.03379940986633301, -0.01625370979309082, -0.09772813320159912, -0.14298546314239502, -0.134590744972229, -0.12811553478240967, -0.1353682279586792, -0.11606812477111816, -0.08822298049926758, -0.09889388084411621, -0.11676955223083496, -0.09562039375305176, -0.07921159267425537, -0.1261528730392456, -0.20061981678009033, -0.23133325576782227, -0.22429180145263672, -0.2265070676803589, -0.23732519149780273, -0.2323462963104248, -0.20833563804626465, -0.17016899585723877, -0.11388063430786133, -0.03736007213592529, 0.04158031940460205, 0.10008406639099121, 0.13604795932769775, 0.15819740295410156, 0.1686631441116333, 0.17503464221954346, 0.18374860286712646, 0.1799170970916748, 0.16497564315795898, 0.16522789001464844, 0.17826223373413086, 0.19110441207885742, 0.2133733034133911, 0.23157572746276855, 0.2186269760131836, 0.19382965564727783, 0.1786268949508667, 0.1509941816329956, 0.09754598140716553, 0.03965890407562256, 0.01019740104675293, 0.02343595027923584, 0.04391515254974365, 0.034508466720581055, 0.027436256408691406, 0.05022251605987549, 0.06523478031158447, 0.06500518321990967, 0.07601487636566162, 0.07491195201873779, 0.04451632499694824, 0.024481773376464844, 0.02528250217437744, -0.0024760961532592773, -0.07039666175842285, -0.12084364891052246, -0.12771594524383545, -0.129064679145813, -0.14493012428283691, -0.16004621982574463, -0.16779577732086182, -0.16288995742797852, -0.13577568531036377, -0.10431289672851562, -0.09752440452575684, -0.11126375198364258, -0.13270068168640137, -0.1605534553527832, -0.1712244749069214, -0.14864563941955566, -0.12050533294677734, -0.11020779609680176, -0.11559748649597168, -0.11937582492828369, -0.09243893623352051, -0.04015517234802246, -0.018019914627075195, -0.04698038101196289, -0.07125461101531982, -0.04965519905090332, -0.014166831970214844, -0.0044831037521362305, -0.010814666748046875, -0.0033524036407470703, 0.0196835994720459, 0.04633009433746338, 0.07793891429901123, 0.10954630374908447, 0.11985993385314941, 0.10022234916687012, 0.0797581672668457, 0.08235812187194824, 0.07843363285064697, 0.043930888175964355, 0.012169480323791504, 0.021724343299865723, 0.06522941589355469, 0.10875856876373291, 0.1341007947921753, 0.1399155855178833, 0.12991487979888916, 0.11990725994110107, 0.11670315265655518, 0.1050945520401001, 0.08710646629333496, 0.07422339916229248, 0.04929494857788086, 0.01374828815460205, 0.007164478302001953, 0.025658607482910156, 0.026568055152893066, 0.03109431266784668, 0.08767318725585938, 0.1506139039993286, 0.15682220458984375, 0.14418649673461914, 0.15093612670898438, 0.15042626857757568, 0.1358642578125, 0.11857342720031738, 0.09690451622009277, 0.08896052837371826, 0.1047893762588501, 0.11650681495666504, 0.12035048007965088, 0.14209628105163574, 0.16403353214263916, 0.15483248233795166, 0.1357945203781128, 0.13604998588562012, 0.14855635166168213, 0.1522594690322876, 0.1344432830810547, 0.11377418041229248, 0.12683308124542236, 0.15817606449127197, 0.15553045272827148, 0.12389230728149414, 0.10789799690246582, 0.11085271835327148, 0.10509026050567627, 0.08825063705444336, 0.07614541053771973, 0.05879080295562744, 0.034650444984436035, 0.036742568016052246, 0.05430877208709717, 0.04065108299255371, 0.013470053672790527, 0.01580369472503662, 0.027284622192382812, 0.023079514503479004, 0.027742385864257812, 0.04296374320983887, 0.03832972049713135, 0.02705836296081543, 0.03471183776855469, 0.038552165031433105, 0.028060317039489746, 0.03086388111114502, 0.03963184356689453, 0.028004884719848633, 0.01490938663482666, 0.014776945114135742, 0.0006202459335327148, -0.01997840404510498, -0.008894920349121094, 0.006175875663757324, -0.01719522476196289, -0.04103231430053711, -0.03052210807800293, -0.015636682510375977, -0.0078202486038208, 0.009159684181213379, 0.014788269996643066, -0.015173554420471191, -0.05453753471374512, -0.06772994995117188, -0.062456488609313965, -0.06600832939147949, -0.08294367790222168, -0.0989910364151001, -0.0930023193359375, -0.06335842609405518, -0.06311619281768799, -0.11351346969604492, -0.13675391674041748, -0.11063992977142334, -0.10651528835296631, -0.10274779796600342\}, \{-0.00019276142120361328, -0.0008546113967895508, -0.0011512041091918945, -0.0003414154052734375, 0.00031960010528564453, 0.00026595592498779297, -0.000202178955078125, -0.001486063003540039, -0.002101898193359375, 1.811981201171875e-05, 0.003612518310546875, 0.004551410675048828, 0.0009132623672485352, -0.0033173561096191406, -0.0034875869750976562, 6.556510925292969e-06, 0.003580451011657715, 0.005030274391174316, 0.0047149658203125, 0.0023479461669921875, -0.002699732780456543, -0.007408738136291504, -0.007855415344238281, -0.006338238716125488, -0.004579901695251465, 0.006789565086364746, 0.025725483894348145, 0.022507071495056152, -0.01045382022857666, -0.03273916244506836, -0.023112177848815918, -0.0021512508392333984, 0.01935100555419922, 0.02936422824859619, 0.008227109909057617, -0.015272736549377441, -0.0035239458084106445, 0.011955857276916504, -0.007554292678833008, -0.027881383895874023, -0.007137775421142578, 0.01538383960723877, -0.002095937728881836, -0.005031943321228027, 0.035779714584350586, 0.040422677993774414, -0.010872960090637207, -0.03330528736114502, -0.010599255561828613, 0.005516767501831055, 0.016508936882019043, 0.025953292846679688, -0.0038393735885620117, -0.03726637363433838, 0.006607174873352051, 0.07679438591003418, 0.050582289695739746, -0.04903602600097656, -0.08028292655944824, -0.005838274955749512, 0.06014561653137207, 0.03633856773376465, -0.023099780082702637, -0.03108060359954834, 0.011297345161437988, 0.03178298473358154, 0.01012730598449707, -0.002532958984375, 0.0007157325744628906, -0.009153008460998535, -0.004942774772644043, 0.025640368461608887, 0.021431326866149902, -0.021207213401794434, -0.023672103881835938, 0.014607787132263184, 0.019919633865356445, -0.0077359676361083984, -0.011949539184570312, 0.011954665184020996, 0.01865363121032715, -0.013427972793579102, -0.0347137451171875, 0.005061507225036621, 0.050296902656555176, 0.023358702659606934, -0.03509020805358887, -0.034333229064941406, 0.023107171058654785, 0.045990943908691406, -0.01065373420715332, -0.06581234931945801, -0.027550339698791504, 0.05623173713684082, 0.06109762191772461, -0.015583395957946777, -0.036693453788757324, 0.03572821617126465, 0.04913675785064697, -0.03798544406890869, -0.04867219924926758, 0.038854241371154785, 0.05463826656341553, 0.01032400131225586, 0.00984954833984375, 0.011184096336364746, -0.004972696304321289, -0.004260540008544922, -0.0103074312210083, -0.002702951431274414, 0.02236759662628174, -0.023937582969665527, -0.08607518672943115, -0.01564610004425049, 0.09415388107299805, 0.060933589935302734, -0.04587054252624512, -0.06493103504180908, -0.020270943641662598, -0.00892174243927002, -0.019640445709228516, -0.008898735046386719, -0.0026618242263793945, -0.0260392427444458, -0.03579521179199219, 0.0015512704849243164, 0.03997945785522461, 0.03140711784362793, -0.007421135902404785, -0.04778718948364258, -0.06973564624786377, -0.03937232494354248, 0.030640125274658203, 0.0492023229598999, -0.01496422290802002, -0.060074448585510254, -0.024803638458251953, 0.029970288276672363, 0.060141801834106445, 0.07193243503570557, 0.04773902893066406, -0.0312345027923584, -0.11586475372314453, -0.1246786117553711, -0.058272719383239746, 0.007813811302185059, 0.03402233123779297, 0.04491865634918213, 0.05979466438293457, 0.03185844421386719, -0.06257164478302002, -0.12773776054382324, -0.09966015815734863, -0.04123198986053467, 0.01120150089263916, 0.06698894500732422, 0.08770668506622314, 0.05374789237976074, 0.0075310468673706055, -0.013025760650634766, -0.008366823196411133, -0.008133411407470703, -0.012332320213317871, 0.008831977844238281, 0.011703729629516602, -0.04704737663269043, -0.06306934356689453, 0.03733408451080322, 0.12193751335144043, 0.08452796936035156, 0.01544797420501709, 0.008822917938232422, 0.027741670608520508, 0.004280686378479004, -0.058293938636779785, -0.09628283977508545, -0.08288919925689697, -0.08616721630096436, -0.14423513412475586, -0.16563522815704346, -0.0805734395980835, 0.04283595085144043, 0.09959423542022705, 0.08430111408233643, 0.08578622341156006, 0.10448980331420898, 0.04402446746826172, -0.05954265594482422, -0.08478283882141113, -0.05704939365386963, -0.0678093433380127, -0.08811557292938232, -0.06034541130065918, -0.020751476287841797, -0.01802682876586914, -0.030344247817993164, -0.008818507194519043, 0.042110562324523926, 0.07975828647613525, 0.07644355297088623, 0.03725326061248779, 0.017053604125976562, 0.03372490406036377, 0.04184901714324951, 0.07449650764465332, 0.16484880447387695, 0.2086268663406372, 0.14426195621490479, 0.03964376449584961, -0.060538291931152344, -0.1561272144317627, -0.228829026222229, -0.25271451473236084, -0.23596715927124023, -0.2032707929611206, -0.13231194019317627, 0.00919651985168457, 0.17594587802886963, 0.2688401937484741, 0.2683805227279663, 0.24067473411560059, 0.21136140823364258, 0.1679096221923828, 0.08660686016082764, -0.03515136241912842, -0.12369036674499512, -0.13155591487884521, -0.10489225387573242, -0.08960938453674316, -0.07591736316680908, -0.04494881629943848, 0.0006262063980102539, 0.04543006420135498, 0.05810260772705078, 0.047572970390319824, 0.07597637176513672, 0.13945400714874268, 0.16162514686584473, 0.13311779499053955, 0.11332476139068604, 0.11291730403900146, 0.10619139671325684, 0.08590149879455566, 0.04206740856170654, -0.01557159423828125, -0.04412078857421875, -0.05707597732543945, -0.11134445667266846, -0.16953599452972412, -0.1619105339050293, -0.12540876865386963, -0.12011933326721191, -0.12652587890625, -0.10605597496032715, -0.08773314952850342, -0.09902238845825195, -0.08056032657623291, -0.015919804573059082, 0.003995180130004883, -0.05193126201629639, -0.10588502883911133, -0.11218905448913574, -0.10307466983795166, -0.0995858907699585, -0.07815062999725342, -0.026581645011901855, 0.030030131340026855, 0.07472968101501465, 0.11796140670776367, 0.16021192073822021, 0.18784892559051514, 0.19012200832366943, 0.16503000259399414, 0.12352192401885986, 0.07967805862426758, 0.054854393005371094, 0.06149017810821533, 0.06472361087799072, 0.021869301795959473, -0.036287784576416016, -0.0190279483795166, 0.07918262481689453, 0.12698709964752197, 0.059715986251831055, -0.024969100952148438, -0.06018102169036865, -0.0839623212814331, -0.11879599094390869, -0.15084350109100342, -0.1678851842880249, -0.15017127990722656, -0.1017221212387085, -0.05564475059509277, -0.011201977729797363, 0.04347264766693115, 0.0857917070388794, 0.1058722734451294, 0.11930596828460693, 0.12347972393035889, 0.11101508140563965, 0.10329151153564453, 0.11336326599121094, 0.11137628555297852, 0.07915294170379639, 0.051343679428100586, 0.04898476600646973, 0.02268528938293457, -0.057979702949523926, -0.12369036674499512, -0.12723660469055176, -0.12671709060668945, -0.1443500518798828, -0.12954139709472656, -0.09769916534423828, -0.10130727291107178, -0.11140549182891846, -0.08407294750213623, -0.06281077861785889, -0.10980761051177979, -0.1911386251449585, -0.22972261905670166, -0.23002183437347412, -0.234694242477417, -0.24427258968353271, -0.2479795217514038, -0.2351667881011963, -0.2099541425704956, -0.1788642406463623, -0.11421144008636475, -0.025595426559448242, 0.05230224132537842, 0.11520254611968994, 0.15294742584228516, 0.17534947395324707, 0.2000635862350464, 0.21004951000213623, 0.1932692527770996, 0.17428350448608398, 0.179948091506958, 0.18530499935150146, 0.17960584163665771, 0.19712412357330322, 0.219488263130188, 0.21025347709655762, 0.19125282764434814, 0.18508470058441162, 0.1694704294204712, 0.12549221515655518, 0.07104885578155518, 0.04029583930969238, 0.05243551731109619, 0.07193624973297119, 0.05684053897857666, 0.03926825523376465, 0.050171613693237305, 0.057363033294677734, 0.049514055252075195, 0.04949069023132324, 0.045107126235961914, 0.026120424270629883, 0.024148941040039062, 0.03752493858337402, 0.0141066312789917, -0.05343949794769287, -0.10280013084411621, -0.10529124736785889, -0.10992920398712158, -0.14469683170318604, -0.1778407096862793, -0.19040298461914062, -0.1854931116104126, -0.15789580345153809, -0.12273216247558594, -0.11422383785247803, -0.1266012191772461, -0.13487815856933594, -0.15205121040344238, -0.17784321308135986, -0.1768789291381836, -0.15126550197601318, -0.1354731321334839, -0.14378559589385986, -0.15488409996032715, -0.12973201274871826, -0.0766911506652832, -0.054975152015686035, -0.08002400398254395, -0.09874999523162842, -0.07738864421844482, -0.04359161853790283, -0.029198527336120605, -0.028589606285095215, -0.02039027214050293, 0.00023305416107177734, 0.02946031093597412, 0.07000374794006348, 0.10936415195465088, 0.11771225929260254, 0.09067606925964355, 0.07157456874847412, 0.08761930465698242, 0.096099853515625, 0.06136214733123779, 0.01703023910522461, 0.010963082313537598, 0.04609501361846924, 0.0911339521408081, 0.12428069114685059, 0.13417983055114746, 0.11591219902038574, 0.0977945327758789, 0.10513758659362793, 0.1107625961303711, 0.09388995170593262, 0.07846200466156006, 0.06401729583740234, 0.029898762702941895, 0.004997134208679199, 0.013776302337646484, 0.020159244537353516, 0.021957039833068848, 0.06718671321868896, 0.12535429000854492, 0.13554716110229492, 0.13538765907287598, 0.15213918685913086, 0.13934075832366943, 0.10779285430908203, 0.1019829511642456, 0.09841740131378174, 0.07521116733551025, 0.06976711750030518, 0.10565197467803955, 0.1457512378692627, 0.15254628658294678, 0.14875996112823486, 0.16248536109924316, 0.16472065448760986, 0.14304983615875244, 0.145097017288208, 0.17108142375946045, 0.15649104118347168, 0.1066904067993164, 0.10265815258026123, 0.15045702457427979, 0.16820776462554932, 0.13838410377502441, 0.12171757221221924, 0.12875676155090332, 0.1176307201385498, 0.08721673488616943, 0.07331037521362305, 0.07018780708312988, 0.04355001449584961, 0.01278221607208252, 0.018721580505371094, 0.04105055332183838, 0.039315223693847656, 0.02689528465270996, 0.030165791511535645, 0.036980628967285156, 0.037801265716552734, 0.03967130184173584, 0.03875696659088135, 0.03334546089172363, 0.025502324104309082, 0.012368917465209961, 0.007869720458984375, 0.025928497314453125, 0.04088783264160156, 0.030080199241638184, 0.01993858814239502, 0.033383727073669434, 0.03838944435119629, 0.0026932954788208008, -0.02671802043914795, -0.0038722753524780273, 0.007236838340759277, -0.03801846504211426, -0.06738543510437012, -0.04260730743408203, -0.013179421424865723, -0.0030993223190307617, 0.0028181076049804688, -0.0020074844360351562, -0.037847280502319336, -0.08669781684875488, -0.10269773006439209, -0.08195006847381592, -0.06769907474517822, -0.08812320232391357, -0.11547243595123291, -0.09213685989379883, -0.04346668720245361, -0.07539713382720947, -0.15947413444519043, -0.1560577154159546, -0.09122884273529053, -0.07877826690673828, -0.08785176277160645\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_32bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_32bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_32bit_44100.h}
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_32bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_44100::numSamplesPerChannel} = 384873\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_44100::bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_32bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_32bit_44100::testBuffer} = \{\{-0.11745091527700424, -0.1519666165113449, -0.10189135372638702, -0.08010855317115784, -0.08006346225738525, -0.10594028234481812, -0.1045377254486084, -0.12010768800973892, -0.17069905996322632, -0.1643330603837967, -0.17723800241947174, -0.12911230325698853, -0.07929547876119614, -0.089617058634758, -0.1707475483417511, -0.23355633020401, -0.25208917260169983, -0.24941004812717438, -0.19202817976474762, -0.15740983188152313, -0.07586338371038437, -0.05384133756160736, -0.12085731327533722, -0.17894165217876434, -0.24375104904174805, -0.23023466765880585, -0.2126595675945282, -0.18714800477027893, -0.1683509200811386, -0.15499532222747803, -0.14854571223258972, -0.10749486088752747, -0.06997065991163254, -0.05418848246335983, -0.08211927115917206, -0.13974328339099884, -0.15651385486125946, -0.15499214828014374, -0.10364945232868195, -0.08582746982574463, -0.056141868233680725, -0.010228204540908337, -0.05224359780550003, -0.10708943009376526, -0.11960842460393906, -0.1222459152340889, -0.1288643181324005, -0.07630115747451782, -0.006927777547389269, 0.01795179396867752, -0.01826094277203083, -0.06945661455392838, -0.14971168339252472, -0.18301473557949066, -0.17486467957496643, -0.15588313341140747, -0.1256936639547348, -0.11358562856912613, -0.09434855729341507, -0.07327721267938614, -0.06722074747085571, -0.04297478497028351, -0.04013794660568237, -0.02908974699676037, 0.055253252387046814, 0.058947134763002396, 0.03990260884165764, -0.023352447897195816, -0.05745059251785278, -0.0698191374540329, -0.05459041893482208, -0.0408746600151062, -0.03184802457690239, -0.006078124046325684, -0.03471580520272255, -0.021939394995570183, 0.005969506688416004, 0.01585994102060795, 0.015617938712239265, 0.0036787076387554407, -0.02015535533428192, -0.03665279969573021, -0.008294102735817432, 0.0007386141223832965, -0.0059650312177836895, 0.015064614824950695, 0.05684284120798111, 0.048504941165447235, 0.0879620835185051, 0.01712639071047306, 0.02702873758971691, 0.05021873489022255, 0.0010235735680907965, 0.042404476553201675, -0.004635974764823914, -0.0136331832036376, 0.04071985185146332, 0.09806989878416061, 0.16411001980304718, 0.1329004168510437, 0.11618109047412872, 0.10378669202327728, 0.04145503044128418, 0.027141818776726723, 0.04278336465358734, 0.0981810912489891, 0.11417917162179947, 0.15195536613464355, 0.20625101029872894, 0.18852993845939636, 0.15145990252494812, 0.1642044633626938, 0.1353333294391632, 0.12715831398963928, 0.1428956389427185, 0.1930069923400879, 0.2147543728351593, 0.24385258555412292, 0.26336562633514404, 0.24763081967830658, 0.23317265510559082, 0.17020933330059052, 0.12415832281112671, 0.12139394134283066, 0.12269188463687897, 0.16398823261260986, 0.18169990181922913, 0.22289110720157623, 0.24980822205543518, 0.25091034173965454, 0.30712440609931946, 0.2836054265499115, 0.23030813038349152, 0.1811419427394867, 0.19849999248981476, 0.23386316001415253, 0.20443186163902283, 0.19374917447566986, 0.18743258714675903, 0.24394799768924713, 0.3041987717151642, 0.3082346022129059, 0.3078215718269348, 0.3346748352050781, 0.33939746022224426, 0.33178940415382385, 0.3123377561569214, 0.2806440591812134, 0.2399751842021942, 0.24678122997283936, 0.2629908621311188, 0.2584831118583679, 0.2899355888366699, 0.2910745143890381, 0.29694750905036926, 0.3317975699901581, 0.288880854845047, 0.30398717522621155, 0.29040858149528503, 0.30649128556251526, 0.36260879039764404, 0.3220243453979492, 0.34334564208984375, 0.3413156270980835, 0.3172188103199005, 0.2689215838909149, 0.30487531423568726, 0.33099856972694397, 0.3144553601741791, 0.3462160527706146, 0.36258894205093384, 0.3252076804637909, 0.3194389343261719, 0.3036641776561737, 0.25708121061325073, 0.29499632120132446, 0.342328816652298, 0.3466757833957672, 0.361691415309906, 0.37056344747543335, 0.38426199555397034, 0.3349151909351349, 0.3347189426422119, 0.32905617356300354, 0.33780014514923096, 0.36501580476760864, 0.3765137493610382, 0.38854432106018066, 0.3586300015449524, 0.3168526589870453, 0.3674073815345764, 0.39473751187324524, 0.38887321949005127, 0.3557429611682892, 0.3551374673843384, 0.3711024522781372, 0.3542231619358063, 0.36219924688339233, 0.3432430624961853, 0.3397129476070404, 0.30429407954216003, 0.32580316066741943, 0.31904128193855286, 0.35295140743255615, 0.37153366208076477, 0.3470722436904907, 0.3311869204044342, 0.3327701985836029, 0.3308747410774231, 0.3223779797554016, 0.30104562640190125, 0.30388343334198, 0.2958034873008728, 0.28519725799560547, 0.30291759967803955, 0.319441556930542, 0.34594473242759705, 0.3312903046607971, 0.34635746479034424, 0.33610767126083374, 0.32953688502311707, 0.2787168025970459, 0.3333706855773926, 0.4060133397579193, 0.32209160923957825, 0.3166391849517822, 0.2763248383998871, 0.3064301609992981, 0.36547496914863586, 0.3600216507911682, 0.3404928743839264, 0.29173538088798523, 0.2710213363170624, 0.2909623384475708, 0.2891555726528168, 0.3117993474006653, 0.32151544094085693, 0.32411423325538635, 0.34733694791793823, 0.3345957100391388, 0.28963983058929443, 0.24601003527641296, 0.2513003349304199, 0.27049198746681213, 0.2422894537448883, 0.25775226950645447, 0.2501382827758789, 0.19214101135730743, 0.207952618598938, 0.2106490433216095, 0.19737987220287323, 0.20567284524440765, 0.24501562118530273, 0.23003444075584412, 0.20529034733772278, 0.21945036947727203, 0.23218272626399994, 0.21327334642410278, 0.24402275681495667, 0.23493564128875732, 0.19046658277511597, 0.21575114130973816, 0.22768324613571167, 0.2092726230621338, 0.19002340734004974, 0.13522867858409882, 0.12268216162919998, 0.17647099494934082, 0.2109791487455368, 0.1558707356452942, 0.12947095930576324, 0.1463015079498291, 0.1453084647655487, 0.1382286548614502, 0.20309056341648102, 0.20064382255077362, 0.1465475857257843, 0.1334095597267151, 0.12587256729602814, 0.1676919311285019, 0.2224082052707672, 0.163563534617424, 0.14245274662971497, 0.16373880207538605, 0.142917200922966, 0.19022820889949799, 0.16985447704792023, 0.1301048845052719, 0.11300548911094666, 0.15129171311855316, 0.13286198675632477, 0.14040029048919678, 0.14664053916931152, 0.13062885403633118, 0.10715299099683762, 0.08115778118371964, 0.085812047123909, 0.07227258384227753, 0.08421732485294342, 0.12207389622926712, 0.10124144703149796, 0.08667103946208954, 0.09451831877231598, 0.09063462913036346, 0.08296550810337067, 0.06617414951324463, 0.018341753631830215, -0.009546236135065556, 0.033847153186798096, 0.07320927083492279, 0.0742604061961174, 0.053371626883745193, 0.018197771161794662, 0.00010955917969113216, 0.00849555991590023, 0.052488598972558975, 0.05392748489975929, 0.020632490515708923, -0.0014059048844501376, -0.03429478779435158, 0.010657618753612041, 0.018800750374794006, -0.005862411577254534, -0.001595183159224689, -0.014736674726009369, -0.005861277226358652, -0.014622094109654427, -0.0374210923910141, -0.004873877391219139, -0.033410605043172836, -0.04989872872829437, -0.08438336104154587, -0.06128227710723877, -0.07007080316543579, -0.10347139835357666, -0.04780936613678932, -0.029831213876605034, -0.02914373017847538, -0.06620641052722931, -0.07206017524003983, -0.08283764868974686, -0.1389988660812378, -0.12305622547864914, -0.08447632938623428, -0.11901732534170151, -0.1343684196472168, -0.10295043140649796, -0.11089020222425461, -0.15527492761611938, -0.20642851293087006, -0.18571743369102478, -0.19110149145126343, -0.20455224812030792, -0.21635526418685913, -0.23807404935359955, -0.19793345034122467, -0.18239383399486542, -0.22023989260196686, -0.24310143291950226, -0.24149978160858154, -0.28612351417541504, -0.2682749927043915, -0.24638114869594574, -0.2312518209218979, -0.24376265704631805, -0.25982844829559326, -0.2808520495891571, -0.2846362292766571, -0.2595588266849518, -0.25831013917922974, -0.25091809034347534, -0.2671825885772705, -0.25788068771362305, -0.24501173198223114, -0.2567179203033447, -0.2822698652744293, -0.26564422249794006, -0.2201167792081833, -0.22571492195129395, -0.23650482296943665, -0.22148175537586212, -0.24315188825130463, -0.2578386962413788, -0.26928189396858215, -0.23204943537712097, -0.18412165343761444, -0.19862449169158936, -0.1959797739982605, -0.1961382031440735, -0.22044727206230164, -0.23305222392082214, -0.22257383167743683, -0.22933588922023773, -0.2550237476825714, -0.22568301856517792, -0.21072830259799957, -0.2088153064250946, -0.23270362615585327, -0.2598850727081299, -0.24071119725704193, -0.2606392502784729, -0.23548568785190582, -0.23500142991542816, -0.25143805146217346, -0.26692140102386475, -0.2947622239589691, -0.29505306482315063, -0.2959592938423157, -0.30114033818244934, -0.27142882347106934, -0.283139169216156, -0.2941094934940338, -0.31543728709220886, -0.30685660243034363, -0.2838909327983856, -0.26452749967575073, -0.3003668785095215, -0.3072950541973114, -0.2938304543495178, -0.32176485657691956, -0.3040652871131897, -0.3078610301017761, -0.33437323570251465, -0.3373573422431946, -0.3199157416820526, -0.3041103184223175, -0.325987309217453, -0.3423168361186981, -0.37401697039604187, -0.39339521527290344, -0.32598036527633667, -0.333600789308548, -0.33140814304351807, -0.3529396653175354, -0.36917582154273987, -0.3272600471973419, -0.33309489488601685, -0.32379376888275146, -0.3346962630748749, -0.3481053113937378, -0.3569624125957489, -0.3655528128147125, -0.35622313618659973, -0.36791616678237915, -0.3116530478000641, -0.2877035140991211, -0.3295574486255646, -0.3268430233001709, -0.30244317650794983, -0.31500038504600525, -0.30234119296073914, -0.3095283508300781, -0.3105032742023468, -0.33231520652770996, -0.34866470098495483, -0.3287450075149536, -0.29917824268341064, -0.30157580971717834, -0.31343698501586914, -0.2935395836830139, -0.2682177424430847, -0.24872705340385437, -0.28714632987976074, -0.3205910325050354, -0.3126949667930603, -0.28004008531570435, -0.2668001651763916, -0.2398473024368286, -0.23373688757419586, -0.25119146704673767, -0.22790375351905823, -0.21315571665763855, -0.19156785309314728, -0.20250552892684937, -0.20938974618911743, -0.2017270028591156, -0.22154997289180756, -0.23030896484851837, -0.23299358785152435, -0.2009795606136322, -0.2083967626094818, -0.24404963850975037, -0.22504310309886932, -0.22425732016563416, -0.2172090858221054, -0.151815265417099, -0.14263620972633362, -0.1462625116109848, -0.19352608919143677, -0.19288837909698486, -0.18963740766048431, -0.2025534212589264, -0.20362155139446259, -0.2199726104736328, -0.1809442937374115, -0.16966786980628967, -0.18323242664337158, -0.16361762583255768, -0.1399923712015152, -0.17768995463848114\}, \{-0.11072379350662231, -0.13729815185070038, -0.1267399936914444, -0.11636942625045776, -0.09551115334033966, -0.09793742746114731, -0.10290190577507019, -0.12347399443387985, -0.15839241445064545, -0.16287899017333984, -0.1602189838886261, -0.14383186399936676, -0.1207243949174881, -0.11808833479881287, -0.16280776262283325, -0.215272456407547, -0.24947932362556458, -0.24947424232959747, -0.19842781126499176, -0.13826966285705566, -0.07515928894281387, -0.07494708895683289, -0.1385485678911209, -0.20067572593688965, -0.23558133840560913, -0.21376074850559235, -0.18519100546836853, -0.16925129294395447, -0.16318413615226746, -0.1672046184539795, -0.15750129520893097, -0.11372211575508118, -0.0612185113132, -0.0403585284948349, -0.06754045188426971, -0.11893715709447861, -0.1480223387479782, -0.15305379033088684, -0.12282578647136688, -0.08459563553333282, -0.05341276153922081, -0.03230641782283783, -0.053255584090948105, -0.08619812875986099, -0.11729932576417923, -0.12576867640018463, -0.13225769996643066, -0.09891803562641144, -0.043875470757484436, -0.00416877306997776, -0.0019667265005409718, -0.04369892552495003, -0.11262684315443039, -0.16726623475551605, -0.2105841040611267, -0.19697728753089905, -0.13843174278736115, -0.08216095715761185, -0.06380161643028259, -0.07022470235824585, -0.06948968768119812, -0.05413774400949478, -0.012841553427278996, 0.014611201360821724, 0.053954098373651505, 0.043219760060310364, 0.038239993155002594, -0.004565409850329161, -0.05635152384638786, -0.055958617478609085, -0.05480978265404701, -0.018473414704203606, -0.016873799264431, -0.00975613109767437, -0.02406373992562294, 0.0003135528531856835, 0.035754505544900894, 0.04809505492448807, 0.034217480570077896, 0.006153158377856016, -0.03792446851730347, -0.03530360385775566, -0.027267755940556526, 0.008829369209706783, 0.02398429811000824, 0.0554293617606163, 0.07824815064668655, 0.05960438400506973, 0.06786000728607178, 0.026156773790717125, 0.026902921497821808, 0.014889917336404324, 0.03298762068152428, 0.008410227485001087, 0.0183186586946249, 0.04366762936115265, 0.07179853320121765, 0.09205688536167145, 0.12377265840768814, 0.11665060371160507, 0.11447082459926605, 0.08514569699764252, 0.08825648576021194, 0.07909093052148819, 0.056503426283597946, 0.07774364203214645, 0.08261113613843918, 0.12013927102088928, 0.17443840205669403, 0.19250792264938354, 0.18261604011058807, 0.17323312163352966, 0.1576785445213318, 0.12889118492603302, 0.13337460160255432, 0.15900593996047974, 0.1941351741552353, 0.2514135241508484, 0.26935556530952454, 0.2472713142633438, 0.2194904237985611, 0.17580324411392212, 0.1466473937034607, 0.13050201535224915, 0.13021984696388245, 0.1666308492422104, 0.17867515981197357, 0.23360876739025116, 0.25217410922050476, 0.2724156677722931, 0.273562490940094, 0.2607496976852417, 0.23856595158576965, 0.20644375681877136, 0.20534498989582062, 0.21807847917079926, 0.21494939923286438, 0.2107226550579071, 0.21270382404327393, 0.231735959649086, 0.27000048756599426, 0.2951087951660156, 0.31689453125, 0.3487880825996399, 0.3596723973751068, 0.3388538360595703, 0.32353246212005615, 0.2897266447544098, 0.263121098279953, 0.2563686668872833, 0.26680654287338257, 0.24979214370250702, 0.28256097435951233, 0.2964693605899811, 0.30643707513809204, 0.3204716742038727, 0.29390081763267517, 0.3170807957649231, 0.3043062090873718, 0.32429325580596924, 0.3379199802875519, 0.35226887464523315, 0.34502869844436646, 0.33444198966026306, 0.32780227065086365, 0.3061904311180115, 0.3122765123844147, 0.31873929500579834, 0.33739057183265686, 0.365013062953949, 0.361936092376709, 0.33953383564949036, 0.33121350407600403, 0.31553494930267334, 0.3085240125656128, 0.3213137984275818, 0.33502569794654846, 0.35156166553497314, 0.3503088057041168, 0.3692806363105774, 0.3586415648460388, 0.3409934341907501, 0.33835721015930176, 0.3412306010723114, 0.3529731035232544, 0.35466790199279785, 0.3727894425392151, 0.3726060688495636, 0.35819894075393677, 0.3551692068576813, 0.36861884593963623, 0.35608217120170593, 0.3710094094276428, 0.3679933547973633, 0.36577752232551575, 0.35155773162841797, 0.34575143456459045, 0.34859371185302734, 0.3317561745643616, 0.32771608233451843, 0.34196609258651733, 0.3541117310523987, 0.34161239862442017, 0.33971256017684937, 0.35003072023391724, 0.3680301010608673, 0.35963138937950134, 0.33667826652526855, 0.3222064673900604, 0.30316320061683655, 0.29817554354667664, 0.3098444640636444, 0.3174203932285309, 0.3026682436466217, 0.3011409342288971, 0.31043484807014465, 0.3313298523426056, 0.34353816509246826, 0.34569051861763, 0.33778586983680725, 0.32333990931510925, 0.2997446358203888, 0.31296688318252563, 0.33817583322525024, 0.33889859914779663, 0.3453516960144043, 0.33867764472961426, 0.31780096888542175, 0.30332911014556885, 0.2934674322605133, 0.2921311557292938, 0.2845841348171234, 0.27494823932647705, 0.2846226692199707, 0.29453614354133606, 0.29512399435043335, 0.29511547088623047, 0.3135390281677246, 0.31833112239837646, 0.30576127767562866, 0.29072344303131104, 0.26909199357032776, 0.261836975812912, 0.25876471400260925, 0.24017903208732605, 0.24509769678115845, 0.2307053804397583, 0.20867183804512024, 0.20991528034210205, 0.22712384164333344, 0.2409021556377411, 0.25723305344581604, 0.23535360395908356, 0.223523810505867, 0.2218291461467743, 0.2328866571187973, 0.2214651256799698, 0.22584955394268036, 0.24143490195274353, 0.25559818744659424, 0.25206291675567627, 0.24042777717113495, 0.22198237478733063, 0.20694322884082794, 0.21718817949295044, 0.1946299970149994, 0.19665059447288513, 0.17926757037639618, 0.18738937377929688, 0.19490785896778107, 0.18808600306510925, 0.18752317130565643, 0.15501807630062103, 0.14939014613628387, 0.18299829959869385, 0.17917077243328094, 0.1796722710132599, 0.16218893229961395, 0.15062133967876434, 0.11937238276004791, 0.1410170942544937, 0.15585380792617798, 0.16717559099197388, 0.17416061460971832, 0.13180416822433472, 0.11632887274026871, 0.11670582741498947, 0.11338747292757034, 0.10235738009214401, 0.09620164334774017, 0.10113222151994705, 0.12399545311927795, 0.14085987210273743, 0.13931970298290253, 0.11777323484420776, 0.07397374510765076, 0.05026386305689812, 0.056618187576532364, 0.08211204409599304, 0.10591191798448563, 0.07536312937736511, 0.04350098967552185, 0.04022908955812454, 0.07121910154819489, 0.08081405609846115, 0.06358505040407181, 0.024451635777950287, 0.015775226056575775, 0.015594745986163616, 0.05044833570718765, 0.06750033795833588, 0.07349153608083725, 0.029585089534521103, -0.0030780357774347067, -0.0235537588596344, -0.008272203616797924, 0.01717485301196575, 0.04319754242897034, 0.056251659989356995, 0.025213439017534256, -0.011780718341469765, -0.04311766102910042, -0.027216719463467598, -0.014362565241754055, -0.010899648070335388, -0.0009600796620361507, -0.0067351097241044044, -0.0524953231215477, -0.06791646033525467, -0.0797148048877716, -0.06129483878612518, -0.06053248792886734, -0.06694734841585159, -0.09003780782222748, -0.11513417214155197, -0.10149917751550674, -0.09573996812105179, -0.07454951107501984, -0.08203934878110886, -0.10688453167676926, -0.10701542347669601, -0.12552477419376373, -0.09847646951675415, -0.10391896218061447, -0.12195268273353577, -0.1286635547876358, -0.12292200326919556, -0.1313697248697281, -0.14843015372753143, -0.16189338266849518, -0.17068804800510406, -0.1654747873544693, -0.1635136902332306, -0.1438785195350647, -0.148142009973526, -0.16563619673252106, -0.17685428261756897, -0.1852768510580063, -0.18347300589084625, -0.18301455676555634, -0.20242758095264435, -0.19196827709674835, -0.19671548902988434, -0.17883826792240143, -0.1743423193693161, -0.1726166158914566, -0.1791154444217682, -0.21812692284584045, -0.2293783575296402, -0.21471142768859863, -0.2024274617433548, -0.20931504666805267, -0.2337028682231903, -0.24451275169849396, -0.25104767084121704, -0.26192763447761536, -0.2566256821155548, -0.2512812614440918, -0.26296210289001465, -0.27002736926078796, -0.26836323738098145, -0.2843373417854309, -0.26696106791496277, -0.2727724015712738, -0.2726498544216156, -0.27117905020713806, -0.26952946186065674, -0.2632896304130554, -0.26277223229408264, -0.27365487813949585, -0.2826443612575531, -0.26812687516212463, -0.27332422137260437, -0.3138662874698639, -0.30810001492500305, -0.3026326298713684, -0.28741729259490967, -0.28931570053100586, -0.3055301010608673, -0.28361478447914124, -0.2974072992801666, -0.28478366136550903, -0.2762286067008972, -0.2940105199813843, -0.29795020818710327, -0.31031253933906555, -0.28337815403938293, -0.2902356684207916, -0.29173463582992554, -0.28965187072753906, -0.31722304224967957, -0.31651991605758667, -0.3318515717983246, -0.33213815093040466, -0.3137553036212921, -0.3046993911266327, -0.3109334707260132, -0.30179792642593384, -0.3086741864681244, -0.30140355229377747, -0.3068599998950958, -0.29909905791282654, -0.3210791349411011, -0.3231632113456726, -0.3002535104751587, -0.29957371950149536, -0.3138962686061859, -0.31369122862815857, -0.3185322880744934, -0.3329922556877136, -0.3109058141708374, -0.29935187101364136, -0.2965705096721649, -0.31605955958366394, -0.3292261064052582, -0.32378101348876953, -0.3088163733482361, -0.29780179262161255, -0.29015761613845825, -0.2892093360424042, -0.30680352449417114, -0.312654048204422, -0.3237158954143524, -0.3279646337032318, -0.2933115065097809, -0.29887476563453674, -0.3049148619174957, -0.3102954626083374, -0.3187956213951111, -0.29547083377838135, -0.29665806889533997, -0.2912338376045227, -0.30190104246139526, -0.304116815328598, -0.29537200927734375, -0.30574095249176025, -0.30563727021217346, -0.30588823556900024, -0.3146663010120392, -0.31381064653396606, -0.3189947009086609, -0.30824512243270874, -0.2819882333278656, -0.2915264964103699, -0.27608156204223633, -0.28454214334487915, -0.2956501245498657, -0.2801623046398163, -0.2713943123817444, -0.2628224194049835, -0.2676028609275818, -0.2554929852485657, -0.2415909469127655, -0.24831140041351318, -0.261271208524704, -0.2682480216026306, -0.2634791135787964, -0.25868937373161316, -0.2576367259025574, -0.2484843134880066, -0.25240394473075867, -0.25915804505348206, -0.2511327266693115, -0.25457629561424255, -0.2519420087337494, -0.24096252024173737, -0.23856672644615173, -0.2313115894794464, -0.23023086786270142, -0.2257687896490097, -0.23126794397830963, -0.24063323438167572, -0.2465483546257019, -0.24357911944389343, -0.2139151394367218, -0.20592661201953888, -0.204367533326149, -0.201622873544693, -0.20362550020217896, -0.18360061943531036\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_32bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_32bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_32bit_44100.h}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_32bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384873;\par
6 {\cf18 int} bitDepth = 32;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.11745091527700424, -0.1519666165113449, -0.10189135372638702, -0.08010855317115784, -0.08006346225738525, -0.10594028234481812, -0.1045377254486084, -0.12010768800973892, -0.17069905996322632, -0.1643330603837967, -0.17723800241947174, -0.12911230325698853, -0.07929547876119614, -0.089617058634758, -0.1707475483417511, -0.23355633020401, -0.25208917260169983, -0.24941004812717438, -0.19202817976474762, -0.15740983188152313, -0.07586338371038437, -0.05384133756160736, -0.12085731327533722, -0.17894165217876434, -0.24375104904174805, -0.23023466765880585, -0.2126595675945282, -0.18714800477027893, -0.1683509200811386, -0.15499532222747803, -0.14854571223258972, -0.10749486088752747, -0.06997065991163254, -0.05418848246335983, -0.08211927115917206, -0.13974328339099884, -0.15651385486125946, -0.15499214828014374, -0.10364945232868195, -0.08582746982574463, -0.056141868233680725, -0.010228204540908337, -0.05224359780550003, -0.10708943009376526, -0.11960842460393906, -0.1222459152340889, -0.1288643181324005, -0.07630115747451782, -0.006927777547389269, 0.01795179396867752, -0.01826094277203083, -0.06945661455392838, -0.14971168339252472, -0.18301473557949066, -0.17486467957496643, -0.15588313341140747, -0.1256936639547348, -0.11358562856912613, -0.09434855729341507, -0.07327721267938614, -0.06722074747085571, -0.04297478497028351, -0.04013794660568237, -0.02908974699676037, 0.055253252387046814, 0.058947134763002396, 0.03990260884165764, -0.023352447897195816, -0.05745059251785278, -0.0698191374540329, -0.05459041893482208, -0.0408746600151062, -0.03184802457690239, -0.006078124046325684, -0.03471580520272255, -0.021939394995570183, 0.005969506688416004, 0.01585994102060795, 0.015617938712239265, 0.0036787076387554407, -0.02015535533428192, -0.03665279969573021, -0.008294102735817432, 0.0007386141223832965, -0.0059650312177836895, 0.015064614824950695, 0.05684284120798111, 0.048504941165447235, 0.0879620835185051, 0.01712639071047306, 0.02702873758971691, 0.05021873489022255, 0.0010235735680907965, 0.042404476553201675, -0.004635974764823914, -0.0136331832036376, 0.04071985185146332, 0.09806989878416061, 0.16411001980304718, 0.1329004168510437, 0.11618109047412872, 0.10378669202327728, 0.04145503044128418, 0.027141818776726723, 0.04278336465358734, 0.0981810912489891, 0.11417917162179947, 0.15195536613464355, 0.20625101029872894, 0.18852993845939636, 0.15145990252494812, 0.1642044633626938, 0.1353333294391632, 0.12715831398963928, 0.1428956389427185, 0.1930069923400879, 0.2147543728351593, 0.24385258555412292, 0.26336562633514404, 0.24763081967830658, 0.23317265510559082, 0.17020933330059052, 0.12415832281112671, 0.12139394134283066, 0.12269188463687897, 0.16398823261260986, 0.18169990181922913, 0.22289110720157623, 0.24980822205543518, 0.25091034173965454, 0.30712440609931946, 0.2836054265499115, 0.23030813038349152, 0.1811419427394867, 0.19849999248981476, 0.23386316001415253, 0.20443186163902283, 0.19374917447566986, 0.18743258714675903, 0.24394799768924713, 0.3041987717151642, 0.3082346022129059, 0.3078215718269348, 0.3346748352050781, 0.33939746022224426, 0.33178940415382385, 0.3123377561569214, 0.2806440591812134, 0.2399751842021942, 0.24678122997283936, 0.2629908621311188, 0.2584831118583679, 0.2899355888366699, 0.2910745143890381, 0.29694750905036926, 0.3317975699901581, 0.288880854845047, 0.30398717522621155, 0.29040858149528503, 0.30649128556251526, 0.36260879039764404, 0.3220243453979492, 0.34334564208984375, 0.3413156270980835, 0.3172188103199005, 0.2689215838909149, 0.30487531423568726, 0.33099856972694397, 0.3144553601741791, 0.3462160527706146, 0.36258894205093384, 0.3252076804637909, 0.3194389343261719, 0.3036641776561737, 0.25708121061325073, 0.29499632120132446, 0.342328816652298, 0.3466757833957672, 0.361691415309906, 0.37056344747543335, 0.38426199555397034, 0.3349151909351349, 0.3347189426422119, 0.32905617356300354, 0.33780014514923096, 0.36501580476760864, 0.3765137493610382, 0.38854432106018066, 0.3586300015449524, 0.3168526589870453, 0.3674073815345764, 0.39473751187324524, 0.38887321949005127, 0.3557429611682892, 0.3551374673843384, 0.3711024522781372, 0.3542231619358063, 0.36219924688339233, 0.3432430624961853, 0.3397129476070404, 0.30429407954216003, 0.32580316066741943, 0.31904128193855286, 0.35295140743255615, 0.37153366208076477, 0.3470722436904907, 0.3311869204044342, 0.3327701985836029, 0.3308747410774231, 0.3223779797554016, 0.30104562640190125, 0.30388343334198, 0.2958034873008728, 0.28519725799560547, 0.30291759967803955, 0.319441556930542, 0.34594473242759705, 0.3312903046607971, 0.34635746479034424, 0.33610767126083374, 0.32953688502311707, 0.2787168025970459, 0.3333706855773926, 0.4060133397579193, 0.32209160923957825, 0.3166391849517822, 0.2763248383998871, 0.3064301609992981, 0.36547496914863586, 0.3600216507911682, 0.3404928743839264, 0.29173538088798523, 0.2710213363170624, 0.2909623384475708, 0.2891555726528168, 0.3117993474006653, 0.32151544094085693, 0.32411423325538635, 0.34733694791793823, 0.3345957100391388, 0.28963983058929443, 0.24601003527641296, 0.2513003349304199, 0.27049198746681213, 0.2422894537448883, 0.25775226950645447, 0.2501382827758789, 0.19214101135730743, 0.207952618598938, 0.2106490433216095, 0.19737987220287323, 0.20567284524440765, 0.24501562118530273, 0.23003444075584412, 0.20529034733772278, 0.21945036947727203, 0.23218272626399994, 0.21327334642410278, 0.24402275681495667, 0.23493564128875732, 0.19046658277511597, 0.21575114130973816, 0.22768324613571167, 0.2092726230621338, 0.19002340734004974, 0.13522867858409882, 0.12268216162919998, 0.17647099494934082, 0.2109791487455368, 0.1558707356452942, 0.12947095930576324, 0.1463015079498291, 0.1453084647655487, 0.1382286548614502, 0.20309056341648102, 0.20064382255077362, 0.1465475857257843, 0.1334095597267151, 0.12587256729602814, 0.1676919311285019, 0.2224082052707672, 0.163563534617424, 0.14245274662971497, 0.16373880207538605, 0.142917200922966, 0.19022820889949799, 0.16985447704792023, 0.1301048845052719, 0.11300548911094666, 0.15129171311855316, 0.13286198675632477, 0.14040029048919678, 0.14664053916931152, 0.13062885403633118, 0.10715299099683762, 0.08115778118371964, 0.085812047123909, 0.07227258384227753, 0.08421732485294342, 0.12207389622926712, 0.10124144703149796, 0.08667103946208954, 0.09451831877231598, 0.09063462913036346, 0.08296550810337067, 0.06617414951324463, 0.018341753631830215, -0.009546236135065556, 0.033847153186798096, 0.07320927083492279, 0.0742604061961174, 0.053371626883745193, 0.018197771161794662, 0.00010955917969113216, 0.00849555991590023, 0.052488598972558975, 0.05392748489975929, 0.020632490515708923, -0.0014059048844501376, -0.03429478779435158, 0.010657618753612041, 0.018800750374794006, -0.005862411577254534, -0.001595183159224689, -0.014736674726009369, -0.005861277226358652, -0.014622094109654427, -0.0374210923910141, -0.004873877391219139, -0.033410605043172836, -0.04989872872829437, -0.08438336104154587, -0.06128227710723877, -0.07007080316543579, -0.10347139835357666, -0.04780936613678932, -0.029831213876605034, -0.02914373017847538, -0.06620641052722931, -0.07206017524003983, -0.08283764868974686, -0.1389988660812378, -0.12305622547864914, -0.08447632938623428, -0.11901732534170151, -0.1343684196472168, -0.10295043140649796, -0.11089020222425461, -0.15527492761611938, -0.20642851293087006, -0.18571743369102478, -0.19110149145126343, -0.20455224812030792, -0.21635526418685913, -0.23807404935359955, -0.19793345034122467, -0.18239383399486542, -0.22023989260196686, -0.24310143291950226, -0.24149978160858154, -0.28612351417541504, -0.2682749927043915, -0.24638114869594574, -0.2312518209218979, -0.24376265704631805, -0.25982844829559326, -0.2808520495891571, -0.2846362292766571, -0.2595588266849518, -0.25831013917922974, -0.25091809034347534, -0.2671825885772705, -0.25788068771362305, -0.24501173198223114, -0.2567179203033447, -0.2822698652744293, -0.26564422249794006, -0.2201167792081833, -0.22571492195129395, -0.23650482296943665, -0.22148175537586212, -0.24315188825130463, -0.2578386962413788, -0.26928189396858215, -0.23204943537712097, -0.18412165343761444, -0.19862449169158936, -0.1959797739982605, -0.1961382031440735, -0.22044727206230164, -0.23305222392082214, -0.22257383167743683, -0.22933588922023773, -0.2550237476825714, -0.22568301856517792, -0.21072830259799957, -0.2088153064250946, -0.23270362615585327, -0.2598850727081299, -0.24071119725704193, -0.2606392502784729, -0.23548568785190582, -0.23500142991542816, -0.25143805146217346, -0.26692140102386475, -0.2947622239589691, -0.29505306482315063, -0.2959592938423157, -0.30114033818244934, -0.27142882347106934, -0.283139169216156, -0.2941094934940338, -0.31543728709220886, -0.30685660243034363, -0.2838909327983856, -0.26452749967575073, -0.3003668785095215, -0.3072950541973114, -0.2938304543495178, -0.32176485657691956, -0.3040652871131897, -0.3078610301017761, -0.33437323570251465, -0.3373573422431946, -0.3199157416820526, -0.3041103184223175, -0.325987309217453, -0.3423168361186981, -0.37401697039604187, -0.39339521527290344, -0.32598036527633667, -0.333600789308548, -0.33140814304351807, -0.3529396653175354, -0.36917582154273987, -0.3272600471973419, -0.33309489488601685, -0.32379376888275146, -0.3346962630748749, -0.3481053113937378, -0.3569624125957489, -0.3655528128147125, -0.35622313618659973, -0.36791616678237915, -0.3116530478000641, -0.2877035140991211, -0.3295574486255646, -0.3268430233001709, -0.30244317650794983, -0.31500038504600525, -0.30234119296073914, -0.3095283508300781, -0.3105032742023468, -0.33231520652770996, -0.34866470098495483, -0.3287450075149536, -0.29917824268341064, -0.30157580971717834, -0.31343698501586914, -0.2935395836830139, -0.2682177424430847, -0.24872705340385437, -0.28714632987976074, -0.3205910325050354, -0.3126949667930603, -0.28004008531570435, -0.2668001651763916, -0.2398473024368286, -0.23373688757419586, -0.25119146704673767, -0.22790375351905823, -0.21315571665763855, -0.19156785309314728, -0.20250552892684937, -0.20938974618911743, -0.2017270028591156, -0.22154997289180756, -0.23030896484851837, -0.23299358785152435, -0.2009795606136322, -0.2083967626094818, -0.24404963850975037, -0.22504310309886932, -0.22425732016563416, -0.2172090858221054, -0.151815265417099, -0.14263620972633362, -0.1462625116109848, -0.19352608919143677, -0.19288837909698486, -0.18963740766048431, -0.2025534212589264, -0.20362155139446259, -0.2199726104736328, -0.1809442937374115, -0.16966786980628967, -0.18323242664337158, -0.16361762583255768, -0.1399923712015152, -0.17768995463848114\}, \{-0.11072379350662231, -0.13729815185070038, -0.1267399936914444, -0.11636942625045776, -0.09551115334033966, -0.09793742746114731, -0.10290190577507019, -0.12347399443387985, -0.15839241445064545, -0.16287899017333984, -0.1602189838886261, -0.14383186399936676, -0.1207243949174881, -0.11808833479881287, -0.16280776262283325, -0.215272456407547, -0.24947932362556458, -0.24947424232959747, -0.19842781126499176, -0.13826966285705566, -0.07515928894281387, -0.07494708895683289, -0.1385485678911209, -0.20067572593688965, -0.23558133840560913, -0.21376074850559235, -0.18519100546836853, -0.16925129294395447, -0.16318413615226746, -0.1672046184539795, -0.15750129520893097, -0.11372211575508118, -0.0612185113132, -0.0403585284948349, -0.06754045188426971, -0.11893715709447861, -0.1480223387479782, -0.15305379033088684, -0.12282578647136688, -0.08459563553333282, -0.05341276153922081, -0.03230641782283783, -0.053255584090948105, -0.08619812875986099, -0.11729932576417923, -0.12576867640018463, -0.13225769996643066, -0.09891803562641144, -0.043875470757484436, -0.00416877306997776, -0.0019667265005409718, -0.04369892552495003, -0.11262684315443039, -0.16726623475551605, -0.2105841040611267, -0.19697728753089905, -0.13843174278736115, -0.08216095715761185, -0.06380161643028259, -0.07022470235824585, -0.06948968768119812, -0.05413774400949478, -0.012841553427278996, 0.014611201360821724, 0.053954098373651505, 0.043219760060310364, 0.038239993155002594, -0.004565409850329161, -0.05635152384638786, -0.055958617478609085, -0.05480978265404701, -0.018473414704203606, -0.016873799264431, -0.00975613109767437, -0.02406373992562294, 0.0003135528531856835, 0.035754505544900894, 0.04809505492448807, 0.034217480570077896, 0.006153158377856016, -0.03792446851730347, -0.03530360385775566, -0.027267755940556526, 0.008829369209706783, 0.02398429811000824, 0.0554293617606163, 0.07824815064668655, 0.05960438400506973, 0.06786000728607178, 0.026156773790717125, 0.026902921497821808, 0.014889917336404324, 0.03298762068152428, 0.008410227485001087, 0.0183186586946249, 0.04366762936115265, 0.07179853320121765, 0.09205688536167145, 0.12377265840768814, 0.11665060371160507, 0.11447082459926605, 0.08514569699764252, 0.08825648576021194, 0.07909093052148819, 0.056503426283597946, 0.07774364203214645, 0.08261113613843918, 0.12013927102088928, 0.17443840205669403, 0.19250792264938354, 0.18261604011058807, 0.17323312163352966, 0.1576785445213318, 0.12889118492603302, 0.13337460160255432, 0.15900593996047974, 0.1941351741552353, 0.2514135241508484, 0.26935556530952454, 0.2472713142633438, 0.2194904237985611, 0.17580324411392212, 0.1466473937034607, 0.13050201535224915, 0.13021984696388245, 0.1666308492422104, 0.17867515981197357, 0.23360876739025116, 0.25217410922050476, 0.2724156677722931, 0.273562490940094, 0.2607496976852417, 0.23856595158576965, 0.20644375681877136, 0.20534498989582062, 0.21807847917079926, 0.21494939923286438, 0.2107226550579071, 0.21270382404327393, 0.231735959649086, 0.27000048756599426, 0.2951087951660156, 0.31689453125, 0.3487880825996399, 0.3596723973751068, 0.3388538360595703, 0.32353246212005615, 0.2897266447544098, 0.263121098279953, 0.2563686668872833, 0.26680654287338257, 0.24979214370250702, 0.28256097435951233, 0.2964693605899811, 0.30643707513809204, 0.3204716742038727, 0.29390081763267517, 0.3170807957649231, 0.3043062090873718, 0.32429325580596924, 0.3379199802875519, 0.35226887464523315, 0.34502869844436646, 0.33444198966026306, 0.32780227065086365, 0.3061904311180115, 0.3122765123844147, 0.31873929500579834, 0.33739057183265686, 0.365013062953949, 0.361936092376709, 0.33953383564949036, 0.33121350407600403, 0.31553494930267334, 0.3085240125656128, 0.3213137984275818, 0.33502569794654846, 0.35156166553497314, 0.3503088057041168, 0.3692806363105774, 0.3586415648460388, 0.3409934341907501, 0.33835721015930176, 0.3412306010723114, 0.3529731035232544, 0.35466790199279785, 0.3727894425392151, 0.3726060688495636, 0.35819894075393677, 0.3551692068576813, 0.36861884593963623, 0.35608217120170593, 0.3710094094276428, 0.3679933547973633, 0.36577752232551575, 0.35155773162841797, 0.34575143456459045, 0.34859371185302734, 0.3317561745643616, 0.32771608233451843, 0.34196609258651733, 0.3541117310523987, 0.34161239862442017, 0.33971256017684937, 0.35003072023391724, 0.3680301010608673, 0.35963138937950134, 0.33667826652526855, 0.3222064673900604, 0.30316320061683655, 0.29817554354667664, 0.3098444640636444, 0.3174203932285309, 0.3026682436466217, 0.3011409342288971, 0.31043484807014465, 0.3313298523426056, 0.34353816509246826, 0.34569051861763, 0.33778586983680725, 0.32333990931510925, 0.2997446358203888, 0.31296688318252563, 0.33817583322525024, 0.33889859914779663, 0.3453516960144043, 0.33867764472961426, 0.31780096888542175, 0.30332911014556885, 0.2934674322605133, 0.2921311557292938, 0.2845841348171234, 0.27494823932647705, 0.2846226692199707, 0.29453614354133606, 0.29512399435043335, 0.29511547088623047, 0.3135390281677246, 0.31833112239837646, 0.30576127767562866, 0.29072344303131104, 0.26909199357032776, 0.261836975812912, 0.25876471400260925, 0.24017903208732605, 0.24509769678115845, 0.2307053804397583, 0.20867183804512024, 0.20991528034210205, 0.22712384164333344, 0.2409021556377411, 0.25723305344581604, 0.23535360395908356, 0.223523810505867, 0.2218291461467743, 0.2328866571187973, 0.2214651256799698, 0.22584955394268036, 0.24143490195274353, 0.25559818744659424, 0.25206291675567627, 0.24042777717113495, 0.22198237478733063, 0.20694322884082794, 0.21718817949295044, 0.1946299970149994, 0.19665059447288513, 0.17926757037639618, 0.18738937377929688, 0.19490785896778107, 0.18808600306510925, 0.18752317130565643, 0.15501807630062103, 0.14939014613628387, 0.18299829959869385, 0.17917077243328094, 0.1796722710132599, 0.16218893229961395, 0.15062133967876434, 0.11937238276004791, 0.1410170942544937, 0.15585380792617798, 0.16717559099197388, 0.17416061460971832, 0.13180416822433472, 0.11632887274026871, 0.11670582741498947, 0.11338747292757034, 0.10235738009214401, 0.09620164334774017, 0.10113222151994705, 0.12399545311927795, 0.14085987210273743, 0.13931970298290253, 0.11777323484420776, 0.07397374510765076, 0.05026386305689812, 0.056618187576532364, 0.08211204409599304, 0.10591191798448563, 0.07536312937736511, 0.04350098967552185, 0.04022908955812454, 0.07121910154819489, 0.08081405609846115, 0.06358505040407181, 0.024451635777950287, 0.015775226056575775, 0.015594745986163616, 0.05044833570718765, 0.06750033795833588, 0.07349153608083725, 0.029585089534521103, -0.0030780357774347067, -0.0235537588596344, -0.008272203616797924, 0.01717485301196575, 0.04319754242897034, 0.056251659989356995, 0.025213439017534256, -0.011780718341469765, -0.04311766102910042, -0.027216719463467598, -0.014362565241754055, -0.010899648070335388, -0.0009600796620361507, -0.0067351097241044044, -0.0524953231215477, -0.06791646033525467, -0.0797148048877716, -0.06129483878612518, -0.06053248792886734, -0.06694734841585159, -0.09003780782222748, -0.11513417214155197, -0.10149917751550674, -0.09573996812105179, -0.07454951107501984, -0.08203934878110886, -0.10688453167676926, -0.10701542347669601, -0.12552477419376373, -0.09847646951675415, -0.10391896218061447, -0.12195268273353577, -0.1286635547876358, -0.12292200326919556, -0.1313697248697281, -0.14843015372753143, -0.16189338266849518, -0.17068804800510406, -0.1654747873544693, -0.1635136902332306, -0.1438785195350647, -0.148142009973526, -0.16563619673252106, -0.17685428261756897, -0.1852768510580063, -0.18347300589084625, -0.18301455676555634, -0.20242758095264435, -0.19196827709674835, -0.19671548902988434, -0.17883826792240143, -0.1743423193693161, -0.1726166158914566, -0.1791154444217682, -0.21812692284584045, -0.2293783575296402, -0.21471142768859863, -0.2024274617433548, -0.20931504666805267, -0.2337028682231903, -0.24451275169849396, -0.25104767084121704, -0.26192763447761536, -0.2566256821155548, -0.2512812614440918, -0.26296210289001465, -0.27002736926078796, -0.26836323738098145, -0.2843373417854309, -0.26696106791496277, -0.2727724015712738, -0.2726498544216156, -0.27117905020713806, -0.26952946186065674, -0.2632896304130554, -0.26277223229408264, -0.27365487813949585, -0.2826443612575531, -0.26812687516212463, -0.27332422137260437, -0.3138662874698639, -0.30810001492500305, -0.3026326298713684, -0.28741729259490967, -0.28931570053100586, -0.3055301010608673, -0.28361478447914124, -0.2974072992801666, -0.28478366136550903, -0.2762286067008972, -0.2940105199813843, -0.29795020818710327, -0.31031253933906555, -0.28337815403938293, -0.2902356684207916, -0.29173463582992554, -0.28965187072753906, -0.31722304224967957, -0.31651991605758667, -0.3318515717983246, -0.33213815093040466, -0.3137553036212921, -0.3046993911266327, -0.3109334707260132, -0.30179792642593384, -0.3086741864681244, -0.30140355229377747, -0.3068599998950958, -0.29909905791282654, -0.3210791349411011, -0.3231632113456726, -0.3002535104751587, -0.29957371950149536, -0.3138962686061859, -0.31369122862815857, -0.3185322880744934, -0.3329922556877136, -0.3109058141708374, -0.29935187101364136, -0.2965705096721649, -0.31605955958366394, -0.3292261064052582, -0.32378101348876953, -0.3088163733482361, -0.29780179262161255, -0.29015761613845825, -0.2892093360424042, -0.30680352449417114, -0.312654048204422, -0.3237158954143524, -0.3279646337032318, -0.2933115065097809, -0.29887476563453674, -0.3049148619174957, -0.3102954626083374, -0.3187956213951111, -0.29547083377838135, -0.29665806889533997, -0.2912338376045227, -0.30190104246139526, -0.304116815328598, -0.29537200927734375, -0.30574095249176025, -0.30563727021217346, -0.30588823556900024, -0.3146663010120392, -0.31381064653396606, -0.3189947009086609, -0.30824512243270874, -0.2819882333278656, -0.2915264964103699, -0.27608156204223633, -0.28454214334487915, -0.2956501245498657, -0.2801623046398163, -0.2713943123817444, -0.2628224194049835, -0.2676028609275818, -0.2554929852485657, -0.2415909469127655, -0.24831140041351318, -0.261271208524704, -0.2682480216026306, -0.2634791135787964, -0.25868937373161316, -0.2576367259025574, -0.2484843134880066, -0.25240394473075867, -0.25915804505348206, -0.2511327266693115, -0.25457629561424255, -0.2519420087337494, -0.24096252024173737, -0.23856672644615173, -0.2313115894794464, -0.23023086786270142, -0.2257687896490097, -0.23126794397830963, -0.24063323438167572, -0.2465483546257019, -0.24357911944389343, -0.2139151394367218, -0.20592661201953888, -0.204367533326149, -0.201622873544693, -0.20362550020217896, -0.18360061943531036\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_32bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_32bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_32bit_48000.h}
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_32bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_48000::numSamplesPerChannel} = 418909\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_48000::bitDepth} = 32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_32bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_32bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_32bit_48000::testBuffer} = \{\{-0.10833723098039627, -0.13686230778694153, -0.08660777658224106, -0.07025191932916641, -0.07594943791627884, -0.10192184150218964, -0.11632838100194931, -0.09456843882799149, -0.11326359212398529, -0.12219168245792389, -0.10825426131486893, -0.1309429407119751, -0.11157312244176865, -0.09016415476799011, -0.0965714156627655, -0.12620578706264496, -0.14365583658218384, -0.11878309398889542, -0.1251625418663025, -0.12197279185056686, -0.13707268238067627, -0.16403384506702423, -0.12149179726839066, -0.11605630069971085, -0.13082683086395264, -0.12961497902870178, -0.16302011907100677, -0.16787879168987274, -0.1727980673313141, -0.17347824573516846, -0.15056578814983368, -0.13418999314308167, -0.13609308004379272, -0.15870068967342377, -0.15973517298698425, -0.16675157845020294, -0.1538539081811905, -0.13986317813396454, -0.1356811225414276, -0.11068937927484512, -0.11542622745037079, -0.11571431159973145, -0.14208760857582092, -0.18606315553188324, -0.15333223342895508, -0.1170574203133583, -0.12660381197929382, -0.1302478164434433, -0.12123790383338928, -0.1418413519859314, -0.19688516855239868, -0.21770331263542175, -0.20560204982757568, -0.1930108666419983, -0.18868814408779144, -0.1661619395017624, -0.13854163885116577, -0.1325310915708542, -0.11040335148572922, -0.12708288431167603, -0.17054039239883423, -0.21640004217624664, -0.24592463672161102, -0.21843625605106354, -0.1573750376701355, -0.11056780070066452, -0.09740602225065231, -0.12069782614707947, -0.2100597321987152, -0.22250661253929138, -0.1898784339427948, -0.18164417147636414, -0.1523897796869278, -0.15555024147033691, -0.14697620272636414, -0.16035667061805725, -0.18182522058486938, -0.19542503356933594, -0.20623499155044556, -0.1562727838754654, -0.12542715668678284, -0.1119709312915802, -0.07725507766008377, -0.08215560019016266, -0.10654792189598083, -0.1284656673669815, -0.140795037150383, -0.1548275202512741, -0.175393745303154, -0.16068312525749207, -0.15743035078048706, -0.1740831434726715, -0.1850689798593521, -0.14626285433769226, -0.13768750429153442, -0.14167004823684692, -0.13158604502677917, -0.2224844992160797, -0.1972336769104004, -0.14786580204963684, -0.16598083078861237, -0.10970427095890045, -0.14206169545650482, -0.21922466158866882, -0.2276635468006134, -0.2204207330942154, -0.1741165667772293, -0.1283014416694641, -0.1455855518579483, -0.12145467847585678, -0.12210126221179962, -0.1665816605091095, -0.16821958124637604, -0.15102557837963104, -0.09825979173183441, -0.07853254675865173, -0.0757584273815155, -0.04167184606194496, -0.03020879440009594, -0.07665292173624039, -0.0867912694811821, -0.06523621082305908, -0.08391410857439041, -0.08976593613624573, -0.0892600566148758, -0.061698853969573975, -0.05050971359014511, -0.0387004055082798, 0.004493299406021833, 0.00935047771781683, -0.000861787295434624, -0.04469887167215347, -0.12444597482681274, -0.15654629468917847, -0.15043316781520844, -0.1368141770362854, -0.09912170469760895, -0.10017985105514526, -0.09730787575244904, -0.09079402685165405, -0.13539952039718628, -0.11584442853927612, -0.0871509462594986, -0.09939737617969513, -0.09079309552907944, -0.07587186992168427, -0.015941079705953598, 0.011376189067959785, -0.02986397035419941, -0.048056282103061676, -0.05423866957426071, -0.009084882214665413, 0.06034950911998749, 0.07316169142723083, 0.04421554133296013, 0.026190321892499924, 0.02441880851984024, 0.023521097376942635, 0.051470398902893066, 0.07469034194946289, 0.06154932454228401, 0.006343642715364695, -0.03554345667362213, -0.06482252478599548, -0.1056675836443901, -0.07906777411699295, -0.010515891015529633, 0.03463919833302498, 0.10182815045118332, 0.12722797691822052, 0.07471873611211777, 0.06801177561283112, 0.015254026278853416, 0.013864085078239441, 0.09221803396940231, 0.0826478824019432, 0.10610705614089966, 0.12229252606630325, 0.09588494151830673, 0.0392443984746933, 0.007177992258220911, 0.05457144230604172, 0.060299959033727646, 0.052177149802446365, 0.0912666916847229, 0.1138489618897438, 0.0880434438586235, 0.09100965410470963, 0.10831927508115768, 0.08488117158412933, 0.09944018721580505, 0.15527090430259705, 0.1495298147201538, 0.12461885809898376, 0.10924600064754486, 0.13051281869411469, 0.18916931748390198, 0.21212251484394073, 0.26510581374168396, 0.2736929655075073, 0.2305777221918106, 0.20042501389980316, 0.17696787416934967, 0.19826193153858185, 0.22595231235027313, 0.21338365972042084, 0.21687710285186768, 0.2768402099609375, 0.2856462597846985, 0.2748701274394989, 0.24429206550121307, 0.23731593787670135, 0.2615853250026703, 0.2385004609823227, 0.25184887647628784, 0.2590377628803253, 0.2912565767765045, 0.2960257828235626, 0.28129681944847107, 0.2943141758441925, 0.2652760148048401, 0.2759816348552704, 0.2811919152736664, 0.26749080419540405, 0.2687794864177704, 0.286419540643692, 0.30105721950531006, 0.29055407643318176, 0.2720890939235687, 0.26196053624153137, 0.28323325514793396, 0.2852235734462738, 0.3042975664138794, 0.3309670686721802, 0.3482053279876709, 0.3756142854690552, 0.37282833456993103, 0.4028853476047516, 0.41528448462486267, 0.39297235012054443, 0.33393821120262146, 0.266926646232605, 0.34839409589767456, 0.36013832688331604, 0.3027712404727936, 0.33048728108406067, 0.31818675994873047, 0.3690297305583954, 0.4518803060054779, 0.4707958400249481, 0.47590383887290955, 0.4487761855125427, 0.408179372549057, 0.4058232009410858, 0.4089888632297516, 0.39989686012268066, 0.4162187874317169, 0.4089035391807556, 0.420042484998703, 0.4633650481700897, 0.47009241580963135, 0.4320559501647949, 0.37477734684944153, 0.3501797020435333, 0.36864542961120605, 0.37505897879600525, 0.38057786226272583, 0.4358638525009155, 0.4221298396587372, 0.37908437848091125, 0.38369178771972656, 0.3746439814567566, 0.36504921317100525, 0.3768764138221741, 0.41595566272735596, 0.4059741795063019, 0.36521267890930176, 0.36811569333076477, 0.40306854248046875, 0.39932534098625183, 0.37550926208496094, 0.39822137355804443, 0.38861456513404846, 0.375042200088501, 0.4241117537021637, 0.44766679406166077, 0.42229682207107544, 0.4069075286388397, 0.372592031955719, 0.33715173602104187, 0.34381675720214844, 0.38447317481040955, 0.3949357569217682, 0.3589608371257782, 0.36023738980293274, 0.3734191060066223, 0.36055001616477966, 0.3458775281906128, 0.4113192558288574, 0.46490100026130676, 0.43123236298561096, 0.4103556275367737, 0.3891814351081848, 0.3787882626056671, 0.4149034321308136, 0.4408852159976959, 0.384807288646698, 0.3910160958766937, 0.4161364734172821, 0.3903489112854004, 0.4329696297645569, 0.4470439851284027, 0.4352726638317108, 0.4092283844947815, 0.40356627106666565, 0.3920864760875702, 0.35180336236953735, 0.3690439462661743, 0.3695223927497864, 0.37285977602005005, 0.3807477355003357, 0.38910341262817383, 0.4154600203037262, 0.40539708733558655, 0.3828776478767395, 0.3979257345199585, 0.4030965268611908, 0.3764788508415222, 0.37100499868392944, 0.376128613948822, 0.3891622722148895, 0.39964398741722107, 0.397924542427063, 0.3694554269313812, 0.34238332509994507, 0.35136398673057556, 0.3466775715351105, 0.32053542137145996, 0.31009066104888916, 0.3154548108577728, 0.3218615651130676, 0.3354693353176117, 0.35251349210739136, 0.3808412253856659, 0.36031875014305115, 0.3247736394405365, 0.3143714368343353, 0.29025644063949585, 0.31819331645965576, 0.3275229036808014, 0.26957404613494873, 0.24069646000862122, 0.2509600818157196, 0.2721013128757477, 0.3218974173069, 0.3379148542881012, 0.3391279876232147, 0.35477057099342346, 0.3122774064540863, 0.28907379508018494, 0.26127633452415466, 0.27174583077430725, 0.3145226538181305, 0.26994219422340393, 0.2655091881752014, 0.27674081921577454, 0.2580544650554657, 0.24641384184360504, 0.22764991223812103, 0.2633393704891205, 0.28490525484085083, 0.22884516417980194, 0.20068077743053436, 0.2081446349620819, 0.1691996455192566, 0.12604139745235443, 0.16754966974258423, 0.2303970754146576, 0.24956415593624115, 0.21513475477695465, 0.14939925074577332, 0.12210232764482498, 0.08341973274946213, 0.06872755289077759, 0.08759518712759018, 0.08676828444004059, 0.12776444852352142, 0.16027037799358368, 0.13295665383338928, 0.08134753257036209, 0.07757977396249771, 0.0713101476430893, 0.04413797706365585, 0.07162045687437057, 0.08646615594625473, 0.09258094429969788, 0.08519972860813141, 0.06007305532693863, 0.029393984004855156, -0.004730659071356058, 0.012075272388756275, 0.03314382582902908, 0.060689739882946014, 0.0810345783829689, 0.06891240179538727, 0.06869363784790039, 0.06015931814908981, 0.024453748017549515, -0.022727468982338905, -0.013939582742750645, 0.05860927700996399, 0.10408946871757507, 0.09776987135410309, 0.09346065670251846, 0.06871064007282257, 0.0237408634275198, 0.01144726388156414, 0.009992995299398899, 0.051026638597249985, 0.07804933935403824, 0.03807005658745766, 0.027966653928160667, 0.05139179527759552, 0.059175532311201096, 0.05797623097896576, 0.0645240992307663, 0.07072844356298447, 0.05304586887359619, 0.042133402079343796, 0.06204916164278984, 0.04282190278172493, 0.02581813745200634, 0.009863116778433323, -0.010559451766312122, 0.017547298222780228, 0.005519622005522251, -0.005481787491589785, -0.020114561542868614, -0.07000157982110977, -0.08455605059862137, -0.08487066626548767, -0.09105613827705383, -0.09063224494457245, -0.11028661578893661, -0.12421509623527527, -0.08011362701654434, -0.05917187035083771, -0.061164360493421555, -0.08317194133996964, -0.11133325845003128, -0.11652016639709473, -0.1209748163819313, -0.12923869490623474, -0.17997758090496063, -0.17784884572029114, -0.15868601202964783, -0.1706957221031189, -0.14923615753650665, -0.14066515862941742, -0.15489116311073303, -0.16371965408325195, -0.16069664061069489, -0.1534927785396576, -0.15805117785930634, -0.19541852176189423, -0.222704216837883, -0.26610279083251953, -0.2662503719329834, -0.1970423460006714, -0.20212861895561218, -0.20889119803905487, -0.22272926568984985, -0.2685690224170685, -0.2498251050710678, -0.23696422576904297, -0.24578432738780975, -0.24855369329452515, -0.2809341549873352, -0.2945394814014435, -0.30566444993019104, -0.3110761344432831, -0.29613038897514343, -0.3023243844509125, -0.2645263671875, -0.23136837780475616, -0.27086758613586426, -0.30555811524391174, -0.28737515211105347, -0.2821108400821686, -0.28427669405937195, -0.2682332992553711, -0.2788289487361908, -0.2803072929382324, -0.3019910454750061, -0.3253365159034729, -0.3186952471733093, -0.3028562068939209, -0.3001079261302948, -0.3300066590309143, -0.3330908417701721\}, \{-0.09994792193174362, -0.11962439119815826, -0.10353175550699234, -0.10857119411230087, -0.0975407138466835, -0.10169847309589386, -0.10419623553752899, -0.10011977702379227, -0.10739824175834656, -0.11306414008140564, -0.1047334149479866, -0.11391763389110565, -0.1269489824771881, -0.13103140890598297, -0.1283167600631714, -0.12672726809978485, -0.12256429344415665, -0.11197789013385773, -0.1225510835647583, -0.127065047621727, -0.13534337282180786, -0.14296957850456238, -0.12996596097946167, -0.13687638938426971, -0.14970701932907104, -0.1526072919368744, -0.15842965245246887, -0.1534164845943451, -0.14922869205474854, -0.15118055045604706, -0.141886368393898, -0.1385745108127594, -0.15126793086528778, -0.16573961079120636, -0.16551728546619415, -0.1554349809885025, -0.14193055033683777, -0.12650495767593384, -0.11480633914470673, -0.10120896995067596, -0.10902541130781174, -0.13003939390182495, -0.1531127244234085, -0.17721183598041534, -0.16370649635791779, -0.1375986784696579, -0.11770003288984299, -0.11037637293338776, -0.12091312557458878, -0.14594615995883942, -0.2005297690629959, -0.23771855235099792, -0.24120627343654633, -0.22393779456615448, -0.18643537163734436, -0.14268536865711212, -0.11127320677042007, -0.09704754501581192, -0.11305031180381775, -0.169209286570549, -0.21140502393245697, -0.22894823551177979, -0.21722517907619476, -0.18683262169361115, -0.1520082950592041, -0.11359807103872299, -0.10803831368684769, -0.11909422278404236, -0.16403381526470184, -0.19894607365131378, -0.20131739974021912, -0.20011816918849945, -0.15102310478687286, -0.1396547555923462, -0.14831775426864624, -0.14927057921886444, -0.18337377905845642, -0.1848442405462265, -0.18638628721237183, -0.16026727855205536, -0.12376182526350021, -0.09934362769126892, -0.05817044526338577, -0.05516081303358078, -0.08013266324996948, -0.1142791286110878, -0.14091607928276062, -0.1753677874803543, -0.17852981388568878, -0.17905759811401367, -0.1700560748577118, -0.1533929705619812, -0.1574300229549408, -0.11412449926137924, -0.12919814884662628, -0.13824273645877838, -0.1613447368144989, -0.21223761141300201, -0.2064344733953476, -0.19133427739143372, -0.1406831592321396, -0.1388634741306305, -0.15151046216487885, -0.16450339555740356, -0.1921345293521881, -0.21124261617660522, -0.20467744767665863, -0.17311713099479675, -0.15831777453422546, -0.1329701989889145, -0.14133886992931366, -0.12255013734102249, -0.11732081323862076, -0.13927452266216278, -0.11711817979812622, -0.11348146200180054, -0.10841589421033859, -0.08195535838603973, -0.06057226285338402, -0.061305347830057144, -0.05880201607942581, -0.05418756604194641, -0.0648375153541565, -0.09700310975313187, -0.10446159541606903, -0.08932163566350937, -0.07691141217947006, -0.035637155175209045, 5.688727833330631e-05, 0.004381988663226366, -0.015582814812660217, -0.052710991352796555, -0.11129812151193619, -0.13720430433750153, -0.1500120759010315, -0.13432498276233673, -0.0947595089673996, -0.10165277868509293, -0.08569087088108063, -0.09615428745746613, -0.12074773013591766, -0.12624377012252808, -0.13209643959999084, -0.10305644571781158, -0.07449965924024582, -0.04758734628558159, -0.020271843299269676, -0.00881312694400549, -0.022414715960621834, -0.034218672662973404, -0.029248716309666634, -0.006246726959943771, 0.031752802431583405, 0.046497054398059845, 0.03946823626756668, 0.03475983440876007, 0.047903694212436676, 0.052925486117601395, 0.06413859874010086, 0.08361437916755676, 0.06616223603487015, 0.023582562804222107, -0.025501947849988937, -0.05855322256684303, -0.10033947229385376, -0.08882986009120941, -0.01367687527090311, 0.03822048753499985, 0.11241403967142105, 0.1203625425696373, 0.08676137775182724, 0.07272087782621384, 0.028201015666127205, 0.03695883974432945, 0.06583039462566376, 0.1025254875421524, 0.12751634418964386, 0.11698959022760391, 0.10515732318162918, 0.06402552127838135, 0.039853695780038834, 0.04782472923398018, 0.061149727553129196, 0.08441037684679031, 0.10849040001630783, 0.10723382234573364, 0.09841576963663101, 0.11526837944984436, 0.13063743710517883, 0.13114410638809204, 0.14082929491996765, 0.14554251730442047, 0.14252158999443054, 0.12895247340202332, 0.11951650679111481, 0.14755801856517792, 0.16673551499843597, 0.20658454298973083, 0.25348418951034546, 0.26842793822288513, 0.25881707668304443, 0.21370655298233032, 0.18995146453380585, 0.1868065446615219, 0.1954771876335144, 0.21372511982917786, 0.25208067893981934, 0.2730892300605774, 0.25945332646369934, 0.2589276134967804, 0.24185380339622498, 0.2397637963294983, 0.23975898325443268, 0.2354113608598709, 0.2516745924949646, 0.2558706998825073, 0.26721006631851196, 0.29076191782951355, 0.31426018476486206, 0.3109114170074463, 0.2845839560031891, 0.2721503674983978, 0.27079394459724426, 0.2831577658653259, 0.29059892892837524, 0.291005939245224, 0.30118197202682495, 0.2933638393878937, 0.27483776211738586, 0.269435316324234, 0.28242531418800354, 0.2927139401435852, 0.29877111315727234, 0.3222566545009613, 0.35182785987854004, 0.3825486898422241, 0.3953903913497925, 0.3971389830112457, 0.39406105875968933, 0.3772681951522827, 0.33756011724472046, 0.30139675736427307, 0.3089078962802887, 0.3119831085205078, 0.3117419183254242, 0.33580657839775085, 0.3651560842990875, 0.3916337788105011, 0.41496148705482483, 0.4222065210342407, 0.4214162826538086, 0.4170536696910858, 0.398937851190567, 0.39465564489364624, 0.4026236832141876, 0.41055724024772644, 0.4055759310722351, 0.4007759988307953, 0.4160097539424896, 0.43319204449653625, 0.4375785291194916, 0.4236885607242584, 0.39181581139564514, 0.36481305956840515, 0.36527419090270996, 0.3643050789833069, 0.3883201479911804, 0.42446377873420715, 0.41976654529571533, 0.39699533581733704, 0.3856772482395172, 0.381778359413147, 0.38220369815826416, 0.4096032381057739, 0.41980433464050293, 0.4185553789138794, 0.41061171889305115, 0.39793452620506287, 0.3881622850894928, 0.3715258836746216, 0.3916380703449249, 0.4126463830471039, 0.4324183166027069, 0.4381665587425232, 0.44356435537338257, 0.44115254282951355, 0.4175683856010437, 0.4181065261363983, 0.39187297224998474, 0.3916023373603821, 0.4059198200702667, 0.3977578580379486, 0.4012296497821808, 0.389100581407547, 0.3854875862598419, 0.3979077935218811, 0.3847251534461975, 0.3865782618522644, 0.4260472357273102, 0.4276198446750641, 0.42497894167900085, 0.4214974045753479, 0.4206068515777588, 0.4138401746749878, 0.3903322219848633, 0.40035924315452576, 0.38313010334968567, 0.387683242559433, 0.40142080187797546, 0.3823452889919281, 0.3835024833679199, 0.38834020495414734, 0.390988826751709, 0.3909831941127777, 0.3865695893764496, 0.3690422475337982, 0.35936620831489563, 0.3610043525695801, 0.36348795890808105, 0.3659120500087738, 0.37513911724090576, 0.3820977807044983, 0.39646682143211365, 0.408132404088974, 0.39342761039733887, 0.38596677780151367, 0.3602036237716675, 0.3375759720802307, 0.33079901337623596, 0.3477686941623688, 0.3761981427669525, 0.38972991704940796, 0.3894626796245575, 0.367550253868103, 0.35796913504600525, 0.3431982696056366, 0.3480483889579773, 0.3415881097316742, 0.32947519421577454, 0.31935441493988037, 0.2979249358177185, 0.3078659176826477, 0.3135370910167694, 0.3420614004135132, 0.3540676236152649, 0.35666486620903015, 0.349386990070343, 0.3172683119773865, 0.30574697256088257, 0.28865373134613037, 0.2833276093006134, 0.2666991055011749, 0.24239185452461243, 0.23900704085826874, 0.27526572346687317, 0.30557453632354736, 0.31010347604751587, 0.31159159541130066, 0.2793470323085785, 0.2645336091518402, 0.25754624605178833, 0.2543703615665436, 0.2593342661857605, 0.24236811697483063, 0.24081335961818695, 0.23648594319820404, 0.21771909296512604, 0.2217126190662384, 0.21581275761127472, 0.22762122750282288, 0.2548814117908478, 0.22819294035434723, 0.21335329115390778, 0.19262206554412842, 0.16463284194469452, 0.17013214528560638, 0.18808600306510925, 0.21299326419830322, 0.20698916912078857, 0.19779641926288605, 0.18487393856048584, 0.1750701516866684, 0.16996583342552185, 0.15596862137317657, 0.16054731607437134, 0.15955840051174164, 0.1525723934173584, 0.15092453360557556, 0.15832728147506714, 0.16580551862716675, 0.1808888167142868, 0.17386390268802643, 0.1497776210308075, 0.1393614411354065, 0.11221929639577866, 0.11007978022098541, 0.11463478207588196, 0.13000912964344025, 0.1533515900373459, 0.12061122059822083, 0.0795946717262268, 0.07035554945468903, 0.08294548094272614, 0.09392234683036804, 0.08972930163145065, 0.06548599153757095, 0.04852929711341858, 0.03991379588842392, 0.031224288046360016, 0.039172254502773285, 0.06015210226178169, 0.07977551221847534, 0.07406746596097946, 0.06532882899045944, 0.028744744136929512, -0.0034865951165556908, -0.004647627007216215, -0.012922829017043114, 0.00285692629404366, 0.012585943564772606, 0.006719670724123716, -0.0017939937533810735, -0.010044789873063564, -0.010709414258599281, -0.012078255414962769, -0.0028731143102049828, 0.01550345215946436, 0.0010065512033179402, -0.020710913464426994, -0.004117028787732124, -0.008085801266133785, -0.00903233326971531, -0.019932616502046585, -0.04797927662730217, -0.03400309383869171, -0.03872649744153023, -0.04582834988832474, -0.03778964281082153, -0.06929195672273636, -0.09303196519613266, -0.10261025279760361, -0.10264366120100021, -0.0714557021856308, -0.08781681209802628, -0.10260650515556335, -0.09530782699584961, -0.10963466763496399, -0.09928926825523376, -0.0994051843881607, -0.1045951321721077, -0.10160116106271744, -0.1036926805973053, -0.13211064040660858, -0.1617400050163269, -0.17330455780029297, -0.18138845264911652, -0.16457676887512207, -0.1607702672481537, -0.1509513556957245, -0.15950234234333038, -0.1727813482284546, -0.151169091463089, -0.14882789552211761, -0.1630387306213379, -0.1829991340637207, -0.18763771653175354, -0.2043699324131012, -0.20931190252304077, -0.17731744050979614, -0.16224192082881927, -0.16079185903072357, -0.17869965732097626, -0.2003573179244995, -0.20782214403152466, -0.20740827918052673, -0.19896581768989563, -0.19556765258312225, -0.19849209487438202, -0.21513067185878754, -0.24276623129844666, -0.24781979620456696, -0.24885743856430054, -0.25135567784309387, -0.2239650934934616, -0.22711986303329468, -0.2541288733482361, -0.262139230966568, -0.28334084153175354, -0.27862101793289185, -0.27003878355026245, -0.2862944006919861, -0.28646120429039, -0.29656219482421875, -0.29326319694519043, -0.2768491804599762, -0.28460410237312317, -0.29289186000823975, -0.3009759187698364, -0.31511402130126953, -0.3198918104171753\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_32bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_32bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_32bit_48000.h}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_32bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 418909;\par
6 {\cf18 int} bitDepth = 32;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{-0.10833723098039627, -0.13686230778694153, -0.08660777658224106, -0.07025191932916641, -0.07594943791627884, -0.10192184150218964, -0.11632838100194931, -0.09456843882799149, -0.11326359212398529, -0.12219168245792389, -0.10825426131486893, -0.1309429407119751, -0.11157312244176865, -0.09016415476799011, -0.0965714156627655, -0.12620578706264496, -0.14365583658218384, -0.11878309398889542, -0.1251625418663025, -0.12197279185056686, -0.13707268238067627, -0.16403384506702423, -0.12149179726839066, -0.11605630069971085, -0.13082683086395264, -0.12961497902870178, -0.16302011907100677, -0.16787879168987274, -0.1727980673313141, -0.17347824573516846, -0.15056578814983368, -0.13418999314308167, -0.13609308004379272, -0.15870068967342377, -0.15973517298698425, -0.16675157845020294, -0.1538539081811905, -0.13986317813396454, -0.1356811225414276, -0.11068937927484512, -0.11542622745037079, -0.11571431159973145, -0.14208760857582092, -0.18606315553188324, -0.15333223342895508, -0.1170574203133583, -0.12660381197929382, -0.1302478164434433, -0.12123790383338928, -0.1418413519859314, -0.19688516855239868, -0.21770331263542175, -0.20560204982757568, -0.1930108666419983, -0.18868814408779144, -0.1661619395017624, -0.13854163885116577, -0.1325310915708542, -0.11040335148572922, -0.12708288431167603, -0.17054039239883423, -0.21640004217624664, -0.24592463672161102, -0.21843625605106354, -0.1573750376701355, -0.11056780070066452, -0.09740602225065231, -0.12069782614707947, -0.2100597321987152, -0.22250661253929138, -0.1898784339427948, -0.18164417147636414, -0.1523897796869278, -0.15555024147033691, -0.14697620272636414, -0.16035667061805725, -0.18182522058486938, -0.19542503356933594, -0.20623499155044556, -0.1562727838754654, -0.12542715668678284, -0.1119709312915802, -0.07725507766008377, -0.08215560019016266, -0.10654792189598083, -0.1284656673669815, -0.140795037150383, -0.1548275202512741, -0.175393745303154, -0.16068312525749207, -0.15743035078048706, -0.1740831434726715, -0.1850689798593521, -0.14626285433769226, -0.13768750429153442, -0.14167004823684692, -0.13158604502677917, -0.2224844992160797, -0.1972336769104004, -0.14786580204963684, -0.16598083078861237, -0.10970427095890045, -0.14206169545650482, -0.21922466158866882, -0.2276635468006134, -0.2204207330942154, -0.1741165667772293, -0.1283014416694641, -0.1455855518579483, -0.12145467847585678, -0.12210126221179962, -0.1665816605091095, -0.16821958124637604, -0.15102557837963104, -0.09825979173183441, -0.07853254675865173, -0.0757584273815155, -0.04167184606194496, -0.03020879440009594, -0.07665292173624039, -0.0867912694811821, -0.06523621082305908, -0.08391410857439041, -0.08976593613624573, -0.0892600566148758, -0.061698853969573975, -0.05050971359014511, -0.0387004055082798, 0.004493299406021833, 0.00935047771781683, -0.000861787295434624, -0.04469887167215347, -0.12444597482681274, -0.15654629468917847, -0.15043316781520844, -0.1368141770362854, -0.09912170469760895, -0.10017985105514526, -0.09730787575244904, -0.09079402685165405, -0.13539952039718628, -0.11584442853927612, -0.0871509462594986, -0.09939737617969513, -0.09079309552907944, -0.07587186992168427, -0.015941079705953598, 0.011376189067959785, -0.02986397035419941, -0.048056282103061676, -0.05423866957426071, -0.009084882214665413, 0.06034950911998749, 0.07316169142723083, 0.04421554133296013, 0.026190321892499924, 0.02441880851984024, 0.023521097376942635, 0.051470398902893066, 0.07469034194946289, 0.06154932454228401, 0.006343642715364695, -0.03554345667362213, -0.06482252478599548, -0.1056675836443901, -0.07906777411699295, -0.010515891015529633, 0.03463919833302498, 0.10182815045118332, 0.12722797691822052, 0.07471873611211777, 0.06801177561283112, 0.015254026278853416, 0.013864085078239441, 0.09221803396940231, 0.0826478824019432, 0.10610705614089966, 0.12229252606630325, 0.09588494151830673, 0.0392443984746933, 0.007177992258220911, 0.05457144230604172, 0.060299959033727646, 0.052177149802446365, 0.0912666916847229, 0.1138489618897438, 0.0880434438586235, 0.09100965410470963, 0.10831927508115768, 0.08488117158412933, 0.09944018721580505, 0.15527090430259705, 0.1495298147201538, 0.12461885809898376, 0.10924600064754486, 0.13051281869411469, 0.18916931748390198, 0.21212251484394073, 0.26510581374168396, 0.2736929655075073, 0.2305777221918106, 0.20042501389980316, 0.17696787416934967, 0.19826193153858185, 0.22595231235027313, 0.21338365972042084, 0.21687710285186768, 0.2768402099609375, 0.2856462597846985, 0.2748701274394989, 0.24429206550121307, 0.23731593787670135, 0.2615853250026703, 0.2385004609823227, 0.25184887647628784, 0.2590377628803253, 0.2912565767765045, 0.2960257828235626, 0.28129681944847107, 0.2943141758441925, 0.2652760148048401, 0.2759816348552704, 0.2811919152736664, 0.26749080419540405, 0.2687794864177704, 0.286419540643692, 0.30105721950531006, 0.29055407643318176, 0.2720890939235687, 0.26196053624153137, 0.28323325514793396, 0.2852235734462738, 0.3042975664138794, 0.3309670686721802, 0.3482053279876709, 0.3756142854690552, 0.37282833456993103, 0.4028853476047516, 0.41528448462486267, 0.39297235012054443, 0.33393821120262146, 0.266926646232605, 0.34839409589767456, 0.36013832688331604, 0.3027712404727936, 0.33048728108406067, 0.31818675994873047, 0.3690297305583954, 0.4518803060054779, 0.4707958400249481, 0.47590383887290955, 0.4487761855125427, 0.408179372549057, 0.4058232009410858, 0.4089888632297516, 0.39989686012268066, 0.4162187874317169, 0.4089035391807556, 0.420042484998703, 0.4633650481700897, 0.47009241580963135, 0.4320559501647949, 0.37477734684944153, 0.3501797020435333, 0.36864542961120605, 0.37505897879600525, 0.38057786226272583, 0.4358638525009155, 0.4221298396587372, 0.37908437848091125, 0.38369178771972656, 0.3746439814567566, 0.36504921317100525, 0.3768764138221741, 0.41595566272735596, 0.4059741795063019, 0.36521267890930176, 0.36811569333076477, 0.40306854248046875, 0.39932534098625183, 0.37550926208496094, 0.39822137355804443, 0.38861456513404846, 0.375042200088501, 0.4241117537021637, 0.44766679406166077, 0.42229682207107544, 0.4069075286388397, 0.372592031955719, 0.33715173602104187, 0.34381675720214844, 0.38447317481040955, 0.3949357569217682, 0.3589608371257782, 0.36023738980293274, 0.3734191060066223, 0.36055001616477966, 0.3458775281906128, 0.4113192558288574, 0.46490100026130676, 0.43123236298561096, 0.4103556275367737, 0.3891814351081848, 0.3787882626056671, 0.4149034321308136, 0.4408852159976959, 0.384807288646698, 0.3910160958766937, 0.4161364734172821, 0.3903489112854004, 0.4329696297645569, 0.4470439851284027, 0.4352726638317108, 0.4092283844947815, 0.40356627106666565, 0.3920864760875702, 0.35180336236953735, 0.3690439462661743, 0.3695223927497864, 0.37285977602005005, 0.3807477355003357, 0.38910341262817383, 0.4154600203037262, 0.40539708733558655, 0.3828776478767395, 0.3979257345199585, 0.4030965268611908, 0.3764788508415222, 0.37100499868392944, 0.376128613948822, 0.3891622722148895, 0.39964398741722107, 0.397924542427063, 0.3694554269313812, 0.34238332509994507, 0.35136398673057556, 0.3466775715351105, 0.32053542137145996, 0.31009066104888916, 0.3154548108577728, 0.3218615651130676, 0.3354693353176117, 0.35251349210739136, 0.3808412253856659, 0.36031875014305115, 0.3247736394405365, 0.3143714368343353, 0.29025644063949585, 0.31819331645965576, 0.3275229036808014, 0.26957404613494873, 0.24069646000862122, 0.2509600818157196, 0.2721013128757477, 0.3218974173069, 0.3379148542881012, 0.3391279876232147, 0.35477057099342346, 0.3122774064540863, 0.28907379508018494, 0.26127633452415466, 0.27174583077430725, 0.3145226538181305, 0.26994219422340393, 0.2655091881752014, 0.27674081921577454, 0.2580544650554657, 0.24641384184360504, 0.22764991223812103, 0.2633393704891205, 0.28490525484085083, 0.22884516417980194, 0.20068077743053436, 0.2081446349620819, 0.1691996455192566, 0.12604139745235443, 0.16754966974258423, 0.2303970754146576, 0.24956415593624115, 0.21513475477695465, 0.14939925074577332, 0.12210232764482498, 0.08341973274946213, 0.06872755289077759, 0.08759518712759018, 0.08676828444004059, 0.12776444852352142, 0.16027037799358368, 0.13295665383338928, 0.08134753257036209, 0.07757977396249771, 0.0713101476430893, 0.04413797706365585, 0.07162045687437057, 0.08646615594625473, 0.09258094429969788, 0.08519972860813141, 0.06007305532693863, 0.029393984004855156, -0.004730659071356058, 0.012075272388756275, 0.03314382582902908, 0.060689739882946014, 0.0810345783829689, 0.06891240179538727, 0.06869363784790039, 0.06015931814908981, 0.024453748017549515, -0.022727468982338905, -0.013939582742750645, 0.05860927700996399, 0.10408946871757507, 0.09776987135410309, 0.09346065670251846, 0.06871064007282257, 0.0237408634275198, 0.01144726388156414, 0.009992995299398899, 0.051026638597249985, 0.07804933935403824, 0.03807005658745766, 0.027966653928160667, 0.05139179527759552, 0.059175532311201096, 0.05797623097896576, 0.0645240992307663, 0.07072844356298447, 0.05304586887359619, 0.042133402079343796, 0.06204916164278984, 0.04282190278172493, 0.02581813745200634, 0.009863116778433323, -0.010559451766312122, 0.017547298222780228, 0.005519622005522251, -0.005481787491589785, -0.020114561542868614, -0.07000157982110977, -0.08455605059862137, -0.08487066626548767, -0.09105613827705383, -0.09063224494457245, -0.11028661578893661, -0.12421509623527527, -0.08011362701654434, -0.05917187035083771, -0.061164360493421555, -0.08317194133996964, -0.11133325845003128, -0.11652016639709473, -0.1209748163819313, -0.12923869490623474, -0.17997758090496063, -0.17784884572029114, -0.15868601202964783, -0.1706957221031189, -0.14923615753650665, -0.14066515862941742, -0.15489116311073303, -0.16371965408325195, -0.16069664061069489, -0.1534927785396576, -0.15805117785930634, -0.19541852176189423, -0.222704216837883, -0.26610279083251953, -0.2662503719329834, -0.1970423460006714, -0.20212861895561218, -0.20889119803905487, -0.22272926568984985, -0.2685690224170685, -0.2498251050710678, -0.23696422576904297, -0.24578432738780975, -0.24855369329452515, -0.2809341549873352, -0.2945394814014435, -0.30566444993019104, -0.3110761344432831, -0.29613038897514343, -0.3023243844509125, -0.2645263671875, -0.23136837780475616, -0.27086758613586426, -0.30555811524391174, -0.28737515211105347, -0.2821108400821686, -0.28427669405937195, -0.2682332992553711, -0.2788289487361908, -0.2803072929382324, -0.3019910454750061, -0.3253365159034729, -0.3186952471733093, -0.3028562068939209, -0.3001079261302948, -0.3300066590309143, -0.3330908417701721\}, \{-0.09994792193174362, -0.11962439119815826, -0.10353175550699234, -0.10857119411230087, -0.0975407138466835, -0.10169847309589386, -0.10419623553752899, -0.10011977702379227, -0.10739824175834656, -0.11306414008140564, -0.1047334149479866, -0.11391763389110565, -0.1269489824771881, -0.13103140890598297, -0.1283167600631714, -0.12672726809978485, -0.12256429344415665, -0.11197789013385773, -0.1225510835647583, -0.127065047621727, -0.13534337282180786, -0.14296957850456238, -0.12996596097946167, -0.13687638938426971, -0.14970701932907104, -0.1526072919368744, -0.15842965245246887, -0.1534164845943451, -0.14922869205474854, -0.15118055045604706, -0.141886368393898, -0.1385745108127594, -0.15126793086528778, -0.16573961079120636, -0.16551728546619415, -0.1554349809885025, -0.14193055033683777, -0.12650495767593384, -0.11480633914470673, -0.10120896995067596, -0.10902541130781174, -0.13003939390182495, -0.1531127244234085, -0.17721183598041534, -0.16370649635791779, -0.1375986784696579, -0.11770003288984299, -0.11037637293338776, -0.12091312557458878, -0.14594615995883942, -0.2005297690629959, -0.23771855235099792, -0.24120627343654633, -0.22393779456615448, -0.18643537163734436, -0.14268536865711212, -0.11127320677042007, -0.09704754501581192, -0.11305031180381775, -0.169209286570549, -0.21140502393245697, -0.22894823551177979, -0.21722517907619476, -0.18683262169361115, -0.1520082950592041, -0.11359807103872299, -0.10803831368684769, -0.11909422278404236, -0.16403381526470184, -0.19894607365131378, -0.20131739974021912, -0.20011816918849945, -0.15102310478687286, -0.1396547555923462, -0.14831775426864624, -0.14927057921886444, -0.18337377905845642, -0.1848442405462265, -0.18638628721237183, -0.16026727855205536, -0.12376182526350021, -0.09934362769126892, -0.05817044526338577, -0.05516081303358078, -0.08013266324996948, -0.1142791286110878, -0.14091607928276062, -0.1753677874803543, -0.17852981388568878, -0.17905759811401367, -0.1700560748577118, -0.1533929705619812, -0.1574300229549408, -0.11412449926137924, -0.12919814884662628, -0.13824273645877838, -0.1613447368144989, -0.21223761141300201, -0.2064344733953476, -0.19133427739143372, -0.1406831592321396, -0.1388634741306305, -0.15151046216487885, -0.16450339555740356, -0.1921345293521881, -0.21124261617660522, -0.20467744767665863, -0.17311713099479675, -0.15831777453422546, -0.1329701989889145, -0.14133886992931366, -0.12255013734102249, -0.11732081323862076, -0.13927452266216278, -0.11711817979812622, -0.11348146200180054, -0.10841589421033859, -0.08195535838603973, -0.06057226285338402, -0.061305347830057144, -0.05880201607942581, -0.05418756604194641, -0.0648375153541565, -0.09700310975313187, -0.10446159541606903, -0.08932163566350937, -0.07691141217947006, -0.035637155175209045, 5.688727833330631e-05, 0.004381988663226366, -0.015582814812660217, -0.052710991352796555, -0.11129812151193619, -0.13720430433750153, -0.1500120759010315, -0.13432498276233673, -0.0947595089673996, -0.10165277868509293, -0.08569087088108063, -0.09615428745746613, -0.12074773013591766, -0.12624377012252808, -0.13209643959999084, -0.10305644571781158, -0.07449965924024582, -0.04758734628558159, -0.020271843299269676, -0.00881312694400549, -0.022414715960621834, -0.034218672662973404, -0.029248716309666634, -0.006246726959943771, 0.031752802431583405, 0.046497054398059845, 0.03946823626756668, 0.03475983440876007, 0.047903694212436676, 0.052925486117601395, 0.06413859874010086, 0.08361437916755676, 0.06616223603487015, 0.023582562804222107, -0.025501947849988937, -0.05855322256684303, -0.10033947229385376, -0.08882986009120941, -0.01367687527090311, 0.03822048753499985, 0.11241403967142105, 0.1203625425696373, 0.08676137775182724, 0.07272087782621384, 0.028201015666127205, 0.03695883974432945, 0.06583039462566376, 0.1025254875421524, 0.12751634418964386, 0.11698959022760391, 0.10515732318162918, 0.06402552127838135, 0.039853695780038834, 0.04782472923398018, 0.061149727553129196, 0.08441037684679031, 0.10849040001630783, 0.10723382234573364, 0.09841576963663101, 0.11526837944984436, 0.13063743710517883, 0.13114410638809204, 0.14082929491996765, 0.14554251730442047, 0.14252158999443054, 0.12895247340202332, 0.11951650679111481, 0.14755801856517792, 0.16673551499843597, 0.20658454298973083, 0.25348418951034546, 0.26842793822288513, 0.25881707668304443, 0.21370655298233032, 0.18995146453380585, 0.1868065446615219, 0.1954771876335144, 0.21372511982917786, 0.25208067893981934, 0.2730892300605774, 0.25945332646369934, 0.2589276134967804, 0.24185380339622498, 0.2397637963294983, 0.23975898325443268, 0.2354113608598709, 0.2516745924949646, 0.2558706998825073, 0.26721006631851196, 0.29076191782951355, 0.31426018476486206, 0.3109114170074463, 0.2845839560031891, 0.2721503674983978, 0.27079394459724426, 0.2831577658653259, 0.29059892892837524, 0.291005939245224, 0.30118197202682495, 0.2933638393878937, 0.27483776211738586, 0.269435316324234, 0.28242531418800354, 0.2927139401435852, 0.29877111315727234, 0.3222566545009613, 0.35182785987854004, 0.3825486898422241, 0.3953903913497925, 0.3971389830112457, 0.39406105875968933, 0.3772681951522827, 0.33756011724472046, 0.30139675736427307, 0.3089078962802887, 0.3119831085205078, 0.3117419183254242, 0.33580657839775085, 0.3651560842990875, 0.3916337788105011, 0.41496148705482483, 0.4222065210342407, 0.4214162826538086, 0.4170536696910858, 0.398937851190567, 0.39465564489364624, 0.4026236832141876, 0.41055724024772644, 0.4055759310722351, 0.4007759988307953, 0.4160097539424896, 0.43319204449653625, 0.4375785291194916, 0.4236885607242584, 0.39181581139564514, 0.36481305956840515, 0.36527419090270996, 0.3643050789833069, 0.3883201479911804, 0.42446377873420715, 0.41976654529571533, 0.39699533581733704, 0.3856772482395172, 0.381778359413147, 0.38220369815826416, 0.4096032381057739, 0.41980433464050293, 0.4185553789138794, 0.41061171889305115, 0.39793452620506287, 0.3881622850894928, 0.3715258836746216, 0.3916380703449249, 0.4126463830471039, 0.4324183166027069, 0.4381665587425232, 0.44356435537338257, 0.44115254282951355, 0.4175683856010437, 0.4181065261363983, 0.39187297224998474, 0.3916023373603821, 0.4059198200702667, 0.3977578580379486, 0.4012296497821808, 0.389100581407547, 0.3854875862598419, 0.3979077935218811, 0.3847251534461975, 0.3865782618522644, 0.4260472357273102, 0.4276198446750641, 0.42497894167900085, 0.4214974045753479, 0.4206068515777588, 0.4138401746749878, 0.3903322219848633, 0.40035924315452576, 0.38313010334968567, 0.387683242559433, 0.40142080187797546, 0.3823452889919281, 0.3835024833679199, 0.38834020495414734, 0.390988826751709, 0.3909831941127777, 0.3865695893764496, 0.3690422475337982, 0.35936620831489563, 0.3610043525695801, 0.36348795890808105, 0.3659120500087738, 0.37513911724090576, 0.3820977807044983, 0.39646682143211365, 0.408132404088974, 0.39342761039733887, 0.38596677780151367, 0.3602036237716675, 0.3375759720802307, 0.33079901337623596, 0.3477686941623688, 0.3761981427669525, 0.38972991704940796, 0.3894626796245575, 0.367550253868103, 0.35796913504600525, 0.3431982696056366, 0.3480483889579773, 0.3415881097316742, 0.32947519421577454, 0.31935441493988037, 0.2979249358177185, 0.3078659176826477, 0.3135370910167694, 0.3420614004135132, 0.3540676236152649, 0.35666486620903015, 0.349386990070343, 0.3172683119773865, 0.30574697256088257, 0.28865373134613037, 0.2833276093006134, 0.2666991055011749, 0.24239185452461243, 0.23900704085826874, 0.27526572346687317, 0.30557453632354736, 0.31010347604751587, 0.31159159541130066, 0.2793470323085785, 0.2645336091518402, 0.25754624605178833, 0.2543703615665436, 0.2593342661857605, 0.24236811697483063, 0.24081335961818695, 0.23648594319820404, 0.21771909296512604, 0.2217126190662384, 0.21581275761127472, 0.22762122750282288, 0.2548814117908478, 0.22819294035434723, 0.21335329115390778, 0.19262206554412842, 0.16463284194469452, 0.17013214528560638, 0.18808600306510925, 0.21299326419830322, 0.20698916912078857, 0.19779641926288605, 0.18487393856048584, 0.1750701516866684, 0.16996583342552185, 0.15596862137317657, 0.16054731607437134, 0.15955840051174164, 0.1525723934173584, 0.15092453360557556, 0.15832728147506714, 0.16580551862716675, 0.1808888167142868, 0.17386390268802643, 0.1497776210308075, 0.1393614411354065, 0.11221929639577866, 0.11007978022098541, 0.11463478207588196, 0.13000912964344025, 0.1533515900373459, 0.12061122059822083, 0.0795946717262268, 0.07035554945468903, 0.08294548094272614, 0.09392234683036804, 0.08972930163145065, 0.06548599153757095, 0.04852929711341858, 0.03991379588842392, 0.031224288046360016, 0.039172254502773285, 0.06015210226178169, 0.07977551221847534, 0.07406746596097946, 0.06532882899045944, 0.028744744136929512, -0.0034865951165556908, -0.004647627007216215, -0.012922829017043114, 0.00285692629404366, 0.012585943564772606, 0.006719670724123716, -0.0017939937533810735, -0.010044789873063564, -0.010709414258599281, -0.012078255414962769, -0.0028731143102049828, 0.01550345215946436, 0.0010065512033179402, -0.020710913464426994, -0.004117028787732124, -0.008085801266133785, -0.00903233326971531, -0.019932616502046585, -0.04797927662730217, -0.03400309383869171, -0.03872649744153023, -0.04582834988832474, -0.03778964281082153, -0.06929195672273636, -0.09303196519613266, -0.10261025279760361, -0.10264366120100021, -0.0714557021856308, -0.08781681209802628, -0.10260650515556335, -0.09530782699584961, -0.10963466763496399, -0.09928926825523376, -0.0994051843881607, -0.1045951321721077, -0.10160116106271744, -0.1036926805973053, -0.13211064040660858, -0.1617400050163269, -0.17330455780029297, -0.18138845264911652, -0.16457676887512207, -0.1607702672481537, -0.1509513556957245, -0.15950234234333038, -0.1727813482284546, -0.151169091463089, -0.14882789552211761, -0.1630387306213379, -0.1829991340637207, -0.18763771653175354, -0.2043699324131012, -0.20931190252304077, -0.17731744050979614, -0.16224192082881927, -0.16079185903072357, -0.17869965732097626, -0.2003573179244995, -0.20782214403152466, -0.20740827918052673, -0.19896581768989563, -0.19556765258312225, -0.19849209487438202, -0.21513067185878754, -0.24276623129844666, -0.24781979620456696, -0.24885743856430054, -0.25135567784309387, -0.2239650934934616, -0.22711986303329468, -0.2541288733482361, -0.262139230966568, -0.28334084153175354, -0.27862101793289185, -0.27003878355026245, -0.2862944006919861, -0.28646120429039, -0.29656219482421875, -0.29326319694519043, -0.2768491804599762, -0.28460410237312317, -0.29289186000823975, -0.3009759187698364, -0.31511402130126953, -0.3198918104171753\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_8bit_44100.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_8bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_8bit_44100.h}
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_8bit_44100}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_44100::numSamplesPerChannel} = 352800\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_44100::bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_8bit_44100::sampleRate} = 44100\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_44100::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_8bit_44100::testBuffer} = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0, 0.0234375, -0.09375, 0.09375, 0.0078125, 0.0703125, 0.0546875, 0.0390625, 0.0859375, 0.015625, 0.078125, 0.015625, 0.078125, 0.0390625, -0.015625, 0.046875, 0.0234375, 0.0859375, 0.046875, 0.1328125, 0.0546875, 0.140625, 0.078125, 0.1015625, 0.109375, 0.078125, 0.1171875, 0.0703125, 0.1171875, 0.0546875, 0.125, 0.0546875, 0.09375, 0.1328125, 0.046875, 0.09375, 0.125, 0.0546875, 0.1328125, 0.0859375, 0.1015625, 0.1015625, 0.0546875, 0.1328125, 0.0625, 0.15625, 0.1015625, 0.1328125, 0.1328125, 0.046875, 0.1484375, 0.015625, 0.09375, -0.046875, 0.0625, -0.0078125, 0.03125, 0.0234375, -0.0078125, 0.0234375, -0.015625, 0.0546875, -0.03125, 0.0703125, 0.015625, 0.1015625, 0.046875, -0.0234375, 0.109375, 0.0234375, 0.2421875, 0.3984375, 0.40625, 0.0859375, 0.1015625, 0.21875, 0.2109375, -0.0859375, -0.1171875, -0.1484375, -0.203125, 0.0078125, -0.1875, -0.3046875, -0.2734375, -0.125, 0.1171875, -0.0234375, -0.234375, -0.21875, 0.046875, 0.1484375, 0.171875, -0.1171875, -0.1484375, -0.21875, -0.25, -0.2265625, -0.0078125, -0.046875, -0.1875, -0.1875, -0.1796875, -0.1640625, -0.203125, -0.2421875, -0.2734375, -0.203125, -0.2265625, -0.375, -0.3828125, -0.484375, -0.5, -0.2578125, -0.15625, -0.390625, -0.34375, -0.3046875, -0.3515625, -0.1640625, -0.21875, -0.3359375, -0.28125, -0.03125, -0.25, -0.125, -0.0625, -0.1484375, -0.1484375, -0.0390625, 0.078125, -0.1171875, -0.2265625, -0.125, 0.046875, -0.0859375, -0.296875, -0.109375, -0.0859375, -0.1328125, -0.265625, -0.1953125, -0.0859375, -0.015625, -0.1875, -0.1875, -0.09375, -0.1640625, -0.2265625, -0.21875, -0.0703125, -0.140625, -0.3046875, -0.140625, -0.0703125, -0.2734375, -0.171875, -0.0546875, -0.0390625, -0.03125, -0.1796875, -0.140625, -0.125, 0.03125, 0.0, -0.0859375, -0.0859375, 0.0, 0.09375, 0.140625, 0.0, 0.0234375, 0.1328125, 0.15625, 0.171875, 0.1796875, 0.1953125, 0.125, 0.15625, 0.2890625, 0.359375, 0.21875, 0.2734375, 0.2578125, 0.265625, 0.203125, 0.2109375, 0.2890625, 0.2578125, 0.1484375, 0.1875, 0.2265625, 0.1953125, 0.28125, 0.2265625, 0.2578125, 0.1015625, 0.2109375, 0.3359375, 0.2265625, 0.109375, 0.078125, 0.1640625, 0.2109375, 0.09375, 0.0625, -0.015625, 0.0625, 0.25, 0.078125, 0.03125, 0.2734375, 0.1953125, 0.171875, 0.1484375, 0.3046875, 0.25, 0.125, 0.2421875, 0.390625, 0.265625, 0.171875, 0.34375, 0.359375, 0.390625, 0.234375, 0.296875, 0.3671875, 0.5234375, 0.546875, 0.484375, 0.3828125, 0.359375, 0.40625, 0.3515625, 0.46875, 0.390625, 0.359375, 0.3125, 0.328125, 0.375, 0.421875, 0.34375, 0.359375, 0.3828125, 0.171875, 0.25, 0.2421875, 0.1796875, 0.2421875, 0.2421875, 0.2109375, 0.15625, 0.1328125, 0.1875, 0.1484375, 0.1015625, 0.1015625, 0.3359375, 0.15625, 0.125, 0.1328125, 0.109375, 0.1171875, 0.0546875, 0.015625, -0.015625, 0.2578125, 0.1015625, -0.0078125, -0.046875, -0.015625, -0.0546875, 0.015625, 0.171875, 0.0703125, 0.09375, 0.0, -0.015625, -0.0234375, 0.109375, 0.046875, 0.03125, 0.0234375, -0.046875, -0.03125, 0.0859375, 0.1796875, 0.0, -0.0625, 0.1171875, 0.203125, 0.03125, 0.078125, 0.1875, 0.234375, 0.1328125, 0.140625, 0.0546875, -0.0625, 0.03125, 0.0859375, 0.1171875, -0.03125, 0.125, 0.0859375, 0.140625, 0.1171875, -0.0234375, -0.0234375, -0.1328125, -0.046875, -0.0234375, 0.140625, 0.1171875, 0.1640625, 0.0390625, -0.03125, 0.046875, 0.0859375, 0.109375, 0.0, 0.0546875, 0.125, -0.0078125, 0.078125, 0.09375, 0.03125, 0.078125, 0.125, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.109375, 0.015625, 0.171875, -0.0078125, 0.078125, 0.15625, 0.0625, 0.0625, 0.109375, 0.2734375, 0.2265625, 0.1640625, 0.1796875, 0.203125, 0.1640625, 0.1796875, 0.21875, 0.328125, 0.21875, 0.15625, 0.2578125, 0.34375, 0.2578125, 0.1328125, 0.375, 0.3359375, 0.2421875, 0.21875, 0.359375, 0.3359375, 0.359375, 0.28125, 0.375, 0.34375, 0.296875, 0.2890625, 0.2265625, 0.4453125, 0.359375, 0.3203125, 0.2734375, 0.296875, 0.3203125, 0.296875, 0.4765625, 0.3046875, 0.40625, 0.25, 0.328125, 0.15625, 0.2109375, 0.15625, 0.25, 0.3203125, 0.0625, 0.203125, 0.2421875, 0.203125, 0.09375, 0.140625, 0.2734375, 0.1953125, 0.0859375, 0.1640625, 0.2578125, 0.1484375, 0.125, 0.1171875, 0.140625, 0.1796875, 0.1640625, 0.1015625, 0.03125, 0.015625, 0.0703125, 0.1328125, -0.0234375, -0.0078125, 0.078125, 0.0546875, -0.046875, 0.0078125, 0.0859375, 0.140625, -0.078125, -0.1015625, -0.015625, -0.078125, 0.0078125, -0.125, 0.015625, -0.0234375, -0.03125, -0.0859375, 0.03125, -0.0078125, -0.109375, -0.0625, -0.140625, -0.125, -0.109375, -0.203125, -0.046875, -0.046875, -0.125, -0.1171875, -0.046875, -0.09375, -0.0859375, -0.0859375, -0.1015625, 0.0078125, -0.1328125, -0.1640625, -0.1484375, -0.046875, -0.1328125, -0.1484375, -0.1953125, -0.2578125, -0.0859375, -0.0625, -0.1328125, -0.2734375, -0.140625, -0.296875, -0.2578125, -0.2421875, -0.296875, -0.2578125, -0.34375, -0.2890625, -0.28125, -0.34375, -0.3046875, -0.2265625, -0.375, -0.3671875, -0.40625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, 0.0, 0.0, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0078125, -0.015625, 0.0234375, -0.0234375, 0.03125, -0.0234375, 0.015625, -0.015625, 0.0078125, 0.0078125, -0.0078125, -0.015625, 0.03125, 0.0, 0.0, -0.046875, 0.0078125, 0.0, -0.0078125, 0.0078125, 0.046875, 0.046875, 0.09375, 0.0390625, 0.09375, 0.0390625, 0.0078125, -0.0078125, 0.03125, 0.03125, -0.0546875, 0.0078125, -0.0546875, -0.0078125, -0.015625, 0.0078125, 0.015625, 0.0078125, 0.046875, -0.0078125, 0.046875, -0.03125, 0.0703125, -0.046875, 0.015625, -0.0078125, 0.0234375, 0.015625, -0.0546875, 0.0234375, -0.0078125, 0.03125, -0.015625, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.0, -0.0078125, 0.0078125, 0.0234375, 0.015625, 0.046875, 0.015625, 0.09375, 0.1328125, 0.4375, 0.328125, 0.0546875, 0.0625, 0.2265625, 0.1875, -0.1015625, -0.0625, -0.21875, -0.1796875, -0.0546875, -0.0703125, -0.3046875, -0.234375, -0.09375, 0.140625, 0.1015625, -0.2421875, -0.078125, 0.046875, 0.2578125, 0.21875, 0.0, -0.046875, -0.0390625, -0.2265625, -0.125, 0.0859375, -0.0234375, -0.1171875, -0.234375, -0.0625, -0.1796875, -0.09375, -0.1796875, -0.2578125, -0.0703125, -0.21875, -0.2890625, -0.375, -0.4140625, -0.484375, -0.2265625, -0.140625, -0.3671875, -0.3515625, -0.3203125, -0.359375, -0.203125, -0.109375, -0.3984375, -0.1484375, -0.0546875, -0.1640625, -0.1171875, -0.0859375, -0.1640625, -0.140625, -0.0703125, 0.0625, -0.140625, -0.1484375, -0.0625, 0.09375, -0.03125, -0.2265625, 0.03125, 0.0, -0.078125, -0.2109375, -0.234375, -0.0546875, -0.0390625, -0.1796875, -0.171875, -0.1796875, -0.15625, -0.265625, -0.203125, -0.1328125, -0.140625, -0.3515625, -0.125, -0.140625, -0.3359375, -0.25, -0.1171875, -0.078125, -0.0625, -0.125, -0.234375, -0.03125, 0.0703125, 0.046875, 0.0078125, -0.0859375, -0.046875, 0.171875, 0.0703125, 0.0546875, 0.0625, 0.21875, 0.3046875, 0.2109375, 0.2890625, 0.2578125, 0.234375, 0.2265625, 0.3515625, 0.40625, 0.265625, 0.21875, 0.3125, 0.1875, 0.1875, 0.1171875, 0.21875, 0.21875, 0.1328125, 0.2109375, 0.25, 0.25, 0.25, 0.234375, 0.2421875, 0.0703125, 0.1953125, 0.3359375, 0.1875, 0.1640625, 0.140625, 0.2109375, 0.1953125, 0.1171875, 0.0625, 0.0546875, 0.0625, 0.3046875, 0.0546875, 0.0234375, 0.25, 0.21875, 0.1484375, 0.1640625, 0.2421875, 0.140625, 0.140625, 0.25, 0.3671875, 0.2890625, 0.1484375, 0.3203125, 0.3515625, 0.2578125, 0.25, 0.1484375, 0.34375, 0.3515625, 0.4921875, 0.3828125, 0.3046875, 0.3515625, 0.296875, 0.3046875, 0.34375, 0.3359375, 0.1796875, 0.328125, 0.1953125, 0.328125, 0.375, 0.2109375, 0.3671875, 0.328125, 0.2109375, 0.21875, 0.234375, 0.140625, 0.203125, 0.265625, 0.25, 0.1875, 0.125, 0.15625, 0.1171875, 0.1640625, 0.15625, 0.34375, 0.125, 0.078125, 0.15625, 0.1328125, 0.0546875, 0.046875, -0.0859375, -0.0390625, 0.1875, 0.2109375, -0.015625, -0.0390625, -0.0390625, -0.0625, 0.1171875, 0.1796875, 0.1640625, 0.0546875, 0.0546875, 0.0, 0.0625, 0.1171875, 0.1640625, 0.078125, 0.140625, 0.078125, 0.1015625, 0.2265625, 0.296875, 0.1171875, 0.0546875, 0.171875, 0.1953125, 0.046875, 0.078125, 0.25, 0.2578125, 0.25, 0.1796875, 0.09375, 0.03125, 0.1484375, 0.2109375, 0.1796875, 0.0625, 0.15625, 0.1796875, 0.2265625, 0.15625, 0.125, 0.0, 0.0078125, 0.0078125, 0.125, 0.1796875, 0.1796875, 0.1953125, 0.1171875, 0.109375, 0.078125, 0.1484375, 0.1484375, 0.0546875, 0.09375, 0.2109375, 0.09375, 0.1328125, 0.171875, 0.0390625, 0.1484375, 0.15625, 0.09375, -0.0234375, 0.0546875, 0.15625, 0.109375, 0.0625, 0.125, 0.0703125, 0.109375, 0.1796875, 0.0703125, 0.1328125, 0.1796875, 0.265625, 0.1796875, 0.0859375, 0.125, 0.1171875, 0.109375, 0.1015625, 0.1796875, 0.2578125, 0.171875, 0.0625, 0.2578125, 0.3125, 0.2734375, 0.109375, 0.2890625, 0.3046875, 0.2421875, 0.171875, 0.3359375, 0.3125, 0.2578125, 0.2734375, 0.3359375, 0.3203125, 0.25, 0.15625, 0.234375, 0.3203125, 0.3515625, 0.2109375, 0.2109375, 0.1796875, 0.203125, 0.1953125, 0.3125, 0.2578125, 0.28125, 0.2421875, 0.203125, 0.1328125, 0.1640625, 0.1328125, 0.1484375, 0.2265625, -0.0078125, 0.125, 0.25, 0.1796875, 0.1328125, 0.140625, 0.2265625, 0.2421875, 0.078125, 0.1484375, 0.2578125, 0.1015625, 0.0859375, 0.0859375, 0.09375, 0.171875, 0.125, 0.0546875, 0.0, -0.0859375, 0.078125, 0.0390625, -0.0078125, -0.046875, 0.046875, 0.03125, 0.0, 0.0078125, 0.0390625, 0.1171875, -0.0390625, 0.0, 0.046875, 0.03125, 0.0546875, 0.0078125, 0.03125, 0.03125, -0.0078125, -0.0390625, 0.15625, 0.03125, -0.0234375, -0.03125, 0.015625, -0.0078125, -0.015625, -0.0625, 0.03125, 0.03125, -0.0703125, -0.0859375, 0.0234375, -0.03125, -0.0390625, -0.109375, -0.0625, 0.0078125, -0.0234375, -0.1171875, -0.0234375, -0.046875, -0.0703125, -0.1171875, -0.1875, -0.1875, -0.0859375, -0.1015625, -0.234375, -0.2109375, -0.1796875, -0.2265625, -0.34375, -0.2109375, -0.25, -0.25, -0.3359375, -0.2265625, -0.28125, -0.296875, -0.234375, -0.1875, -0.25, -0.2890625, -0.3046875\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_8bit_44100.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_8bit_44100.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_8bit_44100.h}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_8bit_44100 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 352800;\par
6 {\cf18 int} bitDepth = 8;\par
7 uint32_t sampleRate = 44100;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0, 0.0, 0.0, -0.0078125, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.0234375, 0.0234375, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0, 0.0234375, -0.09375, 0.09375, 0.0078125, 0.0703125, 0.0546875, 0.0390625, 0.0859375, 0.015625, 0.078125, 0.015625, 0.078125, 0.0390625, -0.015625, 0.046875, 0.0234375, 0.0859375, 0.046875, 0.1328125, 0.0546875, 0.140625, 0.078125, 0.1015625, 0.109375, 0.078125, 0.1171875, 0.0703125, 0.1171875, 0.0546875, 0.125, 0.0546875, 0.09375, 0.1328125, 0.046875, 0.09375, 0.125, 0.0546875, 0.1328125, 0.0859375, 0.1015625, 0.1015625, 0.0546875, 0.1328125, 0.0625, 0.15625, 0.1015625, 0.1328125, 0.1328125, 0.046875, 0.1484375, 0.015625, 0.09375, -0.046875, 0.0625, -0.0078125, 0.03125, 0.0234375, -0.0078125, 0.0234375, -0.015625, 0.0546875, -0.03125, 0.0703125, 0.015625, 0.1015625, 0.046875, -0.0234375, 0.109375, 0.0234375, 0.2421875, 0.3984375, 0.40625, 0.0859375, 0.1015625, 0.21875, 0.2109375, -0.0859375, -0.1171875, -0.1484375, -0.203125, 0.0078125, -0.1875, -0.3046875, -0.2734375, -0.125, 0.1171875, -0.0234375, -0.234375, -0.21875, 0.046875, 0.1484375, 0.171875, -0.1171875, -0.1484375, -0.21875, -0.25, -0.2265625, -0.0078125, -0.046875, -0.1875, -0.1875, -0.1796875, -0.1640625, -0.203125, -0.2421875, -0.2734375, -0.203125, -0.2265625, -0.375, -0.3828125, -0.484375, -0.5, -0.2578125, -0.15625, -0.390625, -0.34375, -0.3046875, -0.3515625, -0.1640625, -0.21875, -0.3359375, -0.28125, -0.03125, -0.25, -0.125, -0.0625, -0.1484375, -0.1484375, -0.0390625, 0.078125, -0.1171875, -0.2265625, -0.125, 0.046875, -0.0859375, -0.296875, -0.109375, -0.0859375, -0.1328125, -0.265625, -0.1953125, -0.0859375, -0.015625, -0.1875, -0.1875, -0.09375, -0.1640625, -0.2265625, -0.21875, -0.0703125, -0.140625, -0.3046875, -0.140625, -0.0703125, -0.2734375, -0.171875, -0.0546875, -0.0390625, -0.03125, -0.1796875, -0.140625, -0.125, 0.03125, 0.0, -0.0859375, -0.0859375, 0.0, 0.09375, 0.140625, 0.0, 0.0234375, 0.1328125, 0.15625, 0.171875, 0.1796875, 0.1953125, 0.125, 0.15625, 0.2890625, 0.359375, 0.21875, 0.2734375, 0.2578125, 0.265625, 0.203125, 0.2109375, 0.2890625, 0.2578125, 0.1484375, 0.1875, 0.2265625, 0.1953125, 0.28125, 0.2265625, 0.2578125, 0.1015625, 0.2109375, 0.3359375, 0.2265625, 0.109375, 0.078125, 0.1640625, 0.2109375, 0.09375, 0.0625, -0.015625, 0.0625, 0.25, 0.078125, 0.03125, 0.2734375, 0.1953125, 0.171875, 0.1484375, 0.3046875, 0.25, 0.125, 0.2421875, 0.390625, 0.265625, 0.171875, 0.34375, 0.359375, 0.390625, 0.234375, 0.296875, 0.3671875, 0.5234375, 0.546875, 0.484375, 0.3828125, 0.359375, 0.40625, 0.3515625, 0.46875, 0.390625, 0.359375, 0.3125, 0.328125, 0.375, 0.421875, 0.34375, 0.359375, 0.3828125, 0.171875, 0.25, 0.2421875, 0.1796875, 0.2421875, 0.2421875, 0.2109375, 0.15625, 0.1328125, 0.1875, 0.1484375, 0.1015625, 0.1015625, 0.3359375, 0.15625, 0.125, 0.1328125, 0.109375, 0.1171875, 0.0546875, 0.015625, -0.015625, 0.2578125, 0.1015625, -0.0078125, -0.046875, -0.015625, -0.0546875, 0.015625, 0.171875, 0.0703125, 0.09375, 0.0, -0.015625, -0.0234375, 0.109375, 0.046875, 0.03125, 0.0234375, -0.046875, -0.03125, 0.0859375, 0.1796875, 0.0, -0.0625, 0.1171875, 0.203125, 0.03125, 0.078125, 0.1875, 0.234375, 0.1328125, 0.140625, 0.0546875, -0.0625, 0.03125, 0.0859375, 0.1171875, -0.03125, 0.125, 0.0859375, 0.140625, 0.1171875, -0.0234375, -0.0234375, -0.1328125, -0.046875, -0.0234375, 0.140625, 0.1171875, 0.1640625, 0.0390625, -0.03125, 0.046875, 0.0859375, 0.109375, 0.0, 0.0546875, 0.125, -0.0078125, 0.078125, 0.09375, 0.03125, 0.078125, 0.125, 0.0234375, 0.0234375, 0.0859375, 0.1484375, 0.109375, 0.015625, 0.171875, -0.0078125, 0.078125, 0.15625, 0.0625, 0.0625, 0.109375, 0.2734375, 0.2265625, 0.1640625, 0.1796875, 0.203125, 0.1640625, 0.1796875, 0.21875, 0.328125, 0.21875, 0.15625, 0.2578125, 0.34375, 0.2578125, 0.1328125, 0.375, 0.3359375, 0.2421875, 0.21875, 0.359375, 0.3359375, 0.359375, 0.28125, 0.375, 0.34375, 0.296875, 0.2890625, 0.2265625, 0.4453125, 0.359375, 0.3203125, 0.2734375, 0.296875, 0.3203125, 0.296875, 0.4765625, 0.3046875, 0.40625, 0.25, 0.328125, 0.15625, 0.2109375, 0.15625, 0.25, 0.3203125, 0.0625, 0.203125, 0.2421875, 0.203125, 0.09375, 0.140625, 0.2734375, 0.1953125, 0.0859375, 0.1640625, 0.2578125, 0.1484375, 0.125, 0.1171875, 0.140625, 0.1796875, 0.1640625, 0.1015625, 0.03125, 0.015625, 0.0703125, 0.1328125, -0.0234375, -0.0078125, 0.078125, 0.0546875, -0.046875, 0.0078125, 0.0859375, 0.140625, -0.078125, -0.1015625, -0.015625, -0.078125, 0.0078125, -0.125, 0.015625, -0.0234375, -0.03125, -0.0859375, 0.03125, -0.0078125, -0.109375, -0.0625, -0.140625, -0.125, -0.109375, -0.203125, -0.046875, -0.046875, -0.125, -0.1171875, -0.046875, -0.09375, -0.0859375, -0.0859375, -0.1015625, 0.0078125, -0.1328125, -0.1640625, -0.1484375, -0.046875, -0.1328125, -0.1484375, -0.1953125, -0.2578125, -0.0859375, -0.0625, -0.1328125, -0.2734375, -0.140625, -0.296875, -0.2578125, -0.2421875, -0.296875, -0.2578125, -0.34375, -0.2890625, -0.28125, -0.34375, -0.3046875, -0.2265625, -0.375, -0.3671875, -0.40625\}, \{0.0, 0.0, 0.0078125, -0.015625, 0.015625, -0.0234375, 0.0234375, -0.03125, 0.0234375, -0.0234375, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.0078125, 0.0078125, 0.0, 0.0, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.015625, -0.015625, 0.015625, -0.015625, 0.015625, -0.015625, 0.0078125, -0.0078125, 0.0, 0.0078125, -0.015625, 0.0234375, -0.0234375, 0.03125, -0.0234375, 0.015625, -0.015625, 0.0078125, 0.0078125, -0.0078125, -0.015625, 0.03125, 0.0, 0.0, -0.046875, 0.0078125, 0.0, -0.0078125, 0.0078125, 0.046875, 0.046875, 0.09375, 0.0390625, 0.09375, 0.0390625, 0.0078125, -0.0078125, 0.03125, 0.03125, -0.0546875, 0.0078125, -0.0546875, -0.0078125, -0.015625, 0.0078125, 0.015625, 0.0078125, 0.046875, -0.0078125, 0.046875, -0.03125, 0.0703125, -0.046875, 0.015625, -0.0078125, 0.0234375, 0.015625, -0.0546875, 0.0234375, -0.0078125, 0.03125, -0.015625, 0.0078125, -0.0078125, 0.0078125, -0.0078125, 0.0, -0.0078125, 0.0078125, 0.0234375, 0.015625, 0.046875, 0.015625, 0.09375, 0.1328125, 0.4375, 0.328125, 0.0546875, 0.0625, 0.2265625, 0.1875, -0.1015625, -0.0625, -0.21875, -0.1796875, -0.0546875, -0.0703125, -0.3046875, -0.234375, -0.09375, 0.140625, 0.1015625, -0.2421875, -0.078125, 0.046875, 0.2578125, 0.21875, 0.0, -0.046875, -0.0390625, -0.2265625, -0.125, 0.0859375, -0.0234375, -0.1171875, -0.234375, -0.0625, -0.1796875, -0.09375, -0.1796875, -0.2578125, -0.0703125, -0.21875, -0.2890625, -0.375, -0.4140625, -0.484375, -0.2265625, -0.140625, -0.3671875, -0.3515625, -0.3203125, -0.359375, -0.203125, -0.109375, -0.3984375, -0.1484375, -0.0546875, -0.1640625, -0.1171875, -0.0859375, -0.1640625, -0.140625, -0.0703125, 0.0625, -0.140625, -0.1484375, -0.0625, 0.09375, -0.03125, -0.2265625, 0.03125, 0.0, -0.078125, -0.2109375, -0.234375, -0.0546875, -0.0390625, -0.1796875, -0.171875, -0.1796875, -0.15625, -0.265625, -0.203125, -0.1328125, -0.140625, -0.3515625, -0.125, -0.140625, -0.3359375, -0.25, -0.1171875, -0.078125, -0.0625, -0.125, -0.234375, -0.03125, 0.0703125, 0.046875, 0.0078125, -0.0859375, -0.046875, 0.171875, 0.0703125, 0.0546875, 0.0625, 0.21875, 0.3046875, 0.2109375, 0.2890625, 0.2578125, 0.234375, 0.2265625, 0.3515625, 0.40625, 0.265625, 0.21875, 0.3125, 0.1875, 0.1875, 0.1171875, 0.21875, 0.21875, 0.1328125, 0.2109375, 0.25, 0.25, 0.25, 0.234375, 0.2421875, 0.0703125, 0.1953125, 0.3359375, 0.1875, 0.1640625, 0.140625, 0.2109375, 0.1953125, 0.1171875, 0.0625, 0.0546875, 0.0625, 0.3046875, 0.0546875, 0.0234375, 0.25, 0.21875, 0.1484375, 0.1640625, 0.2421875, 0.140625, 0.140625, 0.25, 0.3671875, 0.2890625, 0.1484375, 0.3203125, 0.3515625, 0.2578125, 0.25, 0.1484375, 0.34375, 0.3515625, 0.4921875, 0.3828125, 0.3046875, 0.3515625, 0.296875, 0.3046875, 0.34375, 0.3359375, 0.1796875, 0.328125, 0.1953125, 0.328125, 0.375, 0.2109375, 0.3671875, 0.328125, 0.2109375, 0.21875, 0.234375, 0.140625, 0.203125, 0.265625, 0.25, 0.1875, 0.125, 0.15625, 0.1171875, 0.1640625, 0.15625, 0.34375, 0.125, 0.078125, 0.15625, 0.1328125, 0.0546875, 0.046875, -0.0859375, -0.0390625, 0.1875, 0.2109375, -0.015625, -0.0390625, -0.0390625, -0.0625, 0.1171875, 0.1796875, 0.1640625, 0.0546875, 0.0546875, 0.0, 0.0625, 0.1171875, 0.1640625, 0.078125, 0.140625, 0.078125, 0.1015625, 0.2265625, 0.296875, 0.1171875, 0.0546875, 0.171875, 0.1953125, 0.046875, 0.078125, 0.25, 0.2578125, 0.25, 0.1796875, 0.09375, 0.03125, 0.1484375, 0.2109375, 0.1796875, 0.0625, 0.15625, 0.1796875, 0.2265625, 0.15625, 0.125, 0.0, 0.0078125, 0.0078125, 0.125, 0.1796875, 0.1796875, 0.1953125, 0.1171875, 0.109375, 0.078125, 0.1484375, 0.1484375, 0.0546875, 0.09375, 0.2109375, 0.09375, 0.1328125, 0.171875, 0.0390625, 0.1484375, 0.15625, 0.09375, -0.0234375, 0.0546875, 0.15625, 0.109375, 0.0625, 0.125, 0.0703125, 0.109375, 0.1796875, 0.0703125, 0.1328125, 0.1796875, 0.265625, 0.1796875, 0.0859375, 0.125, 0.1171875, 0.109375, 0.1015625, 0.1796875, 0.2578125, 0.171875, 0.0625, 0.2578125, 0.3125, 0.2734375, 0.109375, 0.2890625, 0.3046875, 0.2421875, 0.171875, 0.3359375, 0.3125, 0.2578125, 0.2734375, 0.3359375, 0.3203125, 0.25, 0.15625, 0.234375, 0.3203125, 0.3515625, 0.2109375, 0.2109375, 0.1796875, 0.203125, 0.1953125, 0.3125, 0.2578125, 0.28125, 0.2421875, 0.203125, 0.1328125, 0.1640625, 0.1328125, 0.1484375, 0.2265625, -0.0078125, 0.125, 0.25, 0.1796875, 0.1328125, 0.140625, 0.2265625, 0.2421875, 0.078125, 0.1484375, 0.2578125, 0.1015625, 0.0859375, 0.0859375, 0.09375, 0.171875, 0.125, 0.0546875, 0.0, -0.0859375, 0.078125, 0.0390625, -0.0078125, -0.046875, 0.046875, 0.03125, 0.0, 0.0078125, 0.0390625, 0.1171875, -0.0390625, 0.0, 0.046875, 0.03125, 0.0546875, 0.0078125, 0.03125, 0.03125, -0.0078125, -0.0390625, 0.15625, 0.03125, -0.0234375, -0.03125, 0.015625, -0.0078125, -0.015625, -0.0625, 0.03125, 0.03125, -0.0703125, -0.0859375, 0.0234375, -0.03125, -0.0390625, -0.109375, -0.0625, 0.0078125, -0.0234375, -0.1171875, -0.0234375, -0.046875, -0.0703125, -0.1171875, -0.1875, -0.1875, -0.0859375, -0.1015625, -0.234375, -0.2109375, -0.1796875, -0.2265625, -0.34375, -0.2109375, -0.25, -0.25, -0.3359375, -0.2265625, -0.28125, -0.296875, -0.234375, -0.1875, -0.25, -0.2890625, -0.3046875\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/test-headers/wav_stereo_8bit_48000.h File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_8bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_8bit_48000.h}
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b wav_stereo_8bit_48000}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_48000::numSamplesPerChannel} = 384000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_48000::bitDepth} = 8\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b wav_stereo_8bit_48000::sampleRate} = 48000\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b wav_stereo_8bit_48000::numChannels} = 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::vector< double > > {\b wav_stereo_8bit_48000::testBuffer} = \{\{0.0078125, -0.0078125, -0.0078125, -0.0078125, 0.03125, 0.03125, -0.0859375, -0.0703125, 0.140625, 0.0625, 0.0234375, -0.140625, -0.1171875, 0.109375, 0.15625, 0.046875, -0.171875, -0.1875, 0.0234375, -0.0546875, 0.171875, 0.0859375, 0.078125, 0.1171875, -0.015625, 0.0078125, -0.1015625, -0.171875, -0.09375, -0.0703125, 0.0546875, 0.0234375, 0.0703125, 0.1015625, 0.0, 0.03125, -0.0625, -0.046875, 0.0546875, -0.015625, 0.0078125, -0.0703125, -0.015625, -0.0859375, -0.046875, -0.09375, -0.015625, -0.03125, -0.03125, 0.015625, 0.03125, 0.109375, -0.0234375, 0.1171875, 0.0546875, 0.0, 0.140625, 0.1328125, 0.2265625, 0.3046875, 0.1015625, 0.171875, 0.21875, 0.03125, 0.1953125, 0.203125, 0.0234375, 0.0078125, 0.078125, 0.0859375, -0.0625, -0.0390625, 0.0078125, 0.046875, -0.1171875, -0.140625, 0.0546875, 0.0859375, -0.0078125, 0.1015625, 0.078125, 0.15625, 0.109375, 0.109375, 0.2421875, 0.1171875, 0.0546875, 0.1796875, 0.2734375, 0.3125, 0.1953125, 0.2265625, 0.2734375, 0.15625, 0.109375, 0.140625, 0.1484375, 0.2265625, 0.1328125, 0.140625, 0.09375, 0.0625, 0.046875, 0.078125, 0.03125, 0.078125, 0.0625, 0.0078125, -0.0625, -0.15625, -0.1796875, -0.15625, -0.234375, -0.0625, -0.09375, -0.1875, 0.0, -0.0078125, -0.015625, -0.015625, -0.125, 0.03125, -0.0859375, 0.015625, 0.0546875, 0.0703125, 0.0546875, -0.078125, -0.046875, 0.2109375, 0.1484375, 0.0, 0.1015625, 0.15625, 0.1171875, 0.25, 0.1875, 0.1171875, 0.078125, 0.046875, 0.203125, 0.21875, 0.234375, 0.109375, 0.0, -0.0546875, -0.0234375, 0.1484375, 0.1171875, 0.03125, 0.03125, -0.171875, -0.09375, -0.0703125, -0.0546875, -0.2265625, -0.2109375, 0.125, 0.046875, -0.1796875, -0.125, -0.0234375, -0.0078125, -0.15625, -0.1328125, -0.0703125, 0.015625, -0.15625, -0.1875, -0.140625, -0.171875, -0.03125, 0.1484375, 0.1328125, 0.0234375, -0.109375, 0.0859375, -0.0234375, -0.2109375, 0.0390625, 0.015625, 0.0625, 0.0234375, 0.0546875, 0.265625, 0.0703125, 0.0703125, 0.09375, 0.21875, 0.15625, -0.0625, 0.0, 0.15625, 0.125, 0.125, 0.109375, 0.0078125, 0.0, 0.265625, 0.1171875, -0.046875, 0.1015625, 0.1796875, 0.140625, -0.0078125, -0.0234375, 0.0, -0.015625, -0.09375, 0.078125, -0.0234375, -0.1875, -0.1484375, 0.0234375, 0.09375, 0.0703125, 0.0234375, 0.015625, -0.03125, -0.0078125, 0.125, 0.0546875, 0.0, -0.1640625, 0.078125, 0.125, -0.046875, -0.03125, -0.015625, -0.0625, 0.0625, 0.125, -0.1171875, -0.1640625, -0.078125, -0.1328125, 0.0390625, 0.09375, -0.0390625, -0.1484375, -0.1484375, -0.0546875, 0.140625, 0.0703125, 0.0703125, -0.0703125, 0.0390625, 0.1484375, -0.0078125, 0.1328125, 0.046875, 0.015625, -0.1015625, 0.078125, 0.2265625, 0.0703125, 0.0546875, 0.1796875, 0.1953125, 0.171875, 0.0, 0.015625, 0.1640625, 0.015625, 0.109375, 0.0859375, 0.03125, 0.03125, 0.046875, 0.0703125, 0.0859375, -0.03125, 0.0546875, 0.1171875, 0.078125, 0.1328125, -0.03125, 0.078125, 0.0, 0.0234375, 0.1171875, -0.140625, -0.0390625, 0.1328125, -0.09375, -0.0234375, -0.125, 0.046875, 0.1015625, -0.1015625, -0.0234375, -0.0390625, -0.015625, -0.078125, -0.1171875, -0.2734375, -0.09375, -0.0078125, -0.0703125, -0.09375, -0.0625, -0.03125, -0.1484375, -0.0078125, -0.078125, -0.109375, -0.0234375, -0.015625, -0.1484375, -0.0390625, -0.046875, -0.203125, -0.0859375, -0.015625, -0.046875, -0.203125, -0.09375, -0.0234375, -0.2734375, -0.0625, 0.140625, -0.0859375, -0.0078125, -0.0234375, 0.0390625, 0.109375, -0.0234375, -0.03125, 0.0546875, 0.25, 0.0859375, 0.0390625, 0.2421875, 0.2109375, -0.0078125, 0.0390625, 0.109375, -0.0390625, 0.15625, 0.1484375, 0.0, 0.046875, -0.015625, 0.125, 0.140625, -0.15625, 0.0625, 0.046875, 0.0, -0.015625, -0.0078125, -0.0625, 0.0, 0.078125, 0.046875, 0.0, -0.1015625, 0.03125, 0.125, 0.0703125, 0.0078125, 0.1484375, 0.0625, 0.0234375, 0.0546875, 0.03125, 0.0234375, 0.171875, 0.09375, -0.03125, 0.1015625, -0.0546875, -0.078125, -0.0859375, 0.03125, 0.046875, 0.0390625, 0.0546875, 0.0, 0.03125, -0.109375, -0.0546875, -0.0390625, -0.0859375, -0.203125, -0.125, -0.0234375, -0.0234375, -0.0703125, 0.015625, -0.109375, -0.203125, -0.0859375, 0.015625, -0.0390625, -0.0859375, -0.109375, -0.0703125, 0.0, -0.015625, -0.1015625, -0.015625, -0.171875, -0.171875, -0.046875, -0.03125, -0.15625, -0.03125, -0.09375, -0.1875, -0.1796875, -0.09375, -0.125, -0.1328125, -0.21875, -0.046875, -0.1328125, -0.15625, 0.0078125, -0.0859375, -0.1640625, -0.046875, 0.0703125, 0.1640625, 0.046875, -0.0625, 0.015625, -0.046875, 0.0859375, 0.09375, 0.0390625, 0.0, 0.0546875, 0.078125, -0.0234375, 0.09375, 0.09375, 0.03125, 0.1328125, 0.078125, 0.046875, 0.0625, 0.0703125, 0.078125, 0.140625, 0.2578125, 0.28125, 0.1328125, 0.09375, 0.1015625, 0.1171875, 0.1796875, 0.046875, 0.0703125, 0.171875, 0.1953125, -0.03125, 0.0703125, 0.0234375, 0.1015625, 0.0703125, 0.1171875, 0.2734375, 0.2421875, 0.15625, 0.15625, 0.09375, 0.1796875, 0.15625, -0.03125, 0.21875, 0.1015625, 0.046875, 0.0859375, 0.078125, 0.0234375, 0.0234375, 0.1328125, 0.0078125, -0.078125, -0.015625, 0.09375, 0.0078125, 0.0546875, 0.109375, 0.109375, -0.0234375, 0.1015625, 0.0703125, -0.0390625, 0.0390625, -0.0546875, -0.0234375, 0.0625, 0.1171875, 0.0703125, 0.0390625, 0.0390625, 0.046875, 0.1328125\}, \{0.0078125, -0.0078125, -0.0078125, -0.015625, 0.0546875, 0.015625, -0.09375, -0.0703125, 0.171875, 0.046875, 0.0078125, -0.1484375, -0.109375, 0.1015625, 0.1640625, 0.046875, -0.1875, -0.1796875, 0.015625, 0.0, 0.1484375, 0.109375, 0.0234375, 0.125, -0.015625, 0.046875, -0.109375, -0.15625, -0.09375, -0.0625, 0.0234375, 0.0, 0.109375, 0.0546875, 0.0078125, 0.0546875, -0.0390625, -0.0703125, 0.0546875, -0.0234375, 0.0234375, -0.0390625, -0.015625, -0.0390625, -0.046875, 0.0, 0.0234375, 0.046875, 0.046875, 0.0390625, 0.15625, 0.1171875, 0.0859375, 0.1015625, 0.1484375, 0.0546875, 0.1953125, 0.1875, 0.234375, 0.296875, 0.140625, 0.203125, 0.171875, 0.078125, 0.109375, 0.2421875, 0.0390625, -0.015625, 0.0703125, 0.0, -0.0234375, -0.125, 0.0234375, -0.0234375, -0.109375, -0.21875, 0.0, 0.0234375, -0.0234375, -0.0078125, 0.03125, 0.1171875, 0.0546875, 0.1171875, 0.1640625, 0.15625, 0.0390625, 0.1796875, 0.3046875, 0.3046875, 0.1875, 0.21875, 0.3046875, 0.109375, 0.140625, 0.125, 0.1953125, 0.1640625, 0.09375, 0.0546875, 0.078125, -0.015625, -0.0546875, 0.015625, -0.0859375, 0.046875, -0.0234375, -0.0234375, -0.109375, -0.15625, -0.125, -0.140625, -0.21875, -0.046875, -0.0703125, -0.21875, 0.03125, -0.0234375, 0.03125, -0.015625, -0.0234375, 0.0546875, -0.03125, 0.03125, 0.078125, 0.1015625, 0.0546875, -0.03125, 0.0, 0.265625, 0.1953125, 0.0390625, 0.1171875, 0.140625, 0.1015625, 0.25, 0.171875, 0.09375, 0.0859375, 0.0, 0.1953125, 0.1484375, 0.2109375, 0.078125, -0.0703125, -0.046875, -0.109375, 0.1640625, 0.0390625, -0.0078125, -0.0546875, -0.2109375, -0.1640625, -0.0703125, -0.140625, -0.21875, -0.28125, 0.109375, -0.0078125, -0.21875, -0.140625, -0.0625, -0.0546875, -0.1875, -0.1796875, -0.09375, -0.03125, -0.1640625, -0.21875, -0.1796875, -0.1796875, -0.09375, 0.140625, 0.0625, 0.0078125, -0.15625, 0.0703125, -0.0625, -0.21875, -0.0078125, 0.0078125, 0.0078125, 0.0, 0.0234375, 0.25, 0.0859375, 0.0390625, 0.109375, 0.1875, 0.15625, -0.09375, 0.0390625, 0.1640625, 0.203125, 0.1484375, 0.1875, 0.0390625, 0.0859375, 0.3125, 0.1796875, 0.0078125, 0.1484375, 0.2421875, 0.1796875, 0.0703125, 0.0078125, 0.09375, 0.0, 0.0078125, 0.09375, 0.0625, -0.171875, -0.078125, 0.0234375, 0.125, 0.0625, 0.0234375, 0.015625, -0.0546875, -0.0078125, 0.0859375, 0.0546875, -0.0390625, -0.1640625, 0.0234375, 0.1015625, -0.109375, -0.0625, -0.0703125, -0.09375, 0.015625, 0.09375, -0.1796875, -0.2109375, -0.140625, -0.1640625, -0.0234375, 0.078125, -0.1171875, -0.15625, -0.2265625, -0.0703125, 0.0625, 0.0234375, 0.0078125, -0.140625, -0.0078125, 0.0546875, -0.03125, 0.03125, 0.0546875, -0.0625, -0.0703125, 0.03125, 0.2734375, 0.03125, 0.078125, 0.15625, 0.1953125, 0.1796875, -0.03125, 0.0703125, 0.125, 0.1015625, 0.09375, 0.1875, 0.0546875, 0.1015625, 0.09375, 0.1171875, 0.1484375, 0.0, 0.1484375, 0.15625, 0.1875, 0.1875, 0.0703125, 0.140625, 0.0703125, 0.0859375, 0.140625, -0.0859375, -0.015625, 0.1796875, -0.0625, 0.0234375, -0.0625, 0.125, 0.171875, -0.0078125, 0.015625, 0.0625, -0.015625, 0.015625, -0.1171875, -0.1953125, -0.078125, 0.0234375, -0.0390625, -0.1015625, -0.0078125, -0.046875, -0.0859375, -0.0390625, -0.0234375, -0.1328125, 0.0390625, -0.0078125, -0.0859375, -0.0234375, 0.0078125, -0.1796875, -0.0390625, 0.015625, -0.0078125, -0.15625, -0.0625, 0.0078125, -0.265625, -0.046875, 0.1171875, -0.09375, -0.0390625, -0.0390625, 0.0078125, 0.0859375, -0.0625, -0.0625, 0.0078125, 0.2109375, 0.0390625, 0.0234375, 0.2109375, 0.2109375, -0.0546875, 0.0390625, 0.0546875, -0.0390625, 0.109375, 0.1328125, -0.046875, 0.0, -0.0625, 0.0859375, 0.1015625, -0.1875, 0.0078125, 0.015625, -0.078125, -0.0625, -0.078125, -0.109375, -0.0546875, 0.03125, -0.015625, -0.0625, -0.171875, -0.0390625, 0.0703125, 0.0078125, -0.03125, 0.0703125, 0.0234375, -0.0390625, 0.046875, 0.0, 0.03125, 0.1796875, 0.109375, 0.0078125, 0.109375, -0.0078125, -0.0859375, -0.0625, 0.015625, 0.046875, 0.0234375, 0.046875, 0.015625, 0.03125, -0.0859375, -0.046875, -0.03125, -0.0546875, -0.2109375, -0.0859375, -0.0390625, 0.0078125, -0.078125, 0.0390625, -0.1015625, -0.1875, -0.0703125, 0.0234375, -0.0390625, -0.0859375, -0.109375, -0.0625, 0.0, -0.0078125, -0.1015625, -0.015625, -0.1796875, -0.171875, -0.0625, -0.046875, -0.171875, -0.0546875, -0.1171875, -0.2109375, -0.1875, -0.1328125, -0.09375, -0.1640625, -0.1640625, -0.0625, -0.0703125, -0.140625, 0.0703125, -0.0625, -0.125, -0.03125, 0.078125, 0.171875, 0.0078125, -0.046875, -0.03125, -0.0390625, 0.0390625, 0.09375, 0.0, -0.0078125, 0.046875, 0.09375, -0.0078125, 0.1328125, 0.125, 0.0703125, 0.15625, 0.1015625, 0.0546875, 0.09375, 0.0703125, 0.0859375, 0.140625, 0.265625, 0.2890625, 0.15625, 0.1328125, 0.1328125, 0.1640625, 0.203125, 0.09375, 0.109375, 0.2265625, 0.2421875, 0.0234375, 0.1171875, 0.0859375, 0.140625, 0.1171875, 0.140625, 0.28125, 0.25, 0.1484375, 0.171875, 0.0703125, 0.2109375, 0.109375, 0.0078125, 0.15625, 0.1171875, 0.0, 0.0859375, 0.0390625, 0.015625, 0.0, 0.1171875, 0.0078125, -0.09375, 0.015625, 0.078125, 0.046875, 0.03125, 0.1484375, 0.0703125, 0.0078125, 0.0703125, 0.078125, -0.0625, 0.03125, -0.078125, -0.0234375, 0.0546875, 0.1328125, 0.0859375, 0.0625, 0.0703125, 0.0703125, 0.1640625\}\}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
wav_stereo_8bit_48000.h\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/test-headers/wav_stereo_8bit_48000.h}
{\xe \v AudioFile/tests/test-headers/wav_stereo_8bit_48000.h}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <vector>}\par
2 \par
3 {\cf17 namespace }wav_stereo_8bit_48000 \{ \par
4 \par
5 {\cf18 int} numSamplesPerChannel = 384000;\par
6 {\cf18 int} bitDepth = 8;\par
7 uint32_t sampleRate = 48000;\par
8 {\cf18 int} numChannels = 2;\par
9 \par
10 std::vector<std::vector<double>> testBuffer = \{\{0.0078125, -0.0078125, -0.0078125, -0.0078125, 0.03125, 0.03125, -0.0859375, -0.0703125, 0.140625, 0.0625, 0.0234375, -0.140625, -0.1171875, 0.109375, 0.15625, 0.046875, -0.171875, -0.1875, 0.0234375, -0.0546875, 0.171875, 0.0859375, 0.078125, 0.1171875, -0.015625, 0.0078125, -0.1015625, -0.171875, -0.09375, -0.0703125, 0.0546875, 0.0234375, 0.0703125, 0.1015625, 0.0, 0.03125, -0.0625, -0.046875, 0.0546875, -0.015625, 0.0078125, -0.0703125, -0.015625, -0.0859375, -0.046875, -0.09375, -0.015625, -0.03125, -0.03125, 0.015625, 0.03125, 0.109375, -0.0234375, 0.1171875, 0.0546875, 0.0, 0.140625, 0.1328125, 0.2265625, 0.3046875, 0.1015625, 0.171875, 0.21875, 0.03125, 0.1953125, 0.203125, 0.0234375, 0.0078125, 0.078125, 0.0859375, -0.0625, -0.0390625, 0.0078125, 0.046875, -0.1171875, -0.140625, 0.0546875, 0.0859375, -0.0078125, 0.1015625, 0.078125, 0.15625, 0.109375, 0.109375, 0.2421875, 0.1171875, 0.0546875, 0.1796875, 0.2734375, 0.3125, 0.1953125, 0.2265625, 0.2734375, 0.15625, 0.109375, 0.140625, 0.1484375, 0.2265625, 0.1328125, 0.140625, 0.09375, 0.0625, 0.046875, 0.078125, 0.03125, 0.078125, 0.0625, 0.0078125, -0.0625, -0.15625, -0.1796875, -0.15625, -0.234375, -0.0625, -0.09375, -0.1875, 0.0, -0.0078125, -0.015625, -0.015625, -0.125, 0.03125, -0.0859375, 0.015625, 0.0546875, 0.0703125, 0.0546875, -0.078125, -0.046875, 0.2109375, 0.1484375, 0.0, 0.1015625, 0.15625, 0.1171875, 0.25, 0.1875, 0.1171875, 0.078125, 0.046875, 0.203125, 0.21875, 0.234375, 0.109375, 0.0, -0.0546875, -0.0234375, 0.1484375, 0.1171875, 0.03125, 0.03125, -0.171875, -0.09375, -0.0703125, -0.0546875, -0.2265625, -0.2109375, 0.125, 0.046875, -0.1796875, -0.125, -0.0234375, -0.0078125, -0.15625, -0.1328125, -0.0703125, 0.015625, -0.15625, -0.1875, -0.140625, -0.171875, -0.03125, 0.1484375, 0.1328125, 0.0234375, -0.109375, 0.0859375, -0.0234375, -0.2109375, 0.0390625, 0.015625, 0.0625, 0.0234375, 0.0546875, 0.265625, 0.0703125, 0.0703125, 0.09375, 0.21875, 0.15625, -0.0625, 0.0, 0.15625, 0.125, 0.125, 0.109375, 0.0078125, 0.0, 0.265625, 0.1171875, -0.046875, 0.1015625, 0.1796875, 0.140625, -0.0078125, -0.0234375, 0.0, -0.015625, -0.09375, 0.078125, -0.0234375, -0.1875, -0.1484375, 0.0234375, 0.09375, 0.0703125, 0.0234375, 0.015625, -0.03125, -0.0078125, 0.125, 0.0546875, 0.0, -0.1640625, 0.078125, 0.125, -0.046875, -0.03125, -0.015625, -0.0625, 0.0625, 0.125, -0.1171875, -0.1640625, -0.078125, -0.1328125, 0.0390625, 0.09375, -0.0390625, -0.1484375, -0.1484375, -0.0546875, 0.140625, 0.0703125, 0.0703125, -0.0703125, 0.0390625, 0.1484375, -0.0078125, 0.1328125, 0.046875, 0.015625, -0.1015625, 0.078125, 0.2265625, 0.0703125, 0.0546875, 0.1796875, 0.1953125, 0.171875, 0.0, 0.015625, 0.1640625, 0.015625, 0.109375, 0.0859375, 0.03125, 0.03125, 0.046875, 0.0703125, 0.0859375, -0.03125, 0.0546875, 0.1171875, 0.078125, 0.1328125, -0.03125, 0.078125, 0.0, 0.0234375, 0.1171875, -0.140625, -0.0390625, 0.1328125, -0.09375, -0.0234375, -0.125, 0.046875, 0.1015625, -0.1015625, -0.0234375, -0.0390625, -0.015625, -0.078125, -0.1171875, -0.2734375, -0.09375, -0.0078125, -0.0703125, -0.09375, -0.0625, -0.03125, -0.1484375, -0.0078125, -0.078125, -0.109375, -0.0234375, -0.015625, -0.1484375, -0.0390625, -0.046875, -0.203125, -0.0859375, -0.015625, -0.046875, -0.203125, -0.09375, -0.0234375, -0.2734375, -0.0625, 0.140625, -0.0859375, -0.0078125, -0.0234375, 0.0390625, 0.109375, -0.0234375, -0.03125, 0.0546875, 0.25, 0.0859375, 0.0390625, 0.2421875, 0.2109375, -0.0078125, 0.0390625, 0.109375, -0.0390625, 0.15625, 0.1484375, 0.0, 0.046875, -0.015625, 0.125, 0.140625, -0.15625, 0.0625, 0.046875, 0.0, -0.015625, -0.0078125, -0.0625, 0.0, 0.078125, 0.046875, 0.0, -0.1015625, 0.03125, 0.125, 0.0703125, 0.0078125, 0.1484375, 0.0625, 0.0234375, 0.0546875, 0.03125, 0.0234375, 0.171875, 0.09375, -0.03125, 0.1015625, -0.0546875, -0.078125, -0.0859375, 0.03125, 0.046875, 0.0390625, 0.0546875, 0.0, 0.03125, -0.109375, -0.0546875, -0.0390625, -0.0859375, -0.203125, -0.125, -0.0234375, -0.0234375, -0.0703125, 0.015625, -0.109375, -0.203125, -0.0859375, 0.015625, -0.0390625, -0.0859375, -0.109375, -0.0703125, 0.0, -0.015625, -0.1015625, -0.015625, -0.171875, -0.171875, -0.046875, -0.03125, -0.15625, -0.03125, -0.09375, -0.1875, -0.1796875, -0.09375, -0.125, -0.1328125, -0.21875, -0.046875, -0.1328125, -0.15625, 0.0078125, -0.0859375, -0.1640625, -0.046875, 0.0703125, 0.1640625, 0.046875, -0.0625, 0.015625, -0.046875, 0.0859375, 0.09375, 0.0390625, 0.0, 0.0546875, 0.078125, -0.0234375, 0.09375, 0.09375, 0.03125, 0.1328125, 0.078125, 0.046875, 0.0625, 0.0703125, 0.078125, 0.140625, 0.2578125, 0.28125, 0.1328125, 0.09375, 0.1015625, 0.1171875, 0.1796875, 0.046875, 0.0703125, 0.171875, 0.1953125, -0.03125, 0.0703125, 0.0234375, 0.1015625, 0.0703125, 0.1171875, 0.2734375, 0.2421875, 0.15625, 0.15625, 0.09375, 0.1796875, 0.15625, -0.03125, 0.21875, 0.1015625, 0.046875, 0.0859375, 0.078125, 0.0234375, 0.0234375, 0.1328125, 0.0078125, -0.078125, -0.015625, 0.09375, 0.0078125, 0.0546875, 0.109375, 0.109375, -0.0234375, 0.1015625, 0.0703125, -0.0390625, 0.0390625, -0.0546875, -0.0234375, 0.0625, 0.1171875, 0.0703125, 0.0390625, 0.0390625, 0.046875, 0.1328125\}, \{0.0078125, -0.0078125, -0.0078125, -0.015625, 0.0546875, 0.015625, -0.09375, -0.0703125, 0.171875, 0.046875, 0.0078125, -0.1484375, -0.109375, 0.1015625, 0.1640625, 0.046875, -0.1875, -0.1796875, 0.015625, 0.0, 0.1484375, 0.109375, 0.0234375, 0.125, -0.015625, 0.046875, -0.109375, -0.15625, -0.09375, -0.0625, 0.0234375, 0.0, 0.109375, 0.0546875, 0.0078125, 0.0546875, -0.0390625, -0.0703125, 0.0546875, -0.0234375, 0.0234375, -0.0390625, -0.015625, -0.0390625, -0.046875, 0.0, 0.0234375, 0.046875, 0.046875, 0.0390625, 0.15625, 0.1171875, 0.0859375, 0.1015625, 0.1484375, 0.0546875, 0.1953125, 0.1875, 0.234375, 0.296875, 0.140625, 0.203125, 0.171875, 0.078125, 0.109375, 0.2421875, 0.0390625, -0.015625, 0.0703125, 0.0, -0.0234375, -0.125, 0.0234375, -0.0234375, -0.109375, -0.21875, 0.0, 0.0234375, -0.0234375, -0.0078125, 0.03125, 0.1171875, 0.0546875, 0.1171875, 0.1640625, 0.15625, 0.0390625, 0.1796875, 0.3046875, 0.3046875, 0.1875, 0.21875, 0.3046875, 0.109375, 0.140625, 0.125, 0.1953125, 0.1640625, 0.09375, 0.0546875, 0.078125, -0.015625, -0.0546875, 0.015625, -0.0859375, 0.046875, -0.0234375, -0.0234375, -0.109375, -0.15625, -0.125, -0.140625, -0.21875, -0.046875, -0.0703125, -0.21875, 0.03125, -0.0234375, 0.03125, -0.015625, -0.0234375, 0.0546875, -0.03125, 0.03125, 0.078125, 0.1015625, 0.0546875, -0.03125, 0.0, 0.265625, 0.1953125, 0.0390625, 0.1171875, 0.140625, 0.1015625, 0.25, 0.171875, 0.09375, 0.0859375, 0.0, 0.1953125, 0.1484375, 0.2109375, 0.078125, -0.0703125, -0.046875, -0.109375, 0.1640625, 0.0390625, -0.0078125, -0.0546875, -0.2109375, -0.1640625, -0.0703125, -0.140625, -0.21875, -0.28125, 0.109375, -0.0078125, -0.21875, -0.140625, -0.0625, -0.0546875, -0.1875, -0.1796875, -0.09375, -0.03125, -0.1640625, -0.21875, -0.1796875, -0.1796875, -0.09375, 0.140625, 0.0625, 0.0078125, -0.15625, 0.0703125, -0.0625, -0.21875, -0.0078125, 0.0078125, 0.0078125, 0.0, 0.0234375, 0.25, 0.0859375, 0.0390625, 0.109375, 0.1875, 0.15625, -0.09375, 0.0390625, 0.1640625, 0.203125, 0.1484375, 0.1875, 0.0390625, 0.0859375, 0.3125, 0.1796875, 0.0078125, 0.1484375, 0.2421875, 0.1796875, 0.0703125, 0.0078125, 0.09375, 0.0, 0.0078125, 0.09375, 0.0625, -0.171875, -0.078125, 0.0234375, 0.125, 0.0625, 0.0234375, 0.015625, -0.0546875, -0.0078125, 0.0859375, 0.0546875, -0.0390625, -0.1640625, 0.0234375, 0.1015625, -0.109375, -0.0625, -0.0703125, -0.09375, 0.015625, 0.09375, -0.1796875, -0.2109375, -0.140625, -0.1640625, -0.0234375, 0.078125, -0.1171875, -0.15625, -0.2265625, -0.0703125, 0.0625, 0.0234375, 0.0078125, -0.140625, -0.0078125, 0.0546875, -0.03125, 0.03125, 0.0546875, -0.0625, -0.0703125, 0.03125, 0.2734375, 0.03125, 0.078125, 0.15625, 0.1953125, 0.1796875, -0.03125, 0.0703125, 0.125, 0.1015625, 0.09375, 0.1875, 0.0546875, 0.1015625, 0.09375, 0.1171875, 0.1484375, 0.0, 0.1484375, 0.15625, 0.1875, 0.1875, 0.0703125, 0.140625, 0.0703125, 0.0859375, 0.140625, -0.0859375, -0.015625, 0.1796875, -0.0625, 0.0234375, -0.0625, 0.125, 0.171875, -0.0078125, 0.015625, 0.0625, -0.015625, 0.015625, -0.1171875, -0.1953125, -0.078125, 0.0234375, -0.0390625, -0.1015625, -0.0078125, -0.046875, -0.0859375, -0.0390625, -0.0234375, -0.1328125, 0.0390625, -0.0078125, -0.0859375, -0.0234375, 0.0078125, -0.1796875, -0.0390625, 0.015625, -0.0078125, -0.15625, -0.0625, 0.0078125, -0.265625, -0.046875, 0.1171875, -0.09375, -0.0390625, -0.0390625, 0.0078125, 0.0859375, -0.0625, -0.0625, 0.0078125, 0.2109375, 0.0390625, 0.0234375, 0.2109375, 0.2109375, -0.0546875, 0.0390625, 0.0546875, -0.0390625, 0.109375, 0.1328125, -0.046875, 0.0, -0.0625, 0.0859375, 0.1015625, -0.1875, 0.0078125, 0.015625, -0.078125, -0.0625, -0.078125, -0.109375, -0.0546875, 0.03125, -0.015625, -0.0625, -0.171875, -0.0390625, 0.0703125, 0.0078125, -0.03125, 0.0703125, 0.0234375, -0.0390625, 0.046875, 0.0, 0.03125, 0.1796875, 0.109375, 0.0078125, 0.109375, -0.0078125, -0.0859375, -0.0625, 0.015625, 0.046875, 0.0234375, 0.046875, 0.015625, 0.03125, -0.0859375, -0.046875, -0.03125, -0.0546875, -0.2109375, -0.0859375, -0.0390625, 0.0078125, -0.078125, 0.0390625, -0.1015625, -0.1875, -0.0703125, 0.0234375, -0.0390625, -0.0859375, -0.109375, -0.0625, 0.0, -0.0078125, -0.1015625, -0.015625, -0.1796875, -0.171875, -0.0625, -0.046875, -0.171875, -0.0546875, -0.1171875, -0.2109375, -0.1875, -0.1328125, -0.09375, -0.1640625, -0.1640625, -0.0625, -0.0703125, -0.140625, 0.0703125, -0.0625, -0.125, -0.03125, 0.078125, 0.171875, 0.0078125, -0.046875, -0.03125, -0.0390625, 0.0390625, 0.09375, 0.0, -0.0078125, 0.046875, 0.09375, -0.0078125, 0.1328125, 0.125, 0.0703125, 0.15625, 0.1015625, 0.0546875, 0.09375, 0.0703125, 0.0859375, 0.140625, 0.265625, 0.2890625, 0.15625, 0.1328125, 0.1328125, 0.1640625, 0.203125, 0.09375, 0.109375, 0.2265625, 0.2421875, 0.0234375, 0.1171875, 0.0859375, 0.140625, 0.1171875, 0.140625, 0.28125, 0.25, 0.1484375, 0.171875, 0.0703125, 0.2109375, 0.109375, 0.0078125, 0.15625, 0.1171875, 0.0, 0.0859375, 0.0390625, 0.015625, 0.0, 0.1171875, 0.0078125, -0.09375, 0.015625, 0.078125, 0.046875, 0.03125, 0.1484375, 0.0703125, 0.0078125, 0.0703125, 0.078125, -0.0625, 0.03125, -0.078125, -0.0234375, 0.0546875, 0.1328125, 0.0859375, 0.0625, 0.0703125, 0.0703125, 0.1640625\}\};\par
11 \par
12 \}; {\cf20 // end namespace}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
AudioFile/tests/WavLoadingTests.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v AudioFile/tests/WavLoadingTests.cpp}
{\xe \v AudioFile/tests/WavLoadingTests.cpp}
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <AudioFile.h>}\par
{\f2 #include "test-headers/wav_stereo_8bit_44100.h"}\par
{\f2 #include "test-headers/wav_stereo_16bit_44100.h"}\par
{\f2 #include "test-headers/wav_stereo_24bit_44100.h"}\par
{\f2 #include "test-headers/wav_stereo_32bit_44100.h"}\par
{\f2 #include "test-headers/wav_stereo_8bit_48000.h"}\par
{\f2 #include "test-headers/wav_stereo_16bit_48000.h"}\par
{\f2 #include "test-headers/wav_stereo_24bit_48000.h"}\par
{\f2 #include "test-headers/wav_stereo_32bit_48000.h"}\par
{\f2 #include "test-headers/wav_mono_16bit_44100.h"}\par
{\f2 #include "test-headers/wav_mono_16bit_48000.h"}\par
{\f2 #include "test-headers/wav_8chan_24bit_48000.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_SUITE} ("WavLoadingTests")\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::string {\b projectBuildDirectory} = PROJECT_BINARY_DIR\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v TEST_SUITE\:WavLoadingTests.cpp}
{\xe \v WavLoadingTests.cpp\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_SUITE ("WavLoadingTests" )}}
\par
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v projectBuildDirectory\:WavLoadingTests.cpp}
{\xe \v WavLoadingTests.cpp\:projectBuildDirectory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::string projectBuildDirectory = PROJECT_BINARY_DIR}}
\par
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex2/ex2.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex2/ex2.cpp}
{\xe \v ex2/ex2.cpp}
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex2.cpp}
{\xe \v ex2.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex3/ex3.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex3/ex3.cpp}
{\xe \v ex3/ex3.cpp}
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "../AudioFile/AudioFile.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex3.cpp}
{\xe \v ex3.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex4/ex4.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex4/ex4.cpp}
{\xe \v ex4/ex4.cpp}
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex4.cpp}
{\xe \v ex4.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex5/ex5_2.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex5/ex5_2.cpp}
{\xe \v ex5/ex5_2.cpp}
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <ctype.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b check_key} (map< char, int > m, char key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_key\:ex5_2.cpp}
{\xe \v ex5_2.cpp\:check_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char check_key (map< char, int >  {\i m}, char  {\i key})}}
\par
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v main\:ex5_2.cpp}
{\xe \v ex5_2.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex6/ex6_3.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex6/ex6_3.cpp}
{\xe \v ex6/ex6_3.cpp}
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <map>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <fstream>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <ctype.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include "AudioFile/AudioFile.h"}\par
{\f2 #include <math.h>}\par
{\f2 #include <sstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b check_key} (map< int, long int > m, int key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_key\:ex6_3.cpp}
{\xe \v ex6_3.cpp\:check_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int check_key (map< int, long int >  {\i m}, int  {\i key})}}
\par
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v main\:ex6_3.cpp}
{\xe \v ex6_3.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex7.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex7.cpp}
{\xe \v ex7.cpp}
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b check_key} (map< int, int > m, int key)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v check_key\:ex7.cpp}
{\xe \v ex7.cpp\:check_key}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double check_key (map< int, int >  {\i m}, int  {\i key})}}
\par
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v main\:ex7.cpp}
{\xe \v ex7.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex8/ex8.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex8/ex8.cpp}
{\xe \v ex8/ex8.cpp}
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include "AudioFile/AudioFile.h"}\par
{\f2 #include <math.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdint.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex8.cpp}
{\xe \v ex8.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex8/ex8_2.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex8/ex8_2.cpp}
{\xe \v ex8/ex8_2.cpp}
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include "AudioFile/AudioFile.h"}\par
{\f2 #include <math.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <sstream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex8_2.cpp}
{\xe \v ex8_2.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ex9/ex9.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v ex9/ex9.cpp}
{\xe \v ex9/ex9.cpp}
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <opencv2/opencv.hpp>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <string>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:ex9.cpp}
{\xe \v ex9.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
